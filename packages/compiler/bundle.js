// @bun
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var __require = import.meta.require;

// bundle.cjs
var require_bundle = __commonJS((exports2, module2) => {
  var __dirname = "/Users/timotheeguerin/dev/azsdk/typespec/packages/compiler", __filename = "/Users/timotheeguerin/dev/azsdk/typespec/packages/compiler/bundle.cjs";
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS2 = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
  var tslib_es6_exports = {};
  __export(tslib_es6_exports, {
    __addDisposableResource: () => __addDisposableResource,
    __assign: () => __assign,
    __asyncDelegator: () => __asyncDelegator,
    __asyncGenerator: () => __asyncGenerator,
    __asyncValues: () => __asyncValues,
    __await: () => __await,
    __awaiter: () => __awaiter,
    __classPrivateFieldGet: () => __classPrivateFieldGet,
    __classPrivateFieldIn: () => __classPrivateFieldIn,
    __classPrivateFieldSet: () => __classPrivateFieldSet,
    __createBinding: () => __createBinding,
    __decorate: () => __decorate,
    __disposeResources: () => __disposeResources,
    __esDecorate: () => __esDecorate,
    __exportStar: () => __exportStar,
    __extends: () => __extends,
    __generator: () => __generator,
    __importDefault: () => __importDefault,
    __importStar: () => __importStar,
    __makeTemplateObject: () => __makeTemplateObject,
    __metadata: () => __metadata,
    __param: () => __param,
    __propKey: () => __propKey,
    __read: () => __read,
    __rest: () => __rest,
    __rewriteRelativeImportExtension: () => __rewriteRelativeImportExtension,
    __runInitializers: () => __runInitializers,
    __setFunctionName: () => __setFunctionName,
    __spread: () => __spread,
    __spreadArray: () => __spreadArray,
    __spreadArrays: () => __spreadArrays,
    __values: () => __values,
    default: () => tslib_es6_default
  });
  function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __);
  }
  function __rest(s, e) {
    var t = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s);i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  }
  function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1;i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  }
  function __param(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  }
  function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) {
      if (f !== undefined && typeof f !== "function")
        throw new TypeError("Function expected");
      return f;
    }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1;i >= 0; i--) {
      var context = {};
      for (var p in contextIn)
        context[p] = p === "access" ? {} : contextIn[p];
      for (var p in contextIn.access)
        context.access[p] = contextIn.access[p];
      context.addInitializer = function(f) {
        if (done)
          throw new TypeError("Cannot add initializers after decoration has completed");
        extraInitializers.push(accept(f || null));
      };
      var result2 = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
      if (kind === "accessor") {
        if (result2 === undefined)
          continue;
        if (result2 === null || typeof result2 !== "object")
          throw new TypeError("Object expected");
        if (_ = accept(result2.get))
          descriptor.get = _;
        if (_ = accept(result2.set))
          descriptor.set = _;
        if (_ = accept(result2.init))
          initializers.unshift(_);
      } else if (_ = accept(result2)) {
        if (kind === "field")
          initializers.unshift(_);
        else
          descriptor[key] = _;
      }
    }
    if (target)
      Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
  }
  function __runInitializers(thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0;i < initializers.length; i++) {
      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : undefined;
  }
  function __propKey(x) {
    return typeof x === "symbol" ? x : "".concat(x);
  }
  function __setFunctionName(f, name, prefix) {
    if (typeof name === "symbol")
      name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
  }
  function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(metadataKey, metadataValue);
  }
  function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result2) {
        result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }
  function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() {
      if (t[0] & 1)
        throw t[1];
      return t[1];
    }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
      return this;
    }), g;
    function verb(n) {
      return function(v) {
        return step([n, v]);
      };
    }
    function step(op) {
      if (f)
        throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_ = 0)), _)
        try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
            return t;
          if (y = 0, t)
            op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2])
                _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
      if (op[0] & 5)
        throw op[1];
      return { value: op[0] ? op[1] : undefined, done: true };
    }
  }
  function __exportStar(m, o) {
    for (var p in m)
      if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
        __createBinding(o, m, p);
  }
  function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m)
      return m.call(o);
    if (o && typeof o.length === "number")
      return {
        next: function() {
          if (o && i >= o.length)
            o = undefined;
          return { value: o && o[i++], done: !o };
        }
      };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m)
      return o;
    var i = m.call(o), r, ar = [], e;
    try {
      while ((n === undefined || n-- > 0) && !(r = i.next()).done)
        ar.push(r.value);
    } catch (error) {
      e = { error };
    } finally {
      try {
        if (r && !r.done && (m = i["return"]))
          m.call(i);
      } finally {
        if (e)
          throw e.error;
      }
    }
    return ar;
  }
  function __spread() {
    for (var ar = [], i = 0;i < arguments.length; i++)
      ar = ar.concat(__read(arguments[i]));
    return ar;
  }
  function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length;i < il; i++)
      s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0;i < il; i++)
      for (var a = arguments[i], j = 0, jl = a.length;j < jl; j++, k++)
        r[k] = a[j];
    return r;
  }
  function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2)
      for (var i = 0, l = from.length, ar;i < l; i++) {
        if (ar || !(i in from)) {
          if (!ar)
            ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
        }
      }
    return to.concat(ar || Array.prototype.slice.call(from));
  }
  function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
  }
  function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function() {
      return this;
    }, i;
    function awaitReturn(f) {
      return function(v) {
        return Promise.resolve(v).then(f, reject);
      };
    }
    function verb(n, f) {
      if (g[n]) {
        i[n] = function(v) {
          return new Promise(function(a, b) {
            q.push([n, v, a, b]) > 1 || resume(n, v);
          });
        };
        if (f)
          i[n] = f(i[n]);
      }
    }
    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle(q[0][3], e);
      }
    }
    function step(r) {
      r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f, v) {
      if (f(v), q.shift(), q.length)
        resume(q[0][0], q[0][1]);
    }
  }
  function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
      throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
      return this;
    }, i;
    function verb(n, f) {
      i[n] = o[n] ? function(v) {
        return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v;
      } : f;
    }
  }
  function __asyncValues(o) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
      return this;
    }, i);
    function verb(n) {
      i[n] = o[n] && function(v) {
        return new Promise(function(resolve, reject) {
          v = o[n](v), settle(resolve, reject, v.done, v.value);
        });
      };
    }
    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function(v2) {
        resolve({ value: v2, done: d });
      }, reject);
    }
  }
  function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) {
      Object.defineProperty(cooked, "raw", { value: raw });
    } else {
      cooked.raw = raw;
    }
    return cooked;
  }
  function __importStar(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result2 = {};
    if (mod != null) {
      for (var k = ownKeys(mod), i = 0;i < k.length; i++)
        if (k[i] !== "default")
          __createBinding(result2, mod, k[i]);
    }
    __setModuleDefault(result2, mod);
    return result2;
  }
  function __importDefault(mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  }
  function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
      throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  }
  function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m")
      throw new TypeError("Private method is not writable");
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
      throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
  }
  function __classPrivateFieldIn(state, receiver) {
    if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
      throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
  }
  function __addDisposableResource(env, value, async) {
    if (value !== null && value !== undefined) {
      if (typeof value !== "object" && typeof value !== "function")
        throw new TypeError("Object expected.");
      var dispose, inner;
      if (async) {
        if (!Symbol.asyncDispose)
          throw new TypeError("Symbol.asyncDispose is not defined.");
        dispose = value[Symbol.asyncDispose];
      }
      if (dispose === undefined) {
        if (!Symbol.dispose)
          throw new TypeError("Symbol.dispose is not defined.");
        dispose = value[Symbol.dispose];
        if (async)
          inner = dispose;
      }
      if (typeof dispose !== "function")
        throw new TypeError("Object not disposable.");
      if (inner)
        dispose = function() {
          try {
            inner.call(this);
          } catch (e) {
            return Promise.reject(e);
          }
        };
      env.stack.push({ value, dispose, async });
    } else if (async) {
      env.stack.push({ async: true });
    }
    return value;
  }
  function __disposeResources(env) {
    function fail(e) {
      env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
      env.hasError = true;
    }
    var r, s = 0;
    function next() {
      while (r = env.stack.pop()) {
        try {
          if (!r.async && s === 1)
            return s = 0, env.stack.push(r), Promise.resolve().then(next);
          if (r.dispose) {
            var result2 = r.dispose.call(r.value);
            if (r.async)
              return s |= 2, Promise.resolve(result2).then(next, function(e) {
                fail(e);
                return next();
              });
          } else
            s |= 1;
        } catch (e) {
          fail(e);
        }
      }
      if (s === 1)
        return env.hasError ? Promise.reject(env.error) : Promise.resolve();
      if (env.hasError)
        throw env.error;
    }
    return next();
  }
  function __rewriteRelativeImportExtension(path2, preserveJsx) {
    if (typeof path2 === "string" && /^\.\.?\//.test(path2)) {
      return path2.replace(/\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i, function(m, tsx, d, ext, cm) {
        return tsx ? preserveJsx ? ".jsx" : ".js" : d && (!ext || !cm) ? m : d + ext + "." + cm.toLowerCase() + "js";
      });
    }
    return path2;
  }
  var extendStatics;
  var __assign;
  var __createBinding;
  var __setModuleDefault;
  var ownKeys;
  var _SuppressedError;
  var tslib_es6_default;
  var init_tslib_es6 = __esm({
    "../../node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs"() {
      extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      __assign = function() {
        __assign = Object.assign || function __assign2(t) {
          for (var s, i = 1, n = arguments.length;i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === undefined)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === undefined)
          k2 = k;
        o[k2] = m[k];
      };
      __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2)
            if (Object.prototype.hasOwnProperty.call(o2, k))
              ar[ar.length] = k;
          return ar;
        };
        return ownKeys(o);
      };
      _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
        var e = new Error(message);
        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
      };
      tslib_es6_default = {
        __extends,
        __assign,
        __rest,
        __decorate,
        __param,
        __esDecorate,
        __runInitializers,
        __propKey,
        __setFunctionName,
        __metadata,
        __awaiter,
        __generator,
        __createBinding,
        __exportStar,
        __values,
        __read,
        __spread,
        __spreadArrays,
        __spreadArray,
        __await,
        __asyncGenerator,
        __asyncDelegator,
        __asyncValues,
        __makeTemplateObject,
        __importStar,
        __importDefault,
        __classPrivateFieldGet,
        __classPrivateFieldSet,
        __classPrivateFieldIn,
        __addDisposableResource,
        __disposeResources,
        __rewriteRelativeImportExtension
      };
    }
  });
  var require_constants = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/fslib/lib/constants.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.SAFE_TIME = exports22.S_IFLNK = exports22.S_IFREG = exports22.S_IFDIR = exports22.S_IFMT = undefined;
      exports22.S_IFMT = 61440;
      exports22.S_IFDIR = 16384;
      exports22.S_IFREG = 32768;
      exports22.S_IFLNK = 40960;
      exports22.SAFE_TIME = 456789000;
    }
  });
  var require_errors = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/fslib/lib/errors.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.EBUSY = EBUSY;
      exports22.ENOSYS = ENOSYS;
      exports22.EINVAL = EINVAL;
      exports22.EBADF = EBADF;
      exports22.ENOENT = ENOENT;
      exports22.ENOTDIR = ENOTDIR;
      exports22.EISDIR = EISDIR;
      exports22.EEXIST = EEXIST;
      exports22.EROFS = EROFS;
      exports22.ENOTEMPTY = ENOTEMPTY;
      exports22.EOPNOTSUPP = EOPNOTSUPP;
      exports22.ERR_DIR_CLOSED = ERR_DIR_CLOSED;
      function makeError(code, message) {
        return Object.assign(new Error(`${code}: ${message}`), { code });
      }
      function EBUSY(message) {
        return makeError(`EBUSY`, message);
      }
      function ENOSYS(message, reason) {
        return makeError(`ENOSYS`, `${message}, ${reason}`);
      }
      function EINVAL(reason) {
        return makeError(`EINVAL`, `invalid argument, ${reason}`);
      }
      function EBADF(reason) {
        return makeError(`EBADF`, `bad file descriptor, ${reason}`);
      }
      function ENOENT(reason) {
        return makeError(`ENOENT`, `no such file or directory, ${reason}`);
      }
      function ENOTDIR(reason) {
        return makeError(`ENOTDIR`, `not a directory, ${reason}`);
      }
      function EISDIR(reason) {
        return makeError(`EISDIR`, `illegal operation on a directory, ${reason}`);
      }
      function EEXIST(reason) {
        return makeError(`EEXIST`, `file already exists, ${reason}`);
      }
      function EROFS(reason) {
        return makeError(`EROFS`, `read-only filesystem, ${reason}`);
      }
      function ENOTEMPTY(reason) {
        return makeError(`ENOTEMPTY`, `directory not empty, ${reason}`);
      }
      function EOPNOTSUPP(reason) {
        return makeError(`EOPNOTSUPP`, `operation not supported, ${reason}`);
      }
      function ERR_DIR_CLOSED() {
        return makeError(`ERR_DIR_CLOSED`, `Directory handle was closed`);
      }
    }
  });
  var require_statUtils = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/fslib/lib/statUtils.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.BigIntStatsEntry = exports22.StatEntry = exports22.DirEntry = exports22.DEFAULT_MODE = undefined;
      exports22.makeDefaultStats = makeDefaultStats;
      exports22.makeEmptyStats = makeEmptyStats;
      exports22.clearStats = clearStats;
      exports22.convertToBigIntStats = convertToBigIntStats;
      exports22.areStatsEqual = areStatsEqual;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var nodeUtils = tslib_12.__importStar(__require("util"));
      var constants_1 = require_constants();
      exports22.DEFAULT_MODE = constants_1.S_IFREG | 420;
      var DirEntry = class {
        constructor() {
          this.name = ``;
          this.path = ``;
          this.mode = 0;
        }
        isBlockDevice() {
          return false;
        }
        isCharacterDevice() {
          return false;
        }
        isDirectory() {
          return (this.mode & constants_1.S_IFMT) === constants_1.S_IFDIR;
        }
        isFIFO() {
          return false;
        }
        isFile() {
          return (this.mode & constants_1.S_IFMT) === constants_1.S_IFREG;
        }
        isSocket() {
          return false;
        }
        isSymbolicLink() {
          return (this.mode & constants_1.S_IFMT) === constants_1.S_IFLNK;
        }
      };
      exports22.DirEntry = DirEntry;
      var StatEntry = class {
        constructor() {
          this.uid = 0;
          this.gid = 0;
          this.size = 0;
          this.blksize = 0;
          this.atimeMs = 0;
          this.mtimeMs = 0;
          this.ctimeMs = 0;
          this.birthtimeMs = 0;
          this.atime = /* @__PURE__ */ new Date(0);
          this.mtime = /* @__PURE__ */ new Date(0);
          this.ctime = /* @__PURE__ */ new Date(0);
          this.birthtime = /* @__PURE__ */ new Date(0);
          this.dev = 0;
          this.ino = 0;
          this.mode = exports22.DEFAULT_MODE;
          this.nlink = 1;
          this.rdev = 0;
          this.blocks = 1;
        }
        isBlockDevice() {
          return false;
        }
        isCharacterDevice() {
          return false;
        }
        isDirectory() {
          return (this.mode & constants_1.S_IFMT) === constants_1.S_IFDIR;
        }
        isFIFO() {
          return false;
        }
        isFile() {
          return (this.mode & constants_1.S_IFMT) === constants_1.S_IFREG;
        }
        isSocket() {
          return false;
        }
        isSymbolicLink() {
          return (this.mode & constants_1.S_IFMT) === constants_1.S_IFLNK;
        }
      };
      exports22.StatEntry = StatEntry;
      var BigIntStatsEntry = class {
        constructor() {
          this.uid = BigInt(0);
          this.gid = BigInt(0);
          this.size = BigInt(0);
          this.blksize = BigInt(0);
          this.atimeMs = BigInt(0);
          this.mtimeMs = BigInt(0);
          this.ctimeMs = BigInt(0);
          this.birthtimeMs = BigInt(0);
          this.atimeNs = BigInt(0);
          this.mtimeNs = BigInt(0);
          this.ctimeNs = BigInt(0);
          this.birthtimeNs = BigInt(0);
          this.atime = /* @__PURE__ */ new Date(0);
          this.mtime = /* @__PURE__ */ new Date(0);
          this.ctime = /* @__PURE__ */ new Date(0);
          this.birthtime = /* @__PURE__ */ new Date(0);
          this.dev = BigInt(0);
          this.ino = BigInt(0);
          this.mode = BigInt(exports22.DEFAULT_MODE);
          this.nlink = BigInt(1);
          this.rdev = BigInt(0);
          this.blocks = BigInt(1);
        }
        isBlockDevice() {
          return false;
        }
        isCharacterDevice() {
          return false;
        }
        isDirectory() {
          return (this.mode & BigInt(constants_1.S_IFMT)) === BigInt(constants_1.S_IFDIR);
        }
        isFIFO() {
          return false;
        }
        isFile() {
          return (this.mode & BigInt(constants_1.S_IFMT)) === BigInt(constants_1.S_IFREG);
        }
        isSocket() {
          return false;
        }
        isSymbolicLink() {
          return (this.mode & BigInt(constants_1.S_IFMT)) === BigInt(constants_1.S_IFLNK);
        }
      };
      exports22.BigIntStatsEntry = BigIntStatsEntry;
      function makeDefaultStats() {
        return new StatEntry;
      }
      function makeEmptyStats() {
        return clearStats(makeDefaultStats());
      }
      function clearStats(stats) {
        for (const key in stats) {
          if (Object.hasOwn(stats, key)) {
            const element = stats[key];
            if (typeof element === `number`) {
              stats[key] = 0;
            } else if (typeof element === `bigint`) {
              stats[key] = BigInt(0);
            } else if (nodeUtils.types.isDate(element)) {
              stats[key] = /* @__PURE__ */ new Date(0);
            }
          }
        }
        return stats;
      }
      function convertToBigIntStats(stats) {
        const bigintStats = new BigIntStatsEntry;
        for (const key in stats) {
          if (Object.hasOwn(stats, key)) {
            const element = stats[key];
            if (typeof element === `number`) {
              bigintStats[key] = BigInt(element);
            } else if (nodeUtils.types.isDate(element)) {
              bigintStats[key] = new Date(element);
            }
          }
        }
        bigintStats.atimeNs = bigintStats.atimeMs * BigInt(1e6);
        bigintStats.mtimeNs = bigintStats.mtimeMs * BigInt(1e6);
        bigintStats.ctimeNs = bigintStats.ctimeMs * BigInt(1e6);
        bigintStats.birthtimeNs = bigintStats.birthtimeMs * BigInt(1e6);
        return bigintStats;
      }
      function areStatsEqual(a, b) {
        if (a.atimeMs !== b.atimeMs)
          return false;
        if (a.birthtimeMs !== b.birthtimeMs)
          return false;
        if (a.blksize !== b.blksize)
          return false;
        if (a.blocks !== b.blocks)
          return false;
        if (a.ctimeMs !== b.ctimeMs)
          return false;
        if (a.dev !== b.dev)
          return false;
        if (a.gid !== b.gid)
          return false;
        if (a.ino !== b.ino)
          return false;
        if (a.isBlockDevice() !== b.isBlockDevice())
          return false;
        if (a.isCharacterDevice() !== b.isCharacterDevice())
          return false;
        if (a.isDirectory() !== b.isDirectory())
          return false;
        if (a.isFIFO() !== b.isFIFO())
          return false;
        if (a.isFile() !== b.isFile())
          return false;
        if (a.isSocket() !== b.isSocket())
          return false;
        if (a.isSymbolicLink() !== b.isSymbolicLink())
          return false;
        if (a.mode !== b.mode)
          return false;
        if (a.mtimeMs !== b.mtimeMs)
          return false;
        if (a.nlink !== b.nlink)
          return false;
        if (a.rdev !== b.rdev)
          return false;
        if (a.size !== b.size)
          return false;
        if (a.uid !== b.uid)
          return false;
        const aN = a;
        const bN = b;
        if (aN.atimeNs !== bN.atimeNs)
          return false;
        if (aN.mtimeNs !== bN.mtimeNs)
          return false;
        if (aN.ctimeNs !== bN.ctimeNs)
          return false;
        if (aN.birthtimeNs !== bN.birthtimeNs)
          return false;
        return true;
      }
    }
  });
  var require_path = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/fslib/lib/path.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.ppath = exports22.npath = exports22.Filename = exports22.PortablePath = undefined;
      exports22.convertPath = convertPath;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var path_1 = tslib_12.__importDefault(__require("path"));
      var PathType;
      (function(PathType2) {
        PathType2[PathType2["File"] = 0] = "File";
        PathType2[PathType2["Portable"] = 1] = "Portable";
        PathType2[PathType2["Native"] = 2] = "Native";
      })(PathType || (PathType = {}));
      exports22.PortablePath = {
        root: `/`,
        dot: `.`,
        parent: `..`
      };
      exports22.Filename = {
        home: `~`,
        nodeModules: `node_modules`,
        manifest: `package.json`,
        lockfile: `yarn.lock`,
        virtual: `__virtual__`,
        pnpJs: `.pnp.js`,
        pnpCjs: `.pnp.cjs`,
        pnpData: `.pnp.data.json`,
        pnpEsmLoader: `.pnp.loader.mjs`,
        rc: `.yarnrc.yml`,
        env: `.env`
      };
      exports22.npath = Object.create(path_1.default);
      exports22.ppath = Object.create(path_1.default.posix);
      exports22.npath.cwd = () => process.cwd();
      exports22.ppath.cwd = process.platform === `win32` ? () => toPortablePath(process.cwd()) : process.cwd;
      if (process.platform === `win32`) {
        exports22.ppath.resolve = (...segments) => {
          if (segments.length > 0 && exports22.ppath.isAbsolute(segments[0])) {
            return path_1.default.posix.resolve(...segments);
          } else {
            return path_1.default.posix.resolve(exports22.ppath.cwd(), ...segments);
          }
        };
      }
      var contains = function(pathUtils, from, to) {
        from = pathUtils.normalize(from);
        to = pathUtils.normalize(to);
        if (from === to)
          return `.`;
        if (!from.endsWith(pathUtils.sep))
          from = from + pathUtils.sep;
        if (to.startsWith(from)) {
          return to.slice(from.length);
        } else {
          return null;
        }
      };
      exports22.npath.contains = (from, to) => contains(exports22.npath, from, to);
      exports22.ppath.contains = (from, to) => contains(exports22.ppath, from, to);
      var WINDOWS_PATH_REGEXP = /^([a-zA-Z]:.*)$/;
      var UNC_WINDOWS_PATH_REGEXP = /^\/\/(\.\/)?(.*)$/;
      var PORTABLE_PATH_REGEXP = /^\/([a-zA-Z]:.*)$/;
      var UNC_PORTABLE_PATH_REGEXP = /^\/unc\/(\.dot\/)?(.*)$/;
      function fromPortablePathWin32(p) {
        let portablePathMatch, uncPortablePathMatch;
        if (portablePathMatch = p.match(PORTABLE_PATH_REGEXP))
          p = portablePathMatch[1];
        else if (uncPortablePathMatch = p.match(UNC_PORTABLE_PATH_REGEXP))
          p = `\\\\${uncPortablePathMatch[1] ? `.\\` : ``}${uncPortablePathMatch[2]}`;
        else
          return p;
        return p.replace(/\//g, `\\`);
      }
      function toPortablePathWin32(p) {
        p = p.replace(/\\/g, `/`);
        let windowsPathMatch, uncWindowsPathMatch;
        if (windowsPathMatch = p.match(WINDOWS_PATH_REGEXP))
          p = `/${windowsPathMatch[1]}`;
        else if (uncWindowsPathMatch = p.match(UNC_WINDOWS_PATH_REGEXP))
          p = `/unc/${uncWindowsPathMatch[1] ? `.dot/` : ``}${uncWindowsPathMatch[2]}`;
        return p;
      }
      var toPortablePath = process.platform === `win32` ? toPortablePathWin32 : (p) => p;
      var fromPortablePath = process.platform === `win32` ? fromPortablePathWin32 : (p) => p;
      exports22.npath.fromPortablePath = fromPortablePath;
      exports22.npath.toPortablePath = toPortablePath;
      function convertPath(targetPathUtils, sourcePath) {
        return targetPathUtils === exports22.npath ? fromPortablePath(sourcePath) : toPortablePath(sourcePath);
      }
    }
  });
  var require_copyPromise = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/fslib/lib/algorithms/copyPromise.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.setupCopyIndex = setupCopyIndex;
      exports22.copyPromise = copyPromise;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var constants = tslib_12.__importStar(require_constants());
      var path_1 = require_path();
      var defaultTime = new Date(constants.SAFE_TIME * 1000);
      var defaultTimeMs = defaultTime.getTime();
      async function setupCopyIndex(destinationFs, linkStrategy) {
        const hexCharacters = `0123456789abcdef`;
        await destinationFs.mkdirPromise(linkStrategy.indexPath, { recursive: true });
        const promises = [];
        for (const l1 of hexCharacters)
          for (const l2 of hexCharacters)
            promises.push(destinationFs.mkdirPromise(destinationFs.pathUtils.join(linkStrategy.indexPath, `${l1}${l2}`), { recursive: true }));
        await Promise.all(promises);
        return linkStrategy.indexPath;
      }
      async function copyPromise(destinationFs, destination, sourceFs, source, opts) {
        const normalizedDestination = destinationFs.pathUtils.normalize(destination);
        const normalizedSource = sourceFs.pathUtils.normalize(source);
        const prelayout = [];
        const postlayout = [];
        const { atime, mtime } = opts.stableTime ? { atime: defaultTime, mtime: defaultTime } : await sourceFs.lstatPromise(normalizedSource);
        await destinationFs.mkdirpPromise(destinationFs.pathUtils.dirname(destination), { utimes: [atime, mtime] });
        await copyImpl(prelayout, postlayout, destinationFs, normalizedDestination, sourceFs, normalizedSource, { ...opts, didParentExist: true });
        for (const operation of prelayout)
          await operation();
        await Promise.all(postlayout.map((operation) => {
          return operation();
        }));
      }
      async function copyImpl(prelayout, postlayout, destinationFs, destination, sourceFs, source, opts) {
        const destinationStat = opts.didParentExist ? await maybeLStat(destinationFs, destination) : null;
        const sourceStat = await sourceFs.lstatPromise(source);
        const { atime, mtime } = opts.stableTime ? { atime: defaultTime, mtime: defaultTime } : sourceStat;
        let updated;
        switch (true) {
          case sourceStat.isDirectory():
            {
              updated = await copyFolder(prelayout, postlayout, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts);
            }
            break;
          case sourceStat.isFile():
            {
              updated = await copyFile(prelayout, postlayout, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts);
            }
            break;
          case sourceStat.isSymbolicLink():
            {
              updated = await copySymlink(prelayout, postlayout, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts);
            }
            break;
          default: {
            throw new Error(`Unsupported file type (${sourceStat.mode})`);
          }
        }
        if (opts.linkStrategy?.type !== `HardlinkFromIndex` || !sourceStat.isFile()) {
          if (updated || destinationStat?.mtime?.getTime() !== mtime.getTime() || destinationStat?.atime?.getTime() !== atime.getTime()) {
            postlayout.push(() => destinationFs.lutimesPromise(destination, atime, mtime));
            updated = true;
          }
          if (destinationStat === null || (destinationStat.mode & 511) !== (sourceStat.mode & 511)) {
            postlayout.push(() => destinationFs.chmodPromise(destination, sourceStat.mode & 511));
            updated = true;
          }
        }
        return updated;
      }
      async function maybeLStat(baseFs, p) {
        try {
          return await baseFs.lstatPromise(p);
        } catch (e) {
          return null;
        }
      }
      async function copyFolder(prelayout, postlayout, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts) {
        if (destinationStat !== null && !destinationStat.isDirectory()) {
          if (opts.overwrite) {
            prelayout.push(async () => destinationFs.removePromise(destination));
            destinationStat = null;
          } else {
            return false;
          }
        }
        let updated = false;
        if (destinationStat === null) {
          prelayout.push(async () => {
            try {
              await destinationFs.mkdirPromise(destination, { mode: sourceStat.mode });
            } catch (err) {
              if (err.code !== `EEXIST`) {
                throw err;
              }
            }
          });
          updated = true;
        }
        const entries = await sourceFs.readdirPromise(source);
        const nextOpts = opts.didParentExist && !destinationStat ? { ...opts, didParentExist: false } : opts;
        if (opts.stableSort) {
          for (const entry of entries.sort()) {
            if (await copyImpl(prelayout, postlayout, destinationFs, destinationFs.pathUtils.join(destination, entry), sourceFs, sourceFs.pathUtils.join(source, entry), nextOpts)) {
              updated = true;
            }
          }
        } else {
          const entriesUpdateStatus = await Promise.all(entries.map(async (entry) => {
            await copyImpl(prelayout, postlayout, destinationFs, destinationFs.pathUtils.join(destination, entry), sourceFs, sourceFs.pathUtils.join(source, entry), nextOpts);
          }));
          if (entriesUpdateStatus.some((status) => status)) {
            updated = true;
          }
        }
        return updated;
      }
      async function copyFileViaIndex(prelayout, postlayout, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts, linkStrategy) {
        const sourceHash = await sourceFs.checksumFilePromise(source, { algorithm: `sha1` });
        const defaultMode = 420;
        const sourceMode = sourceStat.mode & 511;
        const indexFileName = `${sourceHash}${sourceMode !== defaultMode ? sourceMode.toString(8) : ``}`;
        const indexPath = destinationFs.pathUtils.join(linkStrategy.indexPath, sourceHash.slice(0, 2), `${indexFileName}.dat`);
        let AtomicBehavior;
        (function(AtomicBehavior2) {
          AtomicBehavior2[AtomicBehavior2["Lock"] = 0] = "Lock";
          AtomicBehavior2[AtomicBehavior2["Rename"] = 1] = "Rename";
        })(AtomicBehavior || (AtomicBehavior = {}));
        let atomicBehavior = AtomicBehavior.Rename;
        let indexStat = await maybeLStat(destinationFs, indexPath);
        if (destinationStat) {
          const isDestinationHardlinkedFromIndex = indexStat && destinationStat.dev === indexStat.dev && destinationStat.ino === indexStat.ino;
          const isIndexModified = indexStat?.mtimeMs !== defaultTimeMs;
          if (isDestinationHardlinkedFromIndex) {
            if (isIndexModified && linkStrategy.autoRepair) {
              atomicBehavior = AtomicBehavior.Lock;
              indexStat = null;
            }
          }
          if (!isDestinationHardlinkedFromIndex) {
            if (opts.overwrite) {
              prelayout.push(async () => destinationFs.removePromise(destination));
              destinationStat = null;
            } else {
              return false;
            }
          }
        }
        const tempPath = !indexStat && atomicBehavior === AtomicBehavior.Rename ? `${indexPath}.${Math.floor(Math.random() * 4294967296).toString(16).padStart(8, `0`)}` : null;
        let tempPathCleaned = false;
        prelayout.push(async () => {
          if (!indexStat) {
            if (atomicBehavior === AtomicBehavior.Lock) {
              await destinationFs.lockPromise(indexPath, async () => {
                const content = await sourceFs.readFilePromise(source);
                await destinationFs.writeFilePromise(indexPath, content);
              });
            }
            if (atomicBehavior === AtomicBehavior.Rename && tempPath) {
              const content = await sourceFs.readFilePromise(source);
              await destinationFs.writeFilePromise(tempPath, content);
              try {
                await destinationFs.linkPromise(tempPath, indexPath);
              } catch (err) {
                if (err.code === `EEXIST`) {
                  tempPathCleaned = true;
                  await destinationFs.unlinkPromise(tempPath);
                } else {
                  throw err;
                }
              }
            }
          }
          if (!destinationStat) {
            await destinationFs.linkPromise(indexPath, destination);
          }
        });
        postlayout.push(async () => {
          if (!indexStat) {
            await destinationFs.lutimesPromise(indexPath, defaultTime, defaultTime);
            if (sourceMode !== defaultMode) {
              await destinationFs.chmodPromise(indexPath, sourceMode);
            }
          }
          if (tempPath && !tempPathCleaned) {
            await destinationFs.unlinkPromise(tempPath);
          }
        });
        return false;
      }
      async function copyFileDirect(prelayout, postlayout, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts) {
        if (destinationStat !== null) {
          if (opts.overwrite) {
            prelayout.push(async () => destinationFs.removePromise(destination));
            destinationStat = null;
          } else {
            return false;
          }
        }
        prelayout.push(async () => {
          const content = await sourceFs.readFilePromise(source);
          await destinationFs.writeFilePromise(destination, content);
        });
        return true;
      }
      async function copyFile(prelayout, postlayout, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts) {
        if (opts.linkStrategy?.type === `HardlinkFromIndex`) {
          return copyFileViaIndex(prelayout, postlayout, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts, opts.linkStrategy);
        } else {
          return copyFileDirect(prelayout, postlayout, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts);
        }
      }
      async function copySymlink(prelayout, postlayout, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts) {
        if (destinationStat !== null) {
          if (opts.overwrite) {
            prelayout.push(async () => destinationFs.removePromise(destination));
            destinationStat = null;
          } else {
            return false;
          }
        }
        prelayout.push(async () => {
          await destinationFs.symlinkPromise((0, path_1.convertPath)(destinationFs.pathUtils, await sourceFs.readlinkPromise(source)), destination);
        });
        return true;
      }
    }
  });
  var require_opendir = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/fslib/lib/algorithms/opendir.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.CustomDir = undefined;
      exports22.opendir = opendir;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var errors = tslib_12.__importStar(require_errors());
      var CustomDir = class {
        constructor(path2, nextDirent, opts = {}) {
          this.path = path2;
          this.nextDirent = nextDirent;
          this.opts = opts;
          this.closed = false;
        }
        throwIfClosed() {
          if (this.closed) {
            throw errors.ERR_DIR_CLOSED();
          }
        }
        async* [Symbol.asyncIterator]() {
          try {
            let dirent;
            while ((dirent = await this.read()) !== null) {
              yield dirent;
            }
          } finally {
            await this.close();
          }
        }
        read(cb) {
          const dirent = this.readSync();
          if (typeof cb !== `undefined`)
            return cb(null, dirent);
          return Promise.resolve(dirent);
        }
        readSync() {
          this.throwIfClosed();
          return this.nextDirent();
        }
        close(cb) {
          this.closeSync();
          if (typeof cb !== `undefined`)
            return cb(null);
          return Promise.resolve();
        }
        closeSync() {
          this.throwIfClosed();
          this.opts.onClose?.();
          this.closed = true;
        }
      };
      exports22.CustomDir = CustomDir;
      function opendir(fakeFs, path2, entries, opts) {
        const nextDirent = () => {
          const filename = entries.shift();
          if (typeof filename === `undefined`)
            return null;
          const entryPath = fakeFs.pathUtils.join(path2, filename);
          return Object.assign(fakeFs.statSync(entryPath), {
            name: filename,
            path: undefined
          });
        };
        return new CustomDir(path2, nextDirent, opts);
      }
    }
  });
  var require_CustomStatWatcher = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/fslib/lib/algorithms/watchFile/CustomStatWatcher.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.CustomStatWatcher = exports22.Status = exports22.Event = undefined;
      exports22.assertStatus = assertStatus;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var events_1 = __require("events");
      var statUtils = tslib_12.__importStar(require_statUtils());
      var Event;
      (function(Event2) {
        Event2["Change"] = "change";
        Event2["Stop"] = "stop";
      })(Event || (exports22.Event = Event = {}));
      var Status;
      (function(Status2) {
        Status2["Ready"] = "ready";
        Status2["Running"] = "running";
        Status2["Stopped"] = "stopped";
      })(Status || (exports22.Status = Status = {}));
      function assertStatus(current, expected) {
        if (current !== expected) {
          throw new Error(`Invalid StatWatcher status: expected '${expected}', got '${current}'`);
        }
      }
      var CustomStatWatcher = class _CustomStatWatcher extends events_1.EventEmitter {
        static create(fakeFs, path2, opts) {
          const statWatcher = new _CustomStatWatcher(fakeFs, path2, opts);
          statWatcher.start();
          return statWatcher;
        }
        constructor(fakeFs, path2, { bigint = false } = {}) {
          super();
          this.status = Status.Ready;
          this.changeListeners = /* @__PURE__ */ new Map;
          this.startTimeout = null;
          this.fakeFs = fakeFs;
          this.path = path2;
          this.bigint = bigint;
          this.lastStats = this.stat();
        }
        start() {
          assertStatus(this.status, Status.Ready);
          this.status = Status.Running;
          this.startTimeout = setTimeout(() => {
            this.startTimeout = null;
            if (!this.fakeFs.existsSync(this.path)) {
              this.emit(Event.Change, this.lastStats, this.lastStats);
            }
          }, 3);
        }
        stop() {
          assertStatus(this.status, Status.Running);
          this.status = Status.Stopped;
          if (this.startTimeout !== null) {
            clearTimeout(this.startTimeout);
            this.startTimeout = null;
          }
          this.emit(Event.Stop);
        }
        stat() {
          try {
            return this.fakeFs.statSync(this.path, { bigint: this.bigint });
          } catch (error) {
            const statInstance = this.bigint ? new statUtils.BigIntStatsEntry : new statUtils.StatEntry;
            return statUtils.clearStats(statInstance);
          }
        }
        makeInterval(opts) {
          const interval = setInterval(() => {
            const currentStats = this.stat();
            const previousStats = this.lastStats;
            if (statUtils.areStatsEqual(currentStats, previousStats))
              return;
            this.lastStats = currentStats;
            this.emit(Event.Change, currentStats, previousStats);
          }, opts.interval);
          return opts.persistent ? interval : interval.unref();
        }
        registerChangeListener(listener, opts) {
          this.addListener(Event.Change, listener);
          this.changeListeners.set(listener, this.makeInterval(opts));
        }
        unregisterChangeListener(listener) {
          this.removeListener(Event.Change, listener);
          const interval = this.changeListeners.get(listener);
          if (typeof interval !== `undefined`)
            clearInterval(interval);
          this.changeListeners.delete(listener);
        }
        unregisterAllChangeListeners() {
          for (const listener of this.changeListeners.keys()) {
            this.unregisterChangeListener(listener);
          }
        }
        hasChangeListeners() {
          return this.changeListeners.size > 0;
        }
        ref() {
          for (const interval of this.changeListeners.values())
            interval.ref();
          return this;
        }
        unref() {
          for (const interval of this.changeListeners.values())
            interval.unref();
          return this;
        }
      };
      exports22.CustomStatWatcher = CustomStatWatcher;
    }
  });
  var require_watchFile = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/fslib/lib/algorithms/watchFile.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.watchFile = watchFile;
      exports22.unwatchFile = unwatchFile;
      exports22.unwatchAllFiles = unwatchAllFiles;
      var CustomStatWatcher_1 = require_CustomStatWatcher();
      var statWatchersByFakeFS = /* @__PURE__ */ new WeakMap;
      function watchFile(fakeFs, path2, a, b) {
        let bigint;
        let persistent;
        let interval;
        let listener;
        switch (typeof a) {
          case `function`:
            {
              bigint = false;
              persistent = true;
              interval = 5007;
              listener = a;
            }
            break;
          default:
            {
              ({
                bigint = false,
                persistent = true,
                interval = 5007
              } = a);
              listener = b;
            }
            break;
        }
        let statWatchers = statWatchersByFakeFS.get(fakeFs);
        if (typeof statWatchers === `undefined`)
          statWatchersByFakeFS.set(fakeFs, statWatchers = /* @__PURE__ */ new Map);
        let statWatcher = statWatchers.get(path2);
        if (typeof statWatcher === `undefined`) {
          statWatcher = CustomStatWatcher_1.CustomStatWatcher.create(fakeFs, path2, { bigint });
          statWatchers.set(path2, statWatcher);
        }
        statWatcher.registerChangeListener(listener, { persistent, interval });
        return statWatcher;
      }
      function unwatchFile(fakeFs, path2, cb) {
        const statWatchers = statWatchersByFakeFS.get(fakeFs);
        if (typeof statWatchers === `undefined`)
          return;
        const statWatcher = statWatchers.get(path2);
        if (typeof statWatcher === `undefined`)
          return;
        if (typeof cb === `undefined`)
          statWatcher.unregisterAllChangeListeners();
        else
          statWatcher.unregisterChangeListener(cb);
        if (!statWatcher.hasChangeListeners()) {
          statWatcher.stop();
          statWatchers.delete(path2);
        }
      }
      function unwatchAllFiles(fakeFs) {
        const statWatchers = statWatchersByFakeFS.get(fakeFs);
        if (typeof statWatchers === `undefined`)
          return;
        for (const path2 of statWatchers.keys()) {
          unwatchFile(fakeFs, path2);
        }
      }
    }
  });
  var require_FakeFS = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/fslib/lib/FakeFS.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.BasePortableFakeFS = exports22.FakeFS = undefined;
      exports22.normalizeLineEndings = normalizeLineEndings;
      var crypto_1 = __require("crypto");
      var os_1 = __require("os");
      var copyPromise_1 = require_copyPromise();
      var path_1 = require_path();
      var FakeFS = class {
        constructor(pathUtils) {
          this.pathUtils = pathUtils;
        }
        async* genTraversePromise(init, { stableSort = false } = {}) {
          const stack = [init];
          while (stack.length > 0) {
            const p = stack.shift();
            const entry = await this.lstatPromise(p);
            if (entry.isDirectory()) {
              const entries = await this.readdirPromise(p);
              if (stableSort) {
                for (const entry2 of entries.sort()) {
                  stack.push(this.pathUtils.join(p, entry2));
                }
              } else {
                throw new Error(`Not supported`);
              }
            } else {
              yield p;
            }
          }
        }
        async checksumFilePromise(path2, { algorithm = `sha512` } = {}) {
          const fd = await this.openPromise(path2, `r`);
          try {
            const CHUNK_SIZE = 65536;
            const chunk = Buffer.allocUnsafeSlow(CHUNK_SIZE);
            const hash = (0, crypto_1.createHash)(algorithm);
            let bytesRead = 0;
            while ((bytesRead = await this.readPromise(fd, chunk, 0, CHUNK_SIZE)) !== 0)
              hash.update(bytesRead === CHUNK_SIZE ? chunk : chunk.slice(0, bytesRead));
            return hash.digest(`hex`);
          } finally {
            await this.closePromise(fd);
          }
        }
        async removePromise(p, { recursive = true, maxRetries = 5 } = {}) {
          let stat;
          try {
            stat = await this.lstatPromise(p);
          } catch (error) {
            if (error.code === `ENOENT`) {
              return;
            } else {
              throw error;
            }
          }
          if (stat.isDirectory()) {
            if (recursive) {
              const entries = await this.readdirPromise(p);
              await Promise.all(entries.map((entry) => {
                return this.removePromise(this.pathUtils.resolve(p, entry));
              }));
            }
            for (let t = 0;t <= maxRetries; t++) {
              try {
                await this.rmdirPromise(p);
                break;
              } catch (error) {
                if (error.code !== `EBUSY` && error.code !== `ENOTEMPTY`) {
                  throw error;
                } else if (t < maxRetries) {
                  await new Promise((resolve) => setTimeout(resolve, t * 100));
                }
              }
            }
          } else {
            await this.unlinkPromise(p);
          }
        }
        removeSync(p, { recursive = true } = {}) {
          let stat;
          try {
            stat = this.lstatSync(p);
          } catch (error) {
            if (error.code === `ENOENT`) {
              return;
            } else {
              throw error;
            }
          }
          if (stat.isDirectory()) {
            if (recursive)
              for (const entry of this.readdirSync(p))
                this.removeSync(this.pathUtils.resolve(p, entry));
            this.rmdirSync(p);
          } else {
            this.unlinkSync(p);
          }
        }
        async mkdirpPromise(p, { chmod, utimes } = {}) {
          p = this.resolve(p);
          if (p === this.pathUtils.dirname(p))
            return;
          const parts = p.split(this.pathUtils.sep);
          let createdDirectory;
          for (let u = 2;u <= parts.length; ++u) {
            const subPath = parts.slice(0, u).join(this.pathUtils.sep);
            if (!this.existsSync(subPath)) {
              try {
                await this.mkdirPromise(subPath);
              } catch (error) {
                if (error.code === `EEXIST`) {
                  continue;
                } else {
                  throw error;
                }
              }
              createdDirectory ??= subPath;
              if (chmod != null)
                await this.chmodPromise(subPath, chmod);
              if (utimes != null) {
                await this.utimesPromise(subPath, utimes[0], utimes[1]);
              } else {
                const parentStat = await this.statPromise(this.pathUtils.dirname(subPath));
                await this.utimesPromise(subPath, parentStat.atime, parentStat.mtime);
              }
            }
          }
          return createdDirectory;
        }
        mkdirpSync(p, { chmod, utimes } = {}) {
          p = this.resolve(p);
          if (p === this.pathUtils.dirname(p))
            return;
          const parts = p.split(this.pathUtils.sep);
          let createdDirectory;
          for (let u = 2;u <= parts.length; ++u) {
            const subPath = parts.slice(0, u).join(this.pathUtils.sep);
            if (!this.existsSync(subPath)) {
              try {
                this.mkdirSync(subPath);
              } catch (error) {
                if (error.code === `EEXIST`) {
                  continue;
                } else {
                  throw error;
                }
              }
              createdDirectory ??= subPath;
              if (chmod != null)
                this.chmodSync(subPath, chmod);
              if (utimes != null) {
                this.utimesSync(subPath, utimes[0], utimes[1]);
              } else {
                const parentStat = this.statSync(this.pathUtils.dirname(subPath));
                this.utimesSync(subPath, parentStat.atime, parentStat.mtime);
              }
            }
          }
          return createdDirectory;
        }
        async copyPromise(destination, source, { baseFs = this, overwrite = true, stableSort = false, stableTime = false, linkStrategy = null } = {}) {
          return await (0, copyPromise_1.copyPromise)(this, destination, baseFs, source, { overwrite, stableSort, stableTime, linkStrategy });
        }
        copySync(destination, source, { baseFs = this, overwrite = true } = {}) {
          const stat = baseFs.lstatSync(source);
          const exists = this.existsSync(destination);
          if (stat.isDirectory()) {
            this.mkdirpSync(destination);
            const directoryListing = baseFs.readdirSync(source);
            for (const entry of directoryListing) {
              this.copySync(this.pathUtils.join(destination, entry), baseFs.pathUtils.join(source, entry), { baseFs, overwrite });
            }
          } else if (stat.isFile()) {
            if (!exists || overwrite) {
              if (exists)
                this.removeSync(destination);
              const content = baseFs.readFileSync(source);
              this.writeFileSync(destination, content);
            }
          } else if (stat.isSymbolicLink()) {
            if (!exists || overwrite) {
              if (exists)
                this.removeSync(destination);
              const target = baseFs.readlinkSync(source);
              this.symlinkSync((0, path_1.convertPath)(this.pathUtils, target), destination);
            }
          } else {
            throw new Error(`Unsupported file type (file: ${source}, mode: 0o${stat.mode.toString(8).padStart(6, `0`)})`);
          }
          const mode = stat.mode & 511;
          this.chmodSync(destination, mode);
        }
        async changeFilePromise(p, content, opts = {}) {
          if (Buffer.isBuffer(content)) {
            return this.changeFileBufferPromise(p, content, opts);
          } else {
            return this.changeFileTextPromise(p, content, opts);
          }
        }
        async changeFileBufferPromise(p, content, { mode } = {}) {
          let current = Buffer.alloc(0);
          try {
            current = await this.readFilePromise(p);
          } catch (error) {
          }
          if (Buffer.compare(current, content) === 0)
            return;
          await this.writeFilePromise(p, content, { mode });
        }
        async changeFileTextPromise(p, content, { automaticNewlines, mode } = {}) {
          let current = ``;
          try {
            current = await this.readFilePromise(p, `utf8`);
          } catch (error) {
          }
          const normalizedContent = automaticNewlines ? normalizeLineEndings(current, content) : content;
          if (current === normalizedContent)
            return;
          await this.writeFilePromise(p, normalizedContent, { mode });
        }
        changeFileSync(p, content, opts = {}) {
          if (Buffer.isBuffer(content)) {
            return this.changeFileBufferSync(p, content, opts);
          } else {
            return this.changeFileTextSync(p, content, opts);
          }
        }
        changeFileBufferSync(p, content, { mode } = {}) {
          let current = Buffer.alloc(0);
          try {
            current = this.readFileSync(p);
          } catch (error) {
          }
          if (Buffer.compare(current, content) === 0)
            return;
          this.writeFileSync(p, content, { mode });
        }
        changeFileTextSync(p, content, { automaticNewlines = false, mode } = {}) {
          let current = ``;
          try {
            current = this.readFileSync(p, `utf8`);
          } catch (error) {
          }
          const normalizedContent = automaticNewlines ? normalizeLineEndings(current, content) : content;
          if (current === normalizedContent)
            return;
          this.writeFileSync(p, normalizedContent, { mode });
        }
        async movePromise(fromP, toP) {
          try {
            await this.renamePromise(fromP, toP);
          } catch (error) {
            if (error.code === `EXDEV`) {
              await this.copyPromise(toP, fromP);
              await this.removePromise(fromP);
            } else {
              throw error;
            }
          }
        }
        moveSync(fromP, toP) {
          try {
            this.renameSync(fromP, toP);
          } catch (error) {
            if (error.code === `EXDEV`) {
              this.copySync(toP, fromP);
              this.removeSync(fromP);
            } else {
              throw error;
            }
          }
        }
        async lockPromise(affectedPath, callback) {
          const lockPath = `${affectedPath}.flock`;
          const interval = 1000 / 60;
          const startTime = Date.now();
          let fd = null;
          const isAlive = async () => {
            let pid;
            try {
              [pid] = await this.readJsonPromise(lockPath);
            } catch (error) {
              return Date.now() - startTime < 500;
            }
            try {
              process.kill(pid, 0);
              return true;
            } catch (error) {
              return false;
            }
          };
          while (fd === null) {
            try {
              fd = await this.openPromise(lockPath, `wx`);
            } catch (error) {
              if (error.code === `EEXIST`) {
                if (!await isAlive()) {
                  try {
                    await this.unlinkPromise(lockPath);
                    continue;
                  } catch (error2) {
                  }
                }
                if (Date.now() - startTime < 60 * 1000) {
                  await new Promise((resolve) => setTimeout(resolve, interval));
                } else {
                  throw new Error(`Couldn't acquire a lock in a reasonable time (via ${lockPath})`);
                }
              } else {
                throw error;
              }
            }
          }
          await this.writePromise(fd, JSON.stringify([process.pid]));
          try {
            return await callback();
          } finally {
            try {
              await this.closePromise(fd);
              await this.unlinkPromise(lockPath);
            } catch (error) {
            }
          }
        }
        async readJsonPromise(p) {
          const content = await this.readFilePromise(p, `utf8`);
          try {
            return JSON.parse(content);
          } catch (error) {
            error.message += ` (in ${p})`;
            throw error;
          }
        }
        readJsonSync(p) {
          const content = this.readFileSync(p, `utf8`);
          try {
            return JSON.parse(content);
          } catch (error) {
            error.message += ` (in ${p})`;
            throw error;
          }
        }
        async writeJsonPromise(p, data, { compact = false } = {}) {
          const space = compact ? 0 : 2;
          return await this.writeFilePromise(p, `${JSON.stringify(data, null, space)}
`);
        }
        writeJsonSync(p, data, { compact = false } = {}) {
          const space = compact ? 0 : 2;
          return this.writeFileSync(p, `${JSON.stringify(data, null, space)}
`);
        }
        async preserveTimePromise(p, cb) {
          const stat = await this.lstatPromise(p);
          const result2 = await cb();
          if (typeof result2 !== `undefined`)
            p = result2;
          await this.lutimesPromise(p, stat.atime, stat.mtime);
        }
        async preserveTimeSync(p, cb) {
          const stat = this.lstatSync(p);
          const result2 = cb();
          if (typeof result2 !== `undefined`)
            p = result2;
          this.lutimesSync(p, stat.atime, stat.mtime);
        }
      };
      exports22.FakeFS = FakeFS;
      var BasePortableFakeFS = class extends FakeFS {
        constructor() {
          super(path_1.ppath);
        }
      };
      exports22.BasePortableFakeFS = BasePortableFakeFS;
      function getEndOfLine(content) {
        const matches = content.match(/\r?\n/g);
        if (matches === null)
          return os_1.EOL;
        const crlf = matches.filter((nl) => nl === `\r
`).length;
        const lf = matches.length - crlf;
        return crlf > lf ? `\r
` : `
`;
      }
      function normalizeLineEndings(originalContent, newContent) {
        return newContent.replace(/\r?\n/g, getEndOfLine(originalContent));
      }
    }
  });
  var require_ProxiedFS = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/fslib/lib/ProxiedFS.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.ProxiedFS = undefined;
      var FakeFS_1 = require_FakeFS();
      var ProxiedFS = class extends FakeFS_1.FakeFS {
        getExtractHint(hints) {
          return this.baseFs.getExtractHint(hints);
        }
        resolve(path2) {
          return this.mapFromBase(this.baseFs.resolve(this.mapToBase(path2)));
        }
        getRealPath() {
          return this.mapFromBase(this.baseFs.getRealPath());
        }
        async openPromise(p, flags, mode) {
          return this.baseFs.openPromise(this.mapToBase(p), flags, mode);
        }
        openSync(p, flags, mode) {
          return this.baseFs.openSync(this.mapToBase(p), flags, mode);
        }
        async opendirPromise(p, opts) {
          return Object.assign(await this.baseFs.opendirPromise(this.mapToBase(p), opts), { path: p });
        }
        opendirSync(p, opts) {
          return Object.assign(this.baseFs.opendirSync(this.mapToBase(p), opts), { path: p });
        }
        async readPromise(fd, buffer, offset, length, position) {
          return await this.baseFs.readPromise(fd, buffer, offset, length, position);
        }
        readSync(fd, buffer, offset, length, position) {
          return this.baseFs.readSync(fd, buffer, offset, length, position);
        }
        async writePromise(fd, buffer, offset, length, position) {
          if (typeof buffer === `string`) {
            return await this.baseFs.writePromise(fd, buffer, offset);
          } else {
            return await this.baseFs.writePromise(fd, buffer, offset, length, position);
          }
        }
        writeSync(fd, buffer, offset, length, position) {
          if (typeof buffer === `string`) {
            return this.baseFs.writeSync(fd, buffer, offset);
          } else {
            return this.baseFs.writeSync(fd, buffer, offset, length, position);
          }
        }
        async closePromise(fd) {
          return this.baseFs.closePromise(fd);
        }
        closeSync(fd) {
          this.baseFs.closeSync(fd);
        }
        createReadStream(p, opts) {
          return this.baseFs.createReadStream(p !== null ? this.mapToBase(p) : p, opts);
        }
        createWriteStream(p, opts) {
          return this.baseFs.createWriteStream(p !== null ? this.mapToBase(p) : p, opts);
        }
        async realpathPromise(p) {
          return this.mapFromBase(await this.baseFs.realpathPromise(this.mapToBase(p)));
        }
        realpathSync(p) {
          return this.mapFromBase(this.baseFs.realpathSync(this.mapToBase(p)));
        }
        async existsPromise(p) {
          return this.baseFs.existsPromise(this.mapToBase(p));
        }
        existsSync(p) {
          return this.baseFs.existsSync(this.mapToBase(p));
        }
        accessSync(p, mode) {
          return this.baseFs.accessSync(this.mapToBase(p), mode);
        }
        async accessPromise(p, mode) {
          return this.baseFs.accessPromise(this.mapToBase(p), mode);
        }
        async statPromise(p, opts) {
          return this.baseFs.statPromise(this.mapToBase(p), opts);
        }
        statSync(p, opts) {
          return this.baseFs.statSync(this.mapToBase(p), opts);
        }
        async fstatPromise(fd, opts) {
          return this.baseFs.fstatPromise(fd, opts);
        }
        fstatSync(fd, opts) {
          return this.baseFs.fstatSync(fd, opts);
        }
        lstatPromise(p, opts) {
          return this.baseFs.lstatPromise(this.mapToBase(p), opts);
        }
        lstatSync(p, opts) {
          return this.baseFs.lstatSync(this.mapToBase(p), opts);
        }
        async fchmodPromise(fd, mask) {
          return this.baseFs.fchmodPromise(fd, mask);
        }
        fchmodSync(fd, mask) {
          return this.baseFs.fchmodSync(fd, mask);
        }
        async chmodPromise(p, mask) {
          return this.baseFs.chmodPromise(this.mapToBase(p), mask);
        }
        chmodSync(p, mask) {
          return this.baseFs.chmodSync(this.mapToBase(p), mask);
        }
        async fchownPromise(fd, uid, gid) {
          return this.baseFs.fchownPromise(fd, uid, gid);
        }
        fchownSync(fd, uid, gid) {
          return this.baseFs.fchownSync(fd, uid, gid);
        }
        async chownPromise(p, uid, gid) {
          return this.baseFs.chownPromise(this.mapToBase(p), uid, gid);
        }
        chownSync(p, uid, gid) {
          return this.baseFs.chownSync(this.mapToBase(p), uid, gid);
        }
        async renamePromise(oldP, newP) {
          return this.baseFs.renamePromise(this.mapToBase(oldP), this.mapToBase(newP));
        }
        renameSync(oldP, newP) {
          return this.baseFs.renameSync(this.mapToBase(oldP), this.mapToBase(newP));
        }
        async copyFilePromise(sourceP, destP, flags = 0) {
          return this.baseFs.copyFilePromise(this.mapToBase(sourceP), this.mapToBase(destP), flags);
        }
        copyFileSync(sourceP, destP, flags = 0) {
          return this.baseFs.copyFileSync(this.mapToBase(sourceP), this.mapToBase(destP), flags);
        }
        async appendFilePromise(p, content, opts) {
          return this.baseFs.appendFilePromise(this.fsMapToBase(p), content, opts);
        }
        appendFileSync(p, content, opts) {
          return this.baseFs.appendFileSync(this.fsMapToBase(p), content, opts);
        }
        async writeFilePromise(p, content, opts) {
          return this.baseFs.writeFilePromise(this.fsMapToBase(p), content, opts);
        }
        writeFileSync(p, content, opts) {
          return this.baseFs.writeFileSync(this.fsMapToBase(p), content, opts);
        }
        async unlinkPromise(p) {
          return this.baseFs.unlinkPromise(this.mapToBase(p));
        }
        unlinkSync(p) {
          return this.baseFs.unlinkSync(this.mapToBase(p));
        }
        async utimesPromise(p, atime, mtime) {
          return this.baseFs.utimesPromise(this.mapToBase(p), atime, mtime);
        }
        utimesSync(p, atime, mtime) {
          return this.baseFs.utimesSync(this.mapToBase(p), atime, mtime);
        }
        async lutimesPromise(p, atime, mtime) {
          return this.baseFs.lutimesPromise(this.mapToBase(p), atime, mtime);
        }
        lutimesSync(p, atime, mtime) {
          return this.baseFs.lutimesSync(this.mapToBase(p), atime, mtime);
        }
        async mkdirPromise(p, opts) {
          return this.baseFs.mkdirPromise(this.mapToBase(p), opts);
        }
        mkdirSync(p, opts) {
          return this.baseFs.mkdirSync(this.mapToBase(p), opts);
        }
        async rmdirPromise(p, opts) {
          return this.baseFs.rmdirPromise(this.mapToBase(p), opts);
        }
        rmdirSync(p, opts) {
          return this.baseFs.rmdirSync(this.mapToBase(p), opts);
        }
        async rmPromise(p, opts) {
          return this.baseFs.rmPromise(this.mapToBase(p), opts);
        }
        rmSync(p, opts) {
          return this.baseFs.rmSync(this.mapToBase(p), opts);
        }
        async linkPromise(existingP, newP) {
          return this.baseFs.linkPromise(this.mapToBase(existingP), this.mapToBase(newP));
        }
        linkSync(existingP, newP) {
          return this.baseFs.linkSync(this.mapToBase(existingP), this.mapToBase(newP));
        }
        async symlinkPromise(target, p, type) {
          const mappedP = this.mapToBase(p);
          if (this.pathUtils.isAbsolute(target))
            return this.baseFs.symlinkPromise(this.mapToBase(target), mappedP, type);
          const mappedAbsoluteTarget = this.mapToBase(this.pathUtils.join(this.pathUtils.dirname(p), target));
          const mappedTarget = this.baseFs.pathUtils.relative(this.baseFs.pathUtils.dirname(mappedP), mappedAbsoluteTarget);
          return this.baseFs.symlinkPromise(mappedTarget, mappedP, type);
        }
        symlinkSync(target, p, type) {
          const mappedP = this.mapToBase(p);
          if (this.pathUtils.isAbsolute(target))
            return this.baseFs.symlinkSync(this.mapToBase(target), mappedP, type);
          const mappedAbsoluteTarget = this.mapToBase(this.pathUtils.join(this.pathUtils.dirname(p), target));
          const mappedTarget = this.baseFs.pathUtils.relative(this.baseFs.pathUtils.dirname(mappedP), mappedAbsoluteTarget);
          return this.baseFs.symlinkSync(mappedTarget, mappedP, type);
        }
        async readFilePromise(p, encoding) {
          return this.baseFs.readFilePromise(this.fsMapToBase(p), encoding);
        }
        readFileSync(p, encoding) {
          return this.baseFs.readFileSync(this.fsMapToBase(p), encoding);
        }
        readdirPromise(p, opts) {
          return this.baseFs.readdirPromise(this.mapToBase(p), opts);
        }
        readdirSync(p, opts) {
          return this.baseFs.readdirSync(this.mapToBase(p), opts);
        }
        async readlinkPromise(p) {
          return this.mapFromBase(await this.baseFs.readlinkPromise(this.mapToBase(p)));
        }
        readlinkSync(p) {
          return this.mapFromBase(this.baseFs.readlinkSync(this.mapToBase(p)));
        }
        async truncatePromise(p, len) {
          return this.baseFs.truncatePromise(this.mapToBase(p), len);
        }
        truncateSync(p, len) {
          return this.baseFs.truncateSync(this.mapToBase(p), len);
        }
        async ftruncatePromise(fd, len) {
          return this.baseFs.ftruncatePromise(fd, len);
        }
        ftruncateSync(fd, len) {
          return this.baseFs.ftruncateSync(fd, len);
        }
        watch(p, a, b) {
          return this.baseFs.watch(this.mapToBase(p), a, b);
        }
        watchFile(p, a, b) {
          return this.baseFs.watchFile(this.mapToBase(p), a, b);
        }
        unwatchFile(p, cb) {
          return this.baseFs.unwatchFile(this.mapToBase(p), cb);
        }
        fsMapToBase(p) {
          if (typeof p === `number`) {
            return p;
          } else {
            return this.mapToBase(p);
          }
        }
      };
      exports22.ProxiedFS = ProxiedFS;
    }
  });
  var require_AliasFS = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/fslib/lib/AliasFS.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.AliasFS = undefined;
      var ProxiedFS_1 = require_ProxiedFS();
      var AliasFS = class extends ProxiedFS_1.ProxiedFS {
        constructor(target, { baseFs, pathUtils }) {
          super(pathUtils);
          this.target = target;
          this.baseFs = baseFs;
        }
        getRealPath() {
          return this.target;
        }
        getBaseFs() {
          return this.baseFs;
        }
        mapFromBase(p) {
          return p;
        }
        mapToBase(p) {
          return p;
        }
      };
      exports22.AliasFS = AliasFS;
    }
  });
  var require_NodeFS = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/fslib/lib/NodeFS.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.NodeFS = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var fs_1 = tslib_12.__importDefault(__require("fs"));
      var FakeFS_1 = require_FakeFS();
      var path_1 = require_path();
      function direntToPortable(dirent) {
        const portableDirent = dirent;
        if (typeof dirent.path === `string`)
          portableDirent.path = path_1.npath.toPortablePath(dirent.path);
        return portableDirent;
      }
      var NodeFS = class extends FakeFS_1.BasePortableFakeFS {
        constructor(realFs = fs_1.default) {
          super();
          this.realFs = realFs;
        }
        getExtractHint() {
          return false;
        }
        getRealPath() {
          return path_1.PortablePath.root;
        }
        resolve(p) {
          return path_1.ppath.resolve(p);
        }
        async openPromise(p, flags, mode) {
          return await new Promise((resolve, reject) => {
            this.realFs.open(path_1.npath.fromPortablePath(p), flags, mode, this.makeCallback(resolve, reject));
          });
        }
        openSync(p, flags, mode) {
          return this.realFs.openSync(path_1.npath.fromPortablePath(p), flags, mode);
        }
        async opendirPromise(p, opts) {
          return await new Promise((resolve, reject) => {
            if (typeof opts !== `undefined`) {
              this.realFs.opendir(path_1.npath.fromPortablePath(p), opts, this.makeCallback(resolve, reject));
            } else {
              this.realFs.opendir(path_1.npath.fromPortablePath(p), this.makeCallback(resolve, reject));
            }
          }).then((dir) => {
            const dirWithFixedPath = dir;
            Object.defineProperty(dirWithFixedPath, `path`, {
              value: p,
              configurable: true,
              writable: true
            });
            return dirWithFixedPath;
          });
        }
        opendirSync(p, opts) {
          const dir = typeof opts !== `undefined` ? this.realFs.opendirSync(path_1.npath.fromPortablePath(p), opts) : this.realFs.opendirSync(path_1.npath.fromPortablePath(p));
          const dirWithFixedPath = dir;
          Object.defineProperty(dirWithFixedPath, `path`, {
            value: p,
            configurable: true,
            writable: true
          });
          return dirWithFixedPath;
        }
        async readPromise(fd, buffer, offset = 0, length = 0, position = -1) {
          return await new Promise((resolve, reject) => {
            this.realFs.read(fd, buffer, offset, length, position, (error, bytesRead) => {
              if (error) {
                reject(error);
              } else {
                resolve(bytesRead);
              }
            });
          });
        }
        readSync(fd, buffer, offset, length, position) {
          return this.realFs.readSync(fd, buffer, offset, length, position);
        }
        async writePromise(fd, buffer, offset, length, position) {
          return await new Promise((resolve, reject) => {
            if (typeof buffer === `string`) {
              return this.realFs.write(fd, buffer, offset, this.makeCallback(resolve, reject));
            } else {
              return this.realFs.write(fd, buffer, offset, length, position, this.makeCallback(resolve, reject));
            }
          });
        }
        writeSync(fd, buffer, offset, length, position) {
          if (typeof buffer === `string`) {
            return this.realFs.writeSync(fd, buffer, offset);
          } else {
            return this.realFs.writeSync(fd, buffer, offset, length, position);
          }
        }
        async closePromise(fd) {
          await new Promise((resolve, reject) => {
            this.realFs.close(fd, this.makeCallback(resolve, reject));
          });
        }
        closeSync(fd) {
          this.realFs.closeSync(fd);
        }
        createReadStream(p, opts) {
          const realPath = p !== null ? path_1.npath.fromPortablePath(p) : p;
          return this.realFs.createReadStream(realPath, opts);
        }
        createWriteStream(p, opts) {
          const realPath = p !== null ? path_1.npath.fromPortablePath(p) : p;
          return this.realFs.createWriteStream(realPath, opts);
        }
        async realpathPromise(p) {
          return await new Promise((resolve, reject) => {
            this.realFs.realpath(path_1.npath.fromPortablePath(p), {}, this.makeCallback(resolve, reject));
          }).then((path2) => {
            return path_1.npath.toPortablePath(path2);
          });
        }
        realpathSync(p) {
          return path_1.npath.toPortablePath(this.realFs.realpathSync(path_1.npath.fromPortablePath(p), {}));
        }
        async existsPromise(p) {
          return await new Promise((resolve) => {
            this.realFs.exists(path_1.npath.fromPortablePath(p), resolve);
          });
        }
        accessSync(p, mode) {
          return this.realFs.accessSync(path_1.npath.fromPortablePath(p), mode);
        }
        async accessPromise(p, mode) {
          return await new Promise((resolve, reject) => {
            this.realFs.access(path_1.npath.fromPortablePath(p), mode, this.makeCallback(resolve, reject));
          });
        }
        existsSync(p) {
          return this.realFs.existsSync(path_1.npath.fromPortablePath(p));
        }
        async statPromise(p, opts) {
          return await new Promise((resolve, reject) => {
            if (opts) {
              this.realFs.stat(path_1.npath.fromPortablePath(p), opts, this.makeCallback(resolve, reject));
            } else {
              this.realFs.stat(path_1.npath.fromPortablePath(p), this.makeCallback(resolve, reject));
            }
          });
        }
        statSync(p, opts) {
          if (opts) {
            return this.realFs.statSync(path_1.npath.fromPortablePath(p), opts);
          } else {
            return this.realFs.statSync(path_1.npath.fromPortablePath(p));
          }
        }
        async fstatPromise(fd, opts) {
          return await new Promise((resolve, reject) => {
            if (opts) {
              this.realFs.fstat(fd, opts, this.makeCallback(resolve, reject));
            } else {
              this.realFs.fstat(fd, this.makeCallback(resolve, reject));
            }
          });
        }
        fstatSync(fd, opts) {
          if (opts) {
            return this.realFs.fstatSync(fd, opts);
          } else {
            return this.realFs.fstatSync(fd);
          }
        }
        async lstatPromise(p, opts) {
          return await new Promise((resolve, reject) => {
            if (opts) {
              this.realFs.lstat(path_1.npath.fromPortablePath(p), opts, this.makeCallback(resolve, reject));
            } else {
              this.realFs.lstat(path_1.npath.fromPortablePath(p), this.makeCallback(resolve, reject));
            }
          });
        }
        lstatSync(p, opts) {
          if (opts) {
            return this.realFs.lstatSync(path_1.npath.fromPortablePath(p), opts);
          } else {
            return this.realFs.lstatSync(path_1.npath.fromPortablePath(p));
          }
        }
        async fchmodPromise(fd, mask) {
          return await new Promise((resolve, reject) => {
            this.realFs.fchmod(fd, mask, this.makeCallback(resolve, reject));
          });
        }
        fchmodSync(fd, mask) {
          return this.realFs.fchmodSync(fd, mask);
        }
        async chmodPromise(p, mask) {
          return await new Promise((resolve, reject) => {
            this.realFs.chmod(path_1.npath.fromPortablePath(p), mask, this.makeCallback(resolve, reject));
          });
        }
        chmodSync(p, mask) {
          return this.realFs.chmodSync(path_1.npath.fromPortablePath(p), mask);
        }
        async fchownPromise(fd, uid, gid) {
          return await new Promise((resolve, reject) => {
            this.realFs.fchown(fd, uid, gid, this.makeCallback(resolve, reject));
          });
        }
        fchownSync(fd, uid, gid) {
          return this.realFs.fchownSync(fd, uid, gid);
        }
        async chownPromise(p, uid, gid) {
          return await new Promise((resolve, reject) => {
            this.realFs.chown(path_1.npath.fromPortablePath(p), uid, gid, this.makeCallback(resolve, reject));
          });
        }
        chownSync(p, uid, gid) {
          return this.realFs.chownSync(path_1.npath.fromPortablePath(p), uid, gid);
        }
        async renamePromise(oldP, newP) {
          return await new Promise((resolve, reject) => {
            this.realFs.rename(path_1.npath.fromPortablePath(oldP), path_1.npath.fromPortablePath(newP), this.makeCallback(resolve, reject));
          });
        }
        renameSync(oldP, newP) {
          return this.realFs.renameSync(path_1.npath.fromPortablePath(oldP), path_1.npath.fromPortablePath(newP));
        }
        async copyFilePromise(sourceP, destP, flags = 0) {
          return await new Promise((resolve, reject) => {
            this.realFs.copyFile(path_1.npath.fromPortablePath(sourceP), path_1.npath.fromPortablePath(destP), flags, this.makeCallback(resolve, reject));
          });
        }
        copyFileSync(sourceP, destP, flags = 0) {
          return this.realFs.copyFileSync(path_1.npath.fromPortablePath(sourceP), path_1.npath.fromPortablePath(destP), flags);
        }
        async appendFilePromise(p, content, opts) {
          return await new Promise((resolve, reject) => {
            const fsNativePath = typeof p === `string` ? path_1.npath.fromPortablePath(p) : p;
            if (opts) {
              this.realFs.appendFile(fsNativePath, content, opts, this.makeCallback(resolve, reject));
            } else {
              this.realFs.appendFile(fsNativePath, content, this.makeCallback(resolve, reject));
            }
          });
        }
        appendFileSync(p, content, opts) {
          const fsNativePath = typeof p === `string` ? path_1.npath.fromPortablePath(p) : p;
          if (opts) {
            this.realFs.appendFileSync(fsNativePath, content, opts);
          } else {
            this.realFs.appendFileSync(fsNativePath, content);
          }
        }
        async writeFilePromise(p, content, opts) {
          return await new Promise((resolve, reject) => {
            const fsNativePath = typeof p === `string` ? path_1.npath.fromPortablePath(p) : p;
            if (opts) {
              this.realFs.writeFile(fsNativePath, content, opts, this.makeCallback(resolve, reject));
            } else {
              this.realFs.writeFile(fsNativePath, content, this.makeCallback(resolve, reject));
            }
          });
        }
        writeFileSync(p, content, opts) {
          const fsNativePath = typeof p === `string` ? path_1.npath.fromPortablePath(p) : p;
          if (opts) {
            this.realFs.writeFileSync(fsNativePath, content, opts);
          } else {
            this.realFs.writeFileSync(fsNativePath, content);
          }
        }
        async unlinkPromise(p) {
          return await new Promise((resolve, reject) => {
            this.realFs.unlink(path_1.npath.fromPortablePath(p), this.makeCallback(resolve, reject));
          });
        }
        unlinkSync(p) {
          return this.realFs.unlinkSync(path_1.npath.fromPortablePath(p));
        }
        async utimesPromise(p, atime, mtime) {
          return await new Promise((resolve, reject) => {
            this.realFs.utimes(path_1.npath.fromPortablePath(p), atime, mtime, this.makeCallback(resolve, reject));
          });
        }
        utimesSync(p, atime, mtime) {
          this.realFs.utimesSync(path_1.npath.fromPortablePath(p), atime, mtime);
        }
        async lutimesPromise(p, atime, mtime) {
          return await new Promise((resolve, reject) => {
            this.realFs.lutimes(path_1.npath.fromPortablePath(p), atime, mtime, this.makeCallback(resolve, reject));
          });
        }
        lutimesSync(p, atime, mtime) {
          this.realFs.lutimesSync(path_1.npath.fromPortablePath(p), atime, mtime);
        }
        async mkdirPromise(p, opts) {
          return await new Promise((resolve, reject) => {
            this.realFs.mkdir(path_1.npath.fromPortablePath(p), opts, this.makeCallback(resolve, reject));
          });
        }
        mkdirSync(p, opts) {
          return this.realFs.mkdirSync(path_1.npath.fromPortablePath(p), opts);
        }
        async rmdirPromise(p, opts) {
          return await new Promise((resolve, reject) => {
            if (opts) {
              this.realFs.rmdir(path_1.npath.fromPortablePath(p), opts, this.makeCallback(resolve, reject));
            } else {
              this.realFs.rmdir(path_1.npath.fromPortablePath(p), this.makeCallback(resolve, reject));
            }
          });
        }
        rmdirSync(p, opts) {
          return this.realFs.rmdirSync(path_1.npath.fromPortablePath(p), opts);
        }
        async rmPromise(p, opts) {
          return await new Promise((resolve, reject) => {
            if (opts) {
              this.realFs.rm(path_1.npath.fromPortablePath(p), opts, this.makeCallback(resolve, reject));
            } else {
              this.realFs.rm(path_1.npath.fromPortablePath(p), this.makeCallback(resolve, reject));
            }
          });
        }
        rmSync(p, opts) {
          return this.realFs.rmSync(path_1.npath.fromPortablePath(p), opts);
        }
        async linkPromise(existingP, newP) {
          return await new Promise((resolve, reject) => {
            this.realFs.link(path_1.npath.fromPortablePath(existingP), path_1.npath.fromPortablePath(newP), this.makeCallback(resolve, reject));
          });
        }
        linkSync(existingP, newP) {
          return this.realFs.linkSync(path_1.npath.fromPortablePath(existingP), path_1.npath.fromPortablePath(newP));
        }
        async symlinkPromise(target, p, type) {
          return await new Promise((resolve, reject) => {
            this.realFs.symlink(path_1.npath.fromPortablePath(target.replace(/\/+$/, ``)), path_1.npath.fromPortablePath(p), type, this.makeCallback(resolve, reject));
          });
        }
        symlinkSync(target, p, type) {
          return this.realFs.symlinkSync(path_1.npath.fromPortablePath(target.replace(/\/+$/, ``)), path_1.npath.fromPortablePath(p), type);
        }
        async readFilePromise(p, encoding) {
          return await new Promise((resolve, reject) => {
            const fsNativePath = typeof p === `string` ? path_1.npath.fromPortablePath(p) : p;
            this.realFs.readFile(fsNativePath, encoding, this.makeCallback(resolve, reject));
          });
        }
        readFileSync(p, encoding) {
          const fsNativePath = typeof p === `string` ? path_1.npath.fromPortablePath(p) : p;
          return this.realFs.readFileSync(fsNativePath, encoding);
        }
        async readdirPromise(p, opts) {
          return await new Promise((resolve, reject) => {
            if (opts) {
              if (opts.recursive && process.platform === `win32`) {
                if (opts.withFileTypes) {
                  this.realFs.readdir(path_1.npath.fromPortablePath(p), opts, this.makeCallback((results) => resolve(results.map(direntToPortable)), reject));
                } else {
                  this.realFs.readdir(path_1.npath.fromPortablePath(p), opts, this.makeCallback((results) => resolve(results.map(path_1.npath.toPortablePath)), reject));
                }
              } else {
                this.realFs.readdir(path_1.npath.fromPortablePath(p), opts, this.makeCallback(resolve, reject));
              }
            } else {
              this.realFs.readdir(path_1.npath.fromPortablePath(p), this.makeCallback(resolve, reject));
            }
          });
        }
        readdirSync(p, opts) {
          if (opts) {
            if (opts.recursive && process.platform === `win32`) {
              if (opts.withFileTypes) {
                return this.realFs.readdirSync(path_1.npath.fromPortablePath(p), opts).map(direntToPortable);
              } else {
                return this.realFs.readdirSync(path_1.npath.fromPortablePath(p), opts).map(path_1.npath.toPortablePath);
              }
            } else {
              return this.realFs.readdirSync(path_1.npath.fromPortablePath(p), opts);
            }
          } else {
            return this.realFs.readdirSync(path_1.npath.fromPortablePath(p));
          }
        }
        async readlinkPromise(p) {
          return await new Promise((resolve, reject) => {
            this.realFs.readlink(path_1.npath.fromPortablePath(p), this.makeCallback(resolve, reject));
          }).then((path2) => {
            return path_1.npath.toPortablePath(path2);
          });
        }
        readlinkSync(p) {
          return path_1.npath.toPortablePath(this.realFs.readlinkSync(path_1.npath.fromPortablePath(p)));
        }
        async truncatePromise(p, len) {
          return await new Promise((resolve, reject) => {
            this.realFs.truncate(path_1.npath.fromPortablePath(p), len, this.makeCallback(resolve, reject));
          });
        }
        truncateSync(p, len) {
          return this.realFs.truncateSync(path_1.npath.fromPortablePath(p), len);
        }
        async ftruncatePromise(fd, len) {
          return await new Promise((resolve, reject) => {
            this.realFs.ftruncate(fd, len, this.makeCallback(resolve, reject));
          });
        }
        ftruncateSync(fd, len) {
          return this.realFs.ftruncateSync(fd, len);
        }
        watch(p, a, b) {
          return this.realFs.watch(path_1.npath.fromPortablePath(p), a, b);
        }
        watchFile(p, a, b) {
          return this.realFs.watchFile(path_1.npath.fromPortablePath(p), a, b);
        }
        unwatchFile(p, cb) {
          return this.realFs.unwatchFile(path_1.npath.fromPortablePath(p), cb);
        }
        makeCallback(resolve, reject) {
          return (err, result2) => {
            if (err) {
              reject(err);
            } else {
              resolve(result2);
            }
          };
        }
      };
      exports22.NodeFS = NodeFS;
    }
  });
  var require_CwdFS = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/fslib/lib/CwdFS.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.CwdFS = undefined;
      var NodeFS_1 = require_NodeFS();
      var ProxiedFS_1 = require_ProxiedFS();
      var path_1 = require_path();
      var CwdFS = class extends ProxiedFS_1.ProxiedFS {
        constructor(target, { baseFs = new NodeFS_1.NodeFS } = {}) {
          super(path_1.ppath);
          this.target = this.pathUtils.normalize(target);
          this.baseFs = baseFs;
        }
        getRealPath() {
          return this.pathUtils.resolve(this.baseFs.getRealPath(), this.target);
        }
        resolve(p) {
          if (this.pathUtils.isAbsolute(p)) {
            return path_1.ppath.normalize(p);
          } else {
            return this.baseFs.resolve(path_1.ppath.join(this.target, p));
          }
        }
        mapFromBase(path2) {
          return path2;
        }
        mapToBase(path2) {
          if (this.pathUtils.isAbsolute(path2)) {
            return path2;
          } else {
            return this.pathUtils.join(this.target, path2);
          }
        }
      };
      exports22.CwdFS = CwdFS;
    }
  });
  var require_JailFS = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/fslib/lib/JailFS.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.JailFS = undefined;
      var NodeFS_1 = require_NodeFS();
      var ProxiedFS_1 = require_ProxiedFS();
      var path_1 = require_path();
      var JAIL_ROOT = path_1.PortablePath.root;
      var JailFS = class extends ProxiedFS_1.ProxiedFS {
        constructor(target, { baseFs = new NodeFS_1.NodeFS } = {}) {
          super(path_1.ppath);
          this.target = this.pathUtils.resolve(path_1.PortablePath.root, target);
          this.baseFs = baseFs;
        }
        getRealPath() {
          return this.pathUtils.resolve(this.baseFs.getRealPath(), this.pathUtils.relative(path_1.PortablePath.root, this.target));
        }
        getTarget() {
          return this.target;
        }
        getBaseFs() {
          return this.baseFs;
        }
        mapToBase(p) {
          const normalized = this.pathUtils.normalize(p);
          if (this.pathUtils.isAbsolute(p))
            return this.pathUtils.resolve(this.target, this.pathUtils.relative(JAIL_ROOT, p));
          if (normalized.match(/^\.\.\/?/))
            throw new Error(`Resolving this path (${p}) would escape the jail`);
          return this.pathUtils.resolve(this.target, p);
        }
        mapFromBase(p) {
          return this.pathUtils.resolve(JAIL_ROOT, this.pathUtils.relative(this.target, p));
        }
      };
      exports22.JailFS = JailFS;
    }
  });
  var require_LazyFS = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/fslib/lib/LazyFS.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.LazyFS = undefined;
      var ProxiedFS_1 = require_ProxiedFS();
      var LazyFS = class extends ProxiedFS_1.ProxiedFS {
        constructor(factory, pathUtils) {
          super(pathUtils);
          this.instance = null;
          this.factory = factory;
        }
        get baseFs() {
          if (!this.instance)
            this.instance = this.factory();
          return this.instance;
        }
        set baseFs(value) {
          this.instance = value;
        }
        mapFromBase(p) {
          return p;
        }
        mapToBase(p) {
          return p;
        }
      };
      exports22.LazyFS = LazyFS;
    }
  });
  var require_MountFS = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/fslib/lib/MountFS.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.MountFS = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var fs_1 = __require("fs");
      var FakeFS_1 = require_FakeFS();
      var NodeFS_1 = require_NodeFS();
      var watchFile_1 = require_watchFile();
      var errors = tslib_12.__importStar(require_errors());
      var path_1 = require_path();
      var MOUNT_MASK = 4278190080;
      var MountFS = class extends FakeFS_1.BasePortableFakeFS {
        constructor({ baseFs = new NodeFS_1.NodeFS, filter = null, magicByte = 42, maxOpenFiles = Infinity, useCache = true, maxAge = 5000, typeCheck = fs_1.constants.S_IFREG, getMountPoint, factoryPromise, factorySync }) {
          if (Math.floor(magicByte) !== magicByte || !(magicByte > 1 && magicByte <= 127))
            throw new Error(`The magic byte must be set to a round value between 1 and 127 included`);
          super();
          this.fdMap = /* @__PURE__ */ new Map;
          this.nextFd = 3;
          this.isMount = /* @__PURE__ */ new Set;
          this.notMount = /* @__PURE__ */ new Set;
          this.realPaths = /* @__PURE__ */ new Map;
          this.limitOpenFilesTimeout = null;
          this.baseFs = baseFs;
          this.mountInstances = useCache ? /* @__PURE__ */ new Map : null;
          this.factoryPromise = factoryPromise;
          this.factorySync = factorySync;
          this.filter = filter;
          this.getMountPoint = getMountPoint;
          this.magic = magicByte << 24;
          this.maxAge = maxAge;
          this.maxOpenFiles = maxOpenFiles;
          this.typeCheck = typeCheck;
        }
        getExtractHint(hints) {
          return this.baseFs.getExtractHint(hints);
        }
        getRealPath() {
          return this.baseFs.getRealPath();
        }
        saveAndClose() {
          (0, watchFile_1.unwatchAllFiles)(this);
          if (this.mountInstances) {
            for (const [path2, { childFs }] of this.mountInstances.entries()) {
              childFs.saveAndClose?.();
              this.mountInstances.delete(path2);
            }
          }
        }
        discardAndClose() {
          (0, watchFile_1.unwatchAllFiles)(this);
          if (this.mountInstances) {
            for (const [path2, { childFs }] of this.mountInstances.entries()) {
              childFs.discardAndClose?.();
              this.mountInstances.delete(path2);
            }
          }
        }
        resolve(p) {
          return this.baseFs.resolve(p);
        }
        remapFd(mountFs, fd) {
          const remappedFd = this.nextFd++ | this.magic;
          this.fdMap.set(remappedFd, [mountFs, fd]);
          return remappedFd;
        }
        async openPromise(p, flags, mode) {
          return await this.makeCallPromise(p, async () => {
            return await this.baseFs.openPromise(p, flags, mode);
          }, async (mountFs, { subPath }) => {
            return this.remapFd(mountFs, await mountFs.openPromise(subPath, flags, mode));
          });
        }
        openSync(p, flags, mode) {
          return this.makeCallSync(p, () => {
            return this.baseFs.openSync(p, flags, mode);
          }, (mountFs, { subPath }) => {
            return this.remapFd(mountFs, mountFs.openSync(subPath, flags, mode));
          });
        }
        async opendirPromise(p, opts) {
          return await this.makeCallPromise(p, async () => {
            return await this.baseFs.opendirPromise(p, opts);
          }, async (mountFs, { subPath }) => {
            return await mountFs.opendirPromise(subPath, opts);
          }, {
            requireSubpath: false
          });
        }
        opendirSync(p, opts) {
          return this.makeCallSync(p, () => {
            return this.baseFs.opendirSync(p, opts);
          }, (mountFs, { subPath }) => {
            return mountFs.opendirSync(subPath, opts);
          }, {
            requireSubpath: false
          });
        }
        async readPromise(fd, buffer, offset, length, position) {
          if ((fd & MOUNT_MASK) !== this.magic)
            return await this.baseFs.readPromise(fd, buffer, offset, length, position);
          const entry = this.fdMap.get(fd);
          if (typeof entry === `undefined`)
            throw errors.EBADF(`read`);
          const [mountFs, realFd] = entry;
          return await mountFs.readPromise(realFd, buffer, offset, length, position);
        }
        readSync(fd, buffer, offset, length, position) {
          if ((fd & MOUNT_MASK) !== this.magic)
            return this.baseFs.readSync(fd, buffer, offset, length, position);
          const entry = this.fdMap.get(fd);
          if (typeof entry === `undefined`)
            throw errors.EBADF(`readSync`);
          const [mountFs, realFd] = entry;
          return mountFs.readSync(realFd, buffer, offset, length, position);
        }
        async writePromise(fd, buffer, offset, length, position) {
          if ((fd & MOUNT_MASK) !== this.magic) {
            if (typeof buffer === `string`) {
              return await this.baseFs.writePromise(fd, buffer, offset);
            } else {
              return await this.baseFs.writePromise(fd, buffer, offset, length, position);
            }
          }
          const entry = this.fdMap.get(fd);
          if (typeof entry === `undefined`)
            throw errors.EBADF(`write`);
          const [mountFs, realFd] = entry;
          if (typeof buffer === `string`) {
            return await mountFs.writePromise(realFd, buffer, offset);
          } else {
            return await mountFs.writePromise(realFd, buffer, offset, length, position);
          }
        }
        writeSync(fd, buffer, offset, length, position) {
          if ((fd & MOUNT_MASK) !== this.magic) {
            if (typeof buffer === `string`) {
              return this.baseFs.writeSync(fd, buffer, offset);
            } else {
              return this.baseFs.writeSync(fd, buffer, offset, length, position);
            }
          }
          const entry = this.fdMap.get(fd);
          if (typeof entry === `undefined`)
            throw errors.EBADF(`writeSync`);
          const [mountFs, realFd] = entry;
          if (typeof buffer === `string`) {
            return mountFs.writeSync(realFd, buffer, offset);
          } else {
            return mountFs.writeSync(realFd, buffer, offset, length, position);
          }
        }
        async closePromise(fd) {
          if ((fd & MOUNT_MASK) !== this.magic)
            return await this.baseFs.closePromise(fd);
          const entry = this.fdMap.get(fd);
          if (typeof entry === `undefined`)
            throw errors.EBADF(`close`);
          this.fdMap.delete(fd);
          const [mountFs, realFd] = entry;
          return await mountFs.closePromise(realFd);
        }
        closeSync(fd) {
          if ((fd & MOUNT_MASK) !== this.magic)
            return this.baseFs.closeSync(fd);
          const entry = this.fdMap.get(fd);
          if (typeof entry === `undefined`)
            throw errors.EBADF(`closeSync`);
          this.fdMap.delete(fd);
          const [mountFs, realFd] = entry;
          return mountFs.closeSync(realFd);
        }
        createReadStream(p, opts) {
          if (p === null)
            return this.baseFs.createReadStream(p, opts);
          return this.makeCallSync(p, () => {
            return this.baseFs.createReadStream(p, opts);
          }, (mountFs, { archivePath, subPath }) => {
            const stream = mountFs.createReadStream(subPath, opts);
            stream.path = path_1.npath.fromPortablePath(this.pathUtils.join(archivePath, subPath));
            return stream;
          });
        }
        createWriteStream(p, opts) {
          if (p === null)
            return this.baseFs.createWriteStream(p, opts);
          return this.makeCallSync(p, () => {
            return this.baseFs.createWriteStream(p, opts);
          }, (mountFs, { subPath }) => {
            return mountFs.createWriteStream(subPath, opts);
          });
        }
        async realpathPromise(p) {
          return await this.makeCallPromise(p, async () => {
            return await this.baseFs.realpathPromise(p);
          }, async (mountFs, { archivePath, subPath }) => {
            let realArchivePath = this.realPaths.get(archivePath);
            if (typeof realArchivePath === `undefined`) {
              realArchivePath = await this.baseFs.realpathPromise(archivePath);
              this.realPaths.set(archivePath, realArchivePath);
            }
            return this.pathUtils.join(realArchivePath, this.pathUtils.relative(path_1.PortablePath.root, await mountFs.realpathPromise(subPath)));
          });
        }
        realpathSync(p) {
          return this.makeCallSync(p, () => {
            return this.baseFs.realpathSync(p);
          }, (mountFs, { archivePath, subPath }) => {
            let realArchivePath = this.realPaths.get(archivePath);
            if (typeof realArchivePath === `undefined`) {
              realArchivePath = this.baseFs.realpathSync(archivePath);
              this.realPaths.set(archivePath, realArchivePath);
            }
            return this.pathUtils.join(realArchivePath, this.pathUtils.relative(path_1.PortablePath.root, mountFs.realpathSync(subPath)));
          });
        }
        async existsPromise(p) {
          return await this.makeCallPromise(p, async () => {
            return await this.baseFs.existsPromise(p);
          }, async (mountFs, { subPath }) => {
            return await mountFs.existsPromise(subPath);
          });
        }
        existsSync(p) {
          return this.makeCallSync(p, () => {
            return this.baseFs.existsSync(p);
          }, (mountFs, { subPath }) => {
            return mountFs.existsSync(subPath);
          });
        }
        async accessPromise(p, mode) {
          return await this.makeCallPromise(p, async () => {
            return await this.baseFs.accessPromise(p, mode);
          }, async (mountFs, { subPath }) => {
            return await mountFs.accessPromise(subPath, mode);
          });
        }
        accessSync(p, mode) {
          return this.makeCallSync(p, () => {
            return this.baseFs.accessSync(p, mode);
          }, (mountFs, { subPath }) => {
            return mountFs.accessSync(subPath, mode);
          });
        }
        async statPromise(p, opts) {
          return await this.makeCallPromise(p, async () => {
            return await this.baseFs.statPromise(p, opts);
          }, async (mountFs, { subPath }) => {
            return await mountFs.statPromise(subPath, opts);
          });
        }
        statSync(p, opts) {
          return this.makeCallSync(p, () => {
            return this.baseFs.statSync(p, opts);
          }, (mountFs, { subPath }) => {
            return mountFs.statSync(subPath, opts);
          });
        }
        async fstatPromise(fd, opts) {
          if ((fd & MOUNT_MASK) !== this.magic)
            return this.baseFs.fstatPromise(fd, opts);
          const entry = this.fdMap.get(fd);
          if (typeof entry === `undefined`)
            throw errors.EBADF(`fstat`);
          const [mountFs, realFd] = entry;
          return mountFs.fstatPromise(realFd, opts);
        }
        fstatSync(fd, opts) {
          if ((fd & MOUNT_MASK) !== this.magic)
            return this.baseFs.fstatSync(fd, opts);
          const entry = this.fdMap.get(fd);
          if (typeof entry === `undefined`)
            throw errors.EBADF(`fstatSync`);
          const [mountFs, realFd] = entry;
          return mountFs.fstatSync(realFd, opts);
        }
        async lstatPromise(p, opts) {
          return await this.makeCallPromise(p, async () => {
            return await this.baseFs.lstatPromise(p, opts);
          }, async (mountFs, { subPath }) => {
            return await mountFs.lstatPromise(subPath, opts);
          });
        }
        lstatSync(p, opts) {
          return this.makeCallSync(p, () => {
            return this.baseFs.lstatSync(p, opts);
          }, (mountFs, { subPath }) => {
            return mountFs.lstatSync(subPath, opts);
          });
        }
        async fchmodPromise(fd, mask) {
          if ((fd & MOUNT_MASK) !== this.magic)
            return this.baseFs.fchmodPromise(fd, mask);
          const entry = this.fdMap.get(fd);
          if (typeof entry === `undefined`)
            throw errors.EBADF(`fchmod`);
          const [mountFs, realFd] = entry;
          return mountFs.fchmodPromise(realFd, mask);
        }
        fchmodSync(fd, mask) {
          if ((fd & MOUNT_MASK) !== this.magic)
            return this.baseFs.fchmodSync(fd, mask);
          const entry = this.fdMap.get(fd);
          if (typeof entry === `undefined`)
            throw errors.EBADF(`fchmodSync`);
          const [mountFs, realFd] = entry;
          return mountFs.fchmodSync(realFd, mask);
        }
        async chmodPromise(p, mask) {
          return await this.makeCallPromise(p, async () => {
            return await this.baseFs.chmodPromise(p, mask);
          }, async (mountFs, { subPath }) => {
            return await mountFs.chmodPromise(subPath, mask);
          });
        }
        chmodSync(p, mask) {
          return this.makeCallSync(p, () => {
            return this.baseFs.chmodSync(p, mask);
          }, (mountFs, { subPath }) => {
            return mountFs.chmodSync(subPath, mask);
          });
        }
        async fchownPromise(fd, uid, gid) {
          if ((fd & MOUNT_MASK) !== this.magic)
            return this.baseFs.fchownPromise(fd, uid, gid);
          const entry = this.fdMap.get(fd);
          if (typeof entry === `undefined`)
            throw errors.EBADF(`fchown`);
          const [zipFs, realFd] = entry;
          return zipFs.fchownPromise(realFd, uid, gid);
        }
        fchownSync(fd, uid, gid) {
          if ((fd & MOUNT_MASK) !== this.magic)
            return this.baseFs.fchownSync(fd, uid, gid);
          const entry = this.fdMap.get(fd);
          if (typeof entry === `undefined`)
            throw errors.EBADF(`fchownSync`);
          const [zipFs, realFd] = entry;
          return zipFs.fchownSync(realFd, uid, gid);
        }
        async chownPromise(p, uid, gid) {
          return await this.makeCallPromise(p, async () => {
            return await this.baseFs.chownPromise(p, uid, gid);
          }, async (mountFs, { subPath }) => {
            return await mountFs.chownPromise(subPath, uid, gid);
          });
        }
        chownSync(p, uid, gid) {
          return this.makeCallSync(p, () => {
            return this.baseFs.chownSync(p, uid, gid);
          }, (mountFs, { subPath }) => {
            return mountFs.chownSync(subPath, uid, gid);
          });
        }
        async renamePromise(oldP, newP) {
          return await this.makeCallPromise(oldP, async () => {
            return await this.makeCallPromise(newP, async () => {
              return await this.baseFs.renamePromise(oldP, newP);
            }, async () => {
              throw Object.assign(new Error(`EEXDEV: cross-device link not permitted`), { code: `EEXDEV` });
            });
          }, async (mountFsO, { subPath: subPathO }) => {
            return await this.makeCallPromise(newP, async () => {
              throw Object.assign(new Error(`EEXDEV: cross-device link not permitted`), { code: `EEXDEV` });
            }, async (mountFsN, { subPath: subPathN }) => {
              if (mountFsO !== mountFsN) {
                throw Object.assign(new Error(`EEXDEV: cross-device link not permitted`), { code: `EEXDEV` });
              } else {
                return await mountFsO.renamePromise(subPathO, subPathN);
              }
            });
          });
        }
        renameSync(oldP, newP) {
          return this.makeCallSync(oldP, () => {
            return this.makeCallSync(newP, () => {
              return this.baseFs.renameSync(oldP, newP);
            }, () => {
              throw Object.assign(new Error(`EEXDEV: cross-device link not permitted`), { code: `EEXDEV` });
            });
          }, (mountFsO, { subPath: subPathO }) => {
            return this.makeCallSync(newP, () => {
              throw Object.assign(new Error(`EEXDEV: cross-device link not permitted`), { code: `EEXDEV` });
            }, (mountFsN, { subPath: subPathN }) => {
              if (mountFsO !== mountFsN) {
                throw Object.assign(new Error(`EEXDEV: cross-device link not permitted`), { code: `EEXDEV` });
              } else {
                return mountFsO.renameSync(subPathO, subPathN);
              }
            });
          });
        }
        async copyFilePromise(sourceP, destP, flags = 0) {
          const fallback = async (sourceFs, sourceP2, destFs, destP2) => {
            if ((flags & fs_1.constants.COPYFILE_FICLONE_FORCE) !== 0)
              throw Object.assign(new Error(`EXDEV: cross-device clone not permitted, copyfile '${sourceP2}' -> ${destP2}'`), { code: `EXDEV` });
            if (flags & fs_1.constants.COPYFILE_EXCL && await this.existsPromise(sourceP2))
              throw Object.assign(new Error(`EEXIST: file already exists, copyfile '${sourceP2}' -> '${destP2}'`), { code: `EEXIST` });
            let content;
            try {
              content = await sourceFs.readFilePromise(sourceP2);
            } catch (error) {
              throw Object.assign(new Error(`EINVAL: invalid argument, copyfile '${sourceP2}' -> '${destP2}'`), { code: `EINVAL` });
            }
            await destFs.writeFilePromise(destP2, content);
          };
          return await this.makeCallPromise(sourceP, async () => {
            return await this.makeCallPromise(destP, async () => {
              return await this.baseFs.copyFilePromise(sourceP, destP, flags);
            }, async (mountFsD, { subPath: subPathD }) => {
              return await fallback(this.baseFs, sourceP, mountFsD, subPathD);
            });
          }, async (mountFsS, { subPath: subPathS }) => {
            return await this.makeCallPromise(destP, async () => {
              return await fallback(mountFsS, subPathS, this.baseFs, destP);
            }, async (mountFsD, { subPath: subPathD }) => {
              if (mountFsS !== mountFsD) {
                return await fallback(mountFsS, subPathS, mountFsD, subPathD);
              } else {
                return await mountFsS.copyFilePromise(subPathS, subPathD, flags);
              }
            });
          });
        }
        copyFileSync(sourceP, destP, flags = 0) {
          const fallback = (sourceFs, sourceP2, destFs, destP2) => {
            if ((flags & fs_1.constants.COPYFILE_FICLONE_FORCE) !== 0)
              throw Object.assign(new Error(`EXDEV: cross-device clone not permitted, copyfile '${sourceP2}' -> ${destP2}'`), { code: `EXDEV` });
            if (flags & fs_1.constants.COPYFILE_EXCL && this.existsSync(sourceP2))
              throw Object.assign(new Error(`EEXIST: file already exists, copyfile '${sourceP2}' -> '${destP2}'`), { code: `EEXIST` });
            let content;
            try {
              content = sourceFs.readFileSync(sourceP2);
            } catch (error) {
              throw Object.assign(new Error(`EINVAL: invalid argument, copyfile '${sourceP2}' -> '${destP2}'`), { code: `EINVAL` });
            }
            destFs.writeFileSync(destP2, content);
          };
          return this.makeCallSync(sourceP, () => {
            return this.makeCallSync(destP, () => {
              return this.baseFs.copyFileSync(sourceP, destP, flags);
            }, (mountFsD, { subPath: subPathD }) => {
              return fallback(this.baseFs, sourceP, mountFsD, subPathD);
            });
          }, (mountFsS, { subPath: subPathS }) => {
            return this.makeCallSync(destP, () => {
              return fallback(mountFsS, subPathS, this.baseFs, destP);
            }, (mountFsD, { subPath: subPathD }) => {
              if (mountFsS !== mountFsD) {
                return fallback(mountFsS, subPathS, mountFsD, subPathD);
              } else {
                return mountFsS.copyFileSync(subPathS, subPathD, flags);
              }
            });
          });
        }
        async appendFilePromise(p, content, opts) {
          return await this.makeCallPromise(p, async () => {
            return await this.baseFs.appendFilePromise(p, content, opts);
          }, async (mountFs, { subPath }) => {
            return await mountFs.appendFilePromise(subPath, content, opts);
          });
        }
        appendFileSync(p, content, opts) {
          return this.makeCallSync(p, () => {
            return this.baseFs.appendFileSync(p, content, opts);
          }, (mountFs, { subPath }) => {
            return mountFs.appendFileSync(subPath, content, opts);
          });
        }
        async writeFilePromise(p, content, opts) {
          return await this.makeCallPromise(p, async () => {
            return await this.baseFs.writeFilePromise(p, content, opts);
          }, async (mountFs, { subPath }) => {
            return await mountFs.writeFilePromise(subPath, content, opts);
          });
        }
        writeFileSync(p, content, opts) {
          return this.makeCallSync(p, () => {
            return this.baseFs.writeFileSync(p, content, opts);
          }, (mountFs, { subPath }) => {
            return mountFs.writeFileSync(subPath, content, opts);
          });
        }
        async unlinkPromise(p) {
          return await this.makeCallPromise(p, async () => {
            return await this.baseFs.unlinkPromise(p);
          }, async (mountFs, { subPath }) => {
            return await mountFs.unlinkPromise(subPath);
          });
        }
        unlinkSync(p) {
          return this.makeCallSync(p, () => {
            return this.baseFs.unlinkSync(p);
          }, (mountFs, { subPath }) => {
            return mountFs.unlinkSync(subPath);
          });
        }
        async utimesPromise(p, atime, mtime) {
          return await this.makeCallPromise(p, async () => {
            return await this.baseFs.utimesPromise(p, atime, mtime);
          }, async (mountFs, { subPath }) => {
            return await mountFs.utimesPromise(subPath, atime, mtime);
          });
        }
        utimesSync(p, atime, mtime) {
          return this.makeCallSync(p, () => {
            return this.baseFs.utimesSync(p, atime, mtime);
          }, (mountFs, { subPath }) => {
            return mountFs.utimesSync(subPath, atime, mtime);
          });
        }
        async lutimesPromise(p, atime, mtime) {
          return await this.makeCallPromise(p, async () => {
            return await this.baseFs.lutimesPromise(p, atime, mtime);
          }, async (mountFs, { subPath }) => {
            return await mountFs.lutimesPromise(subPath, atime, mtime);
          });
        }
        lutimesSync(p, atime, mtime) {
          return this.makeCallSync(p, () => {
            return this.baseFs.lutimesSync(p, atime, mtime);
          }, (mountFs, { subPath }) => {
            return mountFs.lutimesSync(subPath, atime, mtime);
          });
        }
        async mkdirPromise(p, opts) {
          return await this.makeCallPromise(p, async () => {
            return await this.baseFs.mkdirPromise(p, opts);
          }, async (mountFs, { subPath }) => {
            return await mountFs.mkdirPromise(subPath, opts);
          });
        }
        mkdirSync(p, opts) {
          return this.makeCallSync(p, () => {
            return this.baseFs.mkdirSync(p, opts);
          }, (mountFs, { subPath }) => {
            return mountFs.mkdirSync(subPath, opts);
          });
        }
        async rmdirPromise(p, opts) {
          return await this.makeCallPromise(p, async () => {
            return await this.baseFs.rmdirPromise(p, opts);
          }, async (mountFs, { subPath }) => {
            return await mountFs.rmdirPromise(subPath, opts);
          });
        }
        rmdirSync(p, opts) {
          return this.makeCallSync(p, () => {
            return this.baseFs.rmdirSync(p, opts);
          }, (mountFs, { subPath }) => {
            return mountFs.rmdirSync(subPath, opts);
          });
        }
        async rmPromise(p, opts) {
          return await this.makeCallPromise(p, async () => {
            return await this.baseFs.rmPromise(p, opts);
          }, async (mountFs, { subPath }) => {
            return await mountFs.rmPromise(subPath, opts);
          });
        }
        rmSync(p, opts) {
          return this.makeCallSync(p, () => {
            return this.baseFs.rmSync(p, opts);
          }, (mountFs, { subPath }) => {
            return mountFs.rmSync(subPath, opts);
          });
        }
        async linkPromise(existingP, newP) {
          return await this.makeCallPromise(newP, async () => {
            return await this.baseFs.linkPromise(existingP, newP);
          }, async (mountFs, { subPath }) => {
            return await mountFs.linkPromise(existingP, subPath);
          });
        }
        linkSync(existingP, newP) {
          return this.makeCallSync(newP, () => {
            return this.baseFs.linkSync(existingP, newP);
          }, (mountFs, { subPath }) => {
            return mountFs.linkSync(existingP, subPath);
          });
        }
        async symlinkPromise(target, p, type) {
          return await this.makeCallPromise(p, async () => {
            return await this.baseFs.symlinkPromise(target, p, type);
          }, async (mountFs, { subPath }) => {
            return await mountFs.symlinkPromise(target, subPath);
          });
        }
        symlinkSync(target, p, type) {
          return this.makeCallSync(p, () => {
            return this.baseFs.symlinkSync(target, p, type);
          }, (mountFs, { subPath }) => {
            return mountFs.symlinkSync(target, subPath);
          });
        }
        async readFilePromise(p, encoding) {
          return this.makeCallPromise(p, async () => {
            return await this.baseFs.readFilePromise(p, encoding);
          }, async (mountFs, { subPath }) => {
            return await mountFs.readFilePromise(subPath, encoding);
          });
        }
        readFileSync(p, encoding) {
          return this.makeCallSync(p, () => {
            return this.baseFs.readFileSync(p, encoding);
          }, (mountFs, { subPath }) => {
            return mountFs.readFileSync(subPath, encoding);
          });
        }
        async readdirPromise(p, opts) {
          return await this.makeCallPromise(p, async () => {
            return await this.baseFs.readdirPromise(p, opts);
          }, async (mountFs, { subPath }) => {
            return await mountFs.readdirPromise(subPath, opts);
          }, {
            requireSubpath: false
          });
        }
        readdirSync(p, opts) {
          return this.makeCallSync(p, () => {
            return this.baseFs.readdirSync(p, opts);
          }, (mountFs, { subPath }) => {
            return mountFs.readdirSync(subPath, opts);
          }, {
            requireSubpath: false
          });
        }
        async readlinkPromise(p) {
          return await this.makeCallPromise(p, async () => {
            return await this.baseFs.readlinkPromise(p);
          }, async (mountFs, { subPath }) => {
            return await mountFs.readlinkPromise(subPath);
          });
        }
        readlinkSync(p) {
          return this.makeCallSync(p, () => {
            return this.baseFs.readlinkSync(p);
          }, (mountFs, { subPath }) => {
            return mountFs.readlinkSync(subPath);
          });
        }
        async truncatePromise(p, len) {
          return await this.makeCallPromise(p, async () => {
            return await this.baseFs.truncatePromise(p, len);
          }, async (mountFs, { subPath }) => {
            return await mountFs.truncatePromise(subPath, len);
          });
        }
        truncateSync(p, len) {
          return this.makeCallSync(p, () => {
            return this.baseFs.truncateSync(p, len);
          }, (mountFs, { subPath }) => {
            return mountFs.truncateSync(subPath, len);
          });
        }
        async ftruncatePromise(fd, len) {
          if ((fd & MOUNT_MASK) !== this.magic)
            return this.baseFs.ftruncatePromise(fd, len);
          const entry = this.fdMap.get(fd);
          if (typeof entry === `undefined`)
            throw errors.EBADF(`ftruncate`);
          const [mountFs, realFd] = entry;
          return mountFs.ftruncatePromise(realFd, len);
        }
        ftruncateSync(fd, len) {
          if ((fd & MOUNT_MASK) !== this.magic)
            return this.baseFs.ftruncateSync(fd, len);
          const entry = this.fdMap.get(fd);
          if (typeof entry === `undefined`)
            throw errors.EBADF(`ftruncateSync`);
          const [mountFs, realFd] = entry;
          return mountFs.ftruncateSync(realFd, len);
        }
        watch(p, a, b) {
          return this.makeCallSync(p, () => {
            return this.baseFs.watch(p, a, b);
          }, (mountFs, { subPath }) => {
            return mountFs.watch(subPath, a, b);
          });
        }
        watchFile(p, a, b) {
          return this.makeCallSync(p, () => {
            return this.baseFs.watchFile(p, a, b);
          }, () => {
            return (0, watchFile_1.watchFile)(this, p, a, b);
          });
        }
        unwatchFile(p, cb) {
          return this.makeCallSync(p, () => {
            return this.baseFs.unwatchFile(p, cb);
          }, () => {
            return (0, watchFile_1.unwatchFile)(this, p, cb);
          });
        }
        async makeCallPromise(p, discard, accept, { requireSubpath = true } = {}) {
          if (typeof p !== `string`)
            return await discard();
          const normalizedP = this.resolve(p);
          const mountInfo = this.findMount(normalizedP);
          if (!mountInfo)
            return await discard();
          if (requireSubpath && mountInfo.subPath === `/`)
            return await discard();
          return await this.getMountPromise(mountInfo.archivePath, async (mountFs) => await accept(mountFs, mountInfo));
        }
        makeCallSync(p, discard, accept, { requireSubpath = true } = {}) {
          if (typeof p !== `string`)
            return discard();
          const normalizedP = this.resolve(p);
          const mountInfo = this.findMount(normalizedP);
          if (!mountInfo)
            return discard();
          if (requireSubpath && mountInfo.subPath === `/`)
            return discard();
          return this.getMountSync(mountInfo.archivePath, (mountFs) => accept(mountFs, mountInfo));
        }
        findMount(p) {
          if (this.filter && !this.filter.test(p))
            return null;
          let filePath = ``;
          while (true) {
            const pathPartWithArchive = p.substring(filePath.length);
            const mountPoint = this.getMountPoint(pathPartWithArchive, filePath);
            if (!mountPoint)
              return null;
            filePath = this.pathUtils.join(filePath, mountPoint);
            if (!this.isMount.has(filePath)) {
              if (this.notMount.has(filePath))
                continue;
              try {
                if (this.typeCheck !== null && (this.baseFs.statSync(filePath).mode & fs_1.constants.S_IFMT) !== this.typeCheck) {
                  this.notMount.add(filePath);
                  continue;
                }
              } catch {
                return null;
              }
              this.isMount.add(filePath);
            }
            return {
              archivePath: filePath,
              subPath: this.pathUtils.join(path_1.PortablePath.root, p.substring(filePath.length))
            };
          }
        }
        limitOpenFiles(max) {
          if (this.mountInstances === null)
            return;
          const now = Date.now();
          let nextExpiresAt = now + this.maxAge;
          let closeCount = max === null ? 0 : this.mountInstances.size - max;
          for (const [path2, { childFs, expiresAt, refCount }] of this.mountInstances.entries()) {
            if (refCount !== 0 || childFs.hasOpenFileHandles?.()) {
              continue;
            } else if (now >= expiresAt) {
              childFs.saveAndClose?.();
              this.mountInstances.delete(path2);
              closeCount -= 1;
              continue;
            } else if (max === null || closeCount <= 0) {
              nextExpiresAt = expiresAt;
              break;
            }
            childFs.saveAndClose?.();
            this.mountInstances.delete(path2);
            closeCount -= 1;
          }
          if (this.limitOpenFilesTimeout === null && (max === null && this.mountInstances.size > 0 || max !== null) && isFinite(nextExpiresAt)) {
            this.limitOpenFilesTimeout = setTimeout(() => {
              this.limitOpenFilesTimeout = null;
              this.limitOpenFiles(null);
            }, nextExpiresAt - now).unref();
          }
        }
        async getMountPromise(p, accept) {
          if (this.mountInstances) {
            let cachedMountFs = this.mountInstances.get(p);
            if (!cachedMountFs) {
              const createFsInstance = await this.factoryPromise(this.baseFs, p);
              cachedMountFs = this.mountInstances.get(p);
              if (!cachedMountFs) {
                cachedMountFs = {
                  childFs: createFsInstance(),
                  expiresAt: 0,
                  refCount: 0
                };
              }
            }
            this.mountInstances.delete(p);
            this.limitOpenFiles(this.maxOpenFiles - 1);
            this.mountInstances.set(p, cachedMountFs);
            cachedMountFs.expiresAt = Date.now() + this.maxAge;
            cachedMountFs.refCount += 1;
            try {
              return await accept(cachedMountFs.childFs);
            } finally {
              cachedMountFs.refCount -= 1;
            }
          } else {
            const mountFs = (await this.factoryPromise(this.baseFs, p))();
            try {
              return await accept(mountFs);
            } finally {
              mountFs.saveAndClose?.();
            }
          }
        }
        getMountSync(p, accept) {
          if (this.mountInstances) {
            let cachedMountFs = this.mountInstances.get(p);
            if (!cachedMountFs) {
              cachedMountFs = {
                childFs: this.factorySync(this.baseFs, p),
                expiresAt: 0,
                refCount: 0
              };
            }
            this.mountInstances.delete(p);
            this.limitOpenFiles(this.maxOpenFiles - 1);
            this.mountInstances.set(p, cachedMountFs);
            cachedMountFs.expiresAt = Date.now() + this.maxAge;
            return accept(cachedMountFs.childFs);
          } else {
            const childFs = this.factorySync(this.baseFs, p);
            try {
              return accept(childFs);
            } finally {
              childFs.saveAndClose?.();
            }
          }
        }
      };
      exports22.MountFS = MountFS;
    }
  });
  var require_NoFS = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/fslib/lib/NoFS.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.NoFS = undefined;
      var FakeFS_1 = require_FakeFS();
      var path_1 = require_path();
      var makeError = () => Object.assign(new Error(`ENOSYS: unsupported filesystem access`), { code: `ENOSYS` });
      var NoFS = class extends FakeFS_1.FakeFS {
        constructor() {
          super(path_1.ppath);
        }
        getExtractHint() {
          throw makeError();
        }
        getRealPath() {
          throw makeError();
        }
        resolve() {
          throw makeError();
        }
        async openPromise() {
          throw makeError();
        }
        openSync() {
          throw makeError();
        }
        async opendirPromise() {
          throw makeError();
        }
        opendirSync() {
          throw makeError();
        }
        async readPromise() {
          throw makeError();
        }
        readSync() {
          throw makeError();
        }
        async writePromise() {
          throw makeError();
        }
        writeSync() {
          throw makeError();
        }
        async closePromise() {
          throw makeError();
        }
        closeSync() {
          throw makeError();
        }
        createWriteStream() {
          throw makeError();
        }
        createReadStream() {
          throw makeError();
        }
        async realpathPromise() {
          throw makeError();
        }
        realpathSync() {
          throw makeError();
        }
        async readdirPromise() {
          throw makeError();
        }
        readdirSync() {
          throw makeError();
        }
        async existsPromise(p) {
          throw makeError();
        }
        existsSync(p) {
          throw makeError();
        }
        async accessPromise() {
          throw makeError();
        }
        accessSync() {
          throw makeError();
        }
        async statPromise() {
          throw makeError();
        }
        statSync() {
          throw makeError();
        }
        async fstatPromise(fd) {
          throw makeError();
        }
        fstatSync(fd) {
          throw makeError();
        }
        async lstatPromise(p) {
          throw makeError();
        }
        lstatSync(p) {
          throw makeError();
        }
        async fchmodPromise() {
          throw makeError();
        }
        fchmodSync() {
          throw makeError();
        }
        async chmodPromise() {
          throw makeError();
        }
        chmodSync() {
          throw makeError();
        }
        async fchownPromise() {
          throw makeError();
        }
        fchownSync() {
          throw makeError();
        }
        async chownPromise() {
          throw makeError();
        }
        chownSync() {
          throw makeError();
        }
        async mkdirPromise() {
          throw makeError();
        }
        mkdirSync() {
          throw makeError();
        }
        async rmdirPromise() {
          throw makeError();
        }
        rmdirSync() {
          throw makeError();
        }
        async rmPromise() {
          throw makeError();
        }
        rmSync() {
          throw makeError();
        }
        async linkPromise() {
          throw makeError();
        }
        linkSync() {
          throw makeError();
        }
        async symlinkPromise() {
          throw makeError();
        }
        symlinkSync() {
          throw makeError();
        }
        async renamePromise() {
          throw makeError();
        }
        renameSync() {
          throw makeError();
        }
        async copyFilePromise() {
          throw makeError();
        }
        copyFileSync() {
          throw makeError();
        }
        async appendFilePromise() {
          throw makeError();
        }
        appendFileSync() {
          throw makeError();
        }
        async writeFilePromise() {
          throw makeError();
        }
        writeFileSync() {
          throw makeError();
        }
        async unlinkPromise() {
          throw makeError();
        }
        unlinkSync() {
          throw makeError();
        }
        async utimesPromise() {
          throw makeError();
        }
        utimesSync() {
          throw makeError();
        }
        async lutimesPromise() {
          throw makeError();
        }
        lutimesSync() {
          throw makeError();
        }
        async readFilePromise() {
          throw makeError();
        }
        readFileSync() {
          throw makeError();
        }
        async readlinkPromise() {
          throw makeError();
        }
        readlinkSync() {
          throw makeError();
        }
        async truncatePromise() {
          throw makeError();
        }
        truncateSync() {
          throw makeError();
        }
        async ftruncatePromise(fd, len) {
          throw makeError();
        }
        ftruncateSync(fd, len) {
          throw makeError();
        }
        watch() {
          throw makeError();
        }
        watchFile() {
          throw makeError();
        }
        unwatchFile() {
          throw makeError();
        }
      };
      exports22.NoFS = NoFS;
      NoFS.instance = new NoFS;
    }
  });
  var require_PosixFS = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/fslib/lib/PosixFS.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.PosixFS = undefined;
      var ProxiedFS_1 = require_ProxiedFS();
      var path_1 = require_path();
      var PosixFS = class extends ProxiedFS_1.ProxiedFS {
        constructor(baseFs) {
          super(path_1.npath);
          this.baseFs = baseFs;
        }
        mapFromBase(path2) {
          return path_1.npath.fromPortablePath(path2);
        }
        mapToBase(path2) {
          return path_1.npath.toPortablePath(path2);
        }
      };
      exports22.PosixFS = PosixFS;
    }
  });
  var require_VirtualFS = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/fslib/lib/VirtualFS.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.VirtualFS = undefined;
      var NodeFS_1 = require_NodeFS();
      var ProxiedFS_1 = require_ProxiedFS();
      var path_1 = require_path();
      var NUMBER_REGEXP = /^[0-9]+$/;
      var VIRTUAL_REGEXP = /^(\/(?:[^/]+\/)*?(?:\$\$virtual|__virtual__))((?:\/((?:[^/]+-)?[a-f0-9]+)(?:\/([^/]+))?)?((?:\/.*)?))$/;
      var VALID_COMPONENT = /^([^/]+-)?[a-f0-9]+$/;
      var VirtualFS = class _VirtualFS extends ProxiedFS_1.ProxiedFS {
        static makeVirtualPath(base, component, to) {
          if (path_1.ppath.basename(base) !== `__virtual__`)
            throw new Error(`Assertion failed: Virtual folders must be named "__virtual__"`);
          if (!path_1.ppath.basename(component).match(VALID_COMPONENT))
            throw new Error(`Assertion failed: Virtual components must be ended by an hexadecimal hash`);
          const target = path_1.ppath.relative(path_1.ppath.dirname(base), to);
          const segments = target.split(`/`);
          let depth = 0;
          while (depth < segments.length && segments[depth] === `..`)
            depth += 1;
          const finalSegments = segments.slice(depth);
          const fullVirtualPath = path_1.ppath.join(base, component, String(depth), ...finalSegments);
          return fullVirtualPath;
        }
        static resolveVirtual(p) {
          const match = p.match(VIRTUAL_REGEXP);
          if (!match || !match[3] && match[5])
            return p;
          const target = path_1.ppath.dirname(match[1]);
          if (!match[3] || !match[4])
            return target;
          const isnum = NUMBER_REGEXP.test(match[4]);
          if (!isnum)
            return p;
          const depth = Number(match[4]);
          const backstep = `../`.repeat(depth);
          const subpath = match[5] || `.`;
          return _VirtualFS.resolveVirtual(path_1.ppath.join(target, backstep, subpath));
        }
        constructor({ baseFs = new NodeFS_1.NodeFS } = {}) {
          super(path_1.ppath);
          this.baseFs = baseFs;
        }
        getExtractHint(hints) {
          return this.baseFs.getExtractHint(hints);
        }
        getRealPath() {
          return this.baseFs.getRealPath();
        }
        realpathSync(p) {
          const match = p.match(VIRTUAL_REGEXP);
          if (!match)
            return this.baseFs.realpathSync(p);
          if (!match[5])
            return p;
          const realpath = this.baseFs.realpathSync(this.mapToBase(p));
          return _VirtualFS.makeVirtualPath(match[1], match[3], realpath);
        }
        async realpathPromise(p) {
          const match = p.match(VIRTUAL_REGEXP);
          if (!match)
            return await this.baseFs.realpathPromise(p);
          if (!match[5])
            return p;
          const realpath = await this.baseFs.realpathPromise(this.mapToBase(p));
          return _VirtualFS.makeVirtualPath(match[1], match[3], realpath);
        }
        mapToBase(p) {
          if (p === ``)
            return p;
          if (this.pathUtils.isAbsolute(p))
            return _VirtualFS.resolveVirtual(p);
          const resolvedRoot = _VirtualFS.resolveVirtual(this.baseFs.resolve(path_1.PortablePath.dot));
          const resolvedP = _VirtualFS.resolveVirtual(this.baseFs.resolve(p));
          return path_1.ppath.relative(resolvedRoot, resolvedP) || path_1.PortablePath.dot;
        }
        mapFromBase(p) {
          return p;
        }
      };
      exports22.VirtualFS = VirtualFS;
    }
  });
  var require_NodePathFS = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/fslib/lib/NodePathFS.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.NodePathFS = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var buffer_1 = tslib_12.__importDefault(__require("buffer"));
      var url_1 = __require("url");
      var util_1 = __require("util");
      var ProxiedFS_1 = require_ProxiedFS();
      var path_1 = require_path();
      var NodePathFS = class extends ProxiedFS_1.ProxiedFS {
        constructor(baseFs) {
          super(path_1.npath);
          this.baseFs = baseFs;
        }
        mapFromBase(path2) {
          return path2;
        }
        mapToBase(path2) {
          if (typeof path2 === `string`)
            return path2;
          if (path2 instanceof URL)
            return (0, url_1.fileURLToPath)(path2);
          if (Buffer.isBuffer(path2)) {
            const str = path2.toString();
            if (!isUtf8(path2, str))
              throw new Error(`Non-utf8 buffers are not supported at the moment. Please upvote the following issue if you encounter this error: https://github.com/yarnpkg/berry/issues/4942`);
            return str;
          }
          throw new Error(`Unsupported path type: ${(0, util_1.inspect)(path2)}`);
        }
      };
      exports22.NodePathFS = NodePathFS;
      function isUtf8(buf, str) {
        if (typeof buffer_1.default.isUtf8 !== `undefined`)
          return buffer_1.default.isUtf8(buf);
        return Buffer.byteLength(str) === buf.byteLength;
      }
    }
  });
  var require_FileHandle = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/fslib/lib/patchFs/FileHandle.js"(exports22) {
      var _a;
      var _b;
      var _c;
      var _d;
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.FileHandle = undefined;
      var readline_1 = __require("readline");
      var kBaseFs = Symbol(`kBaseFs`);
      var kFd = Symbol(`kFd`);
      var kClosePromise = Symbol(`kClosePromise`);
      var kCloseResolve = Symbol(`kCloseResolve`);
      var kCloseReject = Symbol(`kCloseReject`);
      var kRefs = Symbol(`kRefs`);
      var kRef = Symbol(`kRef`);
      var kUnref = Symbol(`kUnref`);
      var FileHandle = class {
        constructor(fd, baseFs) {
          this[_a] = 1;
          this[_b] = undefined;
          this[_c] = undefined;
          this[_d] = undefined;
          this[kBaseFs] = baseFs;
          this[kFd] = fd;
        }
        get fd() {
          return this[kFd];
        }
        async appendFile(data, options) {
          try {
            this[kRef](this.appendFile);
            const encoding = (typeof options === `string` ? options : options?.encoding) ?? undefined;
            return await this[kBaseFs].appendFilePromise(this.fd, data, encoding ? { encoding } : undefined);
          } finally {
            this[kUnref]();
          }
        }
        async chown(uid, gid) {
          try {
            this[kRef](this.chown);
            return await this[kBaseFs].fchownPromise(this.fd, uid, gid);
          } finally {
            this[kUnref]();
          }
        }
        async chmod(mode) {
          try {
            this[kRef](this.chmod);
            return await this[kBaseFs].fchmodPromise(this.fd, mode);
          } finally {
            this[kUnref]();
          }
        }
        createReadStream(options) {
          return this[kBaseFs].createReadStream(null, { ...options, fd: this.fd });
        }
        createWriteStream(options) {
          return this[kBaseFs].createWriteStream(null, { ...options, fd: this.fd });
        }
        datasync() {
          throw new Error(`Method not implemented.`);
        }
        sync() {
          throw new Error(`Method not implemented.`);
        }
        async read(bufferOrOptions, offset, length, position) {
          try {
            this[kRef](this.read);
            let buffer;
            if (!Buffer.isBuffer(bufferOrOptions)) {
              bufferOrOptions ??= {};
              buffer = bufferOrOptions.buffer ?? Buffer.alloc(16384);
              offset = bufferOrOptions.offset || 0;
              length = bufferOrOptions.length ?? buffer.byteLength;
              position = bufferOrOptions.position ?? null;
            } else {
              buffer = bufferOrOptions;
            }
            offset ??= 0;
            length ??= 0;
            if (length === 0) {
              return {
                bytesRead: length,
                buffer
              };
            }
            const bytesRead = await this[kBaseFs].readPromise(this.fd, buffer, offset, length, position);
            return {
              bytesRead,
              buffer
            };
          } finally {
            this[kUnref]();
          }
        }
        async readFile(options) {
          try {
            this[kRef](this.readFile);
            const encoding = (typeof options === `string` ? options : options?.encoding) ?? undefined;
            return await this[kBaseFs].readFilePromise(this.fd, encoding);
          } finally {
            this[kUnref]();
          }
        }
        readLines(options) {
          return (0, readline_1.createInterface)({
            input: this.createReadStream(options),
            crlfDelay: Infinity
          });
        }
        async stat(opts) {
          try {
            this[kRef](this.stat);
            return await this[kBaseFs].fstatPromise(this.fd, opts);
          } finally {
            this[kUnref]();
          }
        }
        async truncate(len) {
          try {
            this[kRef](this.truncate);
            return await this[kBaseFs].ftruncatePromise(this.fd, len);
          } finally {
            this[kUnref]();
          }
        }
        utimes(atime, mtime) {
          throw new Error(`Method not implemented.`);
        }
        async writeFile(data, options) {
          try {
            this[kRef](this.writeFile);
            const encoding = (typeof options === `string` ? options : options?.encoding) ?? undefined;
            await this[kBaseFs].writeFilePromise(this.fd, data, encoding);
          } finally {
            this[kUnref]();
          }
        }
        async write(...args) {
          try {
            this[kRef](this.write);
            if (ArrayBuffer.isView(args[0])) {
              const [buffer, offset, length, position] = args;
              const bytesWritten = await this[kBaseFs].writePromise(this.fd, buffer, offset ?? undefined, length ?? undefined, position ?? undefined);
              return { bytesWritten, buffer };
            } else {
              const [data, position, encoding] = args;
              const bytesWritten = await this[kBaseFs].writePromise(this.fd, data, position, encoding);
              return { bytesWritten, buffer: data };
            }
          } finally {
            this[kUnref]();
          }
        }
        async writev(buffers, position) {
          try {
            this[kRef](this.writev);
            let bytesWritten = 0;
            if (typeof position !== `undefined`) {
              for (const buffer of buffers) {
                const writeResult = await this.write(buffer, undefined, undefined, position);
                bytesWritten += writeResult.bytesWritten;
                position += writeResult.bytesWritten;
              }
            } else {
              for (const buffer of buffers) {
                const writeResult = await this.write(buffer);
                bytesWritten += writeResult.bytesWritten;
              }
            }
            return {
              buffers,
              bytesWritten
            };
          } finally {
            this[kUnref]();
          }
        }
        readv(buffers, position) {
          throw new Error(`Method not implemented.`);
        }
        close() {
          if (this[kFd] === -1)
            return Promise.resolve();
          if (this[kClosePromise])
            return this[kClosePromise];
          this[kRefs]--;
          if (this[kRefs] === 0) {
            const fd = this[kFd];
            this[kFd] = -1;
            this[kClosePromise] = this[kBaseFs].closePromise(fd).finally(() => {
              this[kClosePromise] = undefined;
            });
          } else {
            this[kClosePromise] = new Promise((resolve, reject) => {
              this[kCloseResolve] = resolve;
              this[kCloseReject] = reject;
            }).finally(() => {
              this[kClosePromise] = undefined;
              this[kCloseReject] = undefined;
              this[kCloseResolve] = undefined;
            });
          }
          return this[kClosePromise];
        }
        [(_a = kRefs, _b = kClosePromise, _c = kCloseResolve, _d = kCloseReject, kRef)](caller) {
          if (this[kFd] === -1) {
            const err = new Error(`file closed`);
            err.code = `EBADF`;
            err.syscall = caller.name;
            throw err;
          }
          this[kRefs]++;
        }
        [kUnref]() {
          this[kRefs]--;
          if (this[kRefs] === 0) {
            const fd = this[kFd];
            this[kFd] = -1;
            this[kBaseFs].closePromise(fd).then(this[kCloseResolve], this[kCloseReject]);
          }
        }
      };
      exports22.FileHandle = FileHandle;
    }
  });
  var require_patchFs = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/fslib/lib/patchFs/patchFs.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.patchFs = patchFs;
      exports22.extendFs = extendFs;
      var util_1 = __require("util");
      var NodePathFS_1 = require_NodePathFS();
      var FileHandle_1 = require_FileHandle();
      var SYNC_IMPLEMENTATIONS = /* @__PURE__ */ new Set([
        `accessSync`,
        `appendFileSync`,
        `createReadStream`,
        `createWriteStream`,
        `chmodSync`,
        `fchmodSync`,
        `chownSync`,
        `fchownSync`,
        `closeSync`,
        `copyFileSync`,
        `linkSync`,
        `lstatSync`,
        `fstatSync`,
        `lutimesSync`,
        `mkdirSync`,
        `openSync`,
        `opendirSync`,
        `readlinkSync`,
        `readFileSync`,
        `readdirSync`,
        `readlinkSync`,
        `realpathSync`,
        `renameSync`,
        `rmdirSync`,
        `rmSync`,
        `statSync`,
        `symlinkSync`,
        `truncateSync`,
        `ftruncateSync`,
        `unlinkSync`,
        `unwatchFile`,
        `utimesSync`,
        `watch`,
        `watchFile`,
        `writeFileSync`,
        `writeSync`
      ]);
      var ASYNC_IMPLEMENTATIONS = /* @__PURE__ */ new Set([
        `accessPromise`,
        `appendFilePromise`,
        `fchmodPromise`,
        `chmodPromise`,
        `fchownPromise`,
        `chownPromise`,
        `closePromise`,
        `copyFilePromise`,
        `linkPromise`,
        `fstatPromise`,
        `lstatPromise`,
        `lutimesPromise`,
        `mkdirPromise`,
        `openPromise`,
        `opendirPromise`,
        `readdirPromise`,
        `realpathPromise`,
        `readFilePromise`,
        `readdirPromise`,
        `readlinkPromise`,
        `renamePromise`,
        `rmdirPromise`,
        `rmPromise`,
        `statPromise`,
        `symlinkPromise`,
        `truncatePromise`,
        `ftruncatePromise`,
        `unlinkPromise`,
        `utimesPromise`,
        `writeFilePromise`,
        `writeSync`
      ]);
      function patchFs(patchedFs, fakeFs) {
        fakeFs = new NodePathFS_1.NodePathFS(fakeFs);
        const setupFn = (target, name, replacement) => {
          const orig = target[name];
          target[name] = replacement;
          if (typeof orig?.[util_1.promisify.custom] !== `undefined`) {
            replacement[util_1.promisify.custom] = orig[util_1.promisify.custom];
          }
        };
        {
          setupFn(patchedFs, `exists`, (p, ...args) => {
            const hasCallback = typeof args[args.length - 1] === `function`;
            const callback = hasCallback ? args.pop() : () => {
            };
            process.nextTick(() => {
              fakeFs.existsPromise(p).then((exists) => {
                callback(exists);
              }, () => {
                callback(false);
              });
            });
          });
          setupFn(patchedFs, `read`, (...args) => {
            let [fd, buffer, offset, length, position, callback] = args;
            if (args.length <= 3) {
              let options = {};
              if (args.length < 3) {
                callback = args[1];
              } else {
                options = args[1];
                callback = args[2];
              }
              ({
                buffer = Buffer.alloc(16384),
                offset = 0,
                length = buffer.byteLength,
                position
              } = options);
            }
            if (offset == null)
              offset = 0;
            length |= 0;
            if (length === 0) {
              process.nextTick(() => {
                callback(null, 0, buffer);
              });
              return;
            }
            if (position == null)
              position = -1;
            process.nextTick(() => {
              fakeFs.readPromise(fd, buffer, offset, length, position).then((bytesRead) => {
                callback(null, bytesRead, buffer);
              }, (error) => {
                callback(error, 0, buffer);
              });
            });
          });
          for (const fnName of ASYNC_IMPLEMENTATIONS) {
            const origName = fnName.replace(/Promise$/, ``);
            if (typeof patchedFs[origName] === `undefined`)
              continue;
            const fakeImpl = fakeFs[fnName];
            if (typeof fakeImpl === `undefined`)
              continue;
            const wrapper = (...args) => {
              const hasCallback = typeof args[args.length - 1] === `function`;
              const callback = hasCallback ? args.pop() : () => {
              };
              process.nextTick(() => {
                fakeImpl.apply(fakeFs, args).then((result2) => {
                  callback(null, result2);
                }, (error) => {
                  callback(error);
                });
              });
            };
            setupFn(patchedFs, origName, wrapper);
          }
          patchedFs.realpath.native = patchedFs.realpath;
        }
        {
          setupFn(patchedFs, `existsSync`, (p) => {
            try {
              return fakeFs.existsSync(p);
            } catch (error) {
              return false;
            }
          });
          setupFn(patchedFs, `readSync`, (...args) => {
            let [fd, buffer, offset, length, position] = args;
            if (args.length <= 3) {
              const options = args[2] || {};
              ({ offset = 0, length = buffer.byteLength, position } = options);
            }
            if (offset == null)
              offset = 0;
            length |= 0;
            if (length === 0)
              return 0;
            if (position == null)
              position = -1;
            return fakeFs.readSync(fd, buffer, offset, length, position);
          });
          for (const fnName of SYNC_IMPLEMENTATIONS) {
            const origName = fnName;
            if (typeof patchedFs[origName] === `undefined`)
              continue;
            const fakeImpl = fakeFs[fnName];
            if (typeof fakeImpl === `undefined`)
              continue;
            setupFn(patchedFs, origName, fakeImpl.bind(fakeFs));
          }
          patchedFs.realpathSync.native = patchedFs.realpathSync;
        }
        {
          const patchedFsPromises = patchedFs.promises;
          for (const fnName of ASYNC_IMPLEMENTATIONS) {
            const origName = fnName.replace(/Promise$/, ``);
            if (typeof patchedFsPromises[origName] === `undefined`)
              continue;
            const fakeImpl = fakeFs[fnName];
            if (typeof fakeImpl === `undefined`)
              continue;
            if (fnName === `open`)
              continue;
            setupFn(patchedFsPromises, origName, (pathLike, ...args) => {
              if (pathLike instanceof FileHandle_1.FileHandle) {
                return pathLike[origName].apply(pathLike, args);
              } else {
                return fakeImpl.call(fakeFs, pathLike, ...args);
              }
            });
          }
          setupFn(patchedFsPromises, `open`, async (...args) => {
            const fd = await fakeFs.openPromise(...args);
            return new FileHandle_1.FileHandle(fd, fakeFs);
          });
        }
        {
          patchedFs.read[util_1.promisify.custom] = async (fd, buffer, ...args) => {
            const res = fakeFs.readPromise(fd, buffer, ...args);
            return { bytesRead: await res, buffer };
          };
          patchedFs.write[util_1.promisify.custom] = async (fd, buffer, ...args) => {
            const res = fakeFs.writePromise(fd, buffer, ...args);
            return { bytesWritten: await res, buffer };
          };
        }
      }
      function extendFs(realFs, fakeFs) {
        const patchedFs = Object.create(realFs);
        patchFs(patchedFs, fakeFs);
        return patchedFs;
      }
    }
  });
  var require_xfs = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/fslib/lib/xfs.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.xfs = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var os_1 = tslib_12.__importDefault(__require("os"));
      var NodeFS_1 = require_NodeFS();
      var path_1 = require_path();
      function getTempName(prefix) {
        const hash = Math.ceil(Math.random() * 4294967296).toString(16).padStart(8, `0`);
        return `${prefix}${hash}`;
      }
      var tmpdirs = /* @__PURE__ */ new Set;
      var tmpEnv = null;
      function initTmpEnv() {
        if (tmpEnv)
          return tmpEnv;
        const tmpdir = path_1.npath.toPortablePath(os_1.default.tmpdir());
        const realTmpdir = exports22.xfs.realpathSync(tmpdir);
        process.once(`exit`, () => {
          exports22.xfs.rmtempSync();
        });
        return tmpEnv = {
          tmpdir,
          realTmpdir
        };
      }
      exports22.xfs = Object.assign(new NodeFS_1.NodeFS, {
        detachTemp(p) {
          tmpdirs.delete(p);
        },
        mktempSync(cb) {
          const { tmpdir, realTmpdir } = initTmpEnv();
          while (true) {
            const name = getTempName(`xfs-`);
            try {
              this.mkdirSync(path_1.ppath.join(tmpdir, name));
            } catch (error) {
              if (error.code === `EEXIST`) {
                continue;
              } else {
                throw error;
              }
            }
            const realP = path_1.ppath.join(realTmpdir, name);
            tmpdirs.add(realP);
            if (typeof cb === `undefined`)
              return realP;
            try {
              return cb(realP);
            } finally {
              if (tmpdirs.has(realP)) {
                tmpdirs.delete(realP);
                try {
                  this.removeSync(realP);
                } catch {
                }
              }
            }
          }
        },
        async mktempPromise(cb) {
          const { tmpdir, realTmpdir } = initTmpEnv();
          while (true) {
            const name = getTempName(`xfs-`);
            try {
              await this.mkdirPromise(path_1.ppath.join(tmpdir, name));
            } catch (error) {
              if (error.code === `EEXIST`) {
                continue;
              } else {
                throw error;
              }
            }
            const realP = path_1.ppath.join(realTmpdir, name);
            tmpdirs.add(realP);
            if (typeof cb === `undefined`)
              return realP;
            try {
              return await cb(realP);
            } finally {
              if (tmpdirs.has(realP)) {
                tmpdirs.delete(realP);
                try {
                  await this.removePromise(realP);
                } catch {
                }
              }
            }
          }
        },
        async rmtempPromise() {
          await Promise.all(Array.from(tmpdirs.values()).map(async (p) => {
            try {
              await exports22.xfs.removePromise(p, { maxRetries: 0 });
              tmpdirs.delete(p);
            } catch {
            }
          }));
        },
        rmtempSync() {
          for (const p of tmpdirs) {
            try {
              exports22.xfs.removeSync(p);
              tmpdirs.delete(p);
            } catch {
            }
          }
        }
      });
    }
  });
  var require_lib = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/fslib/lib/index.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.xfs = exports22.extendFs = exports22.patchFs = exports22.VirtualFS = exports22.ProxiedFS = exports22.PosixFS = exports22.NodeFS = exports22.NoFS = exports22.MountFS = exports22.LazyFS = exports22.JailFS = exports22.CwdFS = exports22.BasePortableFakeFS = exports22.FakeFS = exports22.AliasFS = exports22.ppath = exports22.npath = exports22.Filename = exports22.PortablePath = exports22.normalizeLineEndings = exports22.unwatchAllFiles = exports22.unwatchFile = exports22.watchFile = exports22.CustomDir = exports22.opendir = exports22.setupCopyIndex = exports22.statUtils = exports22.errors = exports22.constants = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var constants = tslib_12.__importStar(require_constants());
      exports22.constants = constants;
      var errors = tslib_12.__importStar(require_errors());
      exports22.errors = errors;
      var statUtils = tslib_12.__importStar(require_statUtils());
      exports22.statUtils = statUtils;
      var copyPromise_1 = require_copyPromise();
      Object.defineProperty(exports22, "setupCopyIndex", { enumerable: true, get: function() {
        return copyPromise_1.setupCopyIndex;
      } });
      var opendir_1 = require_opendir();
      Object.defineProperty(exports22, "opendir", { enumerable: true, get: function() {
        return opendir_1.opendir;
      } });
      Object.defineProperty(exports22, "CustomDir", { enumerable: true, get: function() {
        return opendir_1.CustomDir;
      } });
      var watchFile_1 = require_watchFile();
      Object.defineProperty(exports22, "watchFile", { enumerable: true, get: function() {
        return watchFile_1.watchFile;
      } });
      Object.defineProperty(exports22, "unwatchFile", { enumerable: true, get: function() {
        return watchFile_1.unwatchFile;
      } });
      Object.defineProperty(exports22, "unwatchAllFiles", { enumerable: true, get: function() {
        return watchFile_1.unwatchAllFiles;
      } });
      var FakeFS_1 = require_FakeFS();
      Object.defineProperty(exports22, "normalizeLineEndings", { enumerable: true, get: function() {
        return FakeFS_1.normalizeLineEndings;
      } });
      var path_1 = require_path();
      Object.defineProperty(exports22, "PortablePath", { enumerable: true, get: function() {
        return path_1.PortablePath;
      } });
      Object.defineProperty(exports22, "Filename", { enumerable: true, get: function() {
        return path_1.Filename;
      } });
      var path_2 = require_path();
      Object.defineProperty(exports22, "npath", { enumerable: true, get: function() {
        return path_2.npath;
      } });
      Object.defineProperty(exports22, "ppath", { enumerable: true, get: function() {
        return path_2.ppath;
      } });
      var AliasFS_1 = require_AliasFS();
      Object.defineProperty(exports22, "AliasFS", { enumerable: true, get: function() {
        return AliasFS_1.AliasFS;
      } });
      var FakeFS_2 = require_FakeFS();
      Object.defineProperty(exports22, "FakeFS", { enumerable: true, get: function() {
        return FakeFS_2.FakeFS;
      } });
      Object.defineProperty(exports22, "BasePortableFakeFS", { enumerable: true, get: function() {
        return FakeFS_2.BasePortableFakeFS;
      } });
      var CwdFS_1 = require_CwdFS();
      Object.defineProperty(exports22, "CwdFS", { enumerable: true, get: function() {
        return CwdFS_1.CwdFS;
      } });
      var JailFS_1 = require_JailFS();
      Object.defineProperty(exports22, "JailFS", { enumerable: true, get: function() {
        return JailFS_1.JailFS;
      } });
      var LazyFS_1 = require_LazyFS();
      Object.defineProperty(exports22, "LazyFS", { enumerable: true, get: function() {
        return LazyFS_1.LazyFS;
      } });
      var MountFS_1 = require_MountFS();
      Object.defineProperty(exports22, "MountFS", { enumerable: true, get: function() {
        return MountFS_1.MountFS;
      } });
      var NoFS_1 = require_NoFS();
      Object.defineProperty(exports22, "NoFS", { enumerable: true, get: function() {
        return NoFS_1.NoFS;
      } });
      var NodeFS_1 = require_NodeFS();
      Object.defineProperty(exports22, "NodeFS", { enumerable: true, get: function() {
        return NodeFS_1.NodeFS;
      } });
      var PosixFS_1 = require_PosixFS();
      Object.defineProperty(exports22, "PosixFS", { enumerable: true, get: function() {
        return PosixFS_1.PosixFS;
      } });
      var ProxiedFS_1 = require_ProxiedFS();
      Object.defineProperty(exports22, "ProxiedFS", { enumerable: true, get: function() {
        return ProxiedFS_1.ProxiedFS;
      } });
      var VirtualFS_1 = require_VirtualFS();
      Object.defineProperty(exports22, "VirtualFS", { enumerable: true, get: function() {
        return VirtualFS_1.VirtualFS;
      } });
      var patchFs_1 = require_patchFs();
      Object.defineProperty(exports22, "patchFs", { enumerable: true, get: function() {
        return patchFs_1.patchFs;
      } });
      Object.defineProperty(exports22, "extendFs", { enumerable: true, get: function() {
        return patchFs_1.extendFs;
      } });
      var xfs_1 = require_xfs();
      Object.defineProperty(exports22, "xfs", { enumerable: true, get: function() {
        return xfs_1.xfs;
      } });
    }
  });
  var require_windows = __commonJS2({
    "../../node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/windows.js"(exports22, module22) {
      module22.exports = isexe;
      isexe.sync = sync;
      var fs = __require("fs");
      function checkPathExt(path2, options) {
        var pathext = options.pathExt !== undefined ? options.pathExt : process.env.PATHEXT;
        if (!pathext) {
          return true;
        }
        pathext = pathext.split(";");
        if (pathext.indexOf("") !== -1) {
          return true;
        }
        for (var i = 0;i < pathext.length; i++) {
          var p = pathext[i].toLowerCase();
          if (p && path2.substr(-p.length).toLowerCase() === p) {
            return true;
          }
        }
        return false;
      }
      function checkStat(stat, path2, options) {
        if (!stat.isSymbolicLink() && !stat.isFile()) {
          return false;
        }
        return checkPathExt(path2, options);
      }
      function isexe(path2, options, cb) {
        fs.stat(path2, function(er, stat) {
          cb(er, er ? false : checkStat(stat, path2, options));
        });
      }
      function sync(path2, options) {
        return checkStat(fs.statSync(path2), path2, options);
      }
    }
  });
  var require_mode = __commonJS2({
    "../../node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/mode.js"(exports22, module22) {
      module22.exports = isexe;
      isexe.sync = sync;
      var fs = __require("fs");
      function isexe(path2, options, cb) {
        fs.stat(path2, function(er, stat) {
          cb(er, er ? false : checkStat(stat, options));
        });
      }
      function sync(path2, options) {
        return checkStat(fs.statSync(path2), options);
      }
      function checkStat(stat, options) {
        return stat.isFile() && checkMode(stat, options);
      }
      function checkMode(stat, options) {
        var mod = stat.mode;
        var uid = stat.uid;
        var gid = stat.gid;
        var myUid = options.uid !== undefined ? options.uid : process.getuid && process.getuid();
        var myGid = options.gid !== undefined ? options.gid : process.getgid && process.getgid();
        var u = parseInt("100", 8);
        var g = parseInt("010", 8);
        var o = parseInt("001", 8);
        var ug = u | g;
        var ret = mod & o || mod & g && gid === myGid || mod & u && uid === myUid || mod & ug && myUid === 0;
        return ret;
      }
    }
  });
  var require_isexe = __commonJS2({
    "../../node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/index.js"(exports22, module22) {
      var fs = __require("fs");
      var core;
      if (process.platform === "win32" || global.TESTING_WINDOWS) {
        core = require_windows();
      } else {
        core = require_mode();
      }
      module22.exports = isexe;
      isexe.sync = sync;
      function isexe(path2, options, cb) {
        if (typeof options === "function") {
          cb = options;
          options = {};
        }
        if (!cb) {
          if (typeof Promise !== "function") {
            throw new TypeError("callback not provided");
          }
          return new Promise(function(resolve, reject) {
            isexe(path2, options || {}, function(er, is) {
              if (er) {
                reject(er);
              } else {
                resolve(is);
              }
            });
          });
        }
        core(path2, options || {}, function(er, is) {
          if (er) {
            if (er.code === "EACCES" || options && options.ignoreErrors) {
              er = null;
              is = false;
            }
          }
          cb(er, is);
        });
      }
      function sync(path2, options) {
        try {
          return core.sync(path2, options || {});
        } catch (er) {
          if (options && options.ignoreErrors || er.code === "EACCES") {
            return false;
          } else {
            throw er;
          }
        }
      }
    }
  });
  var require_which = __commonJS2({
    "../../node_modules/.pnpm/which@2.0.2/node_modules/which/which.js"(exports22, module22) {
      var isWindows = process.platform === "win32" || process.env.OSTYPE === "cygwin" || process.env.OSTYPE === "msys";
      var path2 = __require("path");
      var COLON = isWindows ? ";" : ":";
      var isexe = require_isexe();
      var getNotFoundError = (cmd) => Object.assign(new Error(`not found: ${cmd}`), { code: "ENOENT" });
      var getPathInfo = (cmd, opt) => {
        const colon = opt.colon || COLON;
        const pathEnv = cmd.match(/\//) || isWindows && cmd.match(/\\/) ? [""] : [
          ...isWindows ? [process.cwd()] : [],
          ...(opt.path || process.env.PATH || "").split(colon)
        ];
        const pathExtExe = isWindows ? opt.pathExt || process.env.PATHEXT || ".EXE;.CMD;.BAT;.COM" : "";
        const pathExt = isWindows ? pathExtExe.split(colon) : [""];
        if (isWindows) {
          if (cmd.indexOf(".") !== -1 && pathExt[0] !== "")
            pathExt.unshift("");
        }
        return {
          pathEnv,
          pathExt,
          pathExtExe
        };
      };
      var which = (cmd, opt, cb) => {
        if (typeof opt === "function") {
          cb = opt;
          opt = {};
        }
        if (!opt)
          opt = {};
        const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);
        const found = [];
        const step = (i) => new Promise((resolve, reject) => {
          if (i === pathEnv.length)
            return opt.all && found.length ? resolve(found) : reject(getNotFoundError(cmd));
          const ppRaw = pathEnv[i];
          const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;
          const pCmd = path2.join(pathPart, cmd);
          const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;
          resolve(subStep(p, i, 0));
        });
        const subStep = (p, i, ii) => new Promise((resolve, reject) => {
          if (ii === pathExt.length)
            return resolve(step(i + 1));
          const ext = pathExt[ii];
          isexe(p + ext, { pathExt: pathExtExe }, (er, is) => {
            if (!er && is) {
              if (opt.all)
                found.push(p + ext);
              else
                return resolve(p + ext);
            }
            return resolve(subStep(p, i, ii + 1));
          });
        });
        return cb ? step(0).then((res) => cb(null, res), cb) : step(0);
      };
      var whichSync = (cmd, opt) => {
        opt = opt || {};
        const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);
        const found = [];
        for (let i = 0;i < pathEnv.length; i++) {
          const ppRaw = pathEnv[i];
          const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;
          const pCmd = path2.join(pathPart, cmd);
          const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;
          for (let j = 0;j < pathExt.length; j++) {
            const cur = p + pathExt[j];
            try {
              const is = isexe.sync(cur, { pathExt: pathExtExe });
              if (is) {
                if (opt.all)
                  found.push(cur);
                else
                  return cur;
              }
            } catch (ex) {
            }
          }
        }
        if (opt.all && found.length)
          return found;
        if (opt.nothrow)
          return null;
        throw getNotFoundError(cmd);
      };
      module22.exports = which;
      which.sync = whichSync;
    }
  });
  var require_path_key = __commonJS2({
    "../../node_modules/.pnpm/path-key@3.1.1/node_modules/path-key/index.js"(exports22, module22) {
      var pathKey = (options = {}) => {
        const environment = options.env || process.env;
        const platform = options.platform || process.platform;
        if (platform !== "win32") {
          return "PATH";
        }
        return Object.keys(environment).reverse().find((key) => key.toUpperCase() === "PATH") || "Path";
      };
      module22.exports = pathKey;
      module22.exports.default = pathKey;
    }
  });
  var require_resolveCommand = __commonJS2({
    "../../node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/util/resolveCommand.js"(exports22, module22) {
      var path2 = __require("path");
      var which = require_which();
      var getPathKey = require_path_key();
      function resolveCommandAttempt(parsed, withoutPathExt) {
        const env = parsed.options.env || process.env;
        const cwd = process.cwd();
        const hasCustomCwd = parsed.options.cwd != null;
        const shouldSwitchCwd = hasCustomCwd && process.chdir !== undefined && !process.chdir.disabled;
        if (shouldSwitchCwd) {
          try {
            process.chdir(parsed.options.cwd);
          } catch (err) {
          }
        }
        let resolved;
        try {
          resolved = which.sync(parsed.command, {
            path: env[getPathKey({ env })],
            pathExt: withoutPathExt ? path2.delimiter : undefined
          });
        } catch (e) {
        } finally {
          if (shouldSwitchCwd) {
            process.chdir(cwd);
          }
        }
        if (resolved) {
          resolved = path2.resolve(hasCustomCwd ? parsed.options.cwd : "", resolved);
        }
        return resolved;
      }
      function resolveCommand(parsed) {
        return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);
      }
      module22.exports = resolveCommand;
    }
  });
  var require_escape = __commonJS2({
    "../../node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/util/escape.js"(exports22, module22) {
      var metaCharsRegExp = /([()\][%!^"`<>&|;, *?])/g;
      function escapeCommand(arg) {
        arg = arg.replace(metaCharsRegExp, "^$1");
        return arg;
      }
      function escapeArgument(arg, doubleEscapeMetaChars) {
        arg = `${arg}`;
        arg = arg.replace(/(?=(\\+?)?)\1"/g, "$1$1\\\"");
        arg = arg.replace(/(?=(\\+?)?)\1$/, "$1$1");
        arg = `"${arg}"`;
        arg = arg.replace(metaCharsRegExp, "^$1");
        if (doubleEscapeMetaChars) {
          arg = arg.replace(metaCharsRegExp, "^$1");
        }
        return arg;
      }
      module22.exports.command = escapeCommand;
      module22.exports.argument = escapeArgument;
    }
  });
  var require_shebang_regex = __commonJS2({
    "../../node_modules/.pnpm/shebang-regex@3.0.0/node_modules/shebang-regex/index.js"(exports22, module22) {
      module22.exports = /^#!(.*)/;
    }
  });
  var require_shebang_command = __commonJS2({
    "../../node_modules/.pnpm/shebang-command@2.0.0/node_modules/shebang-command/index.js"(exports22, module22) {
      var shebangRegex = require_shebang_regex();
      module22.exports = (string = "") => {
        const match = string.match(shebangRegex);
        if (!match) {
          return null;
        }
        const [path2, argument] = match[0].replace(/#! ?/, "").split(" ");
        const binary = path2.split("/").pop();
        if (binary === "env") {
          return argument;
        }
        return argument ? `${binary} ${argument}` : binary;
      };
    }
  });
  var require_readShebang = __commonJS2({
    "../../node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/util/readShebang.js"(exports22, module22) {
      var fs = __require("fs");
      var shebangCommand = require_shebang_command();
      function readShebang(command) {
        const size = 150;
        const buffer = Buffer.alloc(size);
        let fd;
        try {
          fd = fs.openSync(command, "r");
          fs.readSync(fd, buffer, 0, size, 0);
          fs.closeSync(fd);
        } catch (e) {
        }
        return shebangCommand(buffer.toString());
      }
      module22.exports = readShebang;
    }
  });
  var require_parse = __commonJS2({
    "../../node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/parse.js"(exports22, module22) {
      var path2 = __require("path");
      var resolveCommand = require_resolveCommand();
      var escape = require_escape();
      var readShebang = require_readShebang();
      var isWin = process.platform === "win32";
      var isExecutableRegExp = /\.(?:com|exe)$/i;
      var isCmdShimRegExp = /node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i;
      function detectShebang(parsed) {
        parsed.file = resolveCommand(parsed);
        const shebang = parsed.file && readShebang(parsed.file);
        if (shebang) {
          parsed.args.unshift(parsed.file);
          parsed.command = shebang;
          return resolveCommand(parsed);
        }
        return parsed.file;
      }
      function parseNonShell(parsed) {
        if (!isWin) {
          return parsed;
        }
        const commandFile = detectShebang(parsed);
        const needsShell = !isExecutableRegExp.test(commandFile);
        if (parsed.options.forceShell || needsShell) {
          const needsDoubleEscapeMetaChars = isCmdShimRegExp.test(commandFile);
          parsed.command = path2.normalize(parsed.command);
          parsed.command = escape.command(parsed.command);
          parsed.args = parsed.args.map((arg) => escape.argument(arg, needsDoubleEscapeMetaChars));
          const shellCommand = [parsed.command].concat(parsed.args).join(" ");
          parsed.args = ["/d", "/s", "/c", `"${shellCommand}"`];
          parsed.command = process.env.comspec || "cmd.exe";
          parsed.options.windowsVerbatimArguments = true;
        }
        return parsed;
      }
      function parse(command, args, options) {
        if (args && !Array.isArray(args)) {
          options = args;
          args = null;
        }
        args = args ? args.slice(0) : [];
        options = Object.assign({}, options);
        const parsed = {
          command,
          args,
          options,
          file: undefined,
          original: {
            command,
            args
          }
        };
        return options.shell ? parsed : parseNonShell(parsed);
      }
      module22.exports = parse;
    }
  });
  var require_enoent = __commonJS2({
    "../../node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/enoent.js"(exports22, module22) {
      var isWin = process.platform === "win32";
      function notFoundError(original, syscall) {
        return Object.assign(new Error(`${syscall} ${original.command} ENOENT`), {
          code: "ENOENT",
          errno: "ENOENT",
          syscall: `${syscall} ${original.command}`,
          path: original.command,
          spawnargs: original.args
        });
      }
      function hookChildProcess(cp, parsed) {
        if (!isWin) {
          return;
        }
        const originalEmit = cp.emit;
        cp.emit = function(name, arg1) {
          if (name === "exit") {
            const err = verifyENOENT(arg1, parsed);
            if (err) {
              return originalEmit.call(cp, "error", err);
            }
          }
          return originalEmit.apply(cp, arguments);
        };
      }
      function verifyENOENT(status, parsed) {
        if (isWin && status === 1 && !parsed.file) {
          return notFoundError(parsed.original, "spawn");
        }
        return null;
      }
      function verifyENOENTSync(status, parsed) {
        if (isWin && status === 1 && !parsed.file) {
          return notFoundError(parsed.original, "spawnSync");
        }
        return null;
      }
      module22.exports = {
        hookChildProcess,
        verifyENOENT,
        verifyENOENTSync,
        notFoundError
      };
    }
  });
  var require_cross_spawn = __commonJS2({
    "../../node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/index.js"(exports22, module22) {
      var cp = __require("child_process");
      var parse = require_parse();
      var enoent = require_enoent();
      function spawn(command, args, options) {
        const parsed = parse(command, args, options);
        const spawned = cp.spawn(parsed.command, parsed.args, parsed.options);
        enoent.hookChildProcess(spawned, parsed);
        return spawned;
      }
      function spawnSync(command, args, options) {
        const parsed = parse(command, args, options);
        const result2 = cp.spawnSync(parsed.command, parsed.args, parsed.options);
        result2.error = result2.error || enoent.verifyENOENTSync(result2.status, parsed);
        return result2;
      }
      module22.exports = spawn;
      module22.exports.spawn = spawn;
      module22.exports.sync = spawnSync;
      module22.exports._parse = parse;
      module22.exports._enoent = enoent;
    }
  });
  var require_shell = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+parsers@3.0.2/node_modules/@yarnpkg/parsers/lib/grammars/shell.js"(exports22, module22) {
      function peg$subclass(child, parent) {
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
      }
      function peg$SyntaxError(message, expected, found, location) {
        this.message = message;
        this.expected = expected;
        this.found = found;
        this.location = location;
        this.name = "SyntaxError";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, peg$SyntaxError);
        }
      }
      peg$subclass(peg$SyntaxError, Error);
      peg$SyntaxError.buildMessage = function(expected, found) {
        var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return '"' + literalEscape(expectation.text) + '"';
          },
          class: function(expectation) {
            var escapedParts = "", i;
            for (i = 0;i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);
            }
            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },
          any: function(expectation) {
            return "any character";
          },
          end: function(expectation) {
            return "end of input";
          },
          other: function(expectation) {
            return expectation.description;
          }
        };
        function hex(ch) {
          return ch.charCodeAt(0).toString(16).toUpperCase();
        }
        function literalEscape(s) {
          return s.replace(/\\/g, "\\\\").replace(/"/g, "\\\"").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
            return "\\x0" + hex(ch);
          }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
            return "\\x" + hex(ch);
          });
        }
        function classEscape(s) {
          return s.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
            return "\\x0" + hex(ch);
          }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
            return "\\x" + hex(ch);
          });
        }
        function describeExpectation(expectation) {
          return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
        }
        function describeExpected(expected2) {
          var descriptions = new Array(expected2.length), i, j;
          for (i = 0;i < expected2.length; i++) {
            descriptions[i] = describeExpectation(expected2[i]);
          }
          descriptions.sort();
          if (descriptions.length > 0) {
            for (i = 1, j = 1;i < descriptions.length; i++) {
              if (descriptions[i - 1] !== descriptions[i]) {
                descriptions[j] = descriptions[i];
                j++;
              }
            }
            descriptions.length = j;
          }
          switch (descriptions.length) {
            case 1:
              return descriptions[0];
            case 2:
              return descriptions[0] + " or " + descriptions[1];
            default:
              return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
          }
        }
        function describeFound(found2) {
          return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
        }
        return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
      };
      function peg$parse(input, options) {
        options = options !== undefined ? options : {};
        var peg$FAILED = {}, peg$startRuleFunctions = { Start: peg$parseStart }, peg$startRuleFunction = peg$parseStart, peg$c0 = function(line) {
          return line ? line : [];
        }, peg$c1 = function(command, type, then) {
          return [{ command, type }].concat(then || []);
        }, peg$c2 = function(command, type) {
          return [{ command, type: type || ";" }];
        }, peg$c3 = function(then) {
          return then;
        }, peg$c4 = ";", peg$c5 = peg$literalExpectation(";", false), peg$c6 = "&", peg$c7 = peg$literalExpectation("&", false), peg$c8 = function(chain, then) {
          return then ? { chain, then } : { chain };
        }, peg$c9 = function(type, then) {
          return { type, line: then };
        }, peg$c10 = "&&", peg$c11 = peg$literalExpectation("&&", false), peg$c12 = "||", peg$c13 = peg$literalExpectation("||", false), peg$c14 = function(main2, then) {
          return then ? { ...main2, then } : main2;
        }, peg$c15 = function(type, then) {
          return { type, chain: then };
        }, peg$c16 = "|&", peg$c17 = peg$literalExpectation("|&", false), peg$c18 = "|", peg$c19 = peg$literalExpectation("|", false), peg$c20 = "=", peg$c21 = peg$literalExpectation("=", false), peg$c22 = function(name, arg) {
          return { name, args: [arg] };
        }, peg$c23 = function(name) {
          return { name, args: [] };
        }, peg$c24 = "(", peg$c25 = peg$literalExpectation("(", false), peg$c26 = ")", peg$c27 = peg$literalExpectation(")", false), peg$c28 = function(subshell, args) {
          return { type: `subshell`, subshell, args };
        }, peg$c29 = "{", peg$c30 = peg$literalExpectation("{", false), peg$c31 = "}", peg$c32 = peg$literalExpectation("}", false), peg$c33 = function(group, args) {
          return { type: `group`, group, args };
        }, peg$c34 = function(envs, args) {
          return { type: `command`, args, envs };
        }, peg$c35 = function(envs) {
          return { type: `envs`, envs };
        }, peg$c36 = function(args) {
          return args;
        }, peg$c37 = function(arg) {
          return arg;
        }, peg$c38 = /^[0-9]/, peg$c39 = peg$classExpectation([["0", "9"]], false, false), peg$c40 = function(fd, redirect, arg) {
          return { type: `redirection`, subtype: redirect, fd: fd !== null ? parseInt(fd) : null, args: [arg] };
        }, peg$c41 = ">>", peg$c42 = peg$literalExpectation(">>", false), peg$c43 = ">&", peg$c44 = peg$literalExpectation(">&", false), peg$c45 = ">", peg$c46 = peg$literalExpectation(">", false), peg$c47 = "<<<", peg$c48 = peg$literalExpectation("<<<", false), peg$c49 = "<&", peg$c50 = peg$literalExpectation("<&", false), peg$c51 = "<", peg$c52 = peg$literalExpectation("<", false), peg$c53 = function(segments) {
          return { type: `argument`, segments: [].concat(...segments) };
        }, peg$c54 = function(string) {
          return string;
        }, peg$c55 = "$'", peg$c56 = peg$literalExpectation("$'", false), peg$c57 = "'", peg$c58 = peg$literalExpectation("'", false), peg$c59 = function(text2) {
          return [{ type: `text`, text: text2 }];
        }, peg$c60 = '""', peg$c61 = peg$literalExpectation('""', false), peg$c62 = function() {
          return { type: `text`, text: `` };
        }, peg$c63 = '"', peg$c64 = peg$literalExpectation('"', false), peg$c65 = function(segments) {
          return segments;
        }, peg$c66 = function(arithmetic) {
          return { type: `arithmetic`, arithmetic, quoted: true };
        }, peg$c67 = function(shell) {
          return { type: `shell`, shell, quoted: true };
        }, peg$c68 = function(variable) {
          return { type: `variable`, ...variable, quoted: true };
        }, peg$c69 = function(text2) {
          return { type: `text`, text: text2 };
        }, peg$c70 = function(arithmetic) {
          return { type: `arithmetic`, arithmetic, quoted: false };
        }, peg$c71 = function(shell) {
          return { type: `shell`, shell, quoted: false };
        }, peg$c72 = function(variable) {
          return { type: `variable`, ...variable, quoted: false };
        }, peg$c73 = function(pattern) {
          return { type: `glob`, pattern };
        }, peg$c74 = /^[^']/, peg$c75 = peg$classExpectation(["'"], true, false), peg$c76 = function(chars) {
          return chars.join(``);
        }, peg$c77 = /^[^$"]/, peg$c78 = peg$classExpectation(["$", '"'], true, false), peg$c79 = "\\\n", peg$c80 = peg$literalExpectation("\\\n", false), peg$c81 = function() {
          return ``;
        }, peg$c82 = "\\", peg$c83 = peg$literalExpectation("\\", false), peg$c84 = /^[\\$"`]/, peg$c85 = peg$classExpectation(["\\", "$", '"', "`"], false, false), peg$c86 = function(c) {
          return c;
        }, peg$c87 = "\\a", peg$c88 = peg$literalExpectation("\\a", false), peg$c89 = function() {
          return "a";
        }, peg$c90 = "\\b", peg$c91 = peg$literalExpectation("\\b", false), peg$c92 = function() {
          return "\b";
        }, peg$c93 = /^[Ee]/, peg$c94 = peg$classExpectation(["E", "e"], false, false), peg$c95 = function() {
          return "\x1B";
        }, peg$c96 = "\\f", peg$c97 = peg$literalExpectation("\\f", false), peg$c98 = function() {
          return "\f";
        }, peg$c99 = "\\n", peg$c100 = peg$literalExpectation("\\n", false), peg$c101 = function() {
          return `
`;
        }, peg$c102 = "\\r", peg$c103 = peg$literalExpectation("\\r", false), peg$c104 = function() {
          return "\r";
        }, peg$c105 = "\\t", peg$c106 = peg$literalExpectation("\\t", false), peg$c107 = function() {
          return "\t";
        }, peg$c108 = "\\v", peg$c109 = peg$literalExpectation("\\v", false), peg$c110 = function() {
          return "\v";
        }, peg$c111 = /^[\\'"?]/, peg$c112 = peg$classExpectation(["\\", "'", '"', "?"], false, false), peg$c113 = function(c) {
          return String.fromCharCode(parseInt(c, 16));
        }, peg$c114 = "\\x", peg$c115 = peg$literalExpectation("\\x", false), peg$c116 = "\\u", peg$c117 = peg$literalExpectation("\\u", false), peg$c118 = "\\U", peg$c119 = peg$literalExpectation("\\U", false), peg$c120 = function(c) {
          return String.fromCodePoint(parseInt(c, 16));
        }, peg$c121 = /^[0-7]/, peg$c122 = peg$classExpectation([["0", "7"]], false, false), peg$c123 = /^[0-9a-fA-f]/, peg$c124 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "f"]], false, false), peg$c125 = peg$anyExpectation(), peg$c126 = "{}", peg$c127 = peg$literalExpectation("{}", false), peg$c128 = function() {
          return "{}";
        }, peg$c129 = "-", peg$c130 = peg$literalExpectation("-", false), peg$c131 = "+", peg$c132 = peg$literalExpectation("+", false), peg$c133 = ".", peg$c134 = peg$literalExpectation(".", false), peg$c135 = function(sign, left, right) {
          return { type: `number`, value: (sign === "-" ? -1 : 1) * parseFloat(left.join(``) + `.` + right.join(``)) };
        }, peg$c136 = function(sign, value) {
          return { type: `number`, value: (sign === "-" ? -1 : 1) * parseInt(value.join(``)) };
        }, peg$c137 = function(variable) {
          return { type: `variable`, ...variable };
        }, peg$c138 = function(name) {
          return { type: `variable`, name };
        }, peg$c139 = function(value) {
          return value;
        }, peg$c140 = "*", peg$c141 = peg$literalExpectation("*", false), peg$c142 = "/", peg$c143 = peg$literalExpectation("/", false), peg$c144 = function(left, op, right) {
          return { type: op === `*` ? `multiplication` : `division`, right };
        }, peg$c145 = function(left, rest) {
          return rest.reduce((left2, right) => ({ left: left2, ...right }), left);
        }, peg$c146 = function(left, op, right) {
          return { type: op === `+` ? `addition` : `subtraction`, right };
        }, peg$c147 = "$((", peg$c148 = peg$literalExpectation("$((", false), peg$c149 = "))", peg$c150 = peg$literalExpectation("))", false), peg$c151 = function(arithmetic) {
          return arithmetic;
        }, peg$c152 = "$(", peg$c153 = peg$literalExpectation("$(", false), peg$c154 = function(command) {
          return command;
        }, peg$c155 = "${", peg$c156 = peg$literalExpectation("${", false), peg$c157 = ":-", peg$c158 = peg$literalExpectation(":-", false), peg$c159 = function(name, arg) {
          return { name, defaultValue: arg };
        }, peg$c160 = ":-}", peg$c161 = peg$literalExpectation(":-}", false), peg$c162 = function(name) {
          return { name, defaultValue: [] };
        }, peg$c163 = ":+", peg$c164 = peg$literalExpectation(":+", false), peg$c165 = function(name, arg) {
          return { name, alternativeValue: arg };
        }, peg$c166 = ":+}", peg$c167 = peg$literalExpectation(":+}", false), peg$c168 = function(name) {
          return { name, alternativeValue: [] };
        }, peg$c169 = function(name) {
          return { name };
        }, peg$c170 = "$", peg$c171 = peg$literalExpectation("$", false), peg$c172 = function(pattern) {
          return options.isGlobPattern(pattern);
        }, peg$c173 = function(pattern) {
          return pattern;
        }, peg$c174 = /^[a-zA-Z0-9_]/, peg$c175 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false), peg$c176 = function() {
          return text();
        }, peg$c177 = /^[$@*?#a-zA-Z0-9_\-]/, peg$c178 = peg$classExpectation(["$", "@", "*", "?", "#", ["a", "z"], ["A", "Z"], ["0", "9"], "_", "-"], false, false), peg$c179 = /^[()}<>$|&; \t"']/, peg$c180 = peg$classExpectation(["(", ")", "}", "<", ">", "$", "|", "&", ";", " ", "\t", '"', "'"], false, false), peg$c181 = /^[<>&; \t"']/, peg$c182 = peg$classExpectation(["<", ">", "&", ";", " ", "\t", '"', "'"], false, false), peg$c183 = /^[ \t]/, peg$c184 = peg$classExpectation([" ", "\t"], false, false), peg$currPos = 0, peg$savedPos = 0, peg$posDetailsCache = [{ line: 1, column: 1 }], peg$maxFailPos = 0, peg$maxFailExpected = [], peg$silentFails = 0, peg$result;
        if ("startRule" in options) {
          if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error(`Can't start parsing from rule "` + options.startRule + '".');
          }
          peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }
        function text() {
          return input.substring(peg$savedPos, peg$currPos);
        }
        function location() {
          return peg$computeLocation(peg$savedPos, peg$currPos);
        }
        function expected(description, location2) {
          location2 = location2 !== undefined ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
          throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location2);
        }
        function error(message, location2) {
          location2 = location2 !== undefined ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
          throw peg$buildSimpleError(message, location2);
        }
        function peg$literalExpectation(text2, ignoreCase) {
          return { type: "literal", text: text2, ignoreCase };
        }
        function peg$classExpectation(parts, inverted, ignoreCase) {
          return { type: "class", parts, inverted, ignoreCase };
        }
        function peg$anyExpectation() {
          return { type: "any" };
        }
        function peg$endExpectation() {
          return { type: "end" };
        }
        function peg$otherExpectation(description) {
          return { type: "other", description };
        }
        function peg$computePosDetails(pos) {
          var details = peg$posDetailsCache[pos], p;
          if (details) {
            return details;
          } else {
            p = pos - 1;
            while (!peg$posDetailsCache[p]) {
              p--;
            }
            details = peg$posDetailsCache[p];
            details = {
              line: details.line,
              column: details.column
            };
            while (p < pos) {
              if (input.charCodeAt(p) === 10) {
                details.line++;
                details.column = 1;
              } else {
                details.column++;
              }
              p++;
            }
            peg$posDetailsCache[pos] = details;
            return details;
          }
        }
        function peg$computeLocation(startPos, endPos) {
          var startPosDetails = peg$computePosDetails(startPos), endPosDetails = peg$computePosDetails(endPos);
          return {
            start: {
              offset: startPos,
              line: startPosDetails.line,
              column: startPosDetails.column
            },
            end: {
              offset: endPos,
              line: endPosDetails.line,
              column: endPosDetails.column
            }
          };
        }
        function peg$fail(expected2) {
          if (peg$currPos < peg$maxFailPos) {
            return;
          }
          if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
          }
          peg$maxFailExpected.push(expected2);
        }
        function peg$buildSimpleError(message, location2) {
          return new peg$SyntaxError(message, null, null, location2);
        }
        function peg$buildStructuredError(expected2, found, location2) {
          return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected2, found), expected2, found, location2);
        }
        function peg$parseStart() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseS();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseS();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseShellLine();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c0(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseShellLine() {
          var s0, s1, s2, s3, s4;
          s0 = peg$currPos;
          s1 = peg$parseCommandLine();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseS();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseS();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseShellLineType();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseShellLineThen();
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c1(s1, s3, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseCommandLine();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parseS();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseS();
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseShellLineType();
                if (s3 === peg$FAILED) {
                  s3 = null;
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c2(s1, s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
          return s0;
        }
        function peg$parseShellLineThen() {
          var s0, s1, s2, s3, s4;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseS();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseS();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseShellLine();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseS();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseS();
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c3(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseShellLineType() {
          var s0;
          if (input.charCodeAt(peg$currPos) === 59) {
            s0 = peg$c4;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c5);
            }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 38) {
              s0 = peg$c6;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c7);
              }
            }
          }
          return s0;
        }
        function peg$parseCommandLine() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = peg$parseCommandChain();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseCommandLineThen();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c8(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseCommandLineThen() {
          var s0, s1, s2, s3, s4, s5, s6;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseS();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseS();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseCommandLineType();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseS();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseS();
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseCommandLine();
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  s6 = peg$parseS();
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parseS();
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c9(s2, s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseCommandLineType() {
          var s0;
          if (input.substr(peg$currPos, 2) === peg$c10) {
            s0 = peg$c10;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c11);
            }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c12) {
              s0 = peg$c12;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c13);
              }
            }
          }
          return s0;
        }
        function peg$parseCommandChain() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = peg$parseCommand();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseCommandChainThen();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c14(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseCommandChainThen() {
          var s0, s1, s2, s3, s4, s5, s6;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseS();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseS();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseCommandChainType();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseS();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseS();
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseCommandChain();
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  s6 = peg$parseS();
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parseS();
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c15(s2, s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseCommandChainType() {
          var s0;
          if (input.substr(peg$currPos, 2) === peg$c16) {
            s0 = peg$c16;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c17);
            }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 124) {
              s0 = peg$c18;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c19);
              }
            }
          }
          return s0;
        }
        function peg$parseVariableAssignment() {
          var s0, s1, s2, s3, s4, s5;
          s0 = peg$currPos;
          s1 = peg$parseEnvVariable();
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s2 = peg$c20;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c21);
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseStrictValueArgument();
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parseS();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseS();
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c22(s1, s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseEnvVariable();
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s2 = peg$c20;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c21);
                }
              }
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parseS();
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parseS();
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c23(s1);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
          return s0;
        }
        function peg$parseCommand() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseS();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseS();
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s2 = peg$c24;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c25);
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseS();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseS();
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseShellLine();
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  s6 = peg$parseS();
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parseS();
                  }
                  if (s5 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s6 = peg$c26;
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c27);
                      }
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = [];
                      s8 = peg$parseS();
                      while (s8 !== peg$FAILED) {
                        s7.push(s8);
                        s8 = peg$parseS();
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = [];
                        s9 = peg$parseRedirectArgument();
                        while (s9 !== peg$FAILED) {
                          s8.push(s9);
                          s9 = peg$parseRedirectArgument();
                        }
                        if (s8 !== peg$FAILED) {
                          s9 = [];
                          s10 = peg$parseS();
                          while (s10 !== peg$FAILED) {
                            s9.push(s10);
                            s10 = peg$parseS();
                          }
                          if (s9 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c28(s4, s8);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseS();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parseS();
            }
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s2 = peg$c29;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c30);
                }
              }
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parseS();
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parseS();
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseShellLine();
                  if (s4 !== peg$FAILED) {
                    s5 = [];
                    s6 = peg$parseS();
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      s6 = peg$parseS();
                    }
                    if (s5 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s6 = peg$c31;
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c32);
                        }
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = [];
                        s8 = peg$parseS();
                        while (s8 !== peg$FAILED) {
                          s7.push(s8);
                          s8 = peg$parseS();
                        }
                        if (s7 !== peg$FAILED) {
                          s8 = [];
                          s9 = peg$parseRedirectArgument();
                          while (s9 !== peg$FAILED) {
                            s8.push(s9);
                            s9 = peg$parseRedirectArgument();
                          }
                          if (s8 !== peg$FAILED) {
                            s9 = [];
                            s10 = peg$parseS();
                            while (s10 !== peg$FAILED) {
                              s9.push(s10);
                              s10 = peg$parseS();
                            }
                            if (s9 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c33(s4, s8);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = [];
              s2 = peg$parseS();
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parseS();
              }
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseVariableAssignment();
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parseVariableAssignment();
                }
                if (s2 !== peg$FAILED) {
                  s3 = [];
                  s4 = peg$parseS();
                  while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$parseS();
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$parseArgument();
                    if (s5 !== peg$FAILED) {
                      while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        s5 = peg$parseArgument();
                      }
                    } else {
                      s4 = peg$FAILED;
                    }
                    if (s4 !== peg$FAILED) {
                      s5 = [];
                      s6 = peg$parseS();
                      while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        s6 = peg$parseS();
                      }
                      if (s5 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c34(s2, s4);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parseS();
                while (s2 !== peg$FAILED) {
                  s1.push(s2);
                  s2 = peg$parseS();
                }
                if (s1 !== peg$FAILED) {
                  s2 = [];
                  s3 = peg$parseVariableAssignment();
                  if (s3 !== peg$FAILED) {
                    while (s3 !== peg$FAILED) {
                      s2.push(s3);
                      s3 = peg$parseVariableAssignment();
                    }
                  } else {
                    s2 = peg$FAILED;
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parseS();
                    while (s4 !== peg$FAILED) {
                      s3.push(s4);
                      s4 = peg$parseS();
                    }
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c35(s2);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
          return s0;
        }
        function peg$parseCommandString() {
          var s0, s1, s2, s3, s4;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseS();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseS();
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseValueArgument();
            if (s3 !== peg$FAILED) {
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseValueArgument();
              }
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseS();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseS();
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c36(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseArgument() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseS();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseS();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseRedirectArgument();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c37(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseS();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parseS();
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseValueArgument();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c37(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
          return s0;
        }
        function peg$parseRedirectArgument() {
          var s0, s1, s2, s3, s4;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseS();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseS();
          }
          if (s1 !== peg$FAILED) {
            if (peg$c38.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c39);
              }
            }
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseRedirectType();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseValueArgument();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c40(s2, s3, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseRedirectType() {
          var s0;
          if (input.substr(peg$currPos, 2) === peg$c41) {
            s0 = peg$c41;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c42);
            }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c43) {
              s0 = peg$c43;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c44);
              }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 62) {
                s0 = peg$c45;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c46);
                }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c47) {
                  s0 = peg$c47;
                  peg$currPos += 3;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c48);
                  }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c49) {
                    s0 = peg$c49;
                    peg$currPos += 2;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c50);
                    }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 60) {
                      s0 = peg$c51;
                      peg$currPos++;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c52);
                      }
                    }
                  }
                }
              }
            }
          }
          return s0;
        }
        function peg$parseValueArgument() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseS();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseS();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseStrictValueArgument();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c37(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseStrictValueArgument() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseArgumentSegment();
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parseArgumentSegment();
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c53(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parseArgumentSegment() {
          var s0, s1;
          s0 = peg$currPos;
          s1 = peg$parseCQuoteString();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c54(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseSglQuoteString();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c54(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseDblQuoteString();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c54(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsePlainString();
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c54(s1);
                }
                s0 = s1;
              }
            }
          }
          return s0;
        }
        function peg$parseCQuoteString() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c55) {
            s1 = peg$c55;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c56);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseCQuoteStringText();
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 39) {
                s3 = peg$c57;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c58);
                }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c59(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseSglQuoteString() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 39) {
            s1 = peg$c57;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c58);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseSglQuoteStringText();
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 39) {
                s3 = peg$c57;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c58);
                }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c59(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseDblQuoteString() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c60) {
            s1 = peg$c60;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c61);
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c62();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 34) {
              s1 = peg$c63;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c64);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parseDblQuoteStringSegment();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseDblQuoteStringSegment();
              }
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 34) {
                  s3 = peg$c63;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c64);
                  }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c65(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
          return s0;
        }
        function peg$parsePlainString() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsePlainStringSegment();
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parsePlainStringSegment();
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c65(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parseDblQuoteStringSegment() {
          var s0, s1;
          s0 = peg$currPos;
          s1 = peg$parseArithmetic();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c66(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseSubshell();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c67(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseVariable();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c68(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseDblQuoteStringText();
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c69(s1);
                }
                s0 = s1;
              }
            }
          }
          return s0;
        }
        function peg$parsePlainStringSegment() {
          var s0, s1;
          s0 = peg$currPos;
          s1 = peg$parseArithmetic();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c70(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseSubshell();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c71(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseVariable();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c72(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseGlob();
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c73(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parsePlainStringText();
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c69(s1);
                  }
                  s0 = s1;
                }
              }
            }
          }
          return s0;
        }
        function peg$parseSglQuoteStringText() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          if (peg$c74.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c75);
            }
          }
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$c74.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c75);
              }
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c76(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parseDblQuoteStringText() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseDblQuoteEscapedChar();
          if (s2 === peg$FAILED) {
            if (peg$c77.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c78);
              }
            }
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parseDblQuoteEscapedChar();
              if (s2 === peg$FAILED) {
                if (peg$c77.test(input.charAt(peg$currPos))) {
                  s2 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c78);
                  }
                }
              }
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c76(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parseDblQuoteEscapedChar() {
          var s0, s1, s2;
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c79) {
            s1 = peg$c79;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c80);
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c81();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
              s1 = peg$c82;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c83);
              }
            }
            if (s1 !== peg$FAILED) {
              if (peg$c84.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c85);
                }
              }
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c86(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
          return s0;
        }
        function peg$parseCQuoteStringText() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseCQuoteEscapedChar();
          if (s2 === peg$FAILED) {
            if (peg$c74.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c75);
              }
            }
          }
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseCQuoteEscapedChar();
            if (s2 === peg$FAILED) {
              if (peg$c74.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c75);
                }
              }
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c76(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parseCQuoteEscapedChar() {
          var s0, s1, s2;
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c87) {
            s1 = peg$c87;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c88);
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c89();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c90) {
              s1 = peg$c90;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c91);
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c92();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 92) {
                s1 = peg$c82;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c83);
                }
              }
              if (s1 !== peg$FAILED) {
                if (peg$c93.test(input.charAt(peg$currPos))) {
                  s2 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c94);
                  }
                }
                if (s2 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c95();
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c96) {
                  s1 = peg$c96;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c97);
                  }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c98();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c99) {
                    s1 = peg$c99;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c100);
                    }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c101();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c102) {
                      s1 = peg$c102;
                      peg$currPos += 2;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c103);
                      }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c104();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 2) === peg$c105) {
                        s1 = peg$c105;
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c106);
                        }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c107();
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 2) === peg$c108) {
                          s1 = peg$c108;
                          peg$currPos += 2;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c109);
                          }
                        }
                        if (s1 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c110();
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 92) {
                            s1 = peg$c82;
                            peg$currPos++;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c83);
                            }
                          }
                          if (s1 !== peg$FAILED) {
                            if (peg$c111.test(input.charAt(peg$currPos))) {
                              s2 = input.charAt(peg$currPos);
                              peg$currPos++;
                            } else {
                              s2 = peg$FAILED;
                              if (peg$silentFails === 0) {
                                peg$fail(peg$c112);
                              }
                            }
                            if (s2 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c86(s2);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseHexCodeString();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          return s0;
        }
        function peg$parseHexCodeString() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s1 = peg$c82;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c83);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseHexCodeChar0();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c113(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c114) {
              s1 = peg$c114;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c115);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$currPos;
              s4 = peg$parseHexCodeChar0();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseHexCodeChar();
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 === peg$FAILED) {
                s3 = peg$parseHexCodeChar0();
              }
              if (s3 !== peg$FAILED) {
                s2 = input.substring(s2, peg$currPos);
              } else {
                s2 = s3;
              }
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c113(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c116) {
                s1 = peg$c116;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c117);
                }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$currPos;
                s4 = peg$parseHexCodeChar();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseHexCodeChar();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseHexCodeChar();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseHexCodeChar();
                      if (s7 !== peg$FAILED) {
                        s4 = [s4, s5, s6, s7];
                        s3 = s4;
                      } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  s2 = input.substring(s2, peg$currPos);
                } else {
                  s2 = s3;
                }
                if (s2 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c113(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c118) {
                  s1 = peg$c118;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c119);
                  }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$currPos;
                  s3 = peg$currPos;
                  s4 = peg$parseHexCodeChar();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseHexCodeChar();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parseHexCodeChar();
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parseHexCodeChar();
                        if (s7 !== peg$FAILED) {
                          s8 = peg$parseHexCodeChar();
                          if (s8 !== peg$FAILED) {
                            s9 = peg$parseHexCodeChar();
                            if (s9 !== peg$FAILED) {
                              s10 = peg$parseHexCodeChar();
                              if (s10 !== peg$FAILED) {
                                s11 = peg$parseHexCodeChar();
                                if (s11 !== peg$FAILED) {
                                  s4 = [s4, s5, s6, s7, s8, s9, s10, s11];
                                  s3 = s4;
                                } else {
                                  peg$currPos = s3;
                                  s3 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s3;
                              s3 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s3;
                          s3 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                  if (s3 !== peg$FAILED) {
                    s2 = input.substring(s2, peg$currPos);
                  } else {
                    s2 = s3;
                  }
                  if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c120(s2);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
          return s0;
        }
        function peg$parseHexCodeChar0() {
          var s0;
          if (peg$c121.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c122);
            }
          }
          return s0;
        }
        function peg$parseHexCodeChar() {
          var s0;
          if (peg$c123.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c124);
            }
          }
          return s0;
        }
        function peg$parsePlainStringText() {
          var s0, s1, s2, s3, s4;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s3 = peg$c82;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c83);
            }
          }
          if (s3 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c125);
              }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s2;
              s3 = peg$c86(s4);
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c126) {
              s3 = peg$c126;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c127);
              }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s2;
              s3 = peg$c128();
            }
            s2 = s3;
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$currPos;
              peg$silentFails++;
              s4 = peg$parseSpecialShellChars();
              peg$silentFails--;
              if (s4 === peg$FAILED) {
                s3 = undefined;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c125);
                  }
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$c86(s4);
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            }
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 92) {
                s3 = peg$c82;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c83);
                }
              }
              if (s3 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c125);
                  }
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$c86(s4);
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c126) {
                  s3 = peg$c126;
                  peg$currPos += 2;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c127);
                  }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$c128();
                }
                s2 = s3;
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  s3 = peg$currPos;
                  peg$silentFails++;
                  s4 = peg$parseSpecialShellChars();
                  peg$silentFails--;
                  if (s4 === peg$FAILED) {
                    s3 = undefined;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                  if (s3 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                      s4 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c125);
                      }
                    }
                    if (s4 !== peg$FAILED) {
                      peg$savedPos = s2;
                      s3 = peg$c86(s4);
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                }
              }
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c76(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parseArithmeticPrimary() {
          var s0, s1, s2, s3, s4, s5;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 45) {
            s1 = peg$c129;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c130);
            }
          }
          if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 43) {
              s1 = peg$c131;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c132);
              }
            }
          }
          if (s1 === peg$FAILED) {
            s1 = null;
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            if (peg$c38.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c39);
              }
            }
            if (s3 !== peg$FAILED) {
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                if (peg$c38.test(input.charAt(peg$currPos))) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c39);
                  }
                }
              }
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s3 = peg$c133;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c134);
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                if (peg$c38.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c39);
                  }
                }
                if (s5 !== peg$FAILED) {
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    if (peg$c38.test(input.charAt(peg$currPos))) {
                      s5 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c39);
                      }
                    }
                  }
                } else {
                  s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c135(s1, s2, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 45) {
              s1 = peg$c129;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c130);
              }
            }
            if (s1 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 43) {
                s1 = peg$c131;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c132);
                }
              }
            }
            if (s1 === peg$FAILED) {
              s1 = null;
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              if (peg$c38.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c39);
                }
              }
              if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  if (peg$c38.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c39);
                    }
                  }
                }
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c136(s1, s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseVariable();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c137(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseIdentifier();
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c138(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 40) {
                    s1 = peg$c24;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c25);
                    }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parseS();
                    while (s3 !== peg$FAILED) {
                      s2.push(s3);
                      s3 = peg$parseS();
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseArithmeticExpression();
                      if (s3 !== peg$FAILED) {
                        s4 = [];
                        s5 = peg$parseS();
                        while (s5 !== peg$FAILED) {
                          s4.push(s5);
                          s5 = peg$parseS();
                        }
                        if (s4 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 41) {
                            s5 = peg$c26;
                            peg$currPos++;
                          } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c27);
                            }
                          }
                          if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c139(s3);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                }
              }
            }
          }
          return s0;
        }
        function peg$parseArithmeticTimesExpression() {
          var s0, s1, s2, s3, s4, s5, s6, s7;
          s0 = peg$currPos;
          s1 = peg$parseArithmeticPrimary();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = [];
            s5 = peg$parseS();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseS();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 42) {
                s5 = peg$c140;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c141);
                }
              }
              if (s5 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 47) {
                  s5 = peg$c142;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c143);
                  }
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseS();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseS();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseArithmeticPrimary();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s4 = peg$c144(s1, s5, s7);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$currPos;
              s4 = [];
              s5 = peg$parseS();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseS();
              }
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 42) {
                  s5 = peg$c140;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c141);
                  }
                }
                if (s5 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 47) {
                    s5 = peg$c142;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c143);
                    }
                  }
                }
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$parseS();
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parseS();
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseArithmeticPrimary();
                    if (s7 !== peg$FAILED) {
                      peg$savedPos = s3;
                      s4 = peg$c144(s1, s5, s7);
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c145(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseArithmeticExpression() {
          var s0, s1, s2, s3, s4, s5, s6, s7;
          s0 = peg$currPos;
          s1 = peg$parseArithmeticTimesExpression();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = [];
            s5 = peg$parseS();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseS();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 43) {
                s5 = peg$c131;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c132);
                }
              }
              if (s5 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 45) {
                  s5 = peg$c129;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c130);
                  }
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseS();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseS();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseArithmeticTimesExpression();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s4 = peg$c146(s1, s5, s7);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$currPos;
              s4 = [];
              s5 = peg$parseS();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseS();
              }
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 43) {
                  s5 = peg$c131;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c132);
                  }
                }
                if (s5 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 45) {
                    s5 = peg$c129;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c130);
                    }
                  }
                }
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$parseS();
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parseS();
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseArithmeticTimesExpression();
                    if (s7 !== peg$FAILED) {
                      peg$savedPos = s3;
                      s4 = peg$c146(s1, s5, s7);
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c145(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseArithmetic() {
          var s0, s1, s2, s3, s4, s5;
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 3) === peg$c147) {
            s1 = peg$c147;
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c148);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseS();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseS();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseArithmeticExpression();
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parseS();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseS();
                }
                if (s4 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c149) {
                    s5 = peg$c149;
                    peg$currPos += 2;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c150);
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c151(s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseSubshell() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c152) {
            s1 = peg$c152;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c153);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseShellLine();
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s3 = peg$c26;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c27);
                }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c154(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseVariable() {
          var s0, s1, s2, s3, s4, s5;
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c155) {
            s1 = peg$c155;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c156);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseIdentifier();
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c157) {
                s3 = peg$c157;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c158);
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseCommandString();
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s5 = peg$c31;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c32);
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c159(s2, s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c155) {
              s1 = peg$c155;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c156);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseIdentifier();
              if (s2 !== peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c160) {
                  s3 = peg$c160;
                  peg$currPos += 3;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c161);
                  }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c162(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c155) {
                s1 = peg$c155;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c156);
                }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseIdentifier();
                if (s2 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c163) {
                    s3 = peg$c163;
                    peg$currPos += 2;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c164);
                    }
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseCommandString();
                    if (s4 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s5 = peg$c31;
                        peg$currPos++;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c32);
                        }
                      }
                      if (s5 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c165(s2, s4);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c155) {
                  s1 = peg$c155;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c156);
                  }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseIdentifier();
                  if (s2 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 3) === peg$c166) {
                      s3 = peg$c166;
                      peg$currPos += 3;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c167);
                      }
                    }
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c168(s2);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c155) {
                    s1 = peg$c155;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c156);
                    }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseIdentifier();
                    if (s2 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s3 = peg$c31;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c32);
                        }
                      }
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c169(s2);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 36) {
                      s1 = peg$c170;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c171);
                      }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseIdentifier();
                      if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c169(s2);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  }
                }
              }
            }
          }
          return s0;
        }
        function peg$parseGlob() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = peg$parseGlobText();
          if (s1 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s2 = peg$c172(s1);
            if (s2) {
              s2 = undefined;
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c173(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseGlobText() {
          var s0, s1, s2, s3, s4;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$currPos;
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseGlobSpecialShellChars();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = undefined;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c125);
              }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s2;
              s3 = peg$c86(s4);
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$currPos;
              s3 = peg$currPos;
              peg$silentFails++;
              s4 = peg$parseGlobSpecialShellChars();
              peg$silentFails--;
              if (s4 === peg$FAILED) {
                s3 = undefined;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c125);
                  }
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$c86(s4);
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c76(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parseEnvVariable() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          if (peg$c174.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c175);
            }
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              if (peg$c174.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c175);
                }
              }
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c176();
          }
          s0 = s1;
          return s0;
        }
        function peg$parseIdentifier() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          if (peg$c177.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c178);
            }
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              if (peg$c177.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c178);
                }
              }
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c176();
          }
          s0 = s1;
          return s0;
        }
        function peg$parseSpecialShellChars() {
          var s0;
          if (peg$c179.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c180);
            }
          }
          return s0;
        }
        function peg$parseGlobSpecialShellChars() {
          var s0;
          if (peg$c181.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c182);
            }
          }
          return s0;
        }
        function peg$parseS() {
          var s0, s1;
          s0 = [];
          if (peg$c183.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c184);
            }
          }
          if (s1 !== peg$FAILED) {
            while (s1 !== peg$FAILED) {
              s0.push(s1);
              if (peg$c183.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c184);
                }
              }
            }
          } else {
            s0 = peg$FAILED;
          }
          return s0;
        }
        peg$result = peg$startRuleFunction();
        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
          return peg$result;
        } else {
          if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$fail(peg$endExpectation());
          }
          throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
        }
      }
      module22.exports = {
        SyntaxError: peg$SyntaxError,
        parse: peg$parse
      };
    }
  });
  var require_shell2 = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+parsers@3.0.2/node_modules/@yarnpkg/parsers/lib/shell.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.stringifyShell = undefined;
      exports22.parseShell = parseShell;
      exports22.stringifyShellLine = stringifyShellLine;
      exports22.stringifyShell = stringifyShellLine;
      exports22.stringifyCommandLine = stringifyCommandLine;
      exports22.stringifyCommandLineThen = stringifyCommandLineThen;
      exports22.stringifyCommandChain = stringifyCommandChain;
      exports22.stringifyCommandChainThen = stringifyCommandChainThen;
      exports22.stringifyCommand = stringifyCommand;
      exports22.stringifyEnvSegment = stringifyEnvSegment;
      exports22.stringifyArgument = stringifyArgument;
      exports22.stringifyRedirectArgument = stringifyRedirectArgument;
      exports22.stringifyValueArgument = stringifyValueArgument;
      exports22.stringifyArgumentSegment = stringifyArgumentSegment;
      exports22.stringifyArithmeticExpression = stringifyArithmeticExpression;
      var shell_1 = require_shell();
      function parseShell(source, options = { isGlobPattern: () => false }) {
        try {
          return (0, shell_1.parse)(source, options);
        } catch (error) {
          if (error.location)
            error.message = error.message.replace(/(\.)?$/, ` (line ${error.location.start.line}, column ${error.location.start.column})$1`);
          throw error;
        }
      }
      function stringifyShellLine(shellLine, { endSemicolon = false } = {}) {
        return shellLine.map(({ command, type }, index) => `${stringifyCommandLine(command)}${type === `;` ? index !== shellLine.length - 1 || endSemicolon ? `;` : `` : ` &`}`).join(` `);
      }
      function stringifyCommandLine(commandLine) {
        return `${stringifyCommandChain(commandLine.chain)}${commandLine.then ? ` ${stringifyCommandLineThen(commandLine.then)}` : ``}`;
      }
      function stringifyCommandLineThen(commandLineThen) {
        return `${commandLineThen.type} ${stringifyCommandLine(commandLineThen.line)}`;
      }
      function stringifyCommandChain(commandChain) {
        return `${stringifyCommand(commandChain)}${commandChain.then ? ` ${stringifyCommandChainThen(commandChain.then)}` : ``}`;
      }
      function stringifyCommandChainThen(commandChainThen) {
        return `${commandChainThen.type} ${stringifyCommandChain(commandChainThen.chain)}`;
      }
      function stringifyCommand(command) {
        switch (command.type) {
          case `command`:
            return `${command.envs.length > 0 ? `${command.envs.map((env) => stringifyEnvSegment(env)).join(` `)} ` : ``}${command.args.map((argument) => stringifyArgument(argument)).join(` `)}`;
          case `subshell`:
            return `(${stringifyShellLine(command.subshell)})${command.args.length > 0 ? ` ${command.args.map((argument) => stringifyRedirectArgument(argument)).join(` `)}` : ``}`;
          case `group`:
            return `{ ${stringifyShellLine(command.group, {
              endSemicolon: true
            })} }${command.args.length > 0 ? ` ${command.args.map((argument) => stringifyRedirectArgument(argument)).join(` `)}` : ``}`;
          case `envs`:
            return command.envs.map((env) => stringifyEnvSegment(env)).join(` `);
          default:
            throw new Error(`Unsupported command type:  "${command.type}"`);
        }
      }
      function stringifyEnvSegment(envSegment) {
        return `${envSegment.name}=${envSegment.args[0] ? stringifyValueArgument(envSegment.args[0]) : ``}`;
      }
      function stringifyArgument(argument) {
        switch (argument.type) {
          case `redirection`:
            return stringifyRedirectArgument(argument);
          case `argument`:
            return stringifyValueArgument(argument);
          default:
            throw new Error(`Unsupported argument type: "${argument.type}"`);
        }
      }
      function stringifyRedirectArgument(argument) {
        return `${argument.subtype} ${argument.args.map((argument2) => stringifyValueArgument(argument2)).join(` `)}`;
      }
      function stringifyValueArgument(argument) {
        return argument.segments.map((segment) => stringifyArgumentSegment(segment)).join(``);
      }
      var ESCAPED_CONTROL_CHARS = /* @__PURE__ */ new Map([
        [`\f`, `\\f`],
        [`
`, `\\n`],
        [`\r`, `\\r`],
        [`\t`, `\\t`],
        [`\v`, `\\v`],
        [`\x00`, `\\0`]
      ]);
      var ESCAPED_DBL_CHARS = new Map([
        [`\\`, `\\\\`],
        [`$`, `\\$`],
        [`"`, `\\"`],
        ...Array.from(ESCAPED_CONTROL_CHARS, ([c, replacement]) => {
          return [c, `"$'${replacement}'"`];
        })
      ]);
      var getEscapedControlChar = (c) => {
        return ESCAPED_CONTROL_CHARS.get(c) ?? `\\x${c.charCodeAt(0).toString(16).padStart(2, `0`)}`;
      };
      var getEscapedDblChar = (match) => {
        return ESCAPED_DBL_CHARS.get(match) ?? `"$'${getEscapedControlChar(match)}'"`;
      };
      function stringifyArgumentSegment(argumentSegment) {
        const doubleQuoteIfRequested = (string, quote) => quote ? `"${string}"` : string;
        const quoteIfNeeded = (text) => {
          if (text === ``)
            return `''`;
          if (!text.match(/[()}<>$|&;"'\n\t ]/))
            return text;
          if (!text.match(/['\t\p{C}]/u))
            return `'${text}'`;
          if (!text.match(/'/)) {
            return `$'${text.replace(/[\t\p{C}]/u, getEscapedControlChar)}'`;
          } else {
            return `"${text.replace(/["$\t\p{C}]/u, getEscapedDblChar)}"`;
          }
        };
        switch (argumentSegment.type) {
          case `text`:
            return quoteIfNeeded(argumentSegment.text);
          case `glob`:
            return argumentSegment.pattern;
          case `shell`:
            return doubleQuoteIfRequested(`$(${stringifyShellLine(argumentSegment.shell)})`, argumentSegment.quoted);
          case `variable`:
            return doubleQuoteIfRequested(typeof argumentSegment.defaultValue === `undefined` ? typeof argumentSegment.alternativeValue === `undefined` ? `\${${argumentSegment.name}}` : argumentSegment.alternativeValue.length === 0 ? `\${${argumentSegment.name}:+}` : `\${${argumentSegment.name}:+${argumentSegment.alternativeValue.map((argument) => stringifyValueArgument(argument)).join(` `)}}` : argumentSegment.defaultValue.length === 0 ? `\${${argumentSegment.name}:-}` : `\${${argumentSegment.name}:-${argumentSegment.defaultValue.map((argument) => stringifyValueArgument(argument)).join(` `)}}`, argumentSegment.quoted);
          case `arithmetic`:
            return `$(( ${stringifyArithmeticExpression(argumentSegment.arithmetic)} ))`;
          default:
            throw new Error(`Unsupported argument segment type: "${argumentSegment.type}"`);
        }
      }
      function stringifyArithmeticExpression(argument) {
        const getOperator = (type) => {
          switch (type) {
            case `addition`:
              return `+`;
            case `subtraction`:
              return `-`;
            case `multiplication`:
              return `*`;
            case `division`:
              return `/`;
            default:
              throw new Error(`Can't extract operator from arithmetic expression of type "${type}"`);
          }
        };
        const parenthesizeIfRequested = (string, parenthesize) => parenthesize ? `( ${string} )` : string;
        const stringifyAndParenthesizeIfNeeded = (expression) => parenthesizeIfRequested(stringifyArithmeticExpression(expression), ![`number`, `variable`].includes(expression.type));
        switch (argument.type) {
          case `number`:
            return String(argument.value);
          case `variable`:
            return argument.name;
          default:
            return `${stringifyAndParenthesizeIfNeeded(argument.left)} ${getOperator(argument.type)} ${stringifyAndParenthesizeIfNeeded(argument.right)}`;
        }
      }
    }
  });
  var require_resolution = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+parsers@3.0.2/node_modules/@yarnpkg/parsers/lib/grammars/resolution.js"(exports22, module22) {
      function peg$subclass(child, parent) {
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
      }
      function peg$SyntaxError(message, expected, found, location) {
        this.message = message;
        this.expected = expected;
        this.found = found;
        this.location = location;
        this.name = "SyntaxError";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, peg$SyntaxError);
        }
      }
      peg$subclass(peg$SyntaxError, Error);
      peg$SyntaxError.buildMessage = function(expected, found) {
        var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return '"' + literalEscape(expectation.text) + '"';
          },
          class: function(expectation) {
            var escapedParts = "", i;
            for (i = 0;i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);
            }
            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },
          any: function(expectation) {
            return "any character";
          },
          end: function(expectation) {
            return "end of input";
          },
          other: function(expectation) {
            return expectation.description;
          }
        };
        function hex(ch) {
          return ch.charCodeAt(0).toString(16).toUpperCase();
        }
        function literalEscape(s) {
          return s.replace(/\\/g, "\\\\").replace(/"/g, "\\\"").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
            return "\\x0" + hex(ch);
          }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
            return "\\x" + hex(ch);
          });
        }
        function classEscape(s) {
          return s.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
            return "\\x0" + hex(ch);
          }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
            return "\\x" + hex(ch);
          });
        }
        function describeExpectation(expectation) {
          return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
        }
        function describeExpected(expected2) {
          var descriptions = new Array(expected2.length), i, j;
          for (i = 0;i < expected2.length; i++) {
            descriptions[i] = describeExpectation(expected2[i]);
          }
          descriptions.sort();
          if (descriptions.length > 0) {
            for (i = 1, j = 1;i < descriptions.length; i++) {
              if (descriptions[i - 1] !== descriptions[i]) {
                descriptions[j] = descriptions[i];
                j++;
              }
            }
            descriptions.length = j;
          }
          switch (descriptions.length) {
            case 1:
              return descriptions[0];
            case 2:
              return descriptions[0] + " or " + descriptions[1];
            default:
              return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
          }
        }
        function describeFound(found2) {
          return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
        }
        return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
      };
      function peg$parse(input, options) {
        options = options !== undefined ? options : {};
        var peg$FAILED = {}, peg$startRuleFunctions = { resolution: peg$parseresolution }, peg$startRuleFunction = peg$parseresolution, peg$c0 = "/", peg$c1 = peg$literalExpectation("/", false), peg$c2 = function(from, descriptor) {
          return { from, descriptor };
        }, peg$c3 = function(descriptor) {
          return { descriptor };
        }, peg$c4 = "@", peg$c5 = peg$literalExpectation("@", false), peg$c6 = function(fullName, description) {
          return { fullName, description };
        }, peg$c7 = function(fullName) {
          return { fullName };
        }, peg$c8 = function() {
          return text();
        }, peg$c9 = /^[^\/@]/, peg$c10 = peg$classExpectation(["/", "@"], true, false), peg$c11 = /^[^\/]/, peg$c12 = peg$classExpectation(["/"], true, false), peg$currPos = 0, peg$savedPos = 0, peg$posDetailsCache = [{ line: 1, column: 1 }], peg$maxFailPos = 0, peg$maxFailExpected = [], peg$silentFails = 0, peg$result;
        if ("startRule" in options) {
          if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error(`Can't start parsing from rule "` + options.startRule + '".');
          }
          peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }
        function text() {
          return input.substring(peg$savedPos, peg$currPos);
        }
        function location() {
          return peg$computeLocation(peg$savedPos, peg$currPos);
        }
        function expected(description, location2) {
          location2 = location2 !== undefined ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
          throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location2);
        }
        function error(message, location2) {
          location2 = location2 !== undefined ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
          throw peg$buildSimpleError(message, location2);
        }
        function peg$literalExpectation(text2, ignoreCase) {
          return { type: "literal", text: text2, ignoreCase };
        }
        function peg$classExpectation(parts, inverted, ignoreCase) {
          return { type: "class", parts, inverted, ignoreCase };
        }
        function peg$anyExpectation() {
          return { type: "any" };
        }
        function peg$endExpectation() {
          return { type: "end" };
        }
        function peg$otherExpectation(description) {
          return { type: "other", description };
        }
        function peg$computePosDetails(pos) {
          var details = peg$posDetailsCache[pos], p;
          if (details) {
            return details;
          } else {
            p = pos - 1;
            while (!peg$posDetailsCache[p]) {
              p--;
            }
            details = peg$posDetailsCache[p];
            details = {
              line: details.line,
              column: details.column
            };
            while (p < pos) {
              if (input.charCodeAt(p) === 10) {
                details.line++;
                details.column = 1;
              } else {
                details.column++;
              }
              p++;
            }
            peg$posDetailsCache[pos] = details;
            return details;
          }
        }
        function peg$computeLocation(startPos, endPos) {
          var startPosDetails = peg$computePosDetails(startPos), endPosDetails = peg$computePosDetails(endPos);
          return {
            start: {
              offset: startPos,
              line: startPosDetails.line,
              column: startPosDetails.column
            },
            end: {
              offset: endPos,
              line: endPosDetails.line,
              column: endPosDetails.column
            }
          };
        }
        function peg$fail(expected2) {
          if (peg$currPos < peg$maxFailPos) {
            return;
          }
          if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
          }
          peg$maxFailExpected.push(expected2);
        }
        function peg$buildSimpleError(message, location2) {
          return new peg$SyntaxError(message, null, null, location2);
        }
        function peg$buildStructuredError(expected2, found, location2) {
          return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected2, found), expected2, found, location2);
        }
        function peg$parseresolution() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          s1 = peg$parsespecifier();
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s2 = peg$c0;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c1);
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsespecifier();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c2(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsespecifier();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c3(s1);
            }
            s0 = s1;
          }
          return s0;
        }
        function peg$parsespecifier() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          s1 = peg$parsefullName();
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 64) {
              s2 = peg$c4;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c5);
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsedescription();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c6(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsefullName();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s1);
            }
            s0 = s1;
          }
          return s0;
        }
        function peg$parsefullName() {
          var s0, s1, s2, s3, s4;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 64) {
            s1 = peg$c4;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c5);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseident();
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 47) {
                s3 = peg$c0;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c1);
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseident();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c8();
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseident();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c8();
            }
            s0 = s1;
          }
          return s0;
        }
        function peg$parseident() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          if (peg$c9.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c10);
            }
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              if (peg$c9.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c10);
                }
              }
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c8();
          }
          s0 = s1;
          return s0;
        }
        function peg$parsedescription() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          if (peg$c11.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c12);
            }
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              if (peg$c11.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c12);
                }
              }
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c8();
          }
          s0 = s1;
          return s0;
        }
        peg$result = peg$startRuleFunction();
        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
          return peg$result;
        } else {
          if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$fail(peg$endExpectation());
          }
          throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
        }
      }
      module22.exports = {
        SyntaxError: peg$SyntaxError,
        parse: peg$parse
      };
    }
  });
  var require_resolution2 = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+parsers@3.0.2/node_modules/@yarnpkg/parsers/lib/resolution.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.parseResolution = parseResolution;
      exports22.stringifyResolution = stringifyResolution;
      var resolution_1 = require_resolution();
      function parseResolution(source) {
        const legacyResolution = source.match(/^\*{1,2}\/(.*)/);
        if (legacyResolution)
          throw new Error(`The override for '${source}' includes a glob pattern. Glob patterns have been removed since their behaviours don't match what you'd expect. Set the override to '${legacyResolution[1]}' instead.`);
        try {
          return (0, resolution_1.parse)(source);
        } catch (error) {
          if (error.location)
            error.message = error.message.replace(/(\.)?$/, ` (line ${error.location.start.line}, column ${error.location.start.column})$1`);
          throw error;
        }
      }
      function stringifyResolution(resolution) {
        let str = ``;
        if (resolution.from) {
          str += resolution.from.fullName;
          if (resolution.from.description)
            str += `@${resolution.from.description}`;
          str += `/`;
        }
        str += resolution.descriptor.fullName;
        if (resolution.descriptor.description)
          str += `@${resolution.descriptor.description}`;
        return str;
      }
    }
  });
  var require_common = __commonJS2({
    "../../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/common.js"(exports22, module22) {
      function isNothing(subject) {
        return typeof subject === "undefined" || subject === null;
      }
      function isObject(subject) {
        return typeof subject === "object" && subject !== null;
      }
      function toArray(sequence) {
        if (Array.isArray(sequence))
          return sequence;
        else if (isNothing(sequence))
          return [];
        return [sequence];
      }
      function extend(target, source) {
        var index, length, key, sourceKeys;
        if (source) {
          sourceKeys = Object.keys(source);
          for (index = 0, length = sourceKeys.length;index < length; index += 1) {
            key = sourceKeys[index];
            target[key] = source[key];
          }
        }
        return target;
      }
      function repeat(string, count) {
        var result2 = "", cycle;
        for (cycle = 0;cycle < count; cycle += 1) {
          result2 += string;
        }
        return result2;
      }
      function isNegativeZero(number) {
        return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
      }
      module22.exports.isNothing = isNothing;
      module22.exports.isObject = isObject;
      module22.exports.toArray = toArray;
      module22.exports.repeat = repeat;
      module22.exports.isNegativeZero = isNegativeZero;
      module22.exports.extend = extend;
    }
  });
  var require_exception = __commonJS2({
    "../../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/exception.js"(exports22, module22) {
      function YAMLException(reason, mark) {
        Error.call(this);
        this.name = "YAMLException";
        this.reason = reason;
        this.mark = mark;
        this.message = (this.reason || "(unknown reason)") + (this.mark ? " " + this.mark.toString() : "");
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        } else {
          this.stack = new Error().stack || "";
        }
      }
      YAMLException.prototype = Object.create(Error.prototype);
      YAMLException.prototype.constructor = YAMLException;
      YAMLException.prototype.toString = function toString(compact) {
        var result2 = this.name + ": ";
        result2 += this.reason || "(unknown reason)";
        if (!compact && this.mark) {
          result2 += " " + this.mark.toString();
        }
        return result2;
      };
      module22.exports = YAMLException;
    }
  });
  var require_mark = __commonJS2({
    "../../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/mark.js"(exports22, module22) {
      var common = require_common();
      function Mark(name, buffer, position, line, column) {
        this.name = name;
        this.buffer = buffer;
        this.position = position;
        this.line = line;
        this.column = column;
      }
      Mark.prototype.getSnippet = function getSnippet(indent, maxLength) {
        var head, start, tail, end, snippet;
        if (!this.buffer)
          return null;
        indent = indent || 4;
        maxLength = maxLength || 75;
        head = "";
        start = this.position;
        while (start > 0 && `\x00\r
\x85\u2028\u2029`.indexOf(this.buffer.charAt(start - 1)) === -1) {
          start -= 1;
          if (this.position - start > maxLength / 2 - 1) {
            head = " ... ";
            start += 5;
            break;
          }
        }
        tail = "";
        end = this.position;
        while (end < this.buffer.length && `\x00\r
\x85\u2028\u2029`.indexOf(this.buffer.charAt(end)) === -1) {
          end += 1;
          if (end - this.position > maxLength / 2 - 1) {
            tail = " ... ";
            end -= 5;
            break;
          }
        }
        snippet = this.buffer.slice(start, end);
        return common.repeat(" ", indent) + head + snippet + tail + `
` + common.repeat(" ", indent + this.position - start + head.length) + "^";
      };
      Mark.prototype.toString = function toString(compact) {
        var snippet, where = "";
        if (this.name) {
          where += 'in "' + this.name + '" ';
        }
        where += "at line " + (this.line + 1) + ", column " + (this.column + 1);
        if (!compact) {
          snippet = this.getSnippet();
          if (snippet) {
            where += `:
` + snippet;
          }
        }
        return where;
      };
      module22.exports = Mark;
    }
  });
  var require_type = __commonJS2({
    "../../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type.js"(exports22, module22) {
      var YAMLException = require_exception();
      var TYPE_CONSTRUCTOR_OPTIONS = [
        "kind",
        "resolve",
        "construct",
        "instanceOf",
        "predicate",
        "represent",
        "defaultStyle",
        "styleAliases"
      ];
      var YAML_NODE_KINDS = [
        "scalar",
        "sequence",
        "mapping"
      ];
      function compileStyleAliases(map) {
        var result2 = {};
        if (map !== null) {
          Object.keys(map).forEach(function(style) {
            map[style].forEach(function(alias) {
              result2[String(alias)] = style;
            });
          });
        }
        return result2;
      }
      function Type(tag, options) {
        options = options || {};
        Object.keys(options).forEach(function(name) {
          if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
            throw new YAMLException('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
          }
        });
        this.tag = tag;
        this.kind = options["kind"] || null;
        this.resolve = options["resolve"] || function() {
          return true;
        };
        this.construct = options["construct"] || function(data) {
          return data;
        };
        this.instanceOf = options["instanceOf"] || null;
        this.predicate = options["predicate"] || null;
        this.represent = options["represent"] || null;
        this.defaultStyle = options["defaultStyle"] || null;
        this.styleAliases = compileStyleAliases(options["styleAliases"] || null);
        if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
          throw new YAMLException('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
        }
      }
      module22.exports = Type;
    }
  });
  var require_schema = __commonJS2({
    "../../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/schema.js"(exports22, module22) {
      var common = require_common();
      var YAMLException = require_exception();
      var Type = require_type();
      function compileList(schema, name, result2) {
        var exclude = [];
        schema.include.forEach(function(includedSchema) {
          result2 = compileList(includedSchema, name, result2);
        });
        schema[name].forEach(function(currentType) {
          result2.forEach(function(previousType, previousIndex) {
            if (previousType.tag === currentType.tag && previousType.kind === currentType.kind) {
              exclude.push(previousIndex);
            }
          });
          result2.push(currentType);
        });
        return result2.filter(function(type, index) {
          return exclude.indexOf(index) === -1;
        });
      }
      function compileMap() {
        var result2 = {
          scalar: {},
          sequence: {},
          mapping: {},
          fallback: {}
        }, index, length;
        function collectType(type) {
          result2[type.kind][type.tag] = result2["fallback"][type.tag] = type;
        }
        for (index = 0, length = arguments.length;index < length; index += 1) {
          arguments[index].forEach(collectType);
        }
        return result2;
      }
      function Schema(definition) {
        this.include = definition.include || [];
        this.implicit = definition.implicit || [];
        this.explicit = definition.explicit || [];
        this.implicit.forEach(function(type) {
          if (type.loadKind && type.loadKind !== "scalar") {
            throw new YAMLException("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
          }
        });
        this.compiledImplicit = compileList(this, "implicit", []);
        this.compiledExplicit = compileList(this, "explicit", []);
        this.compiledTypeMap = compileMap(this.compiledImplicit, this.compiledExplicit);
      }
      Schema.DEFAULT = null;
      Schema.create = function createSchema() {
        var schemas, types;
        switch (arguments.length) {
          case 1:
            schemas = Schema.DEFAULT;
            types = arguments[0];
            break;
          case 2:
            schemas = arguments[0];
            types = arguments[1];
            break;
          default:
            throw new YAMLException("Wrong number of arguments for Schema.create function");
        }
        schemas = common.toArray(schemas);
        types = common.toArray(types);
        if (!schemas.every(function(schema) {
          return schema instanceof Schema;
        })) {
          throw new YAMLException("Specified list of super schemas (or a single Schema object) contains a non-Schema object.");
        }
        if (!types.every(function(type) {
          return type instanceof Type;
        })) {
          throw new YAMLException("Specified list of YAML types (or a single Type object) contains a non-Type object.");
        }
        return new Schema({
          include: schemas,
          explicit: types
        });
      };
      module22.exports = Schema;
    }
  });
  var require_str = __commonJS2({
    "../../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/str.js"(exports22, module22) {
      var Type = require_type();
      module22.exports = new Type("tag:yaml.org,2002:str", {
        kind: "scalar",
        construct: function(data) {
          return data !== null ? data : "";
        }
      });
    }
  });
  var require_seq = __commonJS2({
    "../../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/seq.js"(exports22, module22) {
      var Type = require_type();
      module22.exports = new Type("tag:yaml.org,2002:seq", {
        kind: "sequence",
        construct: function(data) {
          return data !== null ? data : [];
        }
      });
    }
  });
  var require_map = __commonJS2({
    "../../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/map.js"(exports22, module22) {
      var Type = require_type();
      module22.exports = new Type("tag:yaml.org,2002:map", {
        kind: "mapping",
        construct: function(data) {
          return data !== null ? data : {};
        }
      });
    }
  });
  var require_failsafe = __commonJS2({
    "../../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js"(exports22, module22) {
      var Schema = require_schema();
      module22.exports = new Schema({
        explicit: [
          require_str(),
          require_seq(),
          require_map()
        ]
      });
    }
  });
  var require_null = __commonJS2({
    "../../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/null.js"(exports22, module22) {
      var Type = require_type();
      function resolveYamlNull(data) {
        if (data === null)
          return true;
        var max = data.length;
        return max === 1 && data === "~" || max === 4 && (data === "null" || data === "Null" || data === "NULL");
      }
      function constructYamlNull() {
        return null;
      }
      function isNull(object) {
        return object === null;
      }
      module22.exports = new Type("tag:yaml.org,2002:null", {
        kind: "scalar",
        resolve: resolveYamlNull,
        construct: constructYamlNull,
        predicate: isNull,
        represent: {
          canonical: function() {
            return "~";
          },
          lowercase: function() {
            return "null";
          },
          uppercase: function() {
            return "NULL";
          },
          camelcase: function() {
            return "Null";
          }
        },
        defaultStyle: "lowercase"
      });
    }
  });
  var require_bool = __commonJS2({
    "../../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/bool.js"(exports22, module22) {
      var Type = require_type();
      function resolveYamlBoolean(data) {
        if (data === null)
          return false;
        var max = data.length;
        return max === 4 && (data === "true" || data === "True" || data === "TRUE") || max === 5 && (data === "false" || data === "False" || data === "FALSE");
      }
      function constructYamlBoolean(data) {
        return data === "true" || data === "True" || data === "TRUE";
      }
      function isBoolean(object) {
        return Object.prototype.toString.call(object) === "[object Boolean]";
      }
      module22.exports = new Type("tag:yaml.org,2002:bool", {
        kind: "scalar",
        resolve: resolveYamlBoolean,
        construct: constructYamlBoolean,
        predicate: isBoolean,
        represent: {
          lowercase: function(object) {
            return object ? "true" : "false";
          },
          uppercase: function(object) {
            return object ? "TRUE" : "FALSE";
          },
          camelcase: function(object) {
            return object ? "True" : "False";
          }
        },
        defaultStyle: "lowercase"
      });
    }
  });
  var require_int = __commonJS2({
    "../../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/int.js"(exports22, module22) {
      var common = require_common();
      var Type = require_type();
      function isHexCode(c) {
        return 48 <= c && c <= 57 || 65 <= c && c <= 70 || 97 <= c && c <= 102;
      }
      function isOctCode(c) {
        return 48 <= c && c <= 55;
      }
      function isDecCode(c) {
        return 48 <= c && c <= 57;
      }
      function resolveYamlInteger(data) {
        if (data === null)
          return false;
        var max = data.length, index = 0, hasDigits = false, ch;
        if (!max)
          return false;
        ch = data[index];
        if (ch === "-" || ch === "+") {
          ch = data[++index];
        }
        if (ch === "0") {
          if (index + 1 === max)
            return true;
          ch = data[++index];
          if (ch === "b") {
            index++;
            for (;index < max; index++) {
              ch = data[index];
              if (ch === "_")
                continue;
              if (ch !== "0" && ch !== "1")
                return false;
              hasDigits = true;
            }
            return hasDigits && ch !== "_";
          }
          if (ch === "x") {
            index++;
            for (;index < max; index++) {
              ch = data[index];
              if (ch === "_")
                continue;
              if (!isHexCode(data.charCodeAt(index)))
                return false;
              hasDigits = true;
            }
            return hasDigits && ch !== "_";
          }
          for (;index < max; index++) {
            ch = data[index];
            if (ch === "_")
              continue;
            if (!isOctCode(data.charCodeAt(index)))
              return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
        if (ch === "_")
          return false;
        for (;index < max; index++) {
          ch = data[index];
          if (ch === "_")
            continue;
          if (ch === ":")
            break;
          if (!isDecCode(data.charCodeAt(index))) {
            return false;
          }
          hasDigits = true;
        }
        if (!hasDigits || ch === "_")
          return false;
        if (ch !== ":")
          return true;
        return /^(:[0-5]?[0-9])+$/.test(data.slice(index));
      }
      function constructYamlInteger(data) {
        var value = data, sign = 1, ch, base, digits = [];
        if (value.indexOf("_") !== -1) {
          value = value.replace(/_/g, "");
        }
        ch = value[0];
        if (ch === "-" || ch === "+") {
          if (ch === "-")
            sign = -1;
          value = value.slice(1);
          ch = value[0];
        }
        if (value === "0")
          return 0;
        if (ch === "0") {
          if (value[1] === "b")
            return sign * parseInt(value.slice(2), 2);
          if (value[1] === "x")
            return sign * parseInt(value, 16);
          return sign * parseInt(value, 8);
        }
        if (value.indexOf(":") !== -1) {
          value.split(":").forEach(function(v) {
            digits.unshift(parseInt(v, 10));
          });
          value = 0;
          base = 1;
          digits.forEach(function(d) {
            value += d * base;
            base *= 60;
          });
          return sign * value;
        }
        return sign * parseInt(value, 10);
      }
      function isInteger(object) {
        return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 === 0 && !common.isNegativeZero(object));
      }
      module22.exports = new Type("tag:yaml.org,2002:int", {
        kind: "scalar",
        resolve: resolveYamlInteger,
        construct: constructYamlInteger,
        predicate: isInteger,
        represent: {
          binary: function(obj) {
            return obj >= 0 ? "0b" + obj.toString(2) : "-0b" + obj.toString(2).slice(1);
          },
          octal: function(obj) {
            return obj >= 0 ? "0" + obj.toString(8) : "-0" + obj.toString(8).slice(1);
          },
          decimal: function(obj) {
            return obj.toString(10);
          },
          hexadecimal: function(obj) {
            return obj >= 0 ? "0x" + obj.toString(16).toUpperCase() : "-0x" + obj.toString(16).toUpperCase().slice(1);
          }
        },
        defaultStyle: "decimal",
        styleAliases: {
          binary: [2, "bin"],
          octal: [8, "oct"],
          decimal: [10, "dec"],
          hexadecimal: [16, "hex"]
        }
      });
    }
  });
  var require_float = __commonJS2({
    "../../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/float.js"(exports22, module22) {
      var common = require_common();
      var Type = require_type();
      var YAML_FLOAT_PATTERN = new RegExp("^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");
      function resolveYamlFloat(data) {
        if (data === null)
          return false;
        if (!YAML_FLOAT_PATTERN.test(data) || data[data.length - 1] === "_") {
          return false;
        }
        return true;
      }
      function constructYamlFloat(data) {
        var value, sign, base, digits;
        value = data.replace(/_/g, "").toLowerCase();
        sign = value[0] === "-" ? -1 : 1;
        digits = [];
        if ("+-".indexOf(value[0]) >= 0) {
          value = value.slice(1);
        }
        if (value === ".inf") {
          return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
        } else if (value === ".nan") {
          return NaN;
        } else if (value.indexOf(":") >= 0) {
          value.split(":").forEach(function(v) {
            digits.unshift(parseFloat(v, 10));
          });
          value = 0;
          base = 1;
          digits.forEach(function(d) {
            value += d * base;
            base *= 60;
          });
          return sign * value;
        }
        return sign * parseFloat(value, 10);
      }
      var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
      function representYamlFloat(object, style) {
        var res;
        if (isNaN(object)) {
          switch (style) {
            case "lowercase":
              return ".nan";
            case "uppercase":
              return ".NAN";
            case "camelcase":
              return ".NaN";
          }
        } else if (Number.POSITIVE_INFINITY === object) {
          switch (style) {
            case "lowercase":
              return ".inf";
            case "uppercase":
              return ".INF";
            case "camelcase":
              return ".Inf";
          }
        } else if (Number.NEGATIVE_INFINITY === object) {
          switch (style) {
            case "lowercase":
              return "-.inf";
            case "uppercase":
              return "-.INF";
            case "camelcase":
              return "-.Inf";
          }
        } else if (common.isNegativeZero(object)) {
          return "-0.0";
        }
        res = object.toString(10);
        return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace("e", ".e") : res;
      }
      function isFloat(object) {
        return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 !== 0 || common.isNegativeZero(object));
      }
      module22.exports = new Type("tag:yaml.org,2002:float", {
        kind: "scalar",
        resolve: resolveYamlFloat,
        construct: constructYamlFloat,
        predicate: isFloat,
        represent: representYamlFloat,
        defaultStyle: "lowercase"
      });
    }
  });
  var require_json = __commonJS2({
    "../../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/schema/json.js"(exports22, module22) {
      var Schema = require_schema();
      module22.exports = new Schema({
        include: [
          require_failsafe()
        ],
        implicit: [
          require_null(),
          require_bool(),
          require_int(),
          require_float()
        ]
      });
    }
  });
  var require_core = __commonJS2({
    "../../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/schema/core.js"(exports22, module22) {
      var Schema = require_schema();
      module22.exports = new Schema({
        include: [
          require_json()
        ]
      });
    }
  });
  var require_timestamp = __commonJS2({
    "../../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/timestamp.js"(exports22, module22) {
      var Type = require_type();
      var YAML_DATE_REGEXP = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$");
      var YAML_TIMESTAMP_REGEXP = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");
      function resolveYamlTimestamp(data) {
        if (data === null)
          return false;
        if (YAML_DATE_REGEXP.exec(data) !== null)
          return true;
        if (YAML_TIMESTAMP_REGEXP.exec(data) !== null)
          return true;
        return false;
      }
      function constructYamlTimestamp(data) {
        var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;
        match = YAML_DATE_REGEXP.exec(data);
        if (match === null)
          match = YAML_TIMESTAMP_REGEXP.exec(data);
        if (match === null)
          throw new Error("Date resolve error");
        year = +match[1];
        month = +match[2] - 1;
        day = +match[3];
        if (!match[4]) {
          return new Date(Date.UTC(year, month, day));
        }
        hour = +match[4];
        minute = +match[5];
        second = +match[6];
        if (match[7]) {
          fraction = match[7].slice(0, 3);
          while (fraction.length < 3) {
            fraction += "0";
          }
          fraction = +fraction;
        }
        if (match[9]) {
          tz_hour = +match[10];
          tz_minute = +(match[11] || 0);
          delta = (tz_hour * 60 + tz_minute) * 60000;
          if (match[9] === "-")
            delta = -delta;
        }
        date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
        if (delta)
          date.setTime(date.getTime() - delta);
        return date;
      }
      function representYamlTimestamp(object) {
        return object.toISOString();
      }
      module22.exports = new Type("tag:yaml.org,2002:timestamp", {
        kind: "scalar",
        resolve: resolveYamlTimestamp,
        construct: constructYamlTimestamp,
        instanceOf: Date,
        represent: representYamlTimestamp
      });
    }
  });
  var require_merge = __commonJS2({
    "../../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/merge.js"(exports22, module22) {
      var Type = require_type();
      function resolveYamlMerge(data) {
        return data === "<<" || data === null;
      }
      module22.exports = new Type("tag:yaml.org,2002:merge", {
        kind: "scalar",
        resolve: resolveYamlMerge
      });
    }
  });
  var require_binary = __commonJS2({
    "../../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/binary.js"(exports22, module22) {
      var NodeBuffer;
      try {
        _require = __require;
        NodeBuffer = _require("buffer").Buffer;
      } catch (__) {
      }
      var _require;
      var Type = require_type();
      var BASE64_MAP = `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=
\r`;
      function resolveYamlBinary(data) {
        if (data === null)
          return false;
        var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;
        for (idx = 0;idx < max; idx++) {
          code = map.indexOf(data.charAt(idx));
          if (code > 64)
            continue;
          if (code < 0)
            return false;
          bitlen += 6;
        }
        return bitlen % 8 === 0;
      }
      function constructYamlBinary(data) {
        var idx, tailbits, input = data.replace(/[\r\n=]/g, ""), max = input.length, map = BASE64_MAP, bits = 0, result2 = [];
        for (idx = 0;idx < max; idx++) {
          if (idx % 4 === 0 && idx) {
            result2.push(bits >> 16 & 255);
            result2.push(bits >> 8 & 255);
            result2.push(bits & 255);
          }
          bits = bits << 6 | map.indexOf(input.charAt(idx));
        }
        tailbits = max % 4 * 6;
        if (tailbits === 0) {
          result2.push(bits >> 16 & 255);
          result2.push(bits >> 8 & 255);
          result2.push(bits & 255);
        } else if (tailbits === 18) {
          result2.push(bits >> 10 & 255);
          result2.push(bits >> 2 & 255);
        } else if (tailbits === 12) {
          result2.push(bits >> 4 & 255);
        }
        if (NodeBuffer) {
          return NodeBuffer.from ? NodeBuffer.from(result2) : new NodeBuffer(result2);
        }
        return result2;
      }
      function representYamlBinary(object) {
        var result2 = "", bits = 0, idx, tail, max = object.length, map = BASE64_MAP;
        for (idx = 0;idx < max; idx++) {
          if (idx % 3 === 0 && idx) {
            result2 += map[bits >> 18 & 63];
            result2 += map[bits >> 12 & 63];
            result2 += map[bits >> 6 & 63];
            result2 += map[bits & 63];
          }
          bits = (bits << 8) + object[idx];
        }
        tail = max % 3;
        if (tail === 0) {
          result2 += map[bits >> 18 & 63];
          result2 += map[bits >> 12 & 63];
          result2 += map[bits >> 6 & 63];
          result2 += map[bits & 63];
        } else if (tail === 2) {
          result2 += map[bits >> 10 & 63];
          result2 += map[bits >> 4 & 63];
          result2 += map[bits << 2 & 63];
          result2 += map[64];
        } else if (tail === 1) {
          result2 += map[bits >> 2 & 63];
          result2 += map[bits << 4 & 63];
          result2 += map[64];
          result2 += map[64];
        }
        return result2;
      }
      function isBinary(object) {
        return NodeBuffer && NodeBuffer.isBuffer(object);
      }
      module22.exports = new Type("tag:yaml.org,2002:binary", {
        kind: "scalar",
        resolve: resolveYamlBinary,
        construct: constructYamlBinary,
        predicate: isBinary,
        represent: representYamlBinary
      });
    }
  });
  var require_omap = __commonJS2({
    "../../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/omap.js"(exports22, module22) {
      var Type = require_type();
      var _hasOwnProperty = Object.prototype.hasOwnProperty;
      var _toString = Object.prototype.toString;
      function resolveYamlOmap(data) {
        if (data === null)
          return true;
        var objectKeys = [], index, length, pair, pairKey, pairHasKey, object = data;
        for (index = 0, length = object.length;index < length; index += 1) {
          pair = object[index];
          pairHasKey = false;
          if (_toString.call(pair) !== "[object Object]")
            return false;
          for (pairKey in pair) {
            if (_hasOwnProperty.call(pair, pairKey)) {
              if (!pairHasKey)
                pairHasKey = true;
              else
                return false;
            }
          }
          if (!pairHasKey)
            return false;
          if (objectKeys.indexOf(pairKey) === -1)
            objectKeys.push(pairKey);
          else
            return false;
        }
        return true;
      }
      function constructYamlOmap(data) {
        return data !== null ? data : [];
      }
      module22.exports = new Type("tag:yaml.org,2002:omap", {
        kind: "sequence",
        resolve: resolveYamlOmap,
        construct: constructYamlOmap
      });
    }
  });
  var require_pairs = __commonJS2({
    "../../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/pairs.js"(exports22, module22) {
      var Type = require_type();
      var _toString = Object.prototype.toString;
      function resolveYamlPairs(data) {
        if (data === null)
          return true;
        var index, length, pair, keys, result2, object = data;
        result2 = new Array(object.length);
        for (index = 0, length = object.length;index < length; index += 1) {
          pair = object[index];
          if (_toString.call(pair) !== "[object Object]")
            return false;
          keys = Object.keys(pair);
          if (keys.length !== 1)
            return false;
          result2[index] = [keys[0], pair[keys[0]]];
        }
        return true;
      }
      function constructYamlPairs(data) {
        if (data === null)
          return [];
        var index, length, pair, keys, result2, object = data;
        result2 = new Array(object.length);
        for (index = 0, length = object.length;index < length; index += 1) {
          pair = object[index];
          keys = Object.keys(pair);
          result2[index] = [keys[0], pair[keys[0]]];
        }
        return result2;
      }
      module22.exports = new Type("tag:yaml.org,2002:pairs", {
        kind: "sequence",
        resolve: resolveYamlPairs,
        construct: constructYamlPairs
      });
    }
  });
  var require_set = __commonJS2({
    "../../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/set.js"(exports22, module22) {
      var Type = require_type();
      var _hasOwnProperty = Object.prototype.hasOwnProperty;
      function resolveYamlSet(data) {
        if (data === null)
          return true;
        var key, object = data;
        for (key in object) {
          if (_hasOwnProperty.call(object, key)) {
            if (object[key] !== null)
              return false;
          }
        }
        return true;
      }
      function constructYamlSet(data) {
        return data !== null ? data : {};
      }
      module22.exports = new Type("tag:yaml.org,2002:set", {
        kind: "mapping",
        resolve: resolveYamlSet,
        construct: constructYamlSet
      });
    }
  });
  var require_default_safe = __commonJS2({
    "../../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js"(exports22, module22) {
      var Schema = require_schema();
      module22.exports = new Schema({
        include: [
          require_core()
        ],
        implicit: [
          require_timestamp(),
          require_merge()
        ],
        explicit: [
          require_binary(),
          require_omap(),
          require_pairs(),
          require_set()
        ]
      });
    }
  });
  var require_undefined = __commonJS2({
    "../../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/js/undefined.js"(exports22, module22) {
      var Type = require_type();
      function resolveJavascriptUndefined() {
        return true;
      }
      function constructJavascriptUndefined() {
        return;
      }
      function representJavascriptUndefined() {
        return "";
      }
      function isUndefined(object) {
        return typeof object === "undefined";
      }
      module22.exports = new Type("tag:yaml.org,2002:js/undefined", {
        kind: "scalar",
        resolve: resolveJavascriptUndefined,
        construct: constructJavascriptUndefined,
        predicate: isUndefined,
        represent: representJavascriptUndefined
      });
    }
  });
  var require_regexp = __commonJS2({
    "../../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/js/regexp.js"(exports22, module22) {
      var Type = require_type();
      function resolveJavascriptRegExp(data) {
        if (data === null)
          return false;
        if (data.length === 0)
          return false;
        var regexp = data, tail = /\/([gim]*)$/.exec(data), modifiers = "";
        if (regexp[0] === "/") {
          if (tail)
            modifiers = tail[1];
          if (modifiers.length > 3)
            return false;
          if (regexp[regexp.length - modifiers.length - 1] !== "/")
            return false;
        }
        return true;
      }
      function constructJavascriptRegExp(data) {
        var regexp = data, tail = /\/([gim]*)$/.exec(data), modifiers = "";
        if (regexp[0] === "/") {
          if (tail)
            modifiers = tail[1];
          regexp = regexp.slice(1, regexp.length - modifiers.length - 1);
        }
        return new RegExp(regexp, modifiers);
      }
      function representJavascriptRegExp(object) {
        var result2 = "/" + object.source + "/";
        if (object.global)
          result2 += "g";
        if (object.multiline)
          result2 += "m";
        if (object.ignoreCase)
          result2 += "i";
        return result2;
      }
      function isRegExp(object) {
        return Object.prototype.toString.call(object) === "[object RegExp]";
      }
      module22.exports = new Type("tag:yaml.org,2002:js/regexp", {
        kind: "scalar",
        resolve: resolveJavascriptRegExp,
        construct: constructJavascriptRegExp,
        predicate: isRegExp,
        represent: representJavascriptRegExp
      });
    }
  });
  var require_function = __commonJS2({
    "../../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/js/function.js"(exports22, module22) {
      var esprima;
      try {
        _require = __require;
        esprima = _require("esprima");
      } catch (_) {
        if (typeof window !== "undefined")
          esprima = window.esprima;
      }
      var _require;
      var Type = require_type();
      function resolveJavascriptFunction(data) {
        if (data === null)
          return false;
        try {
          var source = "(" + data + ")", ast = esprima.parse(source, { range: true });
          if (ast.type !== "Program" || ast.body.length !== 1 || ast.body[0].type !== "ExpressionStatement" || ast.body[0].expression.type !== "ArrowFunctionExpression" && ast.body[0].expression.type !== "FunctionExpression") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      function constructJavascriptFunction(data) {
        var source = "(" + data + ")", ast = esprima.parse(source, { range: true }), params = [], body;
        if (ast.type !== "Program" || ast.body.length !== 1 || ast.body[0].type !== "ExpressionStatement" || ast.body[0].expression.type !== "ArrowFunctionExpression" && ast.body[0].expression.type !== "FunctionExpression") {
          throw new Error("Failed to resolve function");
        }
        ast.body[0].expression.params.forEach(function(param) {
          params.push(param.name);
        });
        body = ast.body[0].expression.body.range;
        if (ast.body[0].expression.body.type === "BlockStatement") {
          return new Function(params, source.slice(body[0] + 1, body[1] - 1));
        }
        return new Function(params, "return " + source.slice(body[0], body[1]));
      }
      function representJavascriptFunction(object) {
        return object.toString();
      }
      function isFunction(object) {
        return Object.prototype.toString.call(object) === "[object Function]";
      }
      module22.exports = new Type("tag:yaml.org,2002:js/function", {
        kind: "scalar",
        resolve: resolveJavascriptFunction,
        construct: constructJavascriptFunction,
        predicate: isFunction,
        represent: representJavascriptFunction
      });
    }
  });
  var require_default_full = __commonJS2({
    "../../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/schema/default_full.js"(exports22, module22) {
      var Schema = require_schema();
      module22.exports = Schema.DEFAULT = new Schema({
        include: [
          require_default_safe()
        ],
        explicit: [
          require_undefined(),
          require_regexp(),
          require_function()
        ]
      });
    }
  });
  var require_loader = __commonJS2({
    "../../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/loader.js"(exports22, module22) {
      var common = require_common();
      var YAMLException = require_exception();
      var Mark = require_mark();
      var DEFAULT_SAFE_SCHEMA = require_default_safe();
      var DEFAULT_FULL_SCHEMA = require_default_full();
      var _hasOwnProperty = Object.prototype.hasOwnProperty;
      var CONTEXT_FLOW_IN = 1;
      var CONTEXT_FLOW_OUT = 2;
      var CONTEXT_BLOCK_IN = 3;
      var CONTEXT_BLOCK_OUT = 4;
      var CHOMPING_CLIP = 1;
      var CHOMPING_STRIP = 2;
      var CHOMPING_KEEP = 3;
      var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
      var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
      var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
      var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
      var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
      function _class(obj) {
        return Object.prototype.toString.call(obj);
      }
      function is_EOL(c) {
        return c === 10 || c === 13;
      }
      function is_WHITE_SPACE(c) {
        return c === 9 || c === 32;
      }
      function is_WS_OR_EOL(c) {
        return c === 9 || c === 32 || c === 10 || c === 13;
      }
      function is_FLOW_INDICATOR(c) {
        return c === 44 || c === 91 || c === 93 || c === 123 || c === 125;
      }
      function fromHexCode(c) {
        var lc;
        if (48 <= c && c <= 57) {
          return c - 48;
        }
        lc = c | 32;
        if (97 <= lc && lc <= 102) {
          return lc - 97 + 10;
        }
        return -1;
      }
      function escapedHexLen(c) {
        if (c === 120) {
          return 2;
        }
        if (c === 117) {
          return 4;
        }
        if (c === 85) {
          return 8;
        }
        return 0;
      }
      function fromDecimalCode(c) {
        if (48 <= c && c <= 57) {
          return c - 48;
        }
        return -1;
      }
      function simpleEscapeSequence(c) {
        return c === 48 ? "\x00" : c === 97 ? "\x07" : c === 98 ? "\b" : c === 116 ? "\t" : c === 9 ? "\t" : c === 110 ? `
` : c === 118 ? "\v" : c === 102 ? "\f" : c === 114 ? "\r" : c === 101 ? "\x1B" : c === 32 ? " " : c === 34 ? '"' : c === 47 ? "/" : c === 92 ? "\\" : c === 78 ? "\x85" : c === 95 ? "\xA0" : c === 76 ? "\u2028" : c === 80 ? "\u2029" : "";
      }
      function charFromCodepoint(c) {
        if (c <= 65535) {
          return String.fromCharCode(c);
        }
        return String.fromCharCode((c - 65536 >> 10) + 55296, (c - 65536 & 1023) + 56320);
      }
      var simpleEscapeCheck = new Array(256);
      var simpleEscapeMap = new Array(256);
      for (i = 0;i < 256; i++) {
        simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
        simpleEscapeMap[i] = simpleEscapeSequence(i);
      }
      var i;
      function State(input, options) {
        this.input = input;
        this.filename = options["filename"] || null;
        this.schema = options["schema"] || DEFAULT_FULL_SCHEMA;
        this.onWarning = options["onWarning"] || null;
        this.legacy = options["legacy"] || false;
        this.json = options["json"] || false;
        this.listener = options["listener"] || null;
        this.implicitTypes = this.schema.compiledImplicit;
        this.typeMap = this.schema.compiledTypeMap;
        this.length = input.length;
        this.position = 0;
        this.line = 0;
        this.lineStart = 0;
        this.lineIndent = 0;
        this.documents = [];
      }
      function generateError(state, message) {
        return new YAMLException(message, new Mark(state.filename, state.input, state.position, state.line, state.position - state.lineStart));
      }
      function throwError(state, message) {
        throw generateError(state, message);
      }
      function throwWarning(state, message) {
        if (state.onWarning) {
          state.onWarning.call(null, generateError(state, message));
        }
      }
      var directiveHandlers = {
        YAML: function handleYamlDirective(state, name, args) {
          var match, major, minor;
          if (state.version !== null) {
            throwError(state, "duplication of %YAML directive");
          }
          if (args.length !== 1) {
            throwError(state, "YAML directive accepts exactly one argument");
          }
          match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
          if (match === null) {
            throwError(state, "ill-formed argument of the YAML directive");
          }
          major = parseInt(match[1], 10);
          minor = parseInt(match[2], 10);
          if (major !== 1) {
            throwError(state, "unacceptable YAML version of the document");
          }
          state.version = args[0];
          state.checkLineBreaks = minor < 2;
          if (minor !== 1 && minor !== 2) {
            throwWarning(state, "unsupported YAML version of the document");
          }
        },
        TAG: function handleTagDirective(state, name, args) {
          var handle, prefix;
          if (args.length !== 2) {
            throwError(state, "TAG directive accepts exactly two arguments");
          }
          handle = args[0];
          prefix = args[1];
          if (!PATTERN_TAG_HANDLE.test(handle)) {
            throwError(state, "ill-formed tag handle (first argument) of the TAG directive");
          }
          if (_hasOwnProperty.call(state.tagMap, handle)) {
            throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
          }
          if (!PATTERN_TAG_URI.test(prefix)) {
            throwError(state, "ill-formed tag prefix (second argument) of the TAG directive");
          }
          state.tagMap[handle] = prefix;
        }
      };
      function captureSegment(state, start, end, checkJson) {
        var _position, _length, _character, _result;
        if (start < end) {
          _result = state.input.slice(start, end);
          if (checkJson) {
            for (_position = 0, _length = _result.length;_position < _length; _position += 1) {
              _character = _result.charCodeAt(_position);
              if (!(_character === 9 || 32 <= _character && _character <= 1114111)) {
                throwError(state, "expected valid JSON character");
              }
            }
          } else if (PATTERN_NON_PRINTABLE.test(_result)) {
            throwError(state, "the stream contains non-printable characters");
          }
          state.result += _result;
        }
      }
      function mergeMappings(state, destination, source, overridableKeys) {
        var sourceKeys, key, index, quantity;
        if (!common.isObject(source)) {
          throwError(state, "cannot merge mappings; the provided source object is unacceptable");
        }
        sourceKeys = Object.keys(source);
        for (index = 0, quantity = sourceKeys.length;index < quantity; index += 1) {
          key = sourceKeys[index];
          if (!_hasOwnProperty.call(destination, key)) {
            destination[key] = source[key];
            overridableKeys[key] = true;
          }
        }
      }
      function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startPos) {
        var index, quantity;
        if (Array.isArray(keyNode)) {
          keyNode = Array.prototype.slice.call(keyNode);
          for (index = 0, quantity = keyNode.length;index < quantity; index += 1) {
            if (Array.isArray(keyNode[index])) {
              throwError(state, "nested arrays are not supported inside keys");
            }
            if (typeof keyNode === "object" && _class(keyNode[index]) === "[object Object]") {
              keyNode[index] = "[object Object]";
            }
          }
        }
        if (typeof keyNode === "object" && _class(keyNode) === "[object Object]") {
          keyNode = "[object Object]";
        }
        keyNode = String(keyNode);
        if (_result === null) {
          _result = {};
        }
        if (keyTag === "tag:yaml.org,2002:merge") {
          if (Array.isArray(valueNode)) {
            for (index = 0, quantity = valueNode.length;index < quantity; index += 1) {
              mergeMappings(state, _result, valueNode[index], overridableKeys);
            }
          } else {
            mergeMappings(state, _result, valueNode, overridableKeys);
          }
        } else {
          if (!state.json && !_hasOwnProperty.call(overridableKeys, keyNode) && _hasOwnProperty.call(_result, keyNode)) {
            state.line = startLine || state.line;
            state.position = startPos || state.position;
            throwError(state, "duplicated mapping key");
          }
          _result[keyNode] = valueNode;
          delete overridableKeys[keyNode];
        }
        return _result;
      }
      function readLineBreak(state) {
        var ch;
        ch = state.input.charCodeAt(state.position);
        if (ch === 10) {
          state.position++;
        } else if (ch === 13) {
          state.position++;
          if (state.input.charCodeAt(state.position) === 10) {
            state.position++;
          }
        } else {
          throwError(state, "a line break is expected");
        }
        state.line += 1;
        state.lineStart = state.position;
      }
      function skipSeparationSpace(state, allowComments, checkIndent) {
        var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
        while (ch !== 0) {
          while (is_WHITE_SPACE(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          if (allowComments && ch === 35) {
            do {
              ch = state.input.charCodeAt(++state.position);
            } while (ch !== 10 && ch !== 13 && ch !== 0);
          }
          if (is_EOL(ch)) {
            readLineBreak(state);
            ch = state.input.charCodeAt(state.position);
            lineBreaks++;
            state.lineIndent = 0;
            while (ch === 32) {
              state.lineIndent++;
              ch = state.input.charCodeAt(++state.position);
            }
          } else {
            break;
          }
        }
        if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
          throwWarning(state, "deficient indentation");
        }
        return lineBreaks;
      }
      function testDocumentSeparator(state) {
        var _position = state.position, ch;
        ch = state.input.charCodeAt(_position);
        if ((ch === 45 || ch === 46) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
          _position += 3;
          ch = state.input.charCodeAt(_position);
          if (ch === 0 || is_WS_OR_EOL(ch)) {
            return true;
          }
        }
        return false;
      }
      function writeFoldedLines(state, count) {
        if (count === 1) {
          state.result += " ";
        } else if (count > 1) {
          state.result += common.repeat(`
`, count - 1);
        }
      }
      function readPlainScalar(state, nodeIndent, withinFlowCollection) {
        var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
        ch = state.input.charCodeAt(state.position);
        if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 35 || ch === 38 || ch === 42 || ch === 33 || ch === 124 || ch === 62 || ch === 39 || ch === 34 || ch === 37 || ch === 64 || ch === 96) {
          return false;
        }
        if (ch === 63 || ch === 45) {
          following = state.input.charCodeAt(state.position + 1);
          if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
            return false;
          }
        }
        state.kind = "scalar";
        state.result = "";
        captureStart = captureEnd = state.position;
        hasPendingContent = false;
        while (ch !== 0) {
          if (ch === 58) {
            following = state.input.charCodeAt(state.position + 1);
            if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
              break;
            }
          } else if (ch === 35) {
            preceding = state.input.charCodeAt(state.position - 1);
            if (is_WS_OR_EOL(preceding)) {
              break;
            }
          } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
            break;
          } else if (is_EOL(ch)) {
            _line = state.line;
            _lineStart = state.lineStart;
            _lineIndent = state.lineIndent;
            skipSeparationSpace(state, false, -1);
            if (state.lineIndent >= nodeIndent) {
              hasPendingContent = true;
              ch = state.input.charCodeAt(state.position);
              continue;
            } else {
              state.position = captureEnd;
              state.line = _line;
              state.lineStart = _lineStart;
              state.lineIndent = _lineIndent;
              break;
            }
          }
          if (hasPendingContent) {
            captureSegment(state, captureStart, captureEnd, false);
            writeFoldedLines(state, state.line - _line);
            captureStart = captureEnd = state.position;
            hasPendingContent = false;
          }
          if (!is_WHITE_SPACE(ch)) {
            captureEnd = state.position + 1;
          }
          ch = state.input.charCodeAt(++state.position);
        }
        captureSegment(state, captureStart, captureEnd, false);
        if (state.result) {
          return true;
        }
        state.kind = _kind;
        state.result = _result;
        return false;
      }
      function readSingleQuotedScalar(state, nodeIndent) {
        var ch, captureStart, captureEnd;
        ch = state.input.charCodeAt(state.position);
        if (ch !== 39) {
          return false;
        }
        state.kind = "scalar";
        state.result = "";
        state.position++;
        captureStart = captureEnd = state.position;
        while ((ch = state.input.charCodeAt(state.position)) !== 0) {
          if (ch === 39) {
            captureSegment(state, captureStart, state.position, true);
            ch = state.input.charCodeAt(++state.position);
            if (ch === 39) {
              captureStart = state.position;
              state.position++;
              captureEnd = state.position;
            } else {
              return true;
            }
          } else if (is_EOL(ch)) {
            captureSegment(state, captureStart, captureEnd, true);
            writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
            captureStart = captureEnd = state.position;
          } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
            throwError(state, "unexpected end of the document within a single quoted scalar");
          } else {
            state.position++;
            captureEnd = state.position;
          }
        }
        throwError(state, "unexpected end of the stream within a single quoted scalar");
      }
      function readDoubleQuotedScalar(state, nodeIndent) {
        var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
        ch = state.input.charCodeAt(state.position);
        if (ch !== 34) {
          return false;
        }
        state.kind = "scalar";
        state.result = "";
        state.position++;
        captureStart = captureEnd = state.position;
        while ((ch = state.input.charCodeAt(state.position)) !== 0) {
          if (ch === 34) {
            captureSegment(state, captureStart, state.position, true);
            state.position++;
            return true;
          } else if (ch === 92) {
            captureSegment(state, captureStart, state.position, true);
            ch = state.input.charCodeAt(++state.position);
            if (is_EOL(ch)) {
              skipSeparationSpace(state, false, nodeIndent);
            } else if (ch < 256 && simpleEscapeCheck[ch]) {
              state.result += simpleEscapeMap[ch];
              state.position++;
            } else if ((tmp = escapedHexLen(ch)) > 0) {
              hexLength = tmp;
              hexResult = 0;
              for (;hexLength > 0; hexLength--) {
                ch = state.input.charCodeAt(++state.position);
                if ((tmp = fromHexCode(ch)) >= 0) {
                  hexResult = (hexResult << 4) + tmp;
                } else {
                  throwError(state, "expected hexadecimal character");
                }
              }
              state.result += charFromCodepoint(hexResult);
              state.position++;
            } else {
              throwError(state, "unknown escape sequence");
            }
            captureStart = captureEnd = state.position;
          } else if (is_EOL(ch)) {
            captureSegment(state, captureStart, captureEnd, true);
            writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
            captureStart = captureEnd = state.position;
          } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
            throwError(state, "unexpected end of the document within a double quoted scalar");
          } else {
            state.position++;
            captureEnd = state.position;
          }
        }
        throwError(state, "unexpected end of the stream within a double quoted scalar");
      }
      function readFlowCollection(state, nodeIndent) {
        var readNext = true, _line, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = {}, keyNode, keyTag, valueNode, ch;
        ch = state.input.charCodeAt(state.position);
        if (ch === 91) {
          terminator = 93;
          isMapping = false;
          _result = [];
        } else if (ch === 123) {
          terminator = 125;
          isMapping = true;
          _result = {};
        } else {
          return false;
        }
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = _result;
        }
        ch = state.input.charCodeAt(++state.position);
        while (ch !== 0) {
          skipSeparationSpace(state, true, nodeIndent);
          ch = state.input.charCodeAt(state.position);
          if (ch === terminator) {
            state.position++;
            state.tag = _tag;
            state.anchor = _anchor;
            state.kind = isMapping ? "mapping" : "sequence";
            state.result = _result;
            return true;
          } else if (!readNext) {
            throwError(state, "missed comma between flow collection entries");
          }
          keyTag = keyNode = valueNode = null;
          isPair = isExplicitPair = false;
          if (ch === 63) {
            following = state.input.charCodeAt(state.position + 1);
            if (is_WS_OR_EOL(following)) {
              isPair = isExplicitPair = true;
              state.position++;
              skipSeparationSpace(state, true, nodeIndent);
            }
          }
          _line = state.line;
          composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
          keyTag = state.tag;
          keyNode = state.result;
          skipSeparationSpace(state, true, nodeIndent);
          ch = state.input.charCodeAt(state.position);
          if ((isExplicitPair || state.line === _line) && ch === 58) {
            isPair = true;
            ch = state.input.charCodeAt(++state.position);
            skipSeparationSpace(state, true, nodeIndent);
            composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
            valueNode = state.result;
          }
          if (isMapping) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode);
          } else if (isPair) {
            _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode));
          } else {
            _result.push(keyNode);
          }
          skipSeparationSpace(state, true, nodeIndent);
          ch = state.input.charCodeAt(state.position);
          if (ch === 44) {
            readNext = true;
            ch = state.input.charCodeAt(++state.position);
          } else {
            readNext = false;
          }
        }
        throwError(state, "unexpected end of the stream within a flow collection");
      }
      function readBlockScalar(state, nodeIndent) {
        var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
        ch = state.input.charCodeAt(state.position);
        if (ch === 124) {
          folding = false;
        } else if (ch === 62) {
          folding = true;
        } else {
          return false;
        }
        state.kind = "scalar";
        state.result = "";
        while (ch !== 0) {
          ch = state.input.charCodeAt(++state.position);
          if (ch === 43 || ch === 45) {
            if (CHOMPING_CLIP === chomping) {
              chomping = ch === 43 ? CHOMPING_KEEP : CHOMPING_STRIP;
            } else {
              throwError(state, "repeat of a chomping mode identifier");
            }
          } else if ((tmp = fromDecimalCode(ch)) >= 0) {
            if (tmp === 0) {
              throwError(state, "bad explicit indentation width of a block scalar; it cannot be less than one");
            } else if (!detectedIndent) {
              textIndent = nodeIndent + tmp - 1;
              detectedIndent = true;
            } else {
              throwError(state, "repeat of an indentation width identifier");
            }
          } else {
            break;
          }
        }
        if (is_WHITE_SPACE(ch)) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (is_WHITE_SPACE(ch));
          if (ch === 35) {
            do {
              ch = state.input.charCodeAt(++state.position);
            } while (!is_EOL(ch) && ch !== 0);
          }
        }
        while (ch !== 0) {
          readLineBreak(state);
          state.lineIndent = 0;
          ch = state.input.charCodeAt(state.position);
          while ((!detectedIndent || state.lineIndent < textIndent) && ch === 32) {
            state.lineIndent++;
            ch = state.input.charCodeAt(++state.position);
          }
          if (!detectedIndent && state.lineIndent > textIndent) {
            textIndent = state.lineIndent;
          }
          if (is_EOL(ch)) {
            emptyLines++;
            continue;
          }
          if (state.lineIndent < textIndent) {
            if (chomping === CHOMPING_KEEP) {
              state.result += common.repeat(`
`, didReadContent ? 1 + emptyLines : emptyLines);
            } else if (chomping === CHOMPING_CLIP) {
              if (didReadContent) {
                state.result += `
`;
              }
            }
            break;
          }
          if (folding) {
            if (is_WHITE_SPACE(ch)) {
              atMoreIndented = true;
              state.result += common.repeat(`
`, didReadContent ? 1 + emptyLines : emptyLines);
            } else if (atMoreIndented) {
              atMoreIndented = false;
              state.result += common.repeat(`
`, emptyLines + 1);
            } else if (emptyLines === 0) {
              if (didReadContent) {
                state.result += " ";
              }
            } else {
              state.result += common.repeat(`
`, emptyLines);
            }
          } else {
            state.result += common.repeat(`
`, didReadContent ? 1 + emptyLines : emptyLines);
          }
          didReadContent = true;
          detectedIndent = true;
          emptyLines = 0;
          captureStart = state.position;
          while (!is_EOL(ch) && ch !== 0) {
            ch = state.input.charCodeAt(++state.position);
          }
          captureSegment(state, captureStart, state.position, false);
        }
        return true;
      }
      function readBlockSequence(state, nodeIndent) {
        var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = _result;
        }
        ch = state.input.charCodeAt(state.position);
        while (ch !== 0) {
          if (ch !== 45) {
            break;
          }
          following = state.input.charCodeAt(state.position + 1);
          if (!is_WS_OR_EOL(following)) {
            break;
          }
          detected = true;
          state.position++;
          if (skipSeparationSpace(state, true, -1)) {
            if (state.lineIndent <= nodeIndent) {
              _result.push(null);
              ch = state.input.charCodeAt(state.position);
              continue;
            }
          }
          _line = state.line;
          composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
          _result.push(state.result);
          skipSeparationSpace(state, true, -1);
          ch = state.input.charCodeAt(state.position);
          if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
            throwError(state, "bad indentation of a sequence entry");
          } else if (state.lineIndent < nodeIndent) {
            break;
          }
        }
        if (detected) {
          state.tag = _tag;
          state.anchor = _anchor;
          state.kind = "sequence";
          state.result = _result;
          return true;
        }
        return false;
      }
      function readBlockMapping(state, nodeIndent, flowIndent) {
        var following, allowCompact, _line, _pos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = {}, keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = _result;
        }
        ch = state.input.charCodeAt(state.position);
        while (ch !== 0) {
          following = state.input.charCodeAt(state.position + 1);
          _line = state.line;
          _pos = state.position;
          if ((ch === 63 || ch === 58) && is_WS_OR_EOL(following)) {
            if (ch === 63) {
              if (atExplicitKey) {
                storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
                keyTag = keyNode = valueNode = null;
              }
              detected = true;
              atExplicitKey = true;
              allowCompact = true;
            } else if (atExplicitKey) {
              atExplicitKey = false;
              allowCompact = true;
            } else {
              throwError(state, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line");
            }
            state.position += 1;
            ch = following;
          } else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
            if (state.line === _line) {
              ch = state.input.charCodeAt(state.position);
              while (is_WHITE_SPACE(ch)) {
                ch = state.input.charCodeAt(++state.position);
              }
              if (ch === 58) {
                ch = state.input.charCodeAt(++state.position);
                if (!is_WS_OR_EOL(ch)) {
                  throwError(state, "a whitespace character is expected after the key-value separator within a block mapping");
                }
                if (atExplicitKey) {
                  storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
                  keyTag = keyNode = valueNode = null;
                }
                detected = true;
                atExplicitKey = false;
                allowCompact = false;
                keyTag = state.tag;
                keyNode = state.result;
              } else if (detected) {
                throwError(state, "can not read an implicit mapping pair; a colon is missed");
              } else {
                state.tag = _tag;
                state.anchor = _anchor;
                return true;
              }
            } else if (detected) {
              throwError(state, "can not read a block mapping entry; a multiline key may not be an implicit key");
            } else {
              state.tag = _tag;
              state.anchor = _anchor;
              return true;
            }
          } else {
            break;
          }
          if (state.line === _line || state.lineIndent > nodeIndent) {
            if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
              if (atExplicitKey) {
                keyNode = state.result;
              } else {
                valueNode = state.result;
              }
            }
            if (!atExplicitKey) {
              storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _pos);
              keyTag = keyNode = valueNode = null;
            }
            skipSeparationSpace(state, true, -1);
            ch = state.input.charCodeAt(state.position);
          }
          if (state.lineIndent > nodeIndent && ch !== 0) {
            throwError(state, "bad indentation of a mapping entry");
          } else if (state.lineIndent < nodeIndent) {
            break;
          }
        }
        if (atExplicitKey) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
        }
        if (detected) {
          state.tag = _tag;
          state.anchor = _anchor;
          state.kind = "mapping";
          state.result = _result;
        }
        return detected;
      }
      function readTagProperty(state) {
        var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
        ch = state.input.charCodeAt(state.position);
        if (ch !== 33)
          return false;
        if (state.tag !== null) {
          throwError(state, "duplication of a tag property");
        }
        ch = state.input.charCodeAt(++state.position);
        if (ch === 60) {
          isVerbatim = true;
          ch = state.input.charCodeAt(++state.position);
        } else if (ch === 33) {
          isNamed = true;
          tagHandle = "!!";
          ch = state.input.charCodeAt(++state.position);
        } else {
          tagHandle = "!";
        }
        _position = state.position;
        if (isVerbatim) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (ch !== 0 && ch !== 62);
          if (state.position < state.length) {
            tagName = state.input.slice(_position, state.position);
            ch = state.input.charCodeAt(++state.position);
          } else {
            throwError(state, "unexpected end of the stream within a verbatim tag");
          }
        } else {
          while (ch !== 0 && !is_WS_OR_EOL(ch)) {
            if (ch === 33) {
              if (!isNamed) {
                tagHandle = state.input.slice(_position - 1, state.position + 1);
                if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
                  throwError(state, "named tag handle cannot contain such characters");
                }
                isNamed = true;
                _position = state.position + 1;
              } else {
                throwError(state, "tag suffix cannot contain exclamation marks");
              }
            }
            ch = state.input.charCodeAt(++state.position);
          }
          tagName = state.input.slice(_position, state.position);
          if (PATTERN_FLOW_INDICATORS.test(tagName)) {
            throwError(state, "tag suffix cannot contain flow indicator characters");
          }
        }
        if (tagName && !PATTERN_TAG_URI.test(tagName)) {
          throwError(state, "tag name cannot contain such characters: " + tagName);
        }
        if (isVerbatim) {
          state.tag = tagName;
        } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {
          state.tag = state.tagMap[tagHandle] + tagName;
        } else if (tagHandle === "!") {
          state.tag = "!" + tagName;
        } else if (tagHandle === "!!") {
          state.tag = "tag:yaml.org,2002:" + tagName;
        } else {
          throwError(state, 'undeclared tag handle "' + tagHandle + '"');
        }
        return true;
      }
      function readAnchorProperty(state) {
        var _position, ch;
        ch = state.input.charCodeAt(state.position);
        if (ch !== 38)
          return false;
        if (state.anchor !== null) {
          throwError(state, "duplication of an anchor property");
        }
        ch = state.input.charCodeAt(++state.position);
        _position = state.position;
        while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        if (state.position === _position) {
          throwError(state, "name of an anchor node must contain at least one character");
        }
        state.anchor = state.input.slice(_position, state.position);
        return true;
      }
      function readAlias(state) {
        var _position, alias, ch;
        ch = state.input.charCodeAt(state.position);
        if (ch !== 42)
          return false;
        ch = state.input.charCodeAt(++state.position);
        _position = state.position;
        while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        if (state.position === _position) {
          throwError(state, "name of an alias node must contain at least one character");
        }
        alias = state.input.slice(_position, state.position);
        if (!_hasOwnProperty.call(state.anchorMap, alias)) {
          throwError(state, 'unidentified alias "' + alias + '"');
        }
        state.result = state.anchorMap[alias];
        skipSeparationSpace(state, true, -1);
        return true;
      }
      function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
        var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, type, flowIndent, blockIndent;
        if (state.listener !== null) {
          state.listener("open", state);
        }
        state.tag = null;
        state.anchor = null;
        state.kind = null;
        state.result = null;
        allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
        if (allowToSeek) {
          if (skipSeparationSpace(state, true, -1)) {
            atNewLine = true;
            if (state.lineIndent > parentIndent) {
              indentStatus = 1;
            } else if (state.lineIndent === parentIndent) {
              indentStatus = 0;
            } else if (state.lineIndent < parentIndent) {
              indentStatus = -1;
            }
          }
        }
        if (indentStatus === 1) {
          while (readTagProperty(state) || readAnchorProperty(state)) {
            if (skipSeparationSpace(state, true, -1)) {
              atNewLine = true;
              allowBlockCollections = allowBlockStyles;
              if (state.lineIndent > parentIndent) {
                indentStatus = 1;
              } else if (state.lineIndent === parentIndent) {
                indentStatus = 0;
              } else if (state.lineIndent < parentIndent) {
                indentStatus = -1;
              }
            } else {
              allowBlockCollections = false;
            }
          }
        }
        if (allowBlockCollections) {
          allowBlockCollections = atNewLine || allowCompact;
        }
        if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
          if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
            flowIndent = parentIndent;
          } else {
            flowIndent = parentIndent + 1;
          }
          blockIndent = state.position - state.lineStart;
          if (indentStatus === 1) {
            if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
              hasContent = true;
            } else {
              if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
                hasContent = true;
              } else if (readAlias(state)) {
                hasContent = true;
                if (state.tag !== null || state.anchor !== null) {
                  throwError(state, "alias node should not have any properties");
                }
              } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
                hasContent = true;
                if (state.tag === null) {
                  state.tag = "?";
                }
              }
              if (state.anchor !== null) {
                state.anchorMap[state.anchor] = state.result;
              }
            }
          } else if (indentStatus === 0) {
            hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
          }
        }
        if (state.tag !== null && state.tag !== "!") {
          if (state.tag === "?") {
            if (state.result !== null && state.kind !== "scalar") {
              throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
            }
            for (typeIndex = 0, typeQuantity = state.implicitTypes.length;typeIndex < typeQuantity; typeIndex += 1) {
              type = state.implicitTypes[typeIndex];
              if (type.resolve(state.result)) {
                state.result = type.construct(state.result);
                state.tag = type.tag;
                if (state.anchor !== null) {
                  state.anchorMap[state.anchor] = state.result;
                }
                break;
              }
            }
          } else if (_hasOwnProperty.call(state.typeMap[state.kind || "fallback"], state.tag)) {
            type = state.typeMap[state.kind || "fallback"][state.tag];
            if (state.result !== null && type.kind !== state.kind) {
              throwError(state, "unacceptable node kind for !<" + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
            }
            if (!type.resolve(state.result)) {
              throwError(state, "cannot resolve a node with !<" + state.tag + "> explicit tag");
            } else {
              state.result = type.construct(state.result);
              if (state.anchor !== null) {
                state.anchorMap[state.anchor] = state.result;
              }
            }
          } else {
            throwError(state, "unknown tag !<" + state.tag + ">");
          }
        }
        if (state.listener !== null) {
          state.listener("close", state);
        }
        return state.tag !== null || state.anchor !== null || hasContent;
      }
      function readDocument(state) {
        var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
        state.version = null;
        state.checkLineBreaks = state.legacy;
        state.tagMap = {};
        state.anchorMap = {};
        while ((ch = state.input.charCodeAt(state.position)) !== 0) {
          skipSeparationSpace(state, true, -1);
          ch = state.input.charCodeAt(state.position);
          if (state.lineIndent > 0 || ch !== 37) {
            break;
          }
          hasDirectives = true;
          ch = state.input.charCodeAt(++state.position);
          _position = state.position;
          while (ch !== 0 && !is_WS_OR_EOL(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          directiveName = state.input.slice(_position, state.position);
          directiveArgs = [];
          if (directiveName.length < 1) {
            throwError(state, "directive name must not be less than one character in length");
          }
          while (ch !== 0) {
            while (is_WHITE_SPACE(ch)) {
              ch = state.input.charCodeAt(++state.position);
            }
            if (ch === 35) {
              do {
                ch = state.input.charCodeAt(++state.position);
              } while (ch !== 0 && !is_EOL(ch));
              break;
            }
            if (is_EOL(ch))
              break;
            _position = state.position;
            while (ch !== 0 && !is_WS_OR_EOL(ch)) {
              ch = state.input.charCodeAt(++state.position);
            }
            directiveArgs.push(state.input.slice(_position, state.position));
          }
          if (ch !== 0)
            readLineBreak(state);
          if (_hasOwnProperty.call(directiveHandlers, directiveName)) {
            directiveHandlers[directiveName](state, directiveName, directiveArgs);
          } else {
            throwWarning(state, 'unknown document directive "' + directiveName + '"');
          }
        }
        skipSeparationSpace(state, true, -1);
        if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 45 && state.input.charCodeAt(state.position + 1) === 45 && state.input.charCodeAt(state.position + 2) === 45) {
          state.position += 3;
          skipSeparationSpace(state, true, -1);
        } else if (hasDirectives) {
          throwError(state, "directives end mark is expected");
        }
        composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
        skipSeparationSpace(state, true, -1);
        if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
          throwWarning(state, "non-ASCII line breaks are interpreted as content");
        }
        state.documents.push(state.result);
        if (state.position === state.lineStart && testDocumentSeparator(state)) {
          if (state.input.charCodeAt(state.position) === 46) {
            state.position += 3;
            skipSeparationSpace(state, true, -1);
          }
          return;
        }
        if (state.position < state.length - 1) {
          throwError(state, "end of the stream or a document separator is expected");
        } else {
          return;
        }
      }
      function loadDocuments(input, options) {
        input = String(input);
        options = options || {};
        if (input.length !== 0) {
          if (input.charCodeAt(input.length - 1) !== 10 && input.charCodeAt(input.length - 1) !== 13) {
            input += `
`;
          }
          if (input.charCodeAt(0) === 65279) {
            input = input.slice(1);
          }
        }
        var state = new State(input, options);
        var nullpos = input.indexOf("\x00");
        if (nullpos !== -1) {
          state.position = nullpos;
          throwError(state, "null byte is not allowed in input");
        }
        state.input += "\x00";
        while (state.input.charCodeAt(state.position) === 32) {
          state.lineIndent += 1;
          state.position += 1;
        }
        while (state.position < state.length - 1) {
          readDocument(state);
        }
        return state.documents;
      }
      function loadAll(input, iterator, options) {
        if (iterator !== null && typeof iterator === "object" && typeof options === "undefined") {
          options = iterator;
          iterator = null;
        }
        var documents = loadDocuments(input, options);
        if (typeof iterator !== "function") {
          return documents;
        }
        for (var index = 0, length = documents.length;index < length; index += 1) {
          iterator(documents[index]);
        }
      }
      function load(input, options) {
        var documents = loadDocuments(input, options);
        if (documents.length === 0) {
          return;
        } else if (documents.length === 1) {
          return documents[0];
        }
        throw new YAMLException("expected a single document in the stream, but found more");
      }
      function safeLoadAll(input, iterator, options) {
        if (typeof iterator === "object" && iterator !== null && typeof options === "undefined") {
          options = iterator;
          iterator = null;
        }
        return loadAll(input, iterator, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
      }
      function safeLoad(input, options) {
        return load(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
      }
      module22.exports.loadAll = loadAll;
      module22.exports.load = load;
      module22.exports.safeLoadAll = safeLoadAll;
      module22.exports.safeLoad = safeLoad;
    }
  });
  var require_dumper = __commonJS2({
    "../../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/dumper.js"(exports22, module22) {
      var common = require_common();
      var YAMLException = require_exception();
      var DEFAULT_FULL_SCHEMA = require_default_full();
      var DEFAULT_SAFE_SCHEMA = require_default_safe();
      var _toString = Object.prototype.toString;
      var _hasOwnProperty = Object.prototype.hasOwnProperty;
      var CHAR_TAB = 9;
      var CHAR_LINE_FEED = 10;
      var CHAR_CARRIAGE_RETURN = 13;
      var CHAR_SPACE = 32;
      var CHAR_EXCLAMATION = 33;
      var CHAR_DOUBLE_QUOTE = 34;
      var CHAR_SHARP = 35;
      var CHAR_PERCENT = 37;
      var CHAR_AMPERSAND = 38;
      var CHAR_SINGLE_QUOTE = 39;
      var CHAR_ASTERISK = 42;
      var CHAR_COMMA = 44;
      var CHAR_MINUS = 45;
      var CHAR_COLON = 58;
      var CHAR_EQUALS = 61;
      var CHAR_GREATER_THAN = 62;
      var CHAR_QUESTION = 63;
      var CHAR_COMMERCIAL_AT = 64;
      var CHAR_LEFT_SQUARE_BRACKET = 91;
      var CHAR_RIGHT_SQUARE_BRACKET = 93;
      var CHAR_GRAVE_ACCENT = 96;
      var CHAR_LEFT_CURLY_BRACKET = 123;
      var CHAR_VERTICAL_LINE = 124;
      var CHAR_RIGHT_CURLY_BRACKET = 125;
      var ESCAPE_SEQUENCES = {};
      ESCAPE_SEQUENCES[0] = "\\0";
      ESCAPE_SEQUENCES[7] = "\\a";
      ESCAPE_SEQUENCES[8] = "\\b";
      ESCAPE_SEQUENCES[9] = "\\t";
      ESCAPE_SEQUENCES[10] = "\\n";
      ESCAPE_SEQUENCES[11] = "\\v";
      ESCAPE_SEQUENCES[12] = "\\f";
      ESCAPE_SEQUENCES[13] = "\\r";
      ESCAPE_SEQUENCES[27] = "\\e";
      ESCAPE_SEQUENCES[34] = "\\\"";
      ESCAPE_SEQUENCES[92] = "\\\\";
      ESCAPE_SEQUENCES[133] = "\\N";
      ESCAPE_SEQUENCES[160] = "\\_";
      ESCAPE_SEQUENCES[8232] = "\\L";
      ESCAPE_SEQUENCES[8233] = "\\P";
      var DEPRECATED_BOOLEANS_SYNTAX = [
        "y",
        "Y",
        "yes",
        "Yes",
        "YES",
        "on",
        "On",
        "ON",
        "n",
        "N",
        "no",
        "No",
        "NO",
        "off",
        "Off",
        "OFF"
      ];
      function compileStyleMap(schema, map) {
        var result2, keys, index, length, tag, style, type;
        if (map === null)
          return {};
        result2 = {};
        keys = Object.keys(map);
        for (index = 0, length = keys.length;index < length; index += 1) {
          tag = keys[index];
          style = String(map[tag]);
          if (tag.slice(0, 2) === "!!") {
            tag = "tag:yaml.org,2002:" + tag.slice(2);
          }
          type = schema.compiledTypeMap["fallback"][tag];
          if (type && _hasOwnProperty.call(type.styleAliases, style)) {
            style = type.styleAliases[style];
          }
          result2[tag] = style;
        }
        return result2;
      }
      function encodeHex(character) {
        var string, handle, length;
        string = character.toString(16).toUpperCase();
        if (character <= 255) {
          handle = "x";
          length = 2;
        } else if (character <= 65535) {
          handle = "u";
          length = 4;
        } else if (character <= 4294967295) {
          handle = "U";
          length = 8;
        } else {
          throw new YAMLException("code point within a string may not be greater than 0xFFFFFFFF");
        }
        return "\\" + handle + common.repeat("0", length - string.length) + string;
      }
      function State(options) {
        this.schema = options["schema"] || DEFAULT_FULL_SCHEMA;
        this.indent = Math.max(1, options["indent"] || 2);
        this.noArrayIndent = options["noArrayIndent"] || false;
        this.skipInvalid = options["skipInvalid"] || false;
        this.flowLevel = common.isNothing(options["flowLevel"]) ? -1 : options["flowLevel"];
        this.styleMap = compileStyleMap(this.schema, options["styles"] || null);
        this.sortKeys = options["sortKeys"] || false;
        this.lineWidth = options["lineWidth"] || 80;
        this.noRefs = options["noRefs"] || false;
        this.noCompatMode = options["noCompatMode"] || false;
        this.condenseFlow = options["condenseFlow"] || false;
        this.implicitTypes = this.schema.compiledImplicit;
        this.explicitTypes = this.schema.compiledExplicit;
        this.tag = null;
        this.result = "";
        this.duplicates = [];
        this.usedDuplicates = null;
      }
      function indentString(string, spaces) {
        var ind = common.repeat(" ", spaces), position = 0, next = -1, result2 = "", line, length = string.length;
        while (position < length) {
          next = string.indexOf(`
`, position);
          if (next === -1) {
            line = string.slice(position);
            position = length;
          } else {
            line = string.slice(position, next + 1);
            position = next + 1;
          }
          if (line.length && line !== `
`)
            result2 += ind;
          result2 += line;
        }
        return result2;
      }
      function generateNextLine(state, level) {
        return `
` + common.repeat(" ", state.indent * level);
      }
      function testImplicitResolving(state, str) {
        var index, length, type;
        for (index = 0, length = state.implicitTypes.length;index < length; index += 1) {
          type = state.implicitTypes[index];
          if (type.resolve(str)) {
            return true;
          }
        }
        return false;
      }
      function isWhitespace(c) {
        return c === CHAR_SPACE || c === CHAR_TAB;
      }
      function isPrintable(c) {
        return 32 <= c && c <= 126 || 161 <= c && c <= 55295 && c !== 8232 && c !== 8233 || 57344 <= c && c <= 65533 && c !== 65279 || 65536 <= c && c <= 1114111;
      }
      function isNsChar(c) {
        return isPrintable(c) && !isWhitespace(c) && c !== 65279 && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
      }
      function isPlainSafe(c, prev) {
        return isPrintable(c) && c !== 65279 && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_COLON && (c !== CHAR_SHARP || prev && isNsChar(prev));
      }
      function isPlainSafeFirst(c) {
        return isPrintable(c) && c !== 65279 && !isWhitespace(c) && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
      }
      function needIndentIndicator(string) {
        var leadingSpaceRe = /^\n* /;
        return leadingSpaceRe.test(string);
      }
      var STYLE_PLAIN = 1;
      var STYLE_SINGLE = 2;
      var STYLE_LITERAL = 3;
      var STYLE_FOLDED = 4;
      var STYLE_DOUBLE = 5;
      function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType) {
        var i;
        var char, prev_char;
        var hasLineBreak = false;
        var hasFoldableLine = false;
        var shouldTrackWidth = lineWidth !== -1;
        var previousLineBreak = -1;
        var plain = isPlainSafeFirst(string.charCodeAt(0)) && !isWhitespace(string.charCodeAt(string.length - 1));
        if (singleLineOnly) {
          for (i = 0;i < string.length; i++) {
            char = string.charCodeAt(i);
            if (!isPrintable(char)) {
              return STYLE_DOUBLE;
            }
            prev_char = i > 0 ? string.charCodeAt(i - 1) : null;
            plain = plain && isPlainSafe(char, prev_char);
          }
        } else {
          for (i = 0;i < string.length; i++) {
            char = string.charCodeAt(i);
            if (char === CHAR_LINE_FEED) {
              hasLineBreak = true;
              if (shouldTrackWidth) {
                hasFoldableLine = hasFoldableLine || i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ";
                previousLineBreak = i;
              }
            } else if (!isPrintable(char)) {
              return STYLE_DOUBLE;
            }
            prev_char = i > 0 ? string.charCodeAt(i - 1) : null;
            plain = plain && isPlainSafe(char, prev_char);
          }
          hasFoldableLine = hasFoldableLine || shouldTrackWidth && (i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ");
        }
        if (!hasLineBreak && !hasFoldableLine) {
          return plain && !testAmbiguousType(string) ? STYLE_PLAIN : STYLE_SINGLE;
        }
        if (indentPerLevel > 9 && needIndentIndicator(string)) {
          return STYLE_DOUBLE;
        }
        return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
      }
      function writeScalar(state, string, level, iskey) {
        state.dump = function() {
          if (string.length === 0) {
            return "''";
          }
          if (!state.noCompatMode && DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1) {
            return "'" + string + "'";
          }
          var indent = state.indent * Math.max(1, level);
          var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);
          var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
          function testAmbiguity(string2) {
            return testImplicitResolving(state, string2);
          }
          switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity)) {
            case STYLE_PLAIN:
              return string;
            case STYLE_SINGLE:
              return "'" + string.replace(/'/g, "''") + "'";
            case STYLE_LITERAL:
              return "|" + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));
            case STYLE_FOLDED:
              return ">" + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
            case STYLE_DOUBLE:
              return '"' + escapeString(string, lineWidth) + '"';
            default:
              throw new YAMLException("impossible error: invalid scalar style");
          }
        }();
      }
      function blockHeader(string, indentPerLevel) {
        var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : "";
        var clip = string[string.length - 1] === `
`;
        var keep = clip && (string[string.length - 2] === `
` || string === `
`);
        var chomp = keep ? "+" : clip ? "" : "-";
        return indentIndicator + chomp + `
`;
      }
      function dropEndingNewline(string) {
        return string[string.length - 1] === `
` ? string.slice(0, -1) : string;
      }
      function foldString(string, width) {
        var lineRe = /(\n+)([^\n]*)/g;
        var result2 = function() {
          var nextLF = string.indexOf(`
`);
          nextLF = nextLF !== -1 ? nextLF : string.length;
          lineRe.lastIndex = nextLF;
          return foldLine(string.slice(0, nextLF), width);
        }();
        var prevMoreIndented = string[0] === `
` || string[0] === " ";
        var moreIndented;
        var match;
        while (match = lineRe.exec(string)) {
          var prefix = match[1], line = match[2];
          moreIndented = line[0] === " ";
          result2 += prefix + (!prevMoreIndented && !moreIndented && line !== "" ? `
` : "") + foldLine(line, width);
          prevMoreIndented = moreIndented;
        }
        return result2;
      }
      function foldLine(line, width) {
        if (line === "" || line[0] === " ")
          return line;
        var breakRe = / [^ ]/g;
        var match;
        var start = 0, end, curr = 0, next = 0;
        var result2 = "";
        while (match = breakRe.exec(line)) {
          next = match.index;
          if (next - start > width) {
            end = curr > start ? curr : next;
            result2 += `
` + line.slice(start, end);
            start = end + 1;
          }
          curr = next;
        }
        result2 += `
`;
        if (line.length - start > width && curr > start) {
          result2 += line.slice(start, curr) + `
` + line.slice(curr + 1);
        } else {
          result2 += line.slice(start);
        }
        return result2.slice(1);
      }
      function escapeString(string) {
        var result2 = "";
        var char, nextChar;
        var escapeSeq;
        for (var i = 0;i < string.length; i++) {
          char = string.charCodeAt(i);
          if (char >= 55296 && char <= 56319) {
            nextChar = string.charCodeAt(i + 1);
            if (nextChar >= 56320 && nextChar <= 57343) {
              result2 += encodeHex((char - 55296) * 1024 + nextChar - 56320 + 65536);
              i++;
              continue;
            }
          }
          escapeSeq = ESCAPE_SEQUENCES[char];
          result2 += !escapeSeq && isPrintable(char) ? string[i] : escapeSeq || encodeHex(char);
        }
        return result2;
      }
      function writeFlowSequence(state, level, object) {
        var _result = "", _tag = state.tag, index, length;
        for (index = 0, length = object.length;index < length; index += 1) {
          if (writeNode(state, level, object[index], false, false)) {
            if (index !== 0)
              _result += "," + (!state.condenseFlow ? " " : "");
            _result += state.dump;
          }
        }
        state.tag = _tag;
        state.dump = "[" + _result + "]";
      }
      function writeBlockSequence(state, level, object, compact) {
        var _result = "", _tag = state.tag, index, length;
        for (index = 0, length = object.length;index < length; index += 1) {
          if (writeNode(state, level + 1, object[index], true, true)) {
            if (!compact || index !== 0) {
              _result += generateNextLine(state, level);
            }
            if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
              _result += "-";
            } else {
              _result += "- ";
            }
            _result += state.dump;
          }
        }
        state.tag = _tag;
        state.dump = _result || "[]";
      }
      function writeFlowMapping(state, level, object) {
        var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, pairBuffer;
        for (index = 0, length = objectKeyList.length;index < length; index += 1) {
          pairBuffer = "";
          if (index !== 0)
            pairBuffer += ", ";
          if (state.condenseFlow)
            pairBuffer += '"';
          objectKey = objectKeyList[index];
          objectValue = object[objectKey];
          if (!writeNode(state, level, objectKey, false, false)) {
            continue;
          }
          if (state.dump.length > 1024)
            pairBuffer += "? ";
          pairBuffer += state.dump + (state.condenseFlow ? '"' : "") + ":" + (state.condenseFlow ? "" : " ");
          if (!writeNode(state, level, objectValue, false, false)) {
            continue;
          }
          pairBuffer += state.dump;
          _result += pairBuffer;
        }
        state.tag = _tag;
        state.dump = "{" + _result + "}";
      }
      function writeBlockMapping(state, level, object, compact) {
        var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, explicitPair, pairBuffer;
        if (state.sortKeys === true) {
          objectKeyList.sort();
        } else if (typeof state.sortKeys === "function") {
          objectKeyList.sort(state.sortKeys);
        } else if (state.sortKeys) {
          throw new YAMLException("sortKeys must be a boolean or a function");
        }
        for (index = 0, length = objectKeyList.length;index < length; index += 1) {
          pairBuffer = "";
          if (!compact || index !== 0) {
            pairBuffer += generateNextLine(state, level);
          }
          objectKey = objectKeyList[index];
          objectValue = object[objectKey];
          if (!writeNode(state, level + 1, objectKey, true, true, true)) {
            continue;
          }
          explicitPair = state.tag !== null && state.tag !== "?" || state.dump && state.dump.length > 1024;
          if (explicitPair) {
            if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
              pairBuffer += "?";
            } else {
              pairBuffer += "? ";
            }
          }
          pairBuffer += state.dump;
          if (explicitPair) {
            pairBuffer += generateNextLine(state, level);
          }
          if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
            continue;
          }
          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            pairBuffer += ":";
          } else {
            pairBuffer += ": ";
          }
          pairBuffer += state.dump;
          _result += pairBuffer;
        }
        state.tag = _tag;
        state.dump = _result || "{}";
      }
      function detectType(state, object, explicit) {
        var _result, typeList, index, length, type, style;
        typeList = explicit ? state.explicitTypes : state.implicitTypes;
        for (index = 0, length = typeList.length;index < length; index += 1) {
          type = typeList[index];
          if ((type.instanceOf || type.predicate) && (!type.instanceOf || typeof object === "object" && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {
            state.tag = explicit ? type.tag : "?";
            if (type.represent) {
              style = state.styleMap[type.tag] || type.defaultStyle;
              if (_toString.call(type.represent) === "[object Function]") {
                _result = type.represent(object, style);
              } else if (_hasOwnProperty.call(type.represent, style)) {
                _result = type.represent[style](object, style);
              } else {
                throw new YAMLException("!<" + type.tag + '> tag resolver accepts not "' + style + '" style');
              }
              state.dump = _result;
            }
            return true;
          }
        }
        return false;
      }
      function writeNode(state, level, object, block, compact, iskey) {
        state.tag = null;
        state.dump = object;
        if (!detectType(state, object, false)) {
          detectType(state, object, true);
        }
        var type = _toString.call(state.dump);
        if (block) {
          block = state.flowLevel < 0 || state.flowLevel > level;
        }
        var objectOrArray = type === "[object Object]" || type === "[object Array]", duplicateIndex, duplicate;
        if (objectOrArray) {
          duplicateIndex = state.duplicates.indexOf(object);
          duplicate = duplicateIndex !== -1;
        }
        if (state.tag !== null && state.tag !== "?" || duplicate || state.indent !== 2 && level > 0) {
          compact = false;
        }
        if (duplicate && state.usedDuplicates[duplicateIndex]) {
          state.dump = "*ref_" + duplicateIndex;
        } else {
          if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
            state.usedDuplicates[duplicateIndex] = true;
          }
          if (type === "[object Object]") {
            if (block && Object.keys(state.dump).length !== 0) {
              writeBlockMapping(state, level, state.dump, compact);
              if (duplicate) {
                state.dump = "&ref_" + duplicateIndex + state.dump;
              }
            } else {
              writeFlowMapping(state, level, state.dump);
              if (duplicate) {
                state.dump = "&ref_" + duplicateIndex + " " + state.dump;
              }
            }
          } else if (type === "[object Array]") {
            var arrayLevel = state.noArrayIndent && level > 0 ? level - 1 : level;
            if (block && state.dump.length !== 0) {
              writeBlockSequence(state, arrayLevel, state.dump, compact);
              if (duplicate) {
                state.dump = "&ref_" + duplicateIndex + state.dump;
              }
            } else {
              writeFlowSequence(state, arrayLevel, state.dump);
              if (duplicate) {
                state.dump = "&ref_" + duplicateIndex + " " + state.dump;
              }
            }
          } else if (type === "[object String]") {
            if (state.tag !== "?") {
              writeScalar(state, state.dump, level, iskey);
            }
          } else {
            if (state.skipInvalid)
              return false;
            throw new YAMLException("unacceptable kind of an object to dump " + type);
          }
          if (state.tag !== null && state.tag !== "?") {
            state.dump = "!<" + state.tag + "> " + state.dump;
          }
        }
        return true;
      }
      function getDuplicateReferences(object, state) {
        var objects = [], duplicatesIndexes = [], index, length;
        inspectNode(object, objects, duplicatesIndexes);
        for (index = 0, length = duplicatesIndexes.length;index < length; index += 1) {
          state.duplicates.push(objects[duplicatesIndexes[index]]);
        }
        state.usedDuplicates = new Array(length);
      }
      function inspectNode(object, objects, duplicatesIndexes) {
        var objectKeyList, index, length;
        if (object !== null && typeof object === "object") {
          index = objects.indexOf(object);
          if (index !== -1) {
            if (duplicatesIndexes.indexOf(index) === -1) {
              duplicatesIndexes.push(index);
            }
          } else {
            objects.push(object);
            if (Array.isArray(object)) {
              for (index = 0, length = object.length;index < length; index += 1) {
                inspectNode(object[index], objects, duplicatesIndexes);
              }
            } else {
              objectKeyList = Object.keys(object);
              for (index = 0, length = objectKeyList.length;index < length; index += 1) {
                inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
              }
            }
          }
        }
      }
      function dump(input, options) {
        options = options || {};
        var state = new State(options);
        if (!state.noRefs)
          getDuplicateReferences(input, state);
        if (writeNode(state, 0, input, true, true))
          return state.dump + `
`;
        return "";
      }
      function safeDump(input, options) {
        return dump(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
      }
      module22.exports.dump = dump;
      module22.exports.safeDump = safeDump;
    }
  });
  var require_js_yaml = __commonJS2({
    "../../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml.js"(exports22, module22) {
      var loader = require_loader();
      var dumper = require_dumper();
      function deprecated(name) {
        return function() {
          throw new Error("Function " + name + " is deprecated and cannot be used.");
        };
      }
      module22.exports.Type = require_type();
      module22.exports.Schema = require_schema();
      module22.exports.FAILSAFE_SCHEMA = require_failsafe();
      module22.exports.JSON_SCHEMA = require_json();
      module22.exports.CORE_SCHEMA = require_core();
      module22.exports.DEFAULT_SAFE_SCHEMA = require_default_safe();
      module22.exports.DEFAULT_FULL_SCHEMA = require_default_full();
      module22.exports.load = loader.load;
      module22.exports.loadAll = loader.loadAll;
      module22.exports.safeLoad = loader.safeLoad;
      module22.exports.safeLoadAll = loader.safeLoadAll;
      module22.exports.dump = dumper.dump;
      module22.exports.safeDump = dumper.safeDump;
      module22.exports.YAMLException = require_exception();
      module22.exports.MINIMAL_SCHEMA = require_failsafe();
      module22.exports.SAFE_SCHEMA = require_default_safe();
      module22.exports.DEFAULT_SCHEMA = require_default_full();
      module22.exports.scan = deprecated("scan");
      module22.exports.parse = deprecated("parse");
      module22.exports.compose = deprecated("compose");
      module22.exports.addConstructor = deprecated("addConstructor");
    }
  });
  var require_js_yaml2 = __commonJS2({
    "../../node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/index.js"(exports22, module22) {
      var yaml = require_js_yaml();
      module22.exports = yaml;
    }
  });
  var require_syml = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+parsers@3.0.2/node_modules/@yarnpkg/parsers/lib/grammars/syml.js"(exports22, module22) {
      function peg$subclass(child, parent) {
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
      }
      function peg$SyntaxError(message, expected, found, location) {
        this.message = message;
        this.expected = expected;
        this.found = found;
        this.location = location;
        this.name = "SyntaxError";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, peg$SyntaxError);
        }
      }
      peg$subclass(peg$SyntaxError, Error);
      peg$SyntaxError.buildMessage = function(expected, found) {
        var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return '"' + literalEscape(expectation.text) + '"';
          },
          class: function(expectation) {
            var escapedParts = "", i;
            for (i = 0;i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);
            }
            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },
          any: function(expectation) {
            return "any character";
          },
          end: function(expectation) {
            return "end of input";
          },
          other: function(expectation) {
            return expectation.description;
          }
        };
        function hex(ch) {
          return ch.charCodeAt(0).toString(16).toUpperCase();
        }
        function literalEscape(s) {
          return s.replace(/\\/g, "\\\\").replace(/"/g, "\\\"").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
            return "\\x0" + hex(ch);
          }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
            return "\\x" + hex(ch);
          });
        }
        function classEscape(s) {
          return s.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
            return "\\x0" + hex(ch);
          }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
            return "\\x" + hex(ch);
          });
        }
        function describeExpectation(expectation) {
          return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
        }
        function describeExpected(expected2) {
          var descriptions = new Array(expected2.length), i, j;
          for (i = 0;i < expected2.length; i++) {
            descriptions[i] = describeExpectation(expected2[i]);
          }
          descriptions.sort();
          if (descriptions.length > 0) {
            for (i = 1, j = 1;i < descriptions.length; i++) {
              if (descriptions[i - 1] !== descriptions[i]) {
                descriptions[j] = descriptions[i];
                j++;
              }
            }
            descriptions.length = j;
          }
          switch (descriptions.length) {
            case 1:
              return descriptions[0];
            case 2:
              return descriptions[0] + " or " + descriptions[1];
            default:
              return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
          }
        }
        function describeFound(found2) {
          return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
        }
        return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
      };
      function peg$parse(input, options) {
        options = options !== undefined ? options : {};
        var peg$FAILED = {}, peg$startRuleFunctions = { Start: peg$parseStart }, peg$startRuleFunction = peg$parseStart, peg$c0 = function(statements) {
          return [].concat(...statements);
        }, peg$c1 = "-", peg$c2 = peg$literalExpectation("-", false), peg$c3 = function(value) {
          return value;
        }, peg$c4 = function(statements) {
          return Object.assign({}, ...statements);
        }, peg$c5 = "#", peg$c6 = peg$literalExpectation("#", false), peg$c7 = peg$anyExpectation(), peg$c8 = function() {
          return {};
        }, peg$c9 = ":", peg$c10 = peg$literalExpectation(":", false), peg$c11 = function(property, value) {
          return { [property]: value };
        }, peg$c12 = ",", peg$c13 = peg$literalExpectation(",", false), peg$c14 = function(property, other) {
          return other;
        }, peg$c15 = function(property, others, value) {
          return Object.assign({}, ...[property].concat(others).map((property2) => ({ [property2]: value })));
        }, peg$c16 = function(statements) {
          return statements;
        }, peg$c17 = function(expression) {
          return expression;
        }, peg$c18 = peg$otherExpectation("correct indentation"), peg$c19 = " ", peg$c20 = peg$literalExpectation(" ", false), peg$c21 = function(spaces) {
          return spaces.length === indentLevel * INDENT_STEP;
        }, peg$c22 = function(spaces) {
          return spaces.length === (indentLevel + 1) * INDENT_STEP;
        }, peg$c23 = function() {
          indentLevel++;
          return true;
        }, peg$c24 = function() {
          indentLevel--;
          return true;
        }, peg$c25 = function() {
          return text();
        }, peg$c26 = peg$otherExpectation("pseudostring"), peg$c27 = /^[^\r\n\t ?:,\][{}#&*!|>'"%@`\-]/, peg$c28 = peg$classExpectation(["\r", `
`, "\t", " ", "?", ":", ",", "]", "[", "{", "}", "#", "&", "*", "!", "|", ">", "'", '"', "%", "@", "`", "-"], true, false), peg$c29 = /^[^\r\n\t ,\][{}:#"']/, peg$c30 = peg$classExpectation(["\r", `
`, "\t", " ", ",", "]", "[", "{", "}", ":", "#", '"', "'"], true, false), peg$c31 = function() {
          return text().replace(/^ *| *$/g, "");
        }, peg$c32 = "--", peg$c33 = peg$literalExpectation("--", false), peg$c34 = /^[a-zA-Z\/0-9]/, peg$c35 = peg$classExpectation([["a", "z"], ["A", "Z"], "/", ["0", "9"]], false, false), peg$c36 = /^[^\r\n\t :,]/, peg$c37 = peg$classExpectation(["\r", `
`, "\t", " ", ":", ","], true, false), peg$c38 = "null", peg$c39 = peg$literalExpectation("null", false), peg$c40 = function() {
          return null;
        }, peg$c41 = "true", peg$c42 = peg$literalExpectation("true", false), peg$c43 = function() {
          return true;
        }, peg$c44 = "false", peg$c45 = peg$literalExpectation("false", false), peg$c46 = function() {
          return false;
        }, peg$c47 = peg$otherExpectation("string"), peg$c48 = '"', peg$c49 = peg$literalExpectation('"', false), peg$c50 = function() {
          return "";
        }, peg$c51 = function(chars) {
          return chars;
        }, peg$c52 = function(chars) {
          return chars.join(``);
        }, peg$c53 = /^[^"\\\0-\x1F\x7F]/, peg$c54 = peg$classExpectation(['"', "\\", ["\x00", "\x1F"], "\x7F"], true, false), peg$c55 = "\\\"", peg$c56 = peg$literalExpectation("\\\"", false), peg$c57 = function() {
          return `"`;
        }, peg$c58 = "\\\\", peg$c59 = peg$literalExpectation("\\\\", false), peg$c60 = function() {
          return `\\`;
        }, peg$c61 = "\\/", peg$c62 = peg$literalExpectation("\\/", false), peg$c63 = function() {
          return `/`;
        }, peg$c64 = "\\b", peg$c65 = peg$literalExpectation("\\b", false), peg$c66 = function() {
          return `\b`;
        }, peg$c67 = "\\f", peg$c68 = peg$literalExpectation("\\f", false), peg$c69 = function() {
          return `\f`;
        }, peg$c70 = "\\n", peg$c71 = peg$literalExpectation("\\n", false), peg$c72 = function() {
          return `
`;
        }, peg$c73 = "\\r", peg$c74 = peg$literalExpectation("\\r", false), peg$c75 = function() {
          return `\r`;
        }, peg$c76 = "\\t", peg$c77 = peg$literalExpectation("\\t", false), peg$c78 = function() {
          return `\t`;
        }, peg$c79 = "\\u", peg$c80 = peg$literalExpectation("\\u", false), peg$c81 = function(h1, h2, h3, h4) {
          return String.fromCharCode(parseInt(`0x${h1}${h2}${h3}${h4}`));
        }, peg$c82 = /^[0-9a-fA-F]/, peg$c83 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false), peg$c84 = peg$otherExpectation("blank space"), peg$c85 = /^[ \t]/, peg$c86 = peg$classExpectation([" ", "\t"], false, false), peg$c87 = peg$otherExpectation("white space"), peg$c88 = /^[ \t\n\r]/, peg$c89 = peg$classExpectation([" ", "\t", `
`, "\r"], false, false), peg$c90 = `\r
`, peg$c91 = peg$literalExpectation(`\r
`, false), peg$c92 = `
`, peg$c93 = peg$literalExpectation(`
`, false), peg$c94 = "\r", peg$c95 = peg$literalExpectation("\r", false), peg$currPos = 0, peg$savedPos = 0, peg$posDetailsCache = [{ line: 1, column: 1 }], peg$maxFailPos = 0, peg$maxFailExpected = [], peg$silentFails = 0, peg$result;
        if ("startRule" in options) {
          if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error(`Can't start parsing from rule "` + options.startRule + '".');
          }
          peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }
        function text() {
          return input.substring(peg$savedPos, peg$currPos);
        }
        function location() {
          return peg$computeLocation(peg$savedPos, peg$currPos);
        }
        function expected(description, location2) {
          location2 = location2 !== undefined ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
          throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location2);
        }
        function error(message, location2) {
          location2 = location2 !== undefined ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
          throw peg$buildSimpleError(message, location2);
        }
        function peg$literalExpectation(text2, ignoreCase) {
          return { type: "literal", text: text2, ignoreCase };
        }
        function peg$classExpectation(parts, inverted, ignoreCase) {
          return { type: "class", parts, inverted, ignoreCase };
        }
        function peg$anyExpectation() {
          return { type: "any" };
        }
        function peg$endExpectation() {
          return { type: "end" };
        }
        function peg$otherExpectation(description) {
          return { type: "other", description };
        }
        function peg$computePosDetails(pos) {
          var details = peg$posDetailsCache[pos], p;
          if (details) {
            return details;
          } else {
            p = pos - 1;
            while (!peg$posDetailsCache[p]) {
              p--;
            }
            details = peg$posDetailsCache[p];
            details = {
              line: details.line,
              column: details.column
            };
            while (p < pos) {
              if (input.charCodeAt(p) === 10) {
                details.line++;
                details.column = 1;
              } else {
                details.column++;
              }
              p++;
            }
            peg$posDetailsCache[pos] = details;
            return details;
          }
        }
        function peg$computeLocation(startPos, endPos) {
          var startPosDetails = peg$computePosDetails(startPos), endPosDetails = peg$computePosDetails(endPos);
          return {
            start: {
              offset: startPos,
              line: startPosDetails.line,
              column: startPosDetails.column
            },
            end: {
              offset: endPos,
              line: endPosDetails.line,
              column: endPosDetails.column
            }
          };
        }
        function peg$fail(expected2) {
          if (peg$currPos < peg$maxFailPos) {
            return;
          }
          if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
          }
          peg$maxFailExpected.push(expected2);
        }
        function peg$buildSimpleError(message, location2) {
          return new peg$SyntaxError(message, null, null, location2);
        }
        function peg$buildStructuredError(expected2, found, location2) {
          return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected2, found), expected2, found, location2);
        }
        function peg$parseStart() {
          var s0;
          s0 = peg$parsePropertyStatements();
          return s0;
        }
        function peg$parseItemStatements() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseItemStatement();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseItemStatement();
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c0(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parseItemStatement() {
          var s0, s1, s2, s3, s4;
          s0 = peg$currPos;
          s1 = peg$parseSamedent();
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s2 = peg$c1;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c2);
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseB();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseExpression();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c3(s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parsePropertyStatements() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsePropertyStatement();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsePropertyStatement();
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c4(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parsePropertyStatement() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8;
          s0 = peg$currPos;
          s1 = peg$parseB();
          if (s1 === peg$FAILED) {
            s1 = null;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 35) {
              s3 = peg$c5;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c6);
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$currPos;
              s6 = peg$currPos;
              peg$silentFails++;
              s7 = peg$parseEOL();
              peg$silentFails--;
              if (s7 === peg$FAILED) {
                s6 = undefined;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s7 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c7);
                  }
                }
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$currPos;
                  s6 = peg$currPos;
                  peg$silentFails++;
                  s7 = peg$parseEOL();
                  peg$silentFails--;
                  if (s7 === peg$FAILED) {
                    s6 = undefined;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                  if (s6 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                      s7 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c7);
                      }
                    }
                    if (s7 !== peg$FAILED) {
                      s6 = [s6, s7];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                }
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseEOL_ANY();
              if (s4 !== peg$FAILED) {
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parseEOL_ANY();
                }
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c8();
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseSamedent();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseName();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseB();
                if (s3 === peg$FAILED) {
                  s3 = null;
                }
                if (s3 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s4 = peg$c9;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c10);
                    }
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseB();
                    if (s5 === peg$FAILED) {
                      s5 = null;
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parseExpression();
                      if (s6 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c11(s2, s6);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseSamedent();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseLegacyName();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseB();
                  if (s3 === peg$FAILED) {
                    s3 = null;
                  }
                  if (s3 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                      s4 = peg$c9;
                      peg$currPos++;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c10);
                      }
                    }
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parseB();
                      if (s5 === peg$FAILED) {
                        s5 = null;
                      }
                      if (s5 !== peg$FAILED) {
                        s6 = peg$parseExpression();
                        if (s6 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c11(s2, s6);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseSamedent();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseLegacyName();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseB();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parseLegacyLiteral();
                      if (s4 !== peg$FAILED) {
                        s5 = [];
                        s6 = peg$parseEOL_ANY();
                        if (s6 !== peg$FAILED) {
                          while (s6 !== peg$FAILED) {
                            s5.push(s6);
                            s6 = peg$parseEOL_ANY();
                          }
                        } else {
                          s5 = peg$FAILED;
                        }
                        if (s5 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c11(s2, s4);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseSamedent();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseLegacyName();
                    if (s2 !== peg$FAILED) {
                      s3 = [];
                      s4 = peg$currPos;
                      s5 = peg$parseB();
                      if (s5 === peg$FAILED) {
                        s5 = null;
                      }
                      if (s5 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                          s6 = peg$c12;
                          peg$currPos++;
                        } else {
                          s6 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c13);
                          }
                        }
                        if (s6 !== peg$FAILED) {
                          s7 = peg$parseB();
                          if (s7 === peg$FAILED) {
                            s7 = null;
                          }
                          if (s7 !== peg$FAILED) {
                            s8 = peg$parseLegacyName();
                            if (s8 !== peg$FAILED) {
                              peg$savedPos = s4;
                              s5 = peg$c14(s2, s8);
                              s4 = s5;
                            } else {
                              peg$currPos = s4;
                              s4 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                      if (s4 !== peg$FAILED) {
                        while (s4 !== peg$FAILED) {
                          s3.push(s4);
                          s4 = peg$currPos;
                          s5 = peg$parseB();
                          if (s5 === peg$FAILED) {
                            s5 = null;
                          }
                          if (s5 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 44) {
                              s6 = peg$c12;
                              peg$currPos++;
                            } else {
                              s6 = peg$FAILED;
                              if (peg$silentFails === 0) {
                                peg$fail(peg$c13);
                              }
                            }
                            if (s6 !== peg$FAILED) {
                              s7 = peg$parseB();
                              if (s7 === peg$FAILED) {
                                s7 = null;
                              }
                              if (s7 !== peg$FAILED) {
                                s8 = peg$parseLegacyName();
                                if (s8 !== peg$FAILED) {
                                  peg$savedPos = s4;
                                  s5 = peg$c14(s2, s8);
                                  s4 = s5;
                                } else {
                                  peg$currPos = s4;
                                  s4 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s4;
                              s4 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                        }
                      } else {
                        s3 = peg$FAILED;
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parseB();
                        if (s4 === peg$FAILED) {
                          s4 = null;
                        }
                        if (s4 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 58) {
                            s5 = peg$c9;
                            peg$currPos++;
                          } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c10);
                            }
                          }
                          if (s5 !== peg$FAILED) {
                            s6 = peg$parseB();
                            if (s6 === peg$FAILED) {
                              s6 = null;
                            }
                            if (s6 !== peg$FAILED) {
                              s7 = peg$parseExpression();
                              if (s7 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c15(s2, s3, s7);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                }
              }
            }
          }
          return s0;
        }
        function peg$parseExpression() {
          var s0, s1, s2, s3, s4, s5, s6;
          s0 = peg$currPos;
          s1 = peg$currPos;
          peg$silentFails++;
          s2 = peg$currPos;
          s3 = peg$parseEOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseExtradent();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s5 = peg$c1;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c2);
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseB();
                if (s6 !== peg$FAILED) {
                  s3 = [s3, s4, s5, s6];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          peg$silentFails--;
          if (s2 !== peg$FAILED) {
            peg$currPos = s1;
            s1 = undefined;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseEOL_ANY();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseIndent();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseItemStatements();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseDedent();
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c16(s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseEOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseIndent();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsePropertyStatements();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseDedent();
                  if (s4 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c16(s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseLiteral();
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseEOL_ANY();
                if (s3 !== peg$FAILED) {
                  while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseEOL_ANY();
                  }
                } else {
                  s2 = peg$FAILED;
                }
                if (s2 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c17(s1);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
          return s0;
        }
        function peg$parseSamedent() {
          var s0, s1, s2;
          peg$silentFails++;
          s0 = peg$currPos;
          s1 = [];
          if (input.charCodeAt(peg$currPos) === 32) {
            s2 = peg$c19;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c20);
            }
          }
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (input.charCodeAt(peg$currPos) === 32) {
              s2 = peg$c19;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c20);
              }
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s2 = peg$c21(s1);
            if (s2) {
              s2 = undefined;
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          peg$silentFails--;
          if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c18);
            }
          }
          return s0;
        }
        function peg$parseExtradent() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          if (input.charCodeAt(peg$currPos) === 32) {
            s2 = peg$c19;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c20);
            }
          }
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (input.charCodeAt(peg$currPos) === 32) {
              s2 = peg$c19;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c20);
              }
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s2 = peg$c22(s1);
            if (s2) {
              s2 = undefined;
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseIndent() {
          var s0;
          peg$savedPos = peg$currPos;
          s0 = peg$c23();
          if (s0) {
            s0 = undefined;
          } else {
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseDedent() {
          var s0;
          peg$savedPos = peg$currPos;
          s0 = peg$c24();
          if (s0) {
            s0 = undefined;
          } else {
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseName() {
          var s0;
          s0 = peg$parsestring();
          if (s0 === peg$FAILED) {
            s0 = peg$parsepseudostring();
          }
          return s0;
        }
        function peg$parseLegacyName() {
          var s0, s1, s2;
          s0 = peg$parsestring();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsepseudostringLegacy();
            if (s2 !== peg$FAILED) {
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parsepseudostringLegacy();
              }
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c25();
            }
            s0 = s1;
          }
          return s0;
        }
        function peg$parseLiteral() {
          var s0;
          s0 = peg$parsenull();
          if (s0 === peg$FAILED) {
            s0 = peg$parseboolean();
            if (s0 === peg$FAILED) {
              s0 = peg$parsestring();
              if (s0 === peg$FAILED) {
                s0 = peg$parsepseudostring();
              }
            }
          }
          return s0;
        }
        function peg$parseLegacyLiteral() {
          var s0;
          s0 = peg$parsenull();
          if (s0 === peg$FAILED) {
            s0 = peg$parsestring();
            if (s0 === peg$FAILED) {
              s0 = peg$parsepseudostringLegacy();
            }
          }
          return s0;
        }
        function peg$parsepseudostring() {
          var s0, s1, s2, s3, s4, s5;
          peg$silentFails++;
          s0 = peg$currPos;
          if (peg$c27.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c28);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parseB();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              if (peg$c29.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c30);
                }
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$currPos;
              s4 = peg$parseB();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              if (s4 !== peg$FAILED) {
                if (peg$c29.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c30);
                  }
                }
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c31();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          peg$silentFails--;
          if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c26);
            }
          }
          return s0;
        }
        function peg$parsepseudostringLegacy() {
          var s0, s1, s2, s3, s4;
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c32) {
            s1 = peg$c32;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c33);
            }
          }
          if (s1 === peg$FAILED) {
            s1 = null;
          }
          if (s1 !== peg$FAILED) {
            if (peg$c34.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c35);
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              if (peg$c36.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c37);
                }
              }
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                if (peg$c36.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c37);
                  }
                }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c31();
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parsenull() {
          var s0, s1;
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 4) === peg$c38) {
            s1 = peg$c38;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c39);
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c40();
          }
          s0 = s1;
          return s0;
        }
        function peg$parseboolean() {
          var s0, s1;
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 4) === peg$c41) {
            s1 = peg$c41;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c42);
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c43();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c44) {
              s1 = peg$c44;
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c45);
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c46();
            }
            s0 = s1;
          }
          return s0;
        }
        function peg$parsestring() {
          var s0, s1, s2, s3;
          peg$silentFails++;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 34) {
            s1 = peg$c48;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c49);
            }
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s2 = peg$c48;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c49);
              }
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c50();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 34) {
              s1 = peg$c48;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c49);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsechars();
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 34) {
                  s3 = peg$c48;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c49);
                  }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c51(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
          peg$silentFails--;
          if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c47);
            }
          }
          return s0;
        }
        function peg$parsechars() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsechar();
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parsechar();
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c52(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parsechar() {
          var s0, s1, s2, s3, s4, s5;
          if (peg$c53.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c54);
            }
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c55) {
              s1 = peg$c55;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c56);
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c57();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c58) {
                s1 = peg$c58;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c59);
                }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c60();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c61) {
                  s1 = peg$c61;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c62);
                  }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c63();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c64) {
                    s1 = peg$c64;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c65);
                    }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c66();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c67) {
                      s1 = peg$c67;
                      peg$currPos += 2;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c68);
                      }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c69();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 2) === peg$c70) {
                        s1 = peg$c70;
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c71);
                        }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c72();
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 2) === peg$c73) {
                          s1 = peg$c73;
                          peg$currPos += 2;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c74);
                          }
                        }
                        if (s1 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c75();
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.substr(peg$currPos, 2) === peg$c76) {
                            s1 = peg$c76;
                            peg$currPos += 2;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c77);
                            }
                          }
                          if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c78();
                          }
                          s0 = s1;
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 2) === peg$c79) {
                              s1 = peg$c79;
                              peg$currPos += 2;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) {
                                peg$fail(peg$c80);
                              }
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parsehexDigit();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parsehexDigit();
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parsehexDigit();
                                  if (s4 !== peg$FAILED) {
                                    s5 = peg$parsehexDigit();
                                    if (s5 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s1 = peg$c81(s2, s3, s4, s5);
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          return s0;
        }
        function peg$parsehexDigit() {
          var s0;
          if (peg$c82.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c83);
            }
          }
          return s0;
        }
        function peg$parseB() {
          var s0, s1;
          peg$silentFails++;
          s0 = [];
          if (peg$c85.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c86);
            }
          }
          if (s1 !== peg$FAILED) {
            while (s1 !== peg$FAILED) {
              s0.push(s1);
              if (peg$c85.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c86);
                }
              }
            }
          } else {
            s0 = peg$FAILED;
          }
          peg$silentFails--;
          if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c84);
            }
          }
          return s0;
        }
        function peg$parseS() {
          var s0, s1;
          peg$silentFails++;
          s0 = [];
          if (peg$c88.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c89);
            }
          }
          if (s1 !== peg$FAILED) {
            while (s1 !== peg$FAILED) {
              s0.push(s1);
              if (peg$c88.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c89);
                }
              }
            }
          } else {
            s0 = peg$FAILED;
          }
          peg$silentFails--;
          if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c87);
            }
          }
          return s0;
        }
        function peg$parseEOL_ANY() {
          var s0, s1, s2, s3, s4, s5;
          s0 = peg$currPos;
          s1 = peg$parseEOL();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parseB();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseEOL();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$currPos;
              s4 = peg$parseB();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseEOL();
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseEOL() {
          var s0;
          if (input.substr(peg$currPos, 2) === peg$c90) {
            s0 = peg$c90;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c91);
            }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 10) {
              s0 = peg$c92;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c93);
              }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 13) {
                s0 = peg$c94;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c95);
                }
              }
            }
          }
          return s0;
        }
        const INDENT_STEP = 2;
        let indentLevel = 0;
        peg$result = peg$startRuleFunction();
        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
          return peg$result;
        } else {
          if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$fail(peg$endExpectation());
          }
          throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
        }
      }
      module22.exports = {
        SyntaxError: peg$SyntaxError,
        parse: peg$parse
      };
    }
  });
  var require_syml2 = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+parsers@3.0.2/node_modules/@yarnpkg/parsers/lib/syml.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.PreserveOrdering = undefined;
      exports22.stringifySyml = stringifySyml;
      exports22.parseSyml = parseSyml;
      var js_yaml_1 = require_js_yaml2();
      var syml_1 = require_syml();
      var simpleStringPattern = /^(?![-?:,\][{}#&*!|>'"%@` \t\r\n]).([ \t]*(?![,\][{}:# \t\r\n]).)*$/;
      var specialObjectKeys = [`__metadata`, `version`, `resolution`, `dependencies`, `peerDependencies`, `dependenciesMeta`, `peerDependenciesMeta`, `binaries`];
      var PreserveOrdering = class {
        constructor(data) {
          this.data = data;
        }
      };
      exports22.PreserveOrdering = PreserveOrdering;
      function stringifyString(value) {
        if (value.match(simpleStringPattern)) {
          return value;
        } else {
          return JSON.stringify(value);
        }
      }
      function isRemovableField(value) {
        if (typeof value === `undefined`)
          return true;
        if (typeof value === `object` && value !== null && !Array.isArray(value))
          return Object.keys(value).every((key) => isRemovableField(value[key]));
        return false;
      }
      function stringifyValue(value, indentLevel, newLineIfObject) {
        if (value === null)
          return `null
`;
        if (typeof value === `number` || typeof value === `boolean`)
          return `${value.toString()}
`;
        if (typeof value === `string`)
          return `${stringifyString(value)}
`;
        if (Array.isArray(value)) {
          if (value.length === 0)
            return `[]
`;
          const indent = `  `.repeat(indentLevel);
          const serialized = value.map((sub) => {
            return `${indent}- ${stringifyValue(sub, indentLevel + 1, false)}`;
          }).join(``);
          return `
${serialized}`;
        }
        if (typeof value === `object` && value) {
          const [data, sort] = value instanceof PreserveOrdering ? [value.data, false] : [value, true];
          const indent = `  `.repeat(indentLevel);
          const keys = Object.keys(data);
          if (sort) {
            keys.sort((a, b) => {
              const aIndex = specialObjectKeys.indexOf(a);
              const bIndex = specialObjectKeys.indexOf(b);
              if (aIndex === -1 && bIndex === -1)
                return a < b ? -1 : a > b ? 1 : 0;
              if (aIndex !== -1 && bIndex === -1)
                return -1;
              if (aIndex === -1 && bIndex !== -1)
                return 1;
              return aIndex - bIndex;
            });
          }
          const fields = keys.filter((key) => {
            return !isRemovableField(data[key]);
          }).map((key, index) => {
            const value2 = data[key];
            const stringifiedKey = stringifyString(key);
            const stringifiedValue = stringifyValue(value2, indentLevel + 1, true);
            const recordIndentation = index > 0 || newLineIfObject ? indent : ``;
            const keyPart = stringifiedKey.length > 1024 ? `? ${stringifiedKey}
${recordIndentation}:` : `${stringifiedKey}:`;
            const valuePart = stringifiedValue.startsWith(`
`) ? stringifiedValue : ` ${stringifiedValue}`;
            return `${recordIndentation}${keyPart}${valuePart}`;
          }).join(indentLevel === 0 ? `
` : ``) || `
`;
          if (!newLineIfObject) {
            return `${fields}`;
          } else {
            return `
${fields}`;
          }
        }
        throw new Error(`Unsupported value type (${value})`);
      }
      function stringifySyml(value) {
        try {
          const stringified = stringifyValue(value, 0, false);
          return stringified !== `
` ? stringified : ``;
        } catch (error) {
          if (error.location)
            error.message = error.message.replace(/(\.)?$/, ` (line ${error.location.start.line}, column ${error.location.start.column})$1`);
          throw error;
        }
      }
      stringifySyml.PreserveOrdering = PreserveOrdering;
      function parseViaPeg(source) {
        if (!source.endsWith(`
`))
          source += `
`;
        return (0, syml_1.parse)(source);
      }
      var LEGACY_REGEXP = /^(#.*(\r?\n))*?#\s+yarn\s+lockfile\s+v1\r?\n/i;
      function parseViaJsYaml(source) {
        if (LEGACY_REGEXP.test(source))
          return parseViaPeg(source);
        const value = (0, js_yaml_1.safeLoad)(source, {
          schema: js_yaml_1.FAILSAFE_SCHEMA,
          json: true
        });
        if (value === undefined || value === null)
          return {};
        if (typeof value !== `object`)
          throw new Error(`Expected an indexed object, got a ${typeof value} instead. Does your file follow Yaml's rules?`);
        if (Array.isArray(value))
          throw new Error(`Expected an indexed object, got an array instead. Does your file follow Yaml's rules?`);
        return value;
      }
      function parseSyml(source) {
        return parseViaJsYaml(source);
      }
    }
  });
  var require_lib2 = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+parsers@3.0.2/node_modules/@yarnpkg/parsers/lib/index.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.stringifySyml = exports22.parseSyml = exports22.stringifyResolution = exports22.parseResolution = exports22.stringifyValueArgument = exports22.stringifyShellLine = exports22.stringifyRedirectArgument = exports22.stringifyEnvSegment = exports22.stringifyCommandLineThen = exports22.stringifyCommandLine = exports22.stringifyCommandChainThen = exports22.stringifyCommandChain = exports22.stringifyCommand = exports22.stringifyArithmeticExpression = exports22.stringifyArgumentSegment = exports22.stringifyArgument = exports22.stringifyShell = exports22.parseShell = undefined;
      var shell_1 = require_shell2();
      Object.defineProperty(exports22, "parseShell", { enumerable: true, get: function() {
        return shell_1.parseShell;
      } });
      Object.defineProperty(exports22, "stringifyShell", { enumerable: true, get: function() {
        return shell_1.stringifyShell;
      } });
      Object.defineProperty(exports22, "stringifyArgument", { enumerable: true, get: function() {
        return shell_1.stringifyArgument;
      } });
      Object.defineProperty(exports22, "stringifyArgumentSegment", { enumerable: true, get: function() {
        return shell_1.stringifyArgumentSegment;
      } });
      Object.defineProperty(exports22, "stringifyArithmeticExpression", { enumerable: true, get: function() {
        return shell_1.stringifyArithmeticExpression;
      } });
      Object.defineProperty(exports22, "stringifyCommand", { enumerable: true, get: function() {
        return shell_1.stringifyCommand;
      } });
      Object.defineProperty(exports22, "stringifyCommandChain", { enumerable: true, get: function() {
        return shell_1.stringifyCommandChain;
      } });
      Object.defineProperty(exports22, "stringifyCommandChainThen", { enumerable: true, get: function() {
        return shell_1.stringifyCommandChainThen;
      } });
      Object.defineProperty(exports22, "stringifyCommandLine", { enumerable: true, get: function() {
        return shell_1.stringifyCommandLine;
      } });
      Object.defineProperty(exports22, "stringifyCommandLineThen", { enumerable: true, get: function() {
        return shell_1.stringifyCommandLineThen;
      } });
      Object.defineProperty(exports22, "stringifyEnvSegment", { enumerable: true, get: function() {
        return shell_1.stringifyEnvSegment;
      } });
      Object.defineProperty(exports22, "stringifyRedirectArgument", { enumerable: true, get: function() {
        return shell_1.stringifyRedirectArgument;
      } });
      Object.defineProperty(exports22, "stringifyShellLine", { enumerable: true, get: function() {
        return shell_1.stringifyShellLine;
      } });
      Object.defineProperty(exports22, "stringifyValueArgument", { enumerable: true, get: function() {
        return shell_1.stringifyValueArgument;
      } });
      var resolution_1 = require_resolution2();
      Object.defineProperty(exports22, "parseResolution", { enumerable: true, get: function() {
        return resolution_1.parseResolution;
      } });
      Object.defineProperty(exports22, "stringifyResolution", { enumerable: true, get: function() {
        return resolution_1.stringifyResolution;
      } });
      var syml_1 = require_syml2();
      Object.defineProperty(exports22, "parseSyml", { enumerable: true, get: function() {
        return syml_1.parseSyml;
      } });
      Object.defineProperty(exports22, "stringifySyml", { enumerable: true, get: function() {
        return syml_1.stringifySyml;
      } });
    }
  });
  var require_camelcase = __commonJS2({
    "../../node_modules/.pnpm/camelcase@5.3.1/node_modules/camelcase/index.js"(exports22, module22) {
      var preserveCamelCase = (string) => {
        let isLastCharLower = false;
        let isLastCharUpper = false;
        let isLastLastCharUpper = false;
        for (let i = 0;i < string.length; i++) {
          const character = string[i];
          if (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {
            string = string.slice(0, i) + "-" + string.slice(i);
            isLastCharLower = false;
            isLastLastCharUpper = isLastCharUpper;
            isLastCharUpper = true;
            i++;
          } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {
            string = string.slice(0, i - 1) + "-" + string.slice(i - 1);
            isLastLastCharUpper = isLastCharUpper;
            isLastCharUpper = false;
            isLastCharLower = true;
          } else {
            isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;
            isLastLastCharUpper = isLastCharUpper;
            isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;
          }
        }
        return string;
      };
      var camelCase = (input, options) => {
        if (!(typeof input === "string" || Array.isArray(input))) {
          throw new TypeError("Expected the input to be `string | string[]`");
        }
        options = Object.assign({
          pascalCase: false
        }, options);
        const postProcess = (x) => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;
        if (Array.isArray(input)) {
          input = input.map((x) => x.trim()).filter((x) => x.length).join("-");
        } else {
          input = input.trim();
        }
        if (input.length === 0) {
          return "";
        }
        if (input.length === 1) {
          return options.pascalCase ? input.toUpperCase() : input.toLowerCase();
        }
        const hasUpperCase = input !== input.toLowerCase();
        if (hasUpperCase) {
          input = preserveCamelCase(input);
        }
        input = input.replace(/^[_.\- ]+/, "").toLowerCase().replace(/[_.\- ]+(\w|$)/g, (_, p1) => p1.toUpperCase()).replace(/\d+(\w|$)/g, (m) => m.toUpperCase());
        return postProcess(input);
      };
      module22.exports = camelCase;
      module22.exports.default = camelCase;
    }
  });
  var require_vendors = __commonJS2({
    "../../node_modules/.pnpm/ci-info@4.1.0/node_modules/ci-info/vendors.json"(exports22, module22) {
      module22.exports = [
        {
          name: "Agola CI",
          constant: "AGOLA",
          env: "AGOLA_GIT_REF",
          pr: "AGOLA_PULL_REQUEST_ID"
        },
        {
          name: "Appcircle",
          constant: "APPCIRCLE",
          env: "AC_APPCIRCLE",
          pr: {
            env: "AC_GIT_PR",
            ne: "false"
          }
        },
        {
          name: "AppVeyor",
          constant: "APPVEYOR",
          env: "APPVEYOR",
          pr: "APPVEYOR_PULL_REQUEST_NUMBER"
        },
        {
          name: "AWS CodeBuild",
          constant: "CODEBUILD",
          env: "CODEBUILD_BUILD_ARN",
          pr: {
            env: "CODEBUILD_WEBHOOK_EVENT",
            any: [
              "PULL_REQUEST_CREATED",
              "PULL_REQUEST_UPDATED",
              "PULL_REQUEST_REOPENED"
            ]
          }
        },
        {
          name: "Azure Pipelines",
          constant: "AZURE_PIPELINES",
          env: "TF_BUILD",
          pr: {
            BUILD_REASON: "PullRequest"
          }
        },
        {
          name: "Bamboo",
          constant: "BAMBOO",
          env: "bamboo_planKey"
        },
        {
          name: "Bitbucket Pipelines",
          constant: "BITBUCKET",
          env: "BITBUCKET_COMMIT",
          pr: "BITBUCKET_PR_ID"
        },
        {
          name: "Bitrise",
          constant: "BITRISE",
          env: "BITRISE_IO",
          pr: "BITRISE_PULL_REQUEST"
        },
        {
          name: "Buddy",
          constant: "BUDDY",
          env: "BUDDY_WORKSPACE_ID",
          pr: "BUDDY_EXECUTION_PULL_REQUEST_ID"
        },
        {
          name: "Buildkite",
          constant: "BUILDKITE",
          env: "BUILDKITE",
          pr: {
            env: "BUILDKITE_PULL_REQUEST",
            ne: "false"
          }
        },
        {
          name: "CircleCI",
          constant: "CIRCLE",
          env: "CIRCLECI",
          pr: "CIRCLE_PULL_REQUEST"
        },
        {
          name: "Cirrus CI",
          constant: "CIRRUS",
          env: "CIRRUS_CI",
          pr: "CIRRUS_PR"
        },
        {
          name: "Codefresh",
          constant: "CODEFRESH",
          env: "CF_BUILD_ID",
          pr: {
            any: [
              "CF_PULL_REQUEST_NUMBER",
              "CF_PULL_REQUEST_ID"
            ]
          }
        },
        {
          name: "Codemagic",
          constant: "CODEMAGIC",
          env: "CM_BUILD_ID",
          pr: "CM_PULL_REQUEST"
        },
        {
          name: "Codeship",
          constant: "CODESHIP",
          env: {
            CI_NAME: "codeship"
          }
        },
        {
          name: "Drone",
          constant: "DRONE",
          env: "DRONE",
          pr: {
            DRONE_BUILD_EVENT: "pull_request"
          }
        },
        {
          name: "dsari",
          constant: "DSARI",
          env: "DSARI"
        },
        {
          name: "Earthly",
          constant: "EARTHLY",
          env: "EARTHLY_CI"
        },
        {
          name: "Expo Application Services",
          constant: "EAS",
          env: "EAS_BUILD"
        },
        {
          name: "Gerrit",
          constant: "GERRIT",
          env: "GERRIT_PROJECT"
        },
        {
          name: "Gitea Actions",
          constant: "GITEA_ACTIONS",
          env: "GITEA_ACTIONS"
        },
        {
          name: "GitHub Actions",
          constant: "GITHUB_ACTIONS",
          env: "GITHUB_ACTIONS",
          pr: {
            GITHUB_EVENT_NAME: "pull_request"
          }
        },
        {
          name: "GitLab CI",
          constant: "GITLAB",
          env: "GITLAB_CI",
          pr: "CI_MERGE_REQUEST_ID"
        },
        {
          name: "GoCD",
          constant: "GOCD",
          env: "GO_PIPELINE_LABEL"
        },
        {
          name: "Google Cloud Build",
          constant: "GOOGLE_CLOUD_BUILD",
          env: "BUILDER_OUTPUT"
        },
        {
          name: "Harness CI",
          constant: "HARNESS",
          env: "HARNESS_BUILD_ID"
        },
        {
          name: "Heroku",
          constant: "HEROKU",
          env: {
            env: "NODE",
            includes: "/app/.heroku/node/bin/node"
          }
        },
        {
          name: "Hudson",
          constant: "HUDSON",
          env: "HUDSON_URL"
        },
        {
          name: "Jenkins",
          constant: "JENKINS",
          env: [
            "JENKINS_URL",
            "BUILD_ID"
          ],
          pr: {
            any: [
              "ghprbPullId",
              "CHANGE_ID"
            ]
          }
        },
        {
          name: "LayerCI",
          constant: "LAYERCI",
          env: "LAYERCI",
          pr: "LAYERCI_PULL_REQUEST"
        },
        {
          name: "Magnum CI",
          constant: "MAGNUM",
          env: "MAGNUM"
        },
        {
          name: "Netlify CI",
          constant: "NETLIFY",
          env: "NETLIFY",
          pr: {
            env: "PULL_REQUEST",
            ne: "false"
          }
        },
        {
          name: "Nevercode",
          constant: "NEVERCODE",
          env: "NEVERCODE",
          pr: {
            env: "NEVERCODE_PULL_REQUEST",
            ne: "false"
          }
        },
        {
          name: "Prow",
          constant: "PROW",
          env: "PROW_JOB_ID"
        },
        {
          name: "ReleaseHub",
          constant: "RELEASEHUB",
          env: "RELEASE_BUILD_ID"
        },
        {
          name: "Render",
          constant: "RENDER",
          env: "RENDER",
          pr: {
            IS_PULL_REQUEST: "true"
          }
        },
        {
          name: "Sail CI",
          constant: "SAIL",
          env: "SAILCI",
          pr: "SAIL_PULL_REQUEST_NUMBER"
        },
        {
          name: "Screwdriver",
          constant: "SCREWDRIVER",
          env: "SCREWDRIVER",
          pr: {
            env: "SD_PULL_REQUEST",
            ne: "false"
          }
        },
        {
          name: "Semaphore",
          constant: "SEMAPHORE",
          env: "SEMAPHORE",
          pr: "PULL_REQUEST_NUMBER"
        },
        {
          name: "Sourcehut",
          constant: "SOURCEHUT",
          env: {
            CI_NAME: "sourcehut"
          }
        },
        {
          name: "Strider CD",
          constant: "STRIDER",
          env: "STRIDER"
        },
        {
          name: "TaskCluster",
          constant: "TASKCLUSTER",
          env: [
            "TASK_ID",
            "RUN_ID"
          ]
        },
        {
          name: "TeamCity",
          constant: "TEAMCITY",
          env: "TEAMCITY_VERSION"
        },
        {
          name: "Travis CI",
          constant: "TRAVIS",
          env: "TRAVIS",
          pr: {
            env: "TRAVIS_PULL_REQUEST",
            ne: "false"
          }
        },
        {
          name: "Vela",
          constant: "VELA",
          env: "VELA",
          pr: {
            VELA_PULL_REQUEST: "1"
          }
        },
        {
          name: "Vercel",
          constant: "VERCEL",
          env: {
            any: [
              "NOW_BUILDER",
              "VERCEL"
            ]
          },
          pr: "VERCEL_GIT_PULL_REQUEST_ID"
        },
        {
          name: "Visual Studio App Center",
          constant: "APPCENTER",
          env: "APPCENTER_BUILD_ID"
        },
        {
          name: "Woodpecker",
          constant: "WOODPECKER",
          env: {
            CI: "woodpecker"
          },
          pr: {
            CI_BUILD_EVENT: "pull_request"
          }
        },
        {
          name: "Xcode Cloud",
          constant: "XCODE_CLOUD",
          env: "CI_XCODE_PROJECT",
          pr: "CI_PULL_REQUEST_NUMBER"
        },
        {
          name: "Xcode Server",
          constant: "XCODE_SERVER",
          env: "XCS"
        }
      ];
    }
  });
  var require_ci_info = __commonJS2({
    "../../node_modules/.pnpm/ci-info@4.1.0/node_modules/ci-info/index.js"(exports22) {
      var vendors = require_vendors();
      var env = process.env;
      Object.defineProperty(exports22, "_vendors", {
        value: vendors.map(function(v) {
          return v.constant;
        })
      });
      exports22.name = null;
      exports22.isPR = null;
      exports22.id = null;
      vendors.forEach(function(vendor) {
        const envs = Array.isArray(vendor.env) ? vendor.env : [vendor.env];
        const isCI = envs.every(function(obj) {
          return checkEnv(obj);
        });
        exports22[vendor.constant] = isCI;
        if (!isCI) {
          return;
        }
        exports22.name = vendor.name;
        exports22.isPR = checkPR(vendor);
        exports22.id = vendor.constant;
      });
      exports22.isCI = !!(env.CI !== "false" && (env.BUILD_ID || env.BUILD_NUMBER || env.CI || env.CI_APP_ID || env.CI_BUILD_ID || env.CI_BUILD_NUMBER || env.CI_NAME || env.CONTINUOUS_INTEGRATION || env.RUN_ID || exports22.name || false));
      function checkEnv(obj) {
        if (typeof obj === "string")
          return !!env[obj];
        if ("env" in obj) {
          return env[obj.env] && env[obj.env].includes(obj.includes);
        }
        if ("any" in obj) {
          return obj.any.some(function(k) {
            return !!env[k];
          });
        }
        return Object.keys(obj).every(function(k) {
          return env[k] === obj[k];
        });
      }
      function checkPR(vendor) {
        switch (typeof vendor.pr) {
          case "string":
            return !!env[vendor.pr];
          case "object":
            if ("env" in vendor.pr) {
              if ("any" in vendor.pr) {
                return vendor.pr.any.some(function(key) {
                  return env[vendor.pr.env] === key;
                });
              } else {
                return vendor.pr.env in env && env[vendor.pr.env] !== vendor.pr.ne;
              }
            } else if ("any" in vendor.pr) {
              return vendor.pr.any.some(function(key) {
                return !!env[key];
              });
            } else {
              return checkEnv(vendor.pr);
            }
          default:
            return null;
        }
      }
    }
  });
  var require_constants2 = __commonJS2({
    "../../node_modules/.pnpm/clipanion@4.0.0-rc.4_typanion@3.14.0/node_modules/clipanion/lib/constants.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.SpecialToken = undefined;
      (function(SpecialToken) {
        SpecialToken["StartOfInput"] = "\x00";
        SpecialToken["EndOfInput"] = "\x01";
        SpecialToken["EndOfPartialInput"] = "\x02";
      })(exports22.SpecialToken || (exports22.SpecialToken = {}));
      exports22.NodeType = undefined;
      (function(NodeType) {
        NodeType[NodeType["InitialNode"] = 0] = "InitialNode";
        NodeType[NodeType["SuccessNode"] = 1] = "SuccessNode";
        NodeType[NodeType["ErrorNode"] = 2] = "ErrorNode";
        NodeType[NodeType["CustomNode"] = 3] = "CustomNode";
      })(exports22.NodeType || (exports22.NodeType = {}));
      var HELP_COMMAND_INDEX = -1;
      var HELP_REGEX = /^(-h|--help)(?:=([0-9]+))?$/;
      var OPTION_REGEX = /^(--[a-z]+(?:-[a-z]+)*|-[a-zA-Z]+)$/;
      var BATCH_REGEX = /^-[a-zA-Z]{2,}$/;
      var BINDING_REGEX = /^([^=]+)=([\s\S]*)$/;
      var IS_DEBUG = process.env.DEBUG_CLI === `1`;
      exports22.BATCH_REGEX = BATCH_REGEX;
      exports22.BINDING_REGEX = BINDING_REGEX;
      exports22.HELP_COMMAND_INDEX = HELP_COMMAND_INDEX;
      exports22.HELP_REGEX = HELP_REGEX;
      exports22.IS_DEBUG = IS_DEBUG;
      exports22.OPTION_REGEX = OPTION_REGEX;
    }
  });
  var require_errors2 = __commonJS2({
    "../../node_modules/.pnpm/clipanion@4.0.0-rc.4_typanion@3.14.0/node_modules/clipanion/lib/errors.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var constants = require_constants2();
      var UsageError = class extends Error {
        constructor(message) {
          super(message);
          this.clipanion = { type: `usage` };
          this.name = `UsageError`;
        }
      };
      var UnknownSyntaxError = class extends Error {
        constructor(input, candidates) {
          super();
          this.input = input;
          this.candidates = candidates;
          this.clipanion = { type: `none` };
          this.name = `UnknownSyntaxError`;
          if (this.candidates.length === 0) {
            this.message = `Command not found, but we're not sure what's the alternative.`;
          } else if (this.candidates.every((candidate) => candidate.reason !== null && candidate.reason === candidates[0].reason)) {
            const [{ reason }] = this.candidates;
            this.message = `${reason}

${this.candidates.map(({ usage }) => `$ ${usage}`).join(`
`)}`;
          } else if (this.candidates.length === 1) {
            const [{ usage }] = this.candidates;
            this.message = `Command not found; did you mean:

$ ${usage}
${whileRunning(input)}`;
          } else {
            this.message = `Command not found; did you mean one of:

${this.candidates.map(({ usage }, index) => {
              return `${`${index}.`.padStart(4)} ${usage}`;
            }).join(`
`)}

${whileRunning(input)}`;
          }
        }
      };
      var AmbiguousSyntaxError = class extends Error {
        constructor(input, usages) {
          super();
          this.input = input;
          this.usages = usages;
          this.clipanion = { type: `none` };
          this.name = `AmbiguousSyntaxError`;
          this.message = `Cannot find which to pick amongst the following alternatives:

${this.usages.map((usage, index) => {
            return `${`${index}.`.padStart(4)} ${usage}`;
          }).join(`
`)}

${whileRunning(input)}`;
        }
      };
      var whileRunning = (input) => `While running ${input.filter((token) => {
        return token !== constants.SpecialToken.EndOfInput && token !== constants.SpecialToken.EndOfPartialInput;
      }).map((token) => {
        const json = JSON.stringify(token);
        if (token.match(/\s/) || token.length === 0 || json !== `"${token}"`) {
          return json;
        } else {
          return token;
        }
      }).join(` `)}`;
      exports22.AmbiguousSyntaxError = AmbiguousSyntaxError;
      exports22.UnknownSyntaxError = UnknownSyntaxError;
      exports22.UsageError = UsageError;
    }
  });
  var require_utils = __commonJS2({
    "../../node_modules/.pnpm/clipanion@4.0.0-rc.4_typanion@3.14.0/node_modules/clipanion/lib/advanced/options/utils.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var errors = require_errors2();
      var isOptionSymbol = Symbol(`clipanion/isOption`);
      function makeCommandOption(spec) {
        return { ...spec, [isOptionSymbol]: true };
      }
      function rerouteArguments(a, b) {
        if (typeof a === `undefined`)
          return [a, b];
        if (typeof a === `object` && a !== null && !Array.isArray(a)) {
          return [undefined, a];
        } else {
          return [a, b];
        }
      }
      function cleanValidationError(message, { mergeName = false } = {}) {
        const match = message.match(/^([^:]+): (.*)$/m);
        if (!match)
          return `validation failed`;
        let [, path2, line] = match;
        if (mergeName)
          line = line[0].toLowerCase() + line.slice(1);
        line = path2 !== `.` || !mergeName ? `${path2.replace(/^\.(\[|$)/, `$1`)}: ${line}` : `: ${line}`;
        return line;
      }
      function formatError(message, errors$1) {
        if (errors$1.length === 1) {
          return new errors.UsageError(`${message}${cleanValidationError(errors$1[0], { mergeName: true })}`);
        } else {
          return new errors.UsageError(`${message}:
${errors$1.map((error) => `
- ${cleanValidationError(error)}`).join(``)}`);
        }
      }
      function applyValidator(name, value, validator) {
        if (typeof validator === `undefined`)
          return value;
        const errors2 = [];
        const coercions = [];
        const coercion = (v) => {
          const orig = value;
          value = v;
          return coercion.bind(null, orig);
        };
        const check = validator(value, { errors: errors2, coercions, coercion });
        if (!check)
          throw formatError(`Invalid value for ${name}`, errors2);
        for (const [, op] of coercions)
          op();
        return value;
      }
      exports22.applyValidator = applyValidator;
      exports22.cleanValidationError = cleanValidationError;
      exports22.formatError = formatError;
      exports22.isOptionSymbol = isOptionSymbol;
      exports22.makeCommandOption = makeCommandOption;
      exports22.rerouteArguments = rerouteArguments;
    }
  });
  var require_lib3 = __commonJS2({
    "../../node_modules/.pnpm/typanion@3.14.0/node_modules/typanion/lib/index.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var simpleKeyRegExp = /^[a-zA-Z_][a-zA-Z0-9_]*$/;
      function getPrintable(value) {
        if (value === null)
          return `null`;
        if (value === undefined)
          return `undefined`;
        if (value === ``)
          return `an empty string`;
        if (typeof value === "symbol")
          return `<${value.toString()}>`;
        if (Array.isArray(value))
          return `an array`;
        return JSON.stringify(value);
      }
      function getPrintableArray(value, conjunction) {
        if (value.length === 0)
          return `nothing`;
        if (value.length === 1)
          return getPrintable(value[0]);
        const rest = value.slice(0, -1);
        const trailing = value[value.length - 1];
        const separator = value.length > 2 ? `, ${conjunction} ` : ` ${conjunction} `;
        return `${rest.map((value2) => getPrintable(value2)).join(`, `)}${separator}${getPrintable(trailing)}`;
      }
      function computeKey(state, key) {
        var _a, _b, _c;
        if (typeof key === `number`) {
          return `${(_a = state === null || state === undefined ? undefined : state.p) !== null && _a !== undefined ? _a : `.`}[${key}]`;
        } else if (simpleKeyRegExp.test(key)) {
          return `${(_b = state === null || state === undefined ? undefined : state.p) !== null && _b !== undefined ? _b : ``}.${key}`;
        } else {
          return `${(_c = state === null || state === undefined ? undefined : state.p) !== null && _c !== undefined ? _c : `.`}[${JSON.stringify(key)}]`;
        }
      }
      function plural2(n, singular, plural3) {
        return n === 1 ? singular : plural3;
      }
      var colorStringRegExp = /^#[0-9a-f]{6}$/i;
      var colorStringAlphaRegExp = /^#[0-9a-f]{6}([0-9a-f]{2})?$/i;
      var base64RegExp = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/;
      var uuid4RegExp = /^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$/i;
      var iso8601RegExp = /^(?:[1-9]\d{3}(-?)(?:(?:0[1-9]|1[0-2])\1(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])\1(?:29|30)|(?:0[13578]|1[02])(?:\1)31|00[1-9]|0[1-9]\d|[12]\d{2}|3(?:[0-5]\d|6[0-5]))|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)(?:(-?)02(?:\2)29|-?366))T(?:[01]\d|2[0-3])(:?)[0-5]\d(?:\3[0-5]\d)?(?:Z|[+-][01]\d(?:\3[0-5]\d)?)$/;
      function pushError({ errors, p } = {}, message) {
        errors === null || errors === undefined || errors.push(`${p !== null && p !== undefined ? p : `.`}: ${message}`);
        return false;
      }
      function makeSetter(target, key) {
        return (v) => {
          target[key] = v;
        };
      }
      function makeCoercionFn(target, key) {
        return (v) => {
          const previous = target[key];
          target[key] = v;
          return makeCoercionFn(target, key).bind(null, previous);
        };
      }
      function makeLazyCoercionFn(fn2, orig, generator) {
        const commit = () => {
          fn2(generator());
          return revert;
        };
        const revert = () => {
          fn2(orig);
          return commit;
        };
        return commit;
      }
      function isUnknown() {
        return makeValidator({
          test: (value, state) => {
            return true;
          }
        });
      }
      function isLiteral(expected) {
        return makeValidator({
          test: (value, state) => {
            if (value !== expected)
              return pushError(state, `Expected ${getPrintable(expected)} (got ${getPrintable(value)})`);
            return true;
          }
        });
      }
      function isString() {
        return makeValidator({
          test: (value, state) => {
            if (typeof value !== `string`)
              return pushError(state, `Expected a string (got ${getPrintable(value)})`);
            return true;
          }
        });
      }
      function isEnum(enumSpec) {
        const valuesArray = Array.isArray(enumSpec) ? enumSpec : Object.values(enumSpec);
        const isAlphaNum = valuesArray.every((item) => typeof item === "string" || typeof item === "number");
        const values = new Set(valuesArray);
        if (values.size === 1)
          return isLiteral([...values][0]);
        return makeValidator({
          test: (value, state) => {
            if (!values.has(value)) {
              if (isAlphaNum) {
                return pushError(state, `Expected one of ${getPrintableArray(valuesArray, `or`)} (got ${getPrintable(value)})`);
              } else {
                return pushError(state, `Expected a valid enumeration value (got ${getPrintable(value)})`);
              }
            }
            return true;
          }
        });
      }
      var BOOLEAN_COERCIONS = /* @__PURE__ */ new Map([
        [`true`, true],
        [`True`, true],
        [`1`, true],
        [1, true],
        [`false`, false],
        [`False`, false],
        [`0`, false],
        [0, false]
      ]);
      function isBoolean() {
        return makeValidator({
          test: (value, state) => {
            var _a;
            if (typeof value !== `boolean`) {
              if (typeof (state === null || state === undefined ? undefined : state.coercions) !== `undefined`) {
                if (typeof (state === null || state === undefined ? undefined : state.coercion) === `undefined`)
                  return pushError(state, `Unbound coercion result`);
                const coercion = BOOLEAN_COERCIONS.get(value);
                if (typeof coercion !== `undefined`) {
                  state.coercions.push([(_a = state.p) !== null && _a !== undefined ? _a : `.`, state.coercion.bind(null, coercion)]);
                  return true;
                }
              }
              return pushError(state, `Expected a boolean (got ${getPrintable(value)})`);
            }
            return true;
          }
        });
      }
      function isNumber() {
        return makeValidator({
          test: (value, state) => {
            var _a;
            if (typeof value !== `number`) {
              if (typeof (state === null || state === undefined ? undefined : state.coercions) !== `undefined`) {
                if (typeof (state === null || state === undefined ? undefined : state.coercion) === `undefined`)
                  return pushError(state, `Unbound coercion result`);
                let coercion;
                if (typeof value === `string`) {
                  let val;
                  try {
                    val = JSON.parse(value);
                  } catch (_b) {
                  }
                  if (typeof val === `number`) {
                    if (JSON.stringify(val) === value) {
                      coercion = val;
                    } else {
                      return pushError(state, `Received a number that can't be safely represented by the runtime (${value})`);
                    }
                  }
                }
                if (typeof coercion !== `undefined`) {
                  state.coercions.push([(_a = state.p) !== null && _a !== undefined ? _a : `.`, state.coercion.bind(null, coercion)]);
                  return true;
                }
              }
              return pushError(state, `Expected a number (got ${getPrintable(value)})`);
            }
            return true;
          }
        });
      }
      function isPayload(spec) {
        return makeValidator({
          test: (value, state) => {
            var _a;
            if (typeof (state === null || state === undefined ? undefined : state.coercions) === `undefined`)
              return pushError(state, `The isPayload predicate can only be used with coercion enabled`);
            if (typeof state.coercion === `undefined`)
              return pushError(state, `Unbound coercion result`);
            if (typeof value !== `string`)
              return pushError(state, `Expected a string (got ${getPrintable(value)})`);
            let inner;
            try {
              inner = JSON.parse(value);
            } catch (_b) {
              return pushError(state, `Expected a JSON string (got ${getPrintable(value)})`);
            }
            const wrapper = { value: inner };
            if (!spec(inner, Object.assign(Object.assign({}, state), { coercion: makeCoercionFn(wrapper, `value`) })))
              return false;
            state.coercions.push([(_a = state.p) !== null && _a !== undefined ? _a : `.`, state.coercion.bind(null, wrapper.value)]);
            return true;
          }
        });
      }
      function isDate() {
        return makeValidator({
          test: (value, state) => {
            var _a;
            if (!(value instanceof Date)) {
              if (typeof (state === null || state === undefined ? undefined : state.coercions) !== `undefined`) {
                if (typeof (state === null || state === undefined ? undefined : state.coercion) === `undefined`)
                  return pushError(state, `Unbound coercion result`);
                let coercion;
                if (typeof value === `string` && iso8601RegExp.test(value)) {
                  coercion = new Date(value);
                } else {
                  let timestamp;
                  if (typeof value === `string`) {
                    let val;
                    try {
                      val = JSON.parse(value);
                    } catch (_b) {
                    }
                    if (typeof val === `number`) {
                      timestamp = val;
                    }
                  } else if (typeof value === `number`) {
                    timestamp = value;
                  }
                  if (typeof timestamp !== `undefined`) {
                    if (Number.isSafeInteger(timestamp) || !Number.isSafeInteger(timestamp * 1000)) {
                      coercion = new Date(timestamp * 1000);
                    } else {
                      return pushError(state, `Received a timestamp that can't be safely represented by the runtime (${value})`);
                    }
                  }
                }
                if (typeof coercion !== `undefined`) {
                  state.coercions.push([(_a = state.p) !== null && _a !== undefined ? _a : `.`, state.coercion.bind(null, coercion)]);
                  return true;
                }
              }
              return pushError(state, `Expected a date (got ${getPrintable(value)})`);
            }
            return true;
          }
        });
      }
      function isArray(spec, { delimiter } = {}) {
        return makeValidator({
          test: (value, state) => {
            var _a;
            const originalValue = value;
            if (typeof value === `string` && typeof delimiter !== `undefined`) {
              if (typeof (state === null || state === undefined ? undefined : state.coercions) !== `undefined`) {
                if (typeof (state === null || state === undefined ? undefined : state.coercion) === `undefined`)
                  return pushError(state, `Unbound coercion result`);
                value = value.split(delimiter);
              }
            }
            if (!Array.isArray(value))
              return pushError(state, `Expected an array (got ${getPrintable(value)})`);
            let valid = true;
            for (let t = 0, T = value.length;t < T; ++t) {
              valid = spec(value[t], Object.assign(Object.assign({}, state), { p: computeKey(state, t), coercion: makeCoercionFn(value, t) })) && valid;
              if (!valid && (state === null || state === undefined ? undefined : state.errors) == null) {
                break;
              }
            }
            if (value !== originalValue)
              state.coercions.push([(_a = state.p) !== null && _a !== undefined ? _a : `.`, state.coercion.bind(null, value)]);
            return valid;
          }
        });
      }
      function isSet(spec, { delimiter } = {}) {
        const isArrayValidator = isArray(spec, { delimiter });
        return makeValidator({
          test: (value, state) => {
            var _a, _b;
            if (Object.getPrototypeOf(value).toString() === `[object Set]`) {
              if (typeof (state === null || state === undefined ? undefined : state.coercions) !== `undefined`) {
                if (typeof (state === null || state === undefined ? undefined : state.coercion) === `undefined`)
                  return pushError(state, `Unbound coercion result`);
                const originalValues = [...value];
                const coercedValues = [...value];
                if (!isArrayValidator(coercedValues, Object.assign(Object.assign({}, state), { coercion: undefined })))
                  return false;
                const updateValue = () => coercedValues.some((val, t) => val !== originalValues[t]) ? new Set(coercedValues) : value;
                state.coercions.push([(_a = state.p) !== null && _a !== undefined ? _a : `.`, makeLazyCoercionFn(state.coercion, value, updateValue)]);
                return true;
              } else {
                let valid = true;
                for (const subValue of value) {
                  valid = spec(subValue, Object.assign({}, state)) && valid;
                  if (!valid && (state === null || state === undefined ? undefined : state.errors) == null) {
                    break;
                  }
                }
                return valid;
              }
            }
            if (typeof (state === null || state === undefined ? undefined : state.coercions) !== `undefined`) {
              if (typeof (state === null || state === undefined ? undefined : state.coercion) === `undefined`)
                return pushError(state, `Unbound coercion result`);
              const store = { value };
              if (!isArrayValidator(value, Object.assign(Object.assign({}, state), { coercion: makeCoercionFn(store, `value`) })))
                return false;
              state.coercions.push([(_b = state.p) !== null && _b !== undefined ? _b : `.`, makeLazyCoercionFn(state.coercion, value, () => new Set(store.value))]);
              return true;
            }
            return pushError(state, `Expected a set (got ${getPrintable(value)})`);
          }
        });
      }
      function isMap(keySpec, valueSpec) {
        const isArrayValidator = isArray(isTuple([keySpec, valueSpec]));
        const isRecordValidator = isRecord(valueSpec, { keys: keySpec });
        return makeValidator({
          test: (value, state) => {
            var _a, _b, _c;
            if (Object.getPrototypeOf(value).toString() === `[object Map]`) {
              if (typeof (state === null || state === undefined ? undefined : state.coercions) !== `undefined`) {
                if (typeof (state === null || state === undefined ? undefined : state.coercion) === `undefined`)
                  return pushError(state, `Unbound coercion result`);
                const originalValues = [...value];
                const coercedValues = [...value];
                if (!isArrayValidator(coercedValues, Object.assign(Object.assign({}, state), { coercion: undefined })))
                  return false;
                const updateValue = () => coercedValues.some((val, t) => val[0] !== originalValues[t][0] || val[1] !== originalValues[t][1]) ? new Map(coercedValues) : value;
                state.coercions.push([(_a = state.p) !== null && _a !== undefined ? _a : `.`, makeLazyCoercionFn(state.coercion, value, updateValue)]);
                return true;
              } else {
                let valid = true;
                for (const [key, subValue] of value) {
                  valid = keySpec(key, Object.assign({}, state)) && valid;
                  if (!valid && (state === null || state === undefined ? undefined : state.errors) == null) {
                    break;
                  }
                  valid = valueSpec(subValue, Object.assign(Object.assign({}, state), { p: computeKey(state, key) })) && valid;
                  if (!valid && (state === null || state === undefined ? undefined : state.errors) == null) {
                    break;
                  }
                }
                return valid;
              }
            }
            if (typeof (state === null || state === undefined ? undefined : state.coercions) !== `undefined`) {
              if (typeof (state === null || state === undefined ? undefined : state.coercion) === `undefined`)
                return pushError(state, `Unbound coercion result`);
              const store = { value };
              if (Array.isArray(value)) {
                if (!isArrayValidator(value, Object.assign(Object.assign({}, state), { coercion: undefined })))
                  return false;
                state.coercions.push([(_b = state.p) !== null && _b !== undefined ? _b : `.`, makeLazyCoercionFn(state.coercion, value, () => new Map(store.value))]);
                return true;
              } else {
                if (!isRecordValidator(value, Object.assign(Object.assign({}, state), { coercion: makeCoercionFn(store, `value`) })))
                  return false;
                state.coercions.push([(_c = state.p) !== null && _c !== undefined ? _c : `.`, makeLazyCoercionFn(state.coercion, value, () => new Map(Object.entries(store.value)))]);
                return true;
              }
            }
            return pushError(state, `Expected a map (got ${getPrintable(value)})`);
          }
        });
      }
      function isTuple(spec, { delimiter } = {}) {
        const lengthValidator = hasExactLength(spec.length);
        return makeValidator({
          test: (value, state) => {
            var _a;
            if (typeof value === `string` && typeof delimiter !== `undefined`) {
              if (typeof (state === null || state === undefined ? undefined : state.coercions) !== `undefined`) {
                if (typeof (state === null || state === undefined ? undefined : state.coercion) === `undefined`)
                  return pushError(state, `Unbound coercion result`);
                value = value.split(delimiter);
                state.coercions.push([(_a = state.p) !== null && _a !== undefined ? _a : `.`, state.coercion.bind(null, value)]);
              }
            }
            if (!Array.isArray(value))
              return pushError(state, `Expected a tuple (got ${getPrintable(value)})`);
            let valid = lengthValidator(value, Object.assign({}, state));
            for (let t = 0, T = value.length;t < T && t < spec.length; ++t) {
              valid = spec[t](value[t], Object.assign(Object.assign({}, state), { p: computeKey(state, t), coercion: makeCoercionFn(value, t) })) && valid;
              if (!valid && (state === null || state === undefined ? undefined : state.errors) == null) {
                break;
              }
            }
            return valid;
          }
        });
      }
      function isRecord(spec, { keys: keySpec = null } = {}) {
        const isArrayValidator = isArray(isTuple([keySpec !== null && keySpec !== undefined ? keySpec : isString(), spec]));
        return makeValidator({
          test: (value, state) => {
            var _a;
            if (Array.isArray(value)) {
              if (typeof (state === null || state === undefined ? undefined : state.coercions) !== `undefined`) {
                if (typeof (state === null || state === undefined ? undefined : state.coercion) === `undefined`)
                  return pushError(state, `Unbound coercion result`);
                if (!isArrayValidator(value, Object.assign(Object.assign({}, state), { coercion: undefined })))
                  return false;
                value = Object.fromEntries(value);
                state.coercions.push([(_a = state.p) !== null && _a !== undefined ? _a : `.`, state.coercion.bind(null, value)]);
                return true;
              }
            }
            if (typeof value !== `object` || value === null)
              return pushError(state, `Expected an object (got ${getPrintable(value)})`);
            const keys = Object.keys(value);
            let valid = true;
            for (let t = 0, T = keys.length;t < T && (valid || (state === null || state === undefined ? undefined : state.errors) != null); ++t) {
              const key = keys[t];
              const sub = value[key];
              if (key === `__proto__` || key === `constructor`) {
                valid = pushError(Object.assign(Object.assign({}, state), { p: computeKey(state, key) }), `Unsafe property name`);
                continue;
              }
              if (keySpec !== null && !keySpec(key, state)) {
                valid = false;
                continue;
              }
              if (!spec(sub, Object.assign(Object.assign({}, state), { p: computeKey(state, key), coercion: makeCoercionFn(value, key) }))) {
                valid = false;
                continue;
              }
            }
            return valid;
          }
        });
      }
      function isDict(spec, opts = {}) {
        return isRecord(spec, opts);
      }
      function isObject(props, { extra: extraSpec = null } = {}) {
        const specKeys = Object.keys(props);
        const validator = makeValidator({
          test: (value, state) => {
            if (typeof value !== `object` || value === null)
              return pushError(state, `Expected an object (got ${getPrintable(value)})`);
            const keys = /* @__PURE__ */ new Set([...specKeys, ...Object.keys(value)]);
            const extra = {};
            let valid = true;
            for (const key of keys) {
              if (key === `constructor` || key === `__proto__`) {
                valid = pushError(Object.assign(Object.assign({}, state), { p: computeKey(state, key) }), `Unsafe property name`);
              } else {
                const spec = Object.prototype.hasOwnProperty.call(props, key) ? props[key] : undefined;
                const sub = Object.prototype.hasOwnProperty.call(value, key) ? value[key] : undefined;
                if (typeof spec !== `undefined`) {
                  valid = spec(sub, Object.assign(Object.assign({}, state), { p: computeKey(state, key), coercion: makeCoercionFn(value, key) })) && valid;
                } else if (extraSpec === null) {
                  valid = pushError(Object.assign(Object.assign({}, state), { p: computeKey(state, key) }), `Extraneous property (got ${getPrintable(sub)})`);
                } else {
                  Object.defineProperty(extra, key, {
                    enumerable: true,
                    get: () => sub,
                    set: makeSetter(value, key)
                  });
                }
              }
              if (!valid && (state === null || state === undefined ? undefined : state.errors) == null) {
                break;
              }
            }
            if (extraSpec !== null && (valid || (state === null || state === undefined ? undefined : state.errors) != null))
              valid = extraSpec(extra, state) && valid;
            return valid;
          }
        });
        return Object.assign(validator, {
          properties: props
        });
      }
      function isPartial(props) {
        return isObject(props, { extra: isRecord(isUnknown()) });
      }
      var isInstanceOf = (constructor) => makeValidator({
        test: (value, state) => {
          if (!(value instanceof constructor))
            return pushError(state, `Expected an instance of ${constructor.name} (got ${getPrintable(value)})`);
          return true;
        }
      });
      var isOneOf = (specs, { exclusive = false } = {}) => makeValidator({
        test: (value, state) => {
          var _a, _b, _c;
          const matches = [];
          const errorBuffer = typeof (state === null || state === undefined ? undefined : state.errors) !== `undefined` ? [] : undefined;
          for (let t = 0, T = specs.length;t < T; ++t) {
            const subErrors = typeof (state === null || state === undefined ? undefined : state.errors) !== `undefined` ? [] : undefined;
            const subCoercions = typeof (state === null || state === undefined ? undefined : state.coercions) !== `undefined` ? [] : undefined;
            if (specs[t](value, Object.assign(Object.assign({}, state), { errors: subErrors, coercions: subCoercions, p: `${(_a = state === null || state === undefined ? undefined : state.p) !== null && _a !== undefined ? _a : `.`}#${t + 1}` }))) {
              matches.push([`#${t + 1}`, subCoercions]);
              if (!exclusive) {
                break;
              }
            } else {
              errorBuffer === null || errorBuffer === undefined || errorBuffer.push(subErrors[0]);
            }
          }
          if (matches.length === 1) {
            const [, subCoercions] = matches[0];
            if (typeof subCoercions !== `undefined`)
              (_b = state === null || state === undefined ? undefined : state.coercions) === null || _b === undefined || _b.push(...subCoercions);
            return true;
          }
          if (matches.length > 1)
            pushError(state, `Expected to match exactly a single predicate (matched ${matches.join(`, `)})`);
          else
            (_c = state === null || state === undefined ? undefined : state.errors) === null || _c === undefined || _c.push(...errorBuffer);
          return false;
        }
      });
      function makeTrait(value) {
        return () => {
          return value;
        };
      }
      function makeValidator({ test }) {
        return makeTrait(test)();
      }
      var TypeAssertionError = class extends Error {
        constructor({ errors } = {}) {
          let errorMessage = `Type mismatch`;
          if (errors && errors.length > 0) {
            errorMessage += `
`;
            for (const error of errors) {
              errorMessage += `
- ${error}`;
            }
          }
          super(errorMessage);
        }
      };
      function assert(val, validator) {
        if (!validator(val)) {
          throw new TypeAssertionError;
        }
      }
      function assertWithErrors(val, validator) {
        const errors = [];
        if (!validator(val, { errors })) {
          throw new TypeAssertionError({ errors });
        }
      }
      function softAssert(val, validator) {
      }
      function as(value, validator, { coerce = false, errors: storeErrors, throw: throws } = {}) {
        const errors = storeErrors ? [] : undefined;
        if (!coerce) {
          if (validator(value, { errors })) {
            return throws ? value : { value, errors: undefined };
          } else if (!throws) {
            return { value: undefined, errors: errors !== null && errors !== undefined ? errors : true };
          } else {
            throw new TypeAssertionError({ errors });
          }
        }
        const state = { value };
        const coercion = makeCoercionFn(state, `value`);
        const coercions = [];
        if (!validator(value, { errors, coercion, coercions })) {
          if (!throws) {
            return { value: undefined, errors: errors !== null && errors !== undefined ? errors : true };
          } else {
            throw new TypeAssertionError({ errors });
          }
        }
        for (const [, apply] of coercions)
          apply();
        if (throws) {
          return state.value;
        } else {
          return { value: state.value, errors: undefined };
        }
      }
      function fn(validators, fn2) {
        const isValidArgList = isTuple(validators);
        return (...args) => {
          const check = isValidArgList(args);
          if (!check)
            throw new TypeAssertionError;
          return fn2(...args);
        };
      }
      function hasMinLength(length) {
        return makeValidator({
          test: (value, state) => {
            if (!(value.length >= length))
              return pushError(state, `Expected to have a length of at least ${length} elements (got ${value.length})`);
            return true;
          }
        });
      }
      function hasMaxLength(length) {
        return makeValidator({
          test: (value, state) => {
            if (!(value.length <= length))
              return pushError(state, `Expected to have a length of at most ${length} elements (got ${value.length})`);
            return true;
          }
        });
      }
      function hasExactLength(length) {
        return makeValidator({
          test: (value, state) => {
            if (!(value.length === length))
              return pushError(state, `Expected to have a length of exactly ${length} elements (got ${value.length})`);
            return true;
          }
        });
      }
      function hasUniqueItems({ map } = {}) {
        return makeValidator({
          test: (value, state) => {
            const set = /* @__PURE__ */ new Set;
            const dup = /* @__PURE__ */ new Set;
            for (let t = 0, T = value.length;t < T; ++t) {
              const sub = value[t];
              const key = typeof map !== `undefined` ? map(sub) : sub;
              if (set.has(key)) {
                if (dup.has(key))
                  continue;
                pushError(state, `Expected to contain unique elements; got a duplicate with ${getPrintable(value)}`);
                dup.add(key);
              } else {
                set.add(key);
              }
            }
            return dup.size === 0;
          }
        });
      }
      function isNegative() {
        return makeValidator({
          test: (value, state) => {
            if (!(value <= 0))
              return pushError(state, `Expected to be negative (got ${value})`);
            return true;
          }
        });
      }
      function isPositive() {
        return makeValidator({
          test: (value, state) => {
            if (!(value >= 0))
              return pushError(state, `Expected to be positive (got ${value})`);
            return true;
          }
        });
      }
      function isAtLeast(n) {
        return makeValidator({
          test: (value, state) => {
            if (!(value >= n))
              return pushError(state, `Expected to be at least ${n} (got ${value})`);
            return true;
          }
        });
      }
      function isAtMost(n) {
        return makeValidator({
          test: (value, state) => {
            if (!(value <= n))
              return pushError(state, `Expected to be at most ${n} (got ${value})`);
            return true;
          }
        });
      }
      function isInInclusiveRange(a, b) {
        return makeValidator({
          test: (value, state) => {
            if (!(value >= a && value <= b))
              return pushError(state, `Expected to be in the [${a}; ${b}] range (got ${value})`);
            return true;
          }
        });
      }
      function isInExclusiveRange(a, b) {
        return makeValidator({
          test: (value, state) => {
            if (!(value >= a && value < b))
              return pushError(state, `Expected to be in the [${a}; ${b}[ range (got ${value})`);
            return true;
          }
        });
      }
      function isInteger({ unsafe = false } = {}) {
        return makeValidator({
          test: (value, state) => {
            if (value !== Math.round(value))
              return pushError(state, `Expected to be an integer (got ${value})`);
            if (!unsafe && !Number.isSafeInteger(value))
              return pushError(state, `Expected to be a safe integer (got ${value})`);
            return true;
          }
        });
      }
      function matchesRegExp(regExp) {
        return makeValidator({
          test: (value, state) => {
            if (!regExp.test(value))
              return pushError(state, `Expected to match the pattern ${regExp.toString()} (got ${getPrintable(value)})`);
            return true;
          }
        });
      }
      function isLowerCase() {
        return makeValidator({
          test: (value, state) => {
            if (value !== value.toLowerCase())
              return pushError(state, `Expected to be all-lowercase (got ${value})`);
            return true;
          }
        });
      }
      function isUpperCase() {
        return makeValidator({
          test: (value, state) => {
            if (value !== value.toUpperCase())
              return pushError(state, `Expected to be all-uppercase (got ${value})`);
            return true;
          }
        });
      }
      function isUUID4() {
        return makeValidator({
          test: (value, state) => {
            if (!uuid4RegExp.test(value))
              return pushError(state, `Expected to be a valid UUID v4 (got ${getPrintable(value)})`);
            return true;
          }
        });
      }
      function isISO8601() {
        return makeValidator({
          test: (value, state) => {
            if (!iso8601RegExp.test(value))
              return pushError(state, `Expected to be a valid ISO 8601 date string (got ${getPrintable(value)})`);
            return true;
          }
        });
      }
      function isHexColor({ alpha = false }) {
        return makeValidator({
          test: (value, state) => {
            const res = alpha ? colorStringRegExp.test(value) : colorStringAlphaRegExp.test(value);
            if (!res)
              return pushError(state, `Expected to be a valid hexadecimal color string (got ${getPrintable(value)})`);
            return true;
          }
        });
      }
      function isBase64() {
        return makeValidator({
          test: (value, state) => {
            if (!base64RegExp.test(value))
              return pushError(state, `Expected to be a valid base 64 string (got ${getPrintable(value)})`);
            return true;
          }
        });
      }
      function isJSON(spec = isUnknown()) {
        return makeValidator({
          test: (value, state) => {
            let data;
            try {
              data = JSON.parse(value);
            } catch (_a) {
              return pushError(state, `Expected to be a valid JSON string (got ${getPrintable(value)})`);
            }
            return spec(data, state);
          }
        });
      }
      function cascade(spec, ...followups) {
        const resolvedFollowups = Array.isArray(followups[0]) ? followups[0] : followups;
        return makeValidator({
          test: (value, state) => {
            var _a, _b;
            const context = { value };
            const subCoercion = typeof (state === null || state === undefined ? undefined : state.coercions) !== `undefined` ? makeCoercionFn(context, `value`) : undefined;
            const subCoercions = typeof (state === null || state === undefined ? undefined : state.coercions) !== `undefined` ? [] : undefined;
            if (!spec(value, Object.assign(Object.assign({}, state), { coercion: subCoercion, coercions: subCoercions })))
              return false;
            const reverts = [];
            if (typeof subCoercions !== `undefined`)
              for (const [, coercion] of subCoercions)
                reverts.push(coercion());
            try {
              if (typeof (state === null || state === undefined ? undefined : state.coercions) !== `undefined`) {
                if (context.value !== value) {
                  if (typeof (state === null || state === undefined ? undefined : state.coercion) === `undefined`)
                    return pushError(state, `Unbound coercion result`);
                  state.coercions.push([(_a = state.p) !== null && _a !== undefined ? _a : `.`, state.coercion.bind(null, context.value)]);
                }
                (_b = state === null || state === undefined ? undefined : state.coercions) === null || _b === undefined || _b.push(...subCoercions);
              }
              return resolvedFollowups.every((spec2) => {
                return spec2(context.value, state);
              });
            } finally {
              for (const revert of reverts) {
                revert();
              }
            }
          }
        });
      }
      function applyCascade(spec, ...followups) {
        const resolvedFollowups = Array.isArray(followups[0]) ? followups[0] : followups;
        return cascade(spec, resolvedFollowups);
      }
      function isOptional(spec) {
        return makeValidator({
          test: (value, state) => {
            if (typeof value === `undefined`)
              return true;
            return spec(value, state);
          }
        });
      }
      function isNullable(spec) {
        return makeValidator({
          test: (value, state) => {
            if (value === null)
              return true;
            return spec(value, state);
          }
        });
      }
      var checks = {
        missing: (keys, key) => keys.has(key),
        undefined: (keys, key, value) => keys.has(key) && typeof value[key] !== `undefined`,
        nil: (keys, key, value) => keys.has(key) && value[key] != null,
        falsy: (keys, key, value) => keys.has(key) && !!value[key]
      };
      function hasRequiredKeys(requiredKeys, options) {
        var _a;
        const requiredSet = new Set(requiredKeys);
        const check = checks[(_a = options === null || options === undefined ? undefined : options.missingIf) !== null && _a !== undefined ? _a : "missing"];
        return makeValidator({
          test: (value, state) => {
            const keys = new Set(Object.keys(value));
            const problems = [];
            for (const key of requiredSet)
              if (!check(keys, key, value))
                problems.push(key);
            if (problems.length > 0)
              return pushError(state, `Missing required ${plural2(problems.length, `property`, `properties`)} ${getPrintableArray(problems, `and`)}`);
            return true;
          }
        });
      }
      function hasAtLeastOneKey(requiredKeys, options) {
        var _a;
        const requiredSet = new Set(requiredKeys);
        const check = checks[(_a = options === null || options === undefined ? undefined : options.missingIf) !== null && _a !== undefined ? _a : "missing"];
        return makeValidator({
          test: (value, state) => {
            const keys = Object.keys(value);
            const valid = keys.some((key) => check(requiredSet, key, value));
            if (!valid)
              return pushError(state, `Missing at least one property from ${getPrintableArray(Array.from(requiredSet), `or`)}`);
            return true;
          }
        });
      }
      function hasForbiddenKeys(forbiddenKeys, options) {
        var _a;
        const forbiddenSet = new Set(forbiddenKeys);
        const check = checks[(_a = options === null || options === undefined ? undefined : options.missingIf) !== null && _a !== undefined ? _a : "missing"];
        return makeValidator({
          test: (value, state) => {
            const keys = new Set(Object.keys(value));
            const problems = [];
            for (const key of forbiddenSet)
              if (check(keys, key, value))
                problems.push(key);
            if (problems.length > 0)
              return pushError(state, `Forbidden ${plural2(problems.length, `property`, `properties`)} ${getPrintableArray(problems, `and`)}`);
            return true;
          }
        });
      }
      function hasMutuallyExclusiveKeys(exclusiveKeys, options) {
        var _a;
        const exclusiveSet = new Set(exclusiveKeys);
        const check = checks[(_a = options === null || options === undefined ? undefined : options.missingIf) !== null && _a !== undefined ? _a : "missing"];
        return makeValidator({
          test: (value, state) => {
            const keys = new Set(Object.keys(value));
            const used = [];
            for (const key of exclusiveSet)
              if (check(keys, key, value))
                used.push(key);
            if (used.length > 1)
              return pushError(state, `Mutually exclusive properties ${getPrintableArray(used, `and`)}`);
            return true;
          }
        });
      }
      (function(KeyRelationship) {
        KeyRelationship["Forbids"] = "Forbids";
        KeyRelationship["Requires"] = "Requires";
      })(exports22.KeyRelationship || (exports22.KeyRelationship = {}));
      var keyRelationships = {
        [exports22.KeyRelationship.Forbids]: {
          expect: false,
          message: `forbids using`
        },
        [exports22.KeyRelationship.Requires]: {
          expect: true,
          message: `requires using`
        }
      };
      function hasKeyRelationship(subject, relationship, others, options) {
        var _a, _b;
        const skipped = new Set((_a = options === null || options === undefined ? undefined : options.ignore) !== null && _a !== undefined ? _a : []);
        const check = checks[(_b = options === null || options === undefined ? undefined : options.missingIf) !== null && _b !== undefined ? _b : "missing"];
        const otherSet = new Set(others);
        const spec = keyRelationships[relationship];
        const conjunction = relationship === exports22.KeyRelationship.Forbids ? `or` : `and`;
        return makeValidator({
          test: (value, state) => {
            const keys = new Set(Object.keys(value));
            if (!check(keys, subject, value) || skipped.has(value[subject]))
              return true;
            const problems = [];
            for (const key of otherSet)
              if ((check(keys, key, value) && !skipped.has(value[key])) !== spec.expect)
                problems.push(key);
            if (problems.length >= 1)
              return pushError(state, `Property "${subject}" ${spec.message} ${plural2(problems.length, `property`, `properties`)} ${getPrintableArray(problems, conjunction)}`);
            return true;
          }
        });
      }
      exports22.TypeAssertionError = TypeAssertionError;
      exports22.applyCascade = applyCascade;
      exports22.as = as;
      exports22.assert = assert;
      exports22.assertWithErrors = assertWithErrors;
      exports22.cascade = cascade;
      exports22.fn = fn;
      exports22.hasAtLeastOneKey = hasAtLeastOneKey;
      exports22.hasExactLength = hasExactLength;
      exports22.hasForbiddenKeys = hasForbiddenKeys;
      exports22.hasKeyRelationship = hasKeyRelationship;
      exports22.hasMaxLength = hasMaxLength;
      exports22.hasMinLength = hasMinLength;
      exports22.hasMutuallyExclusiveKeys = hasMutuallyExclusiveKeys;
      exports22.hasRequiredKeys = hasRequiredKeys;
      exports22.hasUniqueItems = hasUniqueItems;
      exports22.isArray = isArray;
      exports22.isAtLeast = isAtLeast;
      exports22.isAtMost = isAtMost;
      exports22.isBase64 = isBase64;
      exports22.isBoolean = isBoolean;
      exports22.isDate = isDate;
      exports22.isDict = isDict;
      exports22.isEnum = isEnum;
      exports22.isHexColor = isHexColor;
      exports22.isISO8601 = isISO8601;
      exports22.isInExclusiveRange = isInExclusiveRange;
      exports22.isInInclusiveRange = isInInclusiveRange;
      exports22.isInstanceOf = isInstanceOf;
      exports22.isInteger = isInteger;
      exports22.isJSON = isJSON;
      exports22.isLiteral = isLiteral;
      exports22.isLowerCase = isLowerCase;
      exports22.isMap = isMap;
      exports22.isNegative = isNegative;
      exports22.isNullable = isNullable;
      exports22.isNumber = isNumber;
      exports22.isObject = isObject;
      exports22.isOneOf = isOneOf;
      exports22.isOptional = isOptional;
      exports22.isPartial = isPartial;
      exports22.isPayload = isPayload;
      exports22.isPositive = isPositive;
      exports22.isRecord = isRecord;
      exports22.isSet = isSet;
      exports22.isString = isString;
      exports22.isTuple = isTuple;
      exports22.isUUID4 = isUUID4;
      exports22.isUnknown = isUnknown;
      exports22.isUpperCase = isUpperCase;
      exports22.makeTrait = makeTrait;
      exports22.makeValidator = makeValidator;
      exports22.matchesRegExp = matchesRegExp;
      exports22.softAssert = softAssert;
    }
  });
  var require_Command = __commonJS2({
    "../../node_modules/.pnpm/clipanion@4.0.0-rc.4_typanion@3.14.0/node_modules/clipanion/lib/advanced/Command.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var advanced_options_utils = require_utils();
      function _interopNamespace(e) {
        if (e && e.__esModule)
          return e;
        var n = /* @__PURE__ */ Object.create(null);
        if (e) {
          Object.keys(e).forEach(function(k) {
            if (k !== "default") {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                  return e[k];
                }
              });
            }
          });
        }
        n["default"] = e;
        return Object.freeze(n);
      }
      var Command = class {
        constructor() {
          this.help = false;
        }
        static Usage(usage) {
          return usage;
        }
        async catch(error) {
          throw error;
        }
        async validateAndExecute() {
          const commandClass = this.constructor;
          const cascade = commandClass.schema;
          if (Array.isArray(cascade)) {
            const { isDict, isUnknown, applyCascade } = await Promise.resolve().then(function() {
              return /* @__PURE__ */ _interopNamespace(require_lib3());
            });
            const schema = applyCascade(isDict(isUnknown()), cascade);
            const errors = [];
            const coercions = [];
            const check = schema(this, { errors, coercions });
            if (!check)
              throw advanced_options_utils.formatError(`Invalid option schema`, errors);
            for (const [, op] of coercions) {
              op();
            }
          } else if (cascade != null) {
            throw new Error(`Invalid command schema`);
          }
          const exitCode = await this.execute();
          if (typeof exitCode !== `undefined`) {
            return exitCode;
          } else {
            return 0;
          }
        }
      };
      Command.isOption = advanced_options_utils.isOptionSymbol;
      Command.Default = [];
      exports22.Command = Command;
    }
  });
  var require_node = __commonJS2({
    "../../node_modules/.pnpm/clipanion@4.0.0-rc.4_typanion@3.14.0/node_modules/clipanion/lib/platform/node.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var tty = __require("tty");
      function _interopDefaultLegacy(e) {
        return e && typeof e === "object" && "default" in e ? e : { default: e };
      }
      var tty__default = /* @__PURE__ */ _interopDefaultLegacy(tty);
      function getDefaultColorDepth() {
        if (tty__default["default"] && `getColorDepth` in tty__default["default"].WriteStream.prototype)
          return tty__default["default"].WriteStream.prototype.getColorDepth();
        if (process.env.FORCE_COLOR === `0`)
          return 1;
        if (process.env.FORCE_COLOR === `1`)
          return 8;
        if (typeof process.stdout !== `undefined` && process.stdout.isTTY)
          return 8;
        return 1;
      }
      var gContextStorage;
      function getCaptureActivator(context) {
        let contextStorage = gContextStorage;
        if (typeof contextStorage === `undefined`) {
          if (context.stdout === process.stdout && context.stderr === process.stderr)
            return null;
          const { AsyncLocalStorage: LazyAsyncLocalStorage } = __require("async_hooks");
          contextStorage = gContextStorage = new LazyAsyncLocalStorage;
          const origStdoutWrite = process.stdout._write;
          process.stdout._write = function(chunk, encoding, cb) {
            const context2 = contextStorage.getStore();
            if (typeof context2 === `undefined`)
              return origStdoutWrite.call(this, chunk, encoding, cb);
            return context2.stdout.write(chunk, encoding, cb);
          };
          const origStderrWrite = process.stderr._write;
          process.stderr._write = function(chunk, encoding, cb) {
            const context2 = contextStorage.getStore();
            if (typeof context2 === `undefined`)
              return origStderrWrite.call(this, chunk, encoding, cb);
            return context2.stderr.write(chunk, encoding, cb);
          };
        }
        return (fn) => {
          return contextStorage.run(context, fn);
        };
      }
      exports22.getCaptureActivator = getCaptureActivator;
      exports22.getDefaultColorDepth = getDefaultColorDepth;
    }
  });
  var require_core2 = __commonJS2({
    "../../node_modules/.pnpm/clipanion@4.0.0-rc.4_typanion@3.14.0/node_modules/clipanion/lib/core.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var constants = require_constants2();
      var errors = require_errors2();
      function debug(str) {
        if (constants.IS_DEBUG) {
          console.log(str);
        }
      }
      var basicHelpState = {
        candidateUsage: null,
        requiredOptions: [],
        errorMessage: null,
        ignoreOptions: false,
        path: [],
        positionals: [],
        options: [],
        remainder: null,
        selectedIndex: constants.HELP_COMMAND_INDEX,
        tokens: []
      };
      function makeStateMachine() {
        const stateMachine = {
          nodes: []
        };
        for (let t = 0;t < constants.NodeType.CustomNode; ++t)
          stateMachine.nodes.push(makeNode());
        return stateMachine;
      }
      function makeAnyOfMachine(inputs) {
        const output = makeStateMachine();
        const heads = [];
        let offset = output.nodes.length;
        for (const input of inputs) {
          heads.push(offset);
          for (let t = 0;t < input.nodes.length; ++t)
            if (!isTerminalNode(t))
              output.nodes.push(cloneNode(input.nodes[t], offset));
          offset += input.nodes.length - constants.NodeType.CustomNode + 1;
        }
        for (const head of heads)
          registerShortcut(output, constants.NodeType.InitialNode, head);
        return output;
      }
      function injectNode(machine, node) {
        machine.nodes.push(node);
        return machine.nodes.length - 1;
      }
      function simplifyMachine(input) {
        const visited = /* @__PURE__ */ new Set;
        const process2 = (node) => {
          if (visited.has(node))
            return;
          visited.add(node);
          const nodeDef = input.nodes[node];
          for (const transitions of Object.values(nodeDef.statics))
            for (const { to } of transitions)
              process2(to);
          for (const [, { to }] of nodeDef.dynamics)
            process2(to);
          for (const { to } of nodeDef.shortcuts)
            process2(to);
          const shortcuts = new Set(nodeDef.shortcuts.map(({ to }) => to));
          while (nodeDef.shortcuts.length > 0) {
            const { to } = nodeDef.shortcuts.shift();
            const toDef = input.nodes[to];
            for (const [segment, transitions] of Object.entries(toDef.statics)) {
              const store = !Object.prototype.hasOwnProperty.call(nodeDef.statics, segment) ? nodeDef.statics[segment] = [] : nodeDef.statics[segment];
              for (const transition of transitions) {
                if (!store.some(({ to: to2 }) => transition.to === to2)) {
                  store.push(transition);
                }
              }
            }
            for (const [test, transition] of toDef.dynamics)
              if (!nodeDef.dynamics.some(([otherTest, { to: to2 }]) => test === otherTest && transition.to === to2))
                nodeDef.dynamics.push([test, transition]);
            for (const transition of toDef.shortcuts) {
              if (!shortcuts.has(transition.to)) {
                nodeDef.shortcuts.push(transition);
                shortcuts.add(transition.to);
              }
            }
          }
        };
        process2(constants.NodeType.InitialNode);
      }
      function debugMachine(machine, { prefix = `` } = {}) {
        if (constants.IS_DEBUG) {
          debug(`${prefix}Nodes are:`);
          for (let t = 0;t < machine.nodes.length; ++t) {
            debug(`${prefix}  ${t}: ${JSON.stringify(machine.nodes[t])}`);
          }
        }
      }
      function runMachineInternal(machine, input, partial = false) {
        debug(`Running a vm on ${JSON.stringify(input)}`);
        let branches = [{
          node: constants.NodeType.InitialNode,
          state: {
            candidateUsage: null,
            requiredOptions: [],
            errorMessage: null,
            ignoreOptions: false,
            options: [],
            path: [],
            positionals: [],
            remainder: null,
            selectedIndex: null,
            tokens: []
          }
        }];
        debugMachine(machine, { prefix: `  ` });
        const tokens = [constants.SpecialToken.StartOfInput, ...input];
        for (let t = 0;t < tokens.length; ++t) {
          const segment = tokens[t];
          const isEOI = segment === constants.SpecialToken.EndOfInput || segment === constants.SpecialToken.EndOfPartialInput;
          const segmentIndex = t - 1;
          debug(`  Processing ${JSON.stringify(segment)}`);
          const nextBranches = [];
          for (const { node, state } of branches) {
            debug(`    Current node is ${node}`);
            const nodeDef = machine.nodes[node];
            if (node === constants.NodeType.ErrorNode) {
              nextBranches.push({ node, state });
              continue;
            }
            console.assert(nodeDef.shortcuts.length === 0, `Shortcuts should have been eliminated by now`);
            const hasExactMatch = Object.prototype.hasOwnProperty.call(nodeDef.statics, segment);
            if (!partial || t < tokens.length - 1 || hasExactMatch) {
              if (hasExactMatch) {
                const transitions = nodeDef.statics[segment];
                for (const { to, reducer } of transitions) {
                  nextBranches.push({ node: to, state: typeof reducer !== `undefined` ? execute(reducers, reducer, state, segment, segmentIndex) : state });
                  debug(`      Static transition to ${to} found`);
                }
              } else {
                debug(`      No static transition found`);
              }
            } else {
              let hasMatches = false;
              for (const candidate of Object.keys(nodeDef.statics)) {
                if (!candidate.startsWith(segment))
                  continue;
                if (segment === candidate) {
                  for (const { to, reducer } of nodeDef.statics[candidate]) {
                    nextBranches.push({ node: to, state: typeof reducer !== `undefined` ? execute(reducers, reducer, state, segment, segmentIndex) : state });
                    debug(`      Static transition to ${to} found`);
                  }
                } else {
                  for (const { to } of nodeDef.statics[candidate]) {
                    nextBranches.push({ node: to, state: { ...state, remainder: candidate.slice(segment.length) } });
                    debug(`      Static transition to ${to} found (partial match)`);
                  }
                }
                hasMatches = true;
              }
              if (!hasMatches) {
                debug(`      No partial static transition found`);
              }
            }
            if (!isEOI) {
              for (const [test, { to, reducer }] of nodeDef.dynamics) {
                if (execute(tests, test, state, segment, segmentIndex)) {
                  nextBranches.push({ node: to, state: typeof reducer !== `undefined` ? execute(reducers, reducer, state, segment, segmentIndex) : state });
                  debug(`      Dynamic transition to ${to} found (via ${test})`);
                }
              }
            }
          }
          if (nextBranches.length === 0 && isEOI && input.length === 1) {
            return [{
              node: constants.NodeType.InitialNode,
              state: basicHelpState
            }];
          }
          if (nextBranches.length === 0) {
            throw new errors.UnknownSyntaxError(input, branches.filter(({ node }) => {
              return node !== constants.NodeType.ErrorNode;
            }).map(({ state }) => {
              return { usage: state.candidateUsage, reason: null };
            }));
          }
          if (nextBranches.every(({ node }) => node === constants.NodeType.ErrorNode)) {
            throw new errors.UnknownSyntaxError(input, nextBranches.map(({ state }) => {
              return { usage: state.candidateUsage, reason: state.errorMessage };
            }));
          }
          branches = trimSmallerBranches(nextBranches);
        }
        if (branches.length > 0) {
          debug(`  Results:`);
          for (const branch of branches) {
            debug(`    - ${branch.node} -> ${JSON.stringify(branch.state)}`);
          }
        } else {
          debug(`  No results`);
        }
        return branches;
      }
      function runMachine(machine, input, { endToken = constants.SpecialToken.EndOfInput } = {}) {
        const branches = runMachineInternal(machine, [...input, endToken]);
        return selectBestState(input, branches.map(({ state }) => {
          return state;
        }));
      }
      function trimSmallerBranches(branches) {
        let maxPathSize = 0;
        for (const { state } of branches)
          if (state.path.length > maxPathSize)
            maxPathSize = state.path.length;
        return branches.filter(({ state }) => {
          return state.path.length === maxPathSize;
        });
      }
      function selectBestState(input, states) {
        const terminalStates = states.filter((state) => {
          return state.selectedIndex !== null;
        });
        if (terminalStates.length === 0)
          throw new Error;
        const requiredOptionsSetStates = terminalStates.filter((state) => state.selectedIndex === constants.HELP_COMMAND_INDEX || state.requiredOptions.every((names) => names.some((name) => state.options.find((opt) => opt.name === name))));
        if (requiredOptionsSetStates.length === 0) {
          throw new errors.UnknownSyntaxError(input, terminalStates.map((state) => ({
            usage: state.candidateUsage,
            reason: null
          })));
        }
        let maxPathSize = 0;
        for (const state of requiredOptionsSetStates)
          if (state.path.length > maxPathSize)
            maxPathSize = state.path.length;
        const bestPathBranches = requiredOptionsSetStates.filter((state) => {
          return state.path.length === maxPathSize;
        });
        const getPositionalCount = (state) => state.positionals.filter(({ extra }) => {
          return !extra;
        }).length + state.options.length;
        const statesWithPositionalCount = bestPathBranches.map((state) => {
          return { state, positionalCount: getPositionalCount(state) };
        });
        let maxPositionalCount = 0;
        for (const { positionalCount } of statesWithPositionalCount)
          if (positionalCount > maxPositionalCount)
            maxPositionalCount = positionalCount;
        const bestPositionalStates = statesWithPositionalCount.filter(({ positionalCount }) => {
          return positionalCount === maxPositionalCount;
        }).map(({ state }) => {
          return state;
        });
        const fixedStates = aggregateHelpStates(bestPositionalStates);
        if (fixedStates.length > 1)
          throw new errors.AmbiguousSyntaxError(input, fixedStates.map((state) => state.candidateUsage));
        return fixedStates[0];
      }
      function aggregateHelpStates(states) {
        const notHelps = [];
        const helps = [];
        for (const state of states) {
          if (state.selectedIndex === constants.HELP_COMMAND_INDEX) {
            helps.push(state);
          } else {
            notHelps.push(state);
          }
        }
        if (helps.length > 0) {
          notHelps.push({
            ...basicHelpState,
            path: findCommonPrefix(...helps.map((state) => state.path)),
            options: helps.reduce((options, state) => options.concat(state.options), [])
          });
        }
        return notHelps;
      }
      function findCommonPrefix(firstPath, secondPath, ...rest) {
        if (secondPath === undefined)
          return Array.from(firstPath);
        return findCommonPrefix(firstPath.filter((segment, i) => segment === secondPath[i]), ...rest);
      }
      function makeNode() {
        return {
          dynamics: [],
          shortcuts: [],
          statics: {}
        };
      }
      function isTerminalNode(node) {
        return node === constants.NodeType.SuccessNode || node === constants.NodeType.ErrorNode;
      }
      function cloneTransition(input, offset = 0) {
        const to = !isTerminalNode(input.to) ? input.to >= constants.NodeType.CustomNode ? input.to + offset - constants.NodeType.CustomNode + 1 : input.to + offset : input.to;
        return {
          to,
          reducer: input.reducer
        };
      }
      function cloneNode(input, offset = 0) {
        const output = makeNode();
        for (const [test, transition] of input.dynamics)
          output.dynamics.push([test, cloneTransition(transition, offset)]);
        for (const transition of input.shortcuts)
          output.shortcuts.push(cloneTransition(transition, offset));
        for (const [segment, transitions] of Object.entries(input.statics))
          output.statics[segment] = transitions.map((transition) => cloneTransition(transition, offset));
        return output;
      }
      function registerDynamic(machine, from, test, to, reducer) {
        machine.nodes[from].dynamics.push([
          test,
          { to, reducer }
        ]);
      }
      function registerShortcut(machine, from, to, reducer) {
        machine.nodes[from].shortcuts.push({ to, reducer });
      }
      function registerStatic(machine, from, test, to, reducer) {
        const store = !Object.prototype.hasOwnProperty.call(machine.nodes[from].statics, test) ? machine.nodes[from].statics[test] = [] : machine.nodes[from].statics[test];
        store.push({ to, reducer });
      }
      function execute(store, callback, state, segment, segmentIndex) {
        if (Array.isArray(callback)) {
          const [name, ...args] = callback;
          return store[name](state, segment, segmentIndex, ...args);
        } else {
          return store[callback](state, segment, segmentIndex);
        }
      }
      var tests = {
        always: () => {
          return true;
        },
        isOptionLike: (state, segment) => {
          return !state.ignoreOptions && (segment !== `-` && segment.startsWith(`-`));
        },
        isNotOptionLike: (state, segment) => {
          return state.ignoreOptions || segment === `-` || !segment.startsWith(`-`);
        },
        isOption: (state, segment, segmentIndex, name) => {
          return !state.ignoreOptions && segment === name;
        },
        isBatchOption: (state, segment, segmentIndex, names) => {
          return !state.ignoreOptions && constants.BATCH_REGEX.test(segment) && [...segment.slice(1)].every((name) => names.has(`-${name}`));
        },
        isBoundOption: (state, segment, segmentIndex, names, options) => {
          const optionParsing = segment.match(constants.BINDING_REGEX);
          return !state.ignoreOptions && !!optionParsing && constants.OPTION_REGEX.test(optionParsing[1]) && names.has(optionParsing[1]) && options.filter((opt) => opt.nameSet.includes(optionParsing[1])).every((opt) => opt.allowBinding);
        },
        isNegatedOption: (state, segment, segmentIndex, name) => {
          return !state.ignoreOptions && segment === `--no-${name.slice(2)}`;
        },
        isHelp: (state, segment) => {
          return !state.ignoreOptions && constants.HELP_REGEX.test(segment);
        },
        isUnsupportedOption: (state, segment, segmentIndex, names) => {
          return !state.ignoreOptions && segment.startsWith(`-`) && constants.OPTION_REGEX.test(segment) && !names.has(segment);
        },
        isInvalidOption: (state, segment) => {
          return !state.ignoreOptions && segment.startsWith(`-`) && !constants.OPTION_REGEX.test(segment);
        }
      };
      var reducers = {
        setCandidateState: (state, segment, segmentIndex, candidateState) => {
          return { ...state, ...candidateState };
        },
        setSelectedIndex: (state, segment, segmentIndex, index) => {
          return { ...state, selectedIndex: index };
        },
        pushBatch: (state, segment, segmentIndex, names) => {
          const options = state.options.slice();
          const tokens = state.tokens.slice();
          for (let t = 1;t < segment.length; ++t) {
            const name = names.get(`-${segment[t]}`);
            const slice = t === 1 ? [0, 2] : [t, t + 1];
            options.push({ name, value: true });
            tokens.push({ segmentIndex, type: `option`, option: name, slice });
          }
          return { ...state, options, tokens };
        },
        pushBound: (state, segment, segmentIndex) => {
          const [, name, value] = segment.match(constants.BINDING_REGEX);
          const options = state.options.concat({ name, value });
          const tokens = state.tokens.concat([
            { segmentIndex, type: `option`, slice: [0, name.length], option: name },
            { segmentIndex, type: `assign`, slice: [name.length, name.length + 1] },
            { segmentIndex, type: `value`, slice: [name.length + 1, name.length + value.length + 1] }
          ]);
          return { ...state, options, tokens };
        },
        pushPath: (state, segment, segmentIndex) => {
          const path2 = state.path.concat(segment);
          const tokens = state.tokens.concat({ segmentIndex, type: `path` });
          return { ...state, path: path2, tokens };
        },
        pushPositional: (state, segment, segmentIndex) => {
          const positionals = state.positionals.concat({ value: segment, extra: false });
          const tokens = state.tokens.concat({ segmentIndex, type: `positional` });
          return { ...state, positionals, tokens };
        },
        pushExtra: (state, segment, segmentIndex) => {
          const positionals = state.positionals.concat({ value: segment, extra: true });
          const tokens = state.tokens.concat({ segmentIndex, type: `positional` });
          return { ...state, positionals, tokens };
        },
        pushExtraNoLimits: (state, segment, segmentIndex) => {
          const positionals = state.positionals.concat({ value: segment, extra: NoLimits });
          const tokens = state.tokens.concat({ segmentIndex, type: `positional` });
          return { ...state, positionals, tokens };
        },
        pushTrue: (state, segment, segmentIndex, name) => {
          const options = state.options.concat({ name, value: true });
          const tokens = state.tokens.concat({ segmentIndex, type: `option`, option: name });
          return { ...state, options, tokens };
        },
        pushFalse: (state, segment, segmentIndex, name) => {
          const options = state.options.concat({ name, value: false });
          const tokens = state.tokens.concat({ segmentIndex, type: `option`, option: name });
          return { ...state, options, tokens };
        },
        pushUndefined: (state, segment, segmentIndex, name) => {
          const options = state.options.concat({ name: segment, value: undefined });
          const tokens = state.tokens.concat({ segmentIndex, type: `option`, option: segment });
          return { ...state, options, tokens };
        },
        pushStringValue: (state, segment, segmentIndex) => {
          var _a;
          const lastOption = state.options[state.options.length - 1];
          const options = state.options.slice();
          const tokens = state.tokens.concat({ segmentIndex, type: `value` });
          lastOption.value = ((_a = lastOption.value) !== null && _a !== undefined ? _a : []).concat([segment]);
          return { ...state, options, tokens };
        },
        setStringValue: (state, segment, segmentIndex) => {
          const lastOption = state.options[state.options.length - 1];
          const options = state.options.slice();
          const tokens = state.tokens.concat({ segmentIndex, type: `value` });
          lastOption.value = segment;
          return { ...state, options, tokens };
        },
        inhibateOptions: (state) => {
          return { ...state, ignoreOptions: true };
        },
        useHelp: (state, segment, segmentIndex, command) => {
          const [
            ,
            ,
            index
          ] = segment.match(constants.HELP_REGEX);
          if (typeof index !== `undefined`) {
            return { ...state, options: [{ name: `-c`, value: String(command) }, { name: `-i`, value: index }] };
          } else {
            return { ...state, options: [{ name: `-c`, value: String(command) }] };
          }
        },
        setError: (state, segment, segmentIndex, errorMessage) => {
          if (segment === constants.SpecialToken.EndOfInput || segment === constants.SpecialToken.EndOfPartialInput) {
            return { ...state, errorMessage: `${errorMessage}.` };
          } else {
            return { ...state, errorMessage: `${errorMessage} ("${segment}").` };
          }
        },
        setOptionArityError: (state, segment) => {
          const lastOption = state.options[state.options.length - 1];
          return { ...state, errorMessage: `Not enough arguments to option ${lastOption.name}.` };
        }
      };
      var NoLimits = Symbol();
      var CommandBuilder = class {
        constructor(cliIndex, cliOpts) {
          this.allOptionNames = /* @__PURE__ */ new Map;
          this.arity = { leading: [], trailing: [], extra: [], proxy: false };
          this.options = [];
          this.paths = [];
          this.cliIndex = cliIndex;
          this.cliOpts = cliOpts;
        }
        addPath(path2) {
          this.paths.push(path2);
        }
        setArity({ leading = this.arity.leading, trailing = this.arity.trailing, extra = this.arity.extra, proxy = this.arity.proxy }) {
          Object.assign(this.arity, { leading, trailing, extra, proxy });
        }
        addPositional({ name = `arg`, required = true } = {}) {
          if (!required && this.arity.extra === NoLimits)
            throw new Error(`Optional parameters cannot be declared when using .rest() or .proxy()`);
          if (!required && this.arity.trailing.length > 0)
            throw new Error(`Optional parameters cannot be declared after the required trailing positional arguments`);
          if (!required && this.arity.extra !== NoLimits) {
            this.arity.extra.push(name);
          } else if (this.arity.extra !== NoLimits && this.arity.extra.length === 0) {
            this.arity.leading.push(name);
          } else {
            this.arity.trailing.push(name);
          }
        }
        addRest({ name = `arg`, required = 0 } = {}) {
          if (this.arity.extra === NoLimits)
            throw new Error(`Infinite lists cannot be declared multiple times in the same command`);
          if (this.arity.trailing.length > 0)
            throw new Error(`Infinite lists cannot be declared after the required trailing positional arguments`);
          for (let t = 0;t < required; ++t)
            this.addPositional({ name });
          this.arity.extra = NoLimits;
        }
        addProxy({ required = 0 } = {}) {
          this.addRest({ required });
          this.arity.proxy = true;
        }
        addOption({ names: nameSet, description, arity = 0, hidden = false, required = false, allowBinding = true }) {
          if (!allowBinding && arity > 1)
            throw new Error(`The arity cannot be higher than 1 when the option only supports the --arg=value syntax`);
          if (!Number.isInteger(arity))
            throw new Error(`The arity must be an integer, got ${arity}`);
          if (arity < 0)
            throw new Error(`The arity must be positive, got ${arity}`);
          const preferredName = nameSet.reduce((longestName, name) => {
            return name.length > longestName.length ? name : longestName;
          }, ``);
          for (const name of nameSet)
            this.allOptionNames.set(name, preferredName);
          this.options.push({ preferredName, nameSet, description, arity, hidden, required, allowBinding });
        }
        setContext(context) {
          this.context = context;
        }
        usage({ detailed = true, inlineOptions = true } = {}) {
          const segments = [this.cliOpts.binaryName];
          const detailedOptionList = [];
          if (this.paths.length > 0)
            segments.push(...this.paths[0]);
          if (detailed) {
            for (const { preferredName, nameSet, arity, hidden, description, required } of this.options) {
              if (hidden)
                continue;
              const args = [];
              for (let t = 0;t < arity; ++t)
                args.push(` #${t}`);
              const definition = `${nameSet.join(`,`)}${args.join(``)}`;
              if (!inlineOptions && description) {
                detailedOptionList.push({ preferredName, nameSet, definition, description, required });
              } else {
                segments.push(required ? `<${definition}>` : `[${definition}]`);
              }
            }
            segments.push(...this.arity.leading.map((name) => `<${name}>`));
            if (this.arity.extra === NoLimits)
              segments.push(`...`);
            else
              segments.push(...this.arity.extra.map((name) => `[${name}]`));
            segments.push(...this.arity.trailing.map((name) => `<${name}>`));
          }
          const usage = segments.join(` `);
          return { usage, options: detailedOptionList };
        }
        compile() {
          if (typeof this.context === `undefined`)
            throw new Error(`Assertion failed: No context attached`);
          const machine = makeStateMachine();
          let firstNode = constants.NodeType.InitialNode;
          const candidateUsage = this.usage().usage;
          const requiredOptions = this.options.filter((opt) => opt.required).map((opt) => opt.nameSet);
          firstNode = injectNode(machine, makeNode());
          registerStatic(machine, constants.NodeType.InitialNode, constants.SpecialToken.StartOfInput, firstNode, [`setCandidateState`, { candidateUsage, requiredOptions }]);
          const positionalArgument = this.arity.proxy ? `always` : `isNotOptionLike`;
          const paths = this.paths.length > 0 ? this.paths : [[]];
          for (const path2 of paths) {
            let lastPathNode = firstNode;
            if (path2.length > 0) {
              const optionPathNode = injectNode(machine, makeNode());
              registerShortcut(machine, lastPathNode, optionPathNode);
              this.registerOptions(machine, optionPathNode);
              lastPathNode = optionPathNode;
            }
            for (let t = 0;t < path2.length; ++t) {
              const nextPathNode = injectNode(machine, makeNode());
              registerStatic(machine, lastPathNode, path2[t], nextPathNode, `pushPath`);
              lastPathNode = nextPathNode;
              if (t + 1 < path2.length) {
                const helpNode = injectNode(machine, makeNode());
                registerDynamic(machine, lastPathNode, `isHelp`, helpNode, [`useHelp`, this.cliIndex]);
                registerStatic(machine, helpNode, constants.SpecialToken.EndOfInput, constants.NodeType.SuccessNode, [`setSelectedIndex`, constants.HELP_COMMAND_INDEX]);
              }
            }
            if (this.arity.leading.length > 0 || !this.arity.proxy) {
              const helpNode = injectNode(machine, makeNode());
              registerDynamic(machine, lastPathNode, `isHelp`, helpNode, [`useHelp`, this.cliIndex]);
              registerDynamic(machine, helpNode, `always`, helpNode, `pushExtra`);
              registerStatic(machine, helpNode, constants.SpecialToken.EndOfInput, constants.NodeType.SuccessNode, [`setSelectedIndex`, constants.HELP_COMMAND_INDEX]);
              this.registerOptions(machine, lastPathNode);
            }
            if (this.arity.leading.length > 0) {
              registerStatic(machine, lastPathNode, constants.SpecialToken.EndOfInput, constants.NodeType.ErrorNode, [`setError`, `Not enough positional arguments`]);
              registerStatic(machine, lastPathNode, constants.SpecialToken.EndOfPartialInput, constants.NodeType.SuccessNode, [`setSelectedIndex`, this.cliIndex]);
            }
            let lastLeadingNode = lastPathNode;
            for (let t = 0;t < this.arity.leading.length; ++t) {
              const nextLeadingNode = injectNode(machine, makeNode());
              if (!this.arity.proxy || t + 1 !== this.arity.leading.length)
                this.registerOptions(machine, nextLeadingNode);
              if (this.arity.trailing.length > 0 || t + 1 !== this.arity.leading.length) {
                registerStatic(machine, nextLeadingNode, constants.SpecialToken.EndOfInput, constants.NodeType.ErrorNode, [`setError`, `Not enough positional arguments`]);
                registerStatic(machine, nextLeadingNode, constants.SpecialToken.EndOfPartialInput, constants.NodeType.SuccessNode, [`setSelectedIndex`, this.cliIndex]);
              }
              registerDynamic(machine, lastLeadingNode, `isNotOptionLike`, nextLeadingNode, `pushPositional`);
              lastLeadingNode = nextLeadingNode;
            }
            let lastExtraNode = lastLeadingNode;
            if (this.arity.extra === NoLimits || this.arity.extra.length > 0) {
              const extraShortcutNode = injectNode(machine, makeNode());
              registerShortcut(machine, lastLeadingNode, extraShortcutNode);
              if (this.arity.extra === NoLimits) {
                const extraNode = injectNode(machine, makeNode());
                if (!this.arity.proxy)
                  this.registerOptions(machine, extraNode);
                registerDynamic(machine, lastLeadingNode, positionalArgument, extraNode, `pushExtraNoLimits`);
                registerDynamic(machine, extraNode, positionalArgument, extraNode, `pushExtraNoLimits`);
                registerShortcut(machine, extraNode, extraShortcutNode);
              } else {
                for (let t = 0;t < this.arity.extra.length; ++t) {
                  const nextExtraNode = injectNode(machine, makeNode());
                  if (!this.arity.proxy || t > 0)
                    this.registerOptions(machine, nextExtraNode);
                  registerDynamic(machine, lastExtraNode, positionalArgument, nextExtraNode, `pushExtra`);
                  registerShortcut(machine, nextExtraNode, extraShortcutNode);
                  lastExtraNode = nextExtraNode;
                }
              }
              lastExtraNode = extraShortcutNode;
            }
            if (this.arity.trailing.length > 0) {
              registerStatic(machine, lastExtraNode, constants.SpecialToken.EndOfInput, constants.NodeType.ErrorNode, [`setError`, `Not enough positional arguments`]);
              registerStatic(machine, lastExtraNode, constants.SpecialToken.EndOfPartialInput, constants.NodeType.SuccessNode, [`setSelectedIndex`, this.cliIndex]);
            }
            let lastTrailingNode = lastExtraNode;
            for (let t = 0;t < this.arity.trailing.length; ++t) {
              const nextTrailingNode = injectNode(machine, makeNode());
              if (!this.arity.proxy)
                this.registerOptions(machine, nextTrailingNode);
              if (t + 1 < this.arity.trailing.length) {
                registerStatic(machine, nextTrailingNode, constants.SpecialToken.EndOfInput, constants.NodeType.ErrorNode, [`setError`, `Not enough positional arguments`]);
                registerStatic(machine, nextTrailingNode, constants.SpecialToken.EndOfPartialInput, constants.NodeType.SuccessNode, [`setSelectedIndex`, this.cliIndex]);
              }
              registerDynamic(machine, lastTrailingNode, `isNotOptionLike`, nextTrailingNode, `pushPositional`);
              lastTrailingNode = nextTrailingNode;
            }
            registerDynamic(machine, lastTrailingNode, positionalArgument, constants.NodeType.ErrorNode, [`setError`, `Extraneous positional argument`]);
            registerStatic(machine, lastTrailingNode, constants.SpecialToken.EndOfInput, constants.NodeType.SuccessNode, [`setSelectedIndex`, this.cliIndex]);
            registerStatic(machine, lastTrailingNode, constants.SpecialToken.EndOfPartialInput, constants.NodeType.SuccessNode, [`setSelectedIndex`, this.cliIndex]);
          }
          return {
            machine,
            context: this.context
          };
        }
        registerOptions(machine, node) {
          registerDynamic(machine, node, [`isOption`, `--`], node, `inhibateOptions`);
          registerDynamic(machine, node, [`isBatchOption`, this.allOptionNames], node, [`pushBatch`, this.allOptionNames]);
          registerDynamic(machine, node, [`isBoundOption`, this.allOptionNames, this.options], node, `pushBound`);
          registerDynamic(machine, node, [`isUnsupportedOption`, this.allOptionNames], constants.NodeType.ErrorNode, [`setError`, `Unsupported option name`]);
          registerDynamic(machine, node, [`isInvalidOption`], constants.NodeType.ErrorNode, [`setError`, `Invalid option name`]);
          for (const option of this.options) {
            if (option.arity === 0) {
              for (const name of option.nameSet) {
                registerDynamic(machine, node, [`isOption`, name], node, [`pushTrue`, option.preferredName]);
                if (name.startsWith(`--`) && !name.startsWith(`--no-`)) {
                  registerDynamic(machine, node, [`isNegatedOption`, name], node, [`pushFalse`, option.preferredName]);
                }
              }
            } else {
              let lastNode = injectNode(machine, makeNode());
              for (const name of option.nameSet)
                registerDynamic(machine, node, [`isOption`, name], lastNode, [`pushUndefined`, option.preferredName]);
              for (let t = 0;t < option.arity; ++t) {
                const nextNode = injectNode(machine, makeNode());
                registerStatic(machine, lastNode, constants.SpecialToken.EndOfInput, constants.NodeType.ErrorNode, `setOptionArityError`);
                registerStatic(machine, lastNode, constants.SpecialToken.EndOfPartialInput, constants.NodeType.ErrorNode, `setOptionArityError`);
                registerDynamic(machine, lastNode, `isOptionLike`, constants.NodeType.ErrorNode, `setOptionArityError`);
                const action = option.arity === 1 ? `setStringValue` : `pushStringValue`;
                registerDynamic(machine, lastNode, `isNotOptionLike`, nextNode, action);
                lastNode = nextNode;
              }
              registerShortcut(machine, lastNode, node);
            }
          }
        }
      };
      var CliBuilder = class _CliBuilder {
        static build(cbs, opts = {}) {
          return new _CliBuilder(opts).commands(cbs).compile();
        }
        constructor({ binaryName = `...` } = {}) {
          this.builders = [];
          this.opts = { binaryName };
        }
        getBuilderByIndex(n) {
          if (!(n >= 0 && n < this.builders.length))
            throw new Error(`Assertion failed: Out-of-bound command index (${n})`);
          return this.builders[n];
        }
        commands(cbs) {
          for (const cb of cbs)
            cb(this.command());
          return this;
        }
        command() {
          const builder = new CommandBuilder(this.builders.length, this.opts);
          this.builders.push(builder);
          return builder;
        }
        compile() {
          const machines = [];
          const contexts = [];
          for (const builder of this.builders) {
            const { machine: machine2, context } = builder.compile();
            machines.push(machine2);
            contexts.push(context);
          }
          const machine = makeAnyOfMachine(machines);
          simplifyMachine(machine);
          return {
            machine,
            contexts,
            process: (input, { partial } = {}) => {
              const endToken = partial ? constants.SpecialToken.EndOfPartialInput : constants.SpecialToken.EndOfInput;
              return runMachine(machine, input, { endToken });
            }
          };
        }
      };
      exports22.CliBuilder = CliBuilder;
      exports22.CommandBuilder = CommandBuilder;
      exports22.NoLimits = NoLimits;
      exports22.aggregateHelpStates = aggregateHelpStates;
      exports22.cloneNode = cloneNode;
      exports22.cloneTransition = cloneTransition;
      exports22.debug = debug;
      exports22.debugMachine = debugMachine;
      exports22.execute = execute;
      exports22.injectNode = injectNode;
      exports22.isTerminalNode = isTerminalNode;
      exports22.makeAnyOfMachine = makeAnyOfMachine;
      exports22.makeNode = makeNode;
      exports22.makeStateMachine = makeStateMachine;
      exports22.reducers = reducers;
      exports22.registerDynamic = registerDynamic;
      exports22.registerShortcut = registerShortcut;
      exports22.registerStatic = registerStatic;
      exports22.runMachineInternal = runMachineInternal;
      exports22.selectBestState = selectBestState;
      exports22.simplifyMachine = simplifyMachine;
      exports22.tests = tests;
      exports22.trimSmallerBranches = trimSmallerBranches;
    }
  });
  var require_format = __commonJS2({
    "../../node_modules/.pnpm/clipanion@4.0.0-rc.4_typanion@3.14.0/node_modules/clipanion/lib/format.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var MAX_LINE_LENGTH = 80;
      var richLine = Array(MAX_LINE_LENGTH).fill(`\u2501`);
      for (let t = 0;t <= 24; ++t)
        richLine[richLine.length - t] = `\x1B[38;5;${232 + t}m\u2501`;
      var richFormat = {
        header: (str) => `\x1B[1m\u2501\u2501\u2501 ${str}${str.length < MAX_LINE_LENGTH - 5 ? ` ${richLine.slice(str.length + 5).join(``)}` : `:`}\x1B[0m`,
        bold: (str) => `\x1B[1m${str}\x1B[22m`,
        error: (str) => `\x1B[31m\x1B[1m${str}\x1B[22m\x1B[39m`,
        code: (str) => `\x1B[36m${str}\x1B[39m`
      };
      var textFormat = {
        header: (str) => str,
        bold: (str) => str,
        error: (str) => str,
        code: (str) => str
      };
      function dedent(text) {
        const lines = text.split(`
`);
        const nonEmptyLines = lines.filter((line) => line.match(/\S/));
        const indent = nonEmptyLines.length > 0 ? nonEmptyLines.reduce((minLength, line) => Math.min(minLength, line.length - line.trimStart().length), Number.MAX_VALUE) : 0;
        return lines.map((line) => line.slice(indent).trimRight()).join(`
`);
      }
      function formatMarkdownish(text, { format, paragraphs }) {
        text = text.replace(/\r\n?/g, `
`);
        text = dedent(text);
        text = text.replace(/^\n+|\n+$/g, ``);
        text = text.replace(/^(\s*)-([^\n]*?)\n+/gm, `$1-$2

`);
        text = text.replace(/\n(\n)?\n*/g, ($0, $1) => $1 ? $1 : ` `);
        if (paragraphs) {
          text = text.split(/\n/).map((paragraph) => {
            const bulletMatch = paragraph.match(/^\s*[*-][\t ]+(.*)/);
            if (!bulletMatch)
              return paragraph.match(/(.{1,80})(?: |$)/g).join(`
`);
            const indent = paragraph.length - paragraph.trimStart().length;
            return bulletMatch[1].match(new RegExp(`(.{1,${78 - indent}})(?: |$)`, `g`)).map((line, index) => {
              return ` `.repeat(indent) + (index === 0 ? `- ` : `  `) + line;
            }).join(`
`);
          }).join(`

`);
        }
        text = text.replace(/(`+)((?:.|[\n])*?)\1/g, ($0, $1, $2) => {
          return format.code($1 + $2 + $1);
        });
        text = text.replace(/(\*\*)((?:.|[\n])*?)\1/g, ($0, $1, $2) => {
          return format.bold($1 + $2 + $1);
        });
        return text ? `${text}
` : ``;
      }
      exports22.formatMarkdownish = formatMarkdownish;
      exports22.richFormat = richFormat;
      exports22.textFormat = textFormat;
    }
  });
  var require_HelpCommand = __commonJS2({
    "../../node_modules/.pnpm/clipanion@4.0.0-rc.4_typanion@3.14.0/node_modules/clipanion/lib/advanced/HelpCommand.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var advanced_Command = require_Command();
      var HelpCommand = class _HelpCommand extends advanced_Command.Command {
        static from(state, contexts) {
          const command = new _HelpCommand(contexts);
          command.path = state.path;
          for (const opt of state.options) {
            switch (opt.name) {
              case `-c`:
                {
                  command.commands.push(Number(opt.value));
                }
                break;
              case `-i`:
                {
                  command.index = Number(opt.value);
                }
                break;
            }
          }
          return command;
        }
        constructor(contexts) {
          super();
          this.contexts = contexts;
          this.commands = [];
        }
        async execute() {
          let commands = this.commands;
          if (typeof this.index !== `undefined` && this.index >= 0 && this.index < commands.length)
            commands = [commands[this.index]];
          if (commands.length === 0) {
            this.context.stdout.write(this.cli.usage());
          } else if (commands.length === 1) {
            this.context.stdout.write(this.cli.usage(this.contexts[commands[0]].commandClass, { detailed: true }));
          } else if (commands.length > 1) {
            this.context.stdout.write(`Multiple commands match your selection:
`);
            this.context.stdout.write(`
`);
            let index = 0;
            for (const command of this.commands)
              this.context.stdout.write(this.cli.usage(this.contexts[command].commandClass, { prefix: `${index++}. `.padStart(5) }));
            this.context.stdout.write(`
`);
            this.context.stdout.write(`Run again with -h=<index> to see the longer details of any of those commands.
`);
          }
        }
      };
      exports22.HelpCommand = HelpCommand;
    }
  });
  var require_Cli = __commonJS2({
    "../../node_modules/.pnpm/clipanion@4.0.0-rc.4_typanion@3.14.0/node_modules/clipanion/lib/advanced/Cli.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var platform_node = require_node();
      var constants = require_constants2();
      var core = require_core2();
      var format = require_format();
      var advanced_Command = require_Command();
      var advanced_HelpCommand = require_HelpCommand();
      var errorCommandSymbol = Symbol(`clipanion/errorCommand`);
      async function runExit(...args) {
        const { resolvedOptions, resolvedCommandClasses, resolvedArgv, resolvedContext } = resolveRunParameters(args);
        const cli = Cli.from(resolvedCommandClasses, resolvedOptions);
        return cli.runExit(resolvedArgv, resolvedContext);
      }
      async function run(...args) {
        const { resolvedOptions, resolvedCommandClasses, resolvedArgv, resolvedContext } = resolveRunParameters(args);
        const cli = Cli.from(resolvedCommandClasses, resolvedOptions);
        return cli.run(resolvedArgv, resolvedContext);
      }
      function resolveRunParameters(args) {
        let resolvedOptions;
        let resolvedCommandClasses;
        let resolvedArgv;
        let resolvedContext;
        if (typeof process !== `undefined` && typeof process.argv !== `undefined`)
          resolvedArgv = process.argv.slice(2);
        switch (args.length) {
          case 1:
            {
              resolvedCommandClasses = args[0];
            }
            break;
          case 2:
            {
              if (args[0] && args[0].prototype instanceof advanced_Command.Command || Array.isArray(args[0])) {
                resolvedCommandClasses = args[0];
                if (Array.isArray(args[1])) {
                  resolvedArgv = args[1];
                } else {
                  resolvedContext = args[1];
                }
              } else {
                resolvedOptions = args[0];
                resolvedCommandClasses = args[1];
              }
            }
            break;
          case 3:
            {
              if (Array.isArray(args[2])) {
                resolvedOptions = args[0];
                resolvedCommandClasses = args[1];
                resolvedArgv = args[2];
              } else if (args[0] && args[0].prototype instanceof advanced_Command.Command || Array.isArray(args[0])) {
                resolvedCommandClasses = args[0];
                resolvedArgv = args[1];
                resolvedContext = args[2];
              } else {
                resolvedOptions = args[0];
                resolvedCommandClasses = args[1];
                resolvedContext = args[2];
              }
            }
            break;
          default:
            {
              resolvedOptions = args[0];
              resolvedCommandClasses = args[1];
              resolvedArgv = args[2];
              resolvedContext = args[3];
            }
            break;
        }
        if (typeof resolvedArgv === `undefined`)
          throw new Error(`The argv parameter must be provided when running Clipanion outside of a Node context`);
        return {
          resolvedOptions,
          resolvedCommandClasses,
          resolvedArgv,
          resolvedContext
        };
      }
      var Cli = class _Cli {
        static from(commandClasses, options = {}) {
          const cli = new _Cli(options);
          const resolvedCommandClasses = Array.isArray(commandClasses) ? commandClasses : [commandClasses];
          for (const commandClass of resolvedCommandClasses)
            cli.register(commandClass);
          return cli;
        }
        constructor({ binaryLabel, binaryName: binaryNameOpt = `...`, binaryVersion, enableCapture = false, enableColors } = {}) {
          this.registrations = /* @__PURE__ */ new Map;
          this.builder = new core.CliBuilder({ binaryName: binaryNameOpt });
          this.binaryLabel = binaryLabel;
          this.binaryName = binaryNameOpt;
          this.binaryVersion = binaryVersion;
          this.enableCapture = enableCapture;
          this.enableColors = enableColors;
        }
        register(commandClass) {
          var _a;
          if (this.registrations.has(commandClass))
            throw new RangeError(`${commandClass.name} has already been registered`);
          const specs = /* @__PURE__ */ new Map;
          const command = new commandClass;
          for (const key in command) {
            const value = command[key];
            if (typeof value === `object` && value !== null && value[advanced_Command.Command.isOption]) {
              specs.set(key, value);
            }
          }
          const builder = this.builder.command();
          const index = builder.cliIndex;
          const paths = (_a = commandClass.paths) !== null && _a !== undefined ? _a : command.paths;
          if (typeof paths !== `undefined`)
            for (const path2 of paths)
              builder.addPath(path2);
          this.registrations.set(commandClass, { specs, builder, index });
          for (const [key, { definition }] of specs.entries())
            definition(builder, key);
          builder.setContext({
            commandClass
          });
        }
        process(opts, contextArg) {
          const { input, context: userContext, partial } = typeof opts === `object` && Array.isArray(opts) ? { input: opts, context: contextArg } : opts;
          const { contexts, process: process2 } = this.builder.compile();
          const state = process2(input, { partial });
          const context = {
            ..._Cli.defaultContext,
            ...userContext
          };
          switch (state.selectedIndex) {
            case constants.HELP_COMMAND_INDEX: {
              const command = advanced_HelpCommand.HelpCommand.from(state, contexts);
              command.context = context;
              command.tokens = state.tokens;
              return command;
            }
            default:
              {
                const { commandClass } = contexts[state.selectedIndex];
                const record = this.registrations.get(commandClass);
                if (typeof record === `undefined`)
                  throw new Error(`Assertion failed: Expected the command class to have been registered.`);
                const command = new commandClass;
                command.context = context;
                command.tokens = state.tokens;
                command.path = state.path;
                try {
                  for (const [key, { transformer }] of record.specs.entries())
                    command[key] = transformer(record.builder, key, state, context);
                  return command;
                } catch (error) {
                  error[errorCommandSymbol] = command;
                  throw error;
                }
              }
              break;
          }
        }
        async run(input, userContext) {
          var _a, _b;
          let command;
          const context = {
            ..._Cli.defaultContext,
            ...userContext
          };
          const colored = (_a = this.enableColors) !== null && _a !== undefined ? _a : context.colorDepth > 1;
          if (!Array.isArray(input)) {
            command = input;
          } else {
            try {
              command = this.process(input, context);
            } catch (error) {
              context.stdout.write(this.error(error, { colored }));
              return 1;
            }
          }
          if (command.help) {
            context.stdout.write(this.usage(command, { colored, detailed: true }));
            return 0;
          }
          command.context = context;
          command.cli = {
            binaryLabel: this.binaryLabel,
            binaryName: this.binaryName,
            binaryVersion: this.binaryVersion,
            enableCapture: this.enableCapture,
            enableColors: this.enableColors,
            definitions: () => this.definitions(),
            definition: (command2) => this.definition(command2),
            error: (error, opts) => this.error(error, opts),
            format: (colored2) => this.format(colored2),
            process: (input2, subContext) => this.process(input2, { ...context, ...subContext }),
            run: (input2, subContext) => this.run(input2, { ...context, ...subContext }),
            usage: (command2, opts) => this.usage(command2, opts)
          };
          const activate = this.enableCapture ? (_b = platform_node.getCaptureActivator(context)) !== null && _b !== undefined ? _b : noopCaptureActivator : noopCaptureActivator;
          let exitCode;
          try {
            exitCode = await activate(() => command.validateAndExecute().catch((error) => command.catch(error).then(() => 0)));
          } catch (error) {
            context.stdout.write(this.error(error, { colored, command }));
            return 1;
          }
          return exitCode;
        }
        async runExit(input, context) {
          process.exitCode = await this.run(input, context);
        }
        definition(commandClass, { colored = false } = {}) {
          if (!commandClass.usage)
            return null;
          const { usage: path2 } = this.getUsageByRegistration(commandClass, { detailed: false });
          const { usage, options } = this.getUsageByRegistration(commandClass, { detailed: true, inlineOptions: false });
          const category = typeof commandClass.usage.category !== `undefined` ? format.formatMarkdownish(commandClass.usage.category, { format: this.format(colored), paragraphs: false }) : undefined;
          const description = typeof commandClass.usage.description !== `undefined` ? format.formatMarkdownish(commandClass.usage.description, { format: this.format(colored), paragraphs: false }) : undefined;
          const details = typeof commandClass.usage.details !== `undefined` ? format.formatMarkdownish(commandClass.usage.details, { format: this.format(colored), paragraphs: true }) : undefined;
          const examples = typeof commandClass.usage.examples !== `undefined` ? commandClass.usage.examples.map(([label, cli]) => [format.formatMarkdownish(label, { format: this.format(colored), paragraphs: false }), cli.replace(/\$0/g, this.binaryName)]) : undefined;
          return { path: path2, usage, category, description, details, examples, options };
        }
        definitions({ colored = false } = {}) {
          const data = [];
          for (const commandClass of this.registrations.keys()) {
            const usage = this.definition(commandClass, { colored });
            if (!usage)
              continue;
            data.push(usage);
          }
          return data;
        }
        usage(command = null, { colored, detailed = false, prefix = `$ ` } = {}) {
          var _a;
          if (command === null) {
            for (const commandClass2 of this.registrations.keys()) {
              const paths = commandClass2.paths;
              const isDocumented = typeof commandClass2.usage !== `undefined`;
              const isExclusivelyDefault = !paths || paths.length === 0 || paths.length === 1 && paths[0].length === 0;
              const isDefault = isExclusivelyDefault || ((_a = paths === null || paths === undefined ? undefined : paths.some((path2) => path2.length === 0)) !== null && _a !== undefined ? _a : false);
              if (isDefault) {
                if (command) {
                  command = null;
                  break;
                } else {
                  command = commandClass2;
                }
              } else {
                if (isDocumented) {
                  command = null;
                  continue;
                }
              }
            }
            if (command) {
              detailed = true;
            }
          }
          const commandClass = command !== null && command instanceof advanced_Command.Command ? command.constructor : command;
          let result2 = ``;
          if (!commandClass) {
            const commandsByCategories = /* @__PURE__ */ new Map;
            for (const [commandClass2, { index }] of this.registrations.entries()) {
              if (typeof commandClass2.usage === `undefined`)
                continue;
              const category = typeof commandClass2.usage.category !== `undefined` ? format.formatMarkdownish(commandClass2.usage.category, { format: this.format(colored), paragraphs: false }) : null;
              let categoryCommands = commandsByCategories.get(category);
              if (typeof categoryCommands === `undefined`)
                commandsByCategories.set(category, categoryCommands = []);
              const { usage } = this.getUsageByIndex(index);
              categoryCommands.push({ commandClass: commandClass2, usage });
            }
            const categoryNames = Array.from(commandsByCategories.keys()).sort((a, b) => {
              if (a === null)
                return -1;
              if (b === null)
                return 1;
              return a.localeCompare(b, `en`, { usage: `sort`, caseFirst: `upper` });
            });
            const hasLabel = typeof this.binaryLabel !== `undefined`;
            const hasVersion = typeof this.binaryVersion !== `undefined`;
            if (hasLabel || hasVersion) {
              if (hasLabel && hasVersion)
                result2 += `${this.format(colored).header(`${this.binaryLabel} - ${this.binaryVersion}`)}

`;
              else if (hasLabel)
                result2 += `${this.format(colored).header(`${this.binaryLabel}`)}
`;
              else
                result2 += `${this.format(colored).header(`${this.binaryVersion}`)}
`;
              result2 += `  ${this.format(colored).bold(prefix)}${this.binaryName} <command>
`;
            } else {
              result2 += `${this.format(colored).bold(prefix)}${this.binaryName} <command>
`;
            }
            for (const categoryName of categoryNames) {
              const commands = commandsByCategories.get(categoryName).slice().sort((a, b) => {
                return a.usage.localeCompare(b.usage, `en`, { usage: `sort`, caseFirst: `upper` });
              });
              const header = categoryName !== null ? categoryName.trim() : `General commands`;
              result2 += `
`;
              result2 += `${this.format(colored).header(`${header}`)}
`;
              for (const { commandClass: commandClass2, usage } of commands) {
                const doc = commandClass2.usage.description || `undocumented`;
                result2 += `
`;
                result2 += `  ${this.format(colored).bold(usage)}
`;
                result2 += `    ${format.formatMarkdownish(doc, { format: this.format(colored), paragraphs: false })}`;
              }
            }
            result2 += `
`;
            result2 += format.formatMarkdownish(`You can also print more details about any of these commands by calling them with the \`-h,--help\` flag right after the command name.`, { format: this.format(colored), paragraphs: true });
          } else {
            if (!detailed) {
              const { usage } = this.getUsageByRegistration(commandClass);
              result2 += `${this.format(colored).bold(prefix)}${usage}
`;
            } else {
              const { description = ``, details = ``, examples = [] } = commandClass.usage || {};
              if (description !== ``) {
                result2 += format.formatMarkdownish(description, { format: this.format(colored), paragraphs: false }).replace(/^./, ($0) => $0.toUpperCase());
                result2 += `
`;
              }
              if (details !== `` || examples.length > 0) {
                result2 += `${this.format(colored).header(`Usage`)}
`;
                result2 += `
`;
              }
              const { usage, options } = this.getUsageByRegistration(commandClass, { inlineOptions: false });
              result2 += `${this.format(colored).bold(prefix)}${usage}
`;
              if (options.length > 0) {
                result2 += `
`;
                result2 += `${this.format(colored).header(`Options`)}
`;
                const maxDefinitionLength = options.reduce((length, option) => {
                  return Math.max(length, option.definition.length);
                }, 0);
                result2 += `
`;
                for (const { definition, description: description2 } of options) {
                  result2 += `  ${this.format(colored).bold(definition.padEnd(maxDefinitionLength))}    ${format.formatMarkdownish(description2, { format: this.format(colored), paragraphs: false })}`;
                }
              }
              if (details !== ``) {
                result2 += `
`;
                result2 += `${this.format(colored).header(`Details`)}
`;
                result2 += `
`;
                result2 += format.formatMarkdownish(details, { format: this.format(colored), paragraphs: true });
              }
              if (examples.length > 0) {
                result2 += `
`;
                result2 += `${this.format(colored).header(`Examples`)}
`;
                for (const [description2, example] of examples) {
                  result2 += `
`;
                  result2 += format.formatMarkdownish(description2, { format: this.format(colored), paragraphs: false });
                  result2 += `${example.replace(/^/m, `  ${this.format(colored).bold(prefix)}`).replace(/\$0/g, this.binaryName)}
`;
                }
              }
            }
          }
          return result2;
        }
        error(error, _a) {
          var _b;
          var { colored, command = (_b = error[errorCommandSymbol]) !== null && _b !== undefined ? _b : null } = _a === undefined ? {} : _a;
          if (!error || typeof error !== `object` || !(`stack` in error))
            error = new Error(`Execution failed with a non-error rejection (rejected value: ${JSON.stringify(error)})`);
          let result2 = ``;
          let name = error.name.replace(/([a-z])([A-Z])/g, `$1 $2`);
          if (name === `Error`)
            name = `Internal Error`;
          result2 += `${this.format(colored).error(name)}: ${error.message}
`;
          const meta = error.clipanion;
          if (typeof meta !== `undefined`) {
            if (meta.type === `usage`) {
              result2 += `
`;
              result2 += this.usage(command);
            }
          } else {
            if (error.stack) {
              result2 += `${error.stack.replace(/^.*\n/, ``)}
`;
            }
          }
          return result2;
        }
        format(colored) {
          var _a;
          return ((_a = colored !== null && colored !== undefined ? colored : this.enableColors) !== null && _a !== undefined ? _a : _Cli.defaultContext.colorDepth > 1) ? format.richFormat : format.textFormat;
        }
        getUsageByRegistration(klass, opts) {
          const record = this.registrations.get(klass);
          if (typeof record === `undefined`)
            throw new Error(`Assertion failed: Unregistered command`);
          return this.getUsageByIndex(record.index, opts);
        }
        getUsageByIndex(n, opts) {
          return this.builder.getBuilderByIndex(n).usage(opts);
        }
      };
      Cli.defaultContext = {
        env: process.env,
        stdin: process.stdin,
        stdout: process.stdout,
        stderr: process.stderr,
        colorDepth: platform_node.getDefaultColorDepth()
      };
      function noopCaptureActivator(fn) {
        return fn();
      }
      exports22.Cli = Cli;
      exports22.run = run;
      exports22.runExit = runExit;
    }
  });
  var require_definitions = __commonJS2({
    "../../node_modules/.pnpm/clipanion@4.0.0-rc.4_typanion@3.14.0/node_modules/clipanion/lib/advanced/builtins/definitions.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var advanced_Command = require_Command();
      var DefinitionsCommand = class extends advanced_Command.Command {
        async execute() {
          this.context.stdout.write(`${JSON.stringify(this.cli.definitions(), null, 2)}
`);
        }
      };
      DefinitionsCommand.paths = [[`--clipanion=definitions`]];
      exports22.DefinitionsCommand = DefinitionsCommand;
    }
  });
  var require_help = __commonJS2({
    "../../node_modules/.pnpm/clipanion@4.0.0-rc.4_typanion@3.14.0/node_modules/clipanion/lib/advanced/builtins/help.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var advanced_Command = require_Command();
      var HelpCommand = class extends advanced_Command.Command {
        async execute() {
          this.context.stdout.write(this.cli.usage());
        }
      };
      HelpCommand.paths = [[`-h`], [`--help`]];
      exports22.HelpCommand = HelpCommand;
    }
  });
  var require_Proxy = __commonJS2({
    "../../node_modules/.pnpm/clipanion@4.0.0-rc.4_typanion@3.14.0/node_modules/clipanion/lib/advanced/options/Proxy.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var advanced_options_utils = require_utils();
      function Proxy2(opts = {}) {
        return advanced_options_utils.makeCommandOption({
          definition(builder, key) {
            var _a;
            builder.addProxy({
              name: (_a = opts.name) !== null && _a !== undefined ? _a : key,
              required: opts.required
            });
          },
          transformer(builder, key, state) {
            return state.positionals.map(({ value }) => value);
          }
        });
      }
      exports22.Proxy = Proxy2;
    }
  });
  var require_tokens = __commonJS2({
    "../../node_modules/.pnpm/clipanion@4.0.0-rc.4_typanion@3.14.0/node_modules/clipanion/lib/advanced/builtins/tokens.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var advanced_Command = require_Command();
      var advanced_options_Proxy = require_Proxy();
      var TokensCommand = class extends advanced_Command.Command {
        constructor() {
          super(...arguments);
          this.args = advanced_options_Proxy.Proxy();
        }
        async execute() {
          this.context.stdout.write(`${JSON.stringify(this.cli.process(this.args).tokens, null, 2)}
`);
        }
      };
      TokensCommand.paths = [[`--clipanion=tokens`]];
      exports22.TokensCommand = TokensCommand;
    }
  });
  var require_version = __commonJS2({
    "../../node_modules/.pnpm/clipanion@4.0.0-rc.4_typanion@3.14.0/node_modules/clipanion/lib/advanced/builtins/version.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var advanced_Command = require_Command();
      var VersionCommand = class extends advanced_Command.Command {
        async execute() {
          var _a;
          this.context.stdout.write(`${(_a = this.cli.binaryVersion) !== null && _a !== undefined ? _a : `<unknown>`}
`);
        }
      };
      VersionCommand.paths = [[`-v`], [`--version`]];
      exports22.VersionCommand = VersionCommand;
    }
  });
  var require_builtins = __commonJS2({
    "../../node_modules/.pnpm/clipanion@4.0.0-rc.4_typanion@3.14.0/node_modules/clipanion/lib/advanced/builtins/index.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var advanced_builtins_definitions = require_definitions();
      var advanced_builtins_help = require_help();
      var advanced_builtins_tokens = require_tokens();
      var advanced_builtins_version = require_version();
      exports22.DefinitionsCommand = advanced_builtins_definitions.DefinitionsCommand;
      exports22.HelpCommand = advanced_builtins_help.HelpCommand;
      exports22.TokensCommand = advanced_builtins_tokens.TokensCommand;
      exports22.VersionCommand = advanced_builtins_version.VersionCommand;
    }
  });
  var require_Array = __commonJS2({
    "../../node_modules/.pnpm/clipanion@4.0.0-rc.4_typanion@3.14.0/node_modules/clipanion/lib/advanced/options/Array.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var advanced_options_utils = require_utils();
      function Array2(descriptor, initialValueBase, optsBase) {
        const [initialValue, opts] = advanced_options_utils.rerouteArguments(initialValueBase, optsBase !== null && optsBase !== undefined ? optsBase : {});
        const { arity = 1 } = opts;
        const optNames = descriptor.split(`,`);
        const nameSet = new Set(optNames);
        return advanced_options_utils.makeCommandOption({
          definition(builder) {
            builder.addOption({
              names: optNames,
              arity,
              hidden: opts === null || opts === undefined ? undefined : opts.hidden,
              description: opts === null || opts === undefined ? undefined : opts.description,
              required: opts.required
            });
          },
          transformer(builder, key, state) {
            let usedName;
            let currentValue = typeof initialValue !== `undefined` ? [...initialValue] : undefined;
            for (const { name, value } of state.options) {
              if (!nameSet.has(name))
                continue;
              usedName = name;
              currentValue = currentValue !== null && currentValue !== undefined ? currentValue : [];
              currentValue.push(value);
            }
            if (typeof currentValue !== `undefined`) {
              return advanced_options_utils.applyValidator(usedName !== null && usedName !== undefined ? usedName : key, currentValue, opts.validator);
            } else {
              return currentValue;
            }
          }
        });
      }
      exports22.Array = Array2;
    }
  });
  var require_Boolean = __commonJS2({
    "../../node_modules/.pnpm/clipanion@4.0.0-rc.4_typanion@3.14.0/node_modules/clipanion/lib/advanced/options/Boolean.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var advanced_options_utils = require_utils();
      function Boolean2(descriptor, initialValueBase, optsBase) {
        const [initialValue, opts] = advanced_options_utils.rerouteArguments(initialValueBase, optsBase !== null && optsBase !== undefined ? optsBase : {});
        const optNames = descriptor.split(`,`);
        const nameSet = new Set(optNames);
        return advanced_options_utils.makeCommandOption({
          definition(builder) {
            builder.addOption({
              names: optNames,
              allowBinding: false,
              arity: 0,
              hidden: opts.hidden,
              description: opts.description,
              required: opts.required
            });
          },
          transformer(builer, key, state) {
            let currentValue = initialValue;
            for (const { name, value } of state.options) {
              if (!nameSet.has(name))
                continue;
              currentValue = value;
            }
            return currentValue;
          }
        });
      }
      exports22.Boolean = Boolean2;
    }
  });
  var require_Counter = __commonJS2({
    "../../node_modules/.pnpm/clipanion@4.0.0-rc.4_typanion@3.14.0/node_modules/clipanion/lib/advanced/options/Counter.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var advanced_options_utils = require_utils();
      function Counter(descriptor, initialValueBase, optsBase) {
        const [initialValue, opts] = advanced_options_utils.rerouteArguments(initialValueBase, optsBase !== null && optsBase !== undefined ? optsBase : {});
        const optNames = descriptor.split(`,`);
        const nameSet = new Set(optNames);
        return advanced_options_utils.makeCommandOption({
          definition(builder) {
            builder.addOption({
              names: optNames,
              allowBinding: false,
              arity: 0,
              hidden: opts.hidden,
              description: opts.description,
              required: opts.required
            });
          },
          transformer(builder, key, state) {
            let currentValue = initialValue;
            for (const { name, value } of state.options) {
              if (!nameSet.has(name))
                continue;
              currentValue !== null && currentValue !== undefined || (currentValue = 0);
              if (!value) {
                currentValue = 0;
              } else {
                currentValue += 1;
              }
            }
            return currentValue;
          }
        });
      }
      exports22.Counter = Counter;
    }
  });
  var require_Rest = __commonJS2({
    "../../node_modules/.pnpm/clipanion@4.0.0-rc.4_typanion@3.14.0/node_modules/clipanion/lib/advanced/options/Rest.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var core = require_core2();
      var advanced_options_utils = require_utils();
      function Rest(opts = {}) {
        return advanced_options_utils.makeCommandOption({
          definition(builder, key) {
            var _a;
            builder.addRest({
              name: (_a = opts.name) !== null && _a !== undefined ? _a : key,
              required: opts.required
            });
          },
          transformer(builder, key, state) {
            const isRestPositional = (index) => {
              const positional = state.positionals[index];
              if (positional.extra === core.NoLimits)
                return true;
              if (positional.extra === false && index < builder.arity.leading.length)
                return true;
              return false;
            };
            let count = 0;
            while (count < state.positionals.length && isRestPositional(count))
              count += 1;
            return state.positionals.splice(0, count).map(({ value }) => value);
          }
        });
      }
      exports22.Rest = Rest;
    }
  });
  var require_String = __commonJS2({
    "../../node_modules/.pnpm/clipanion@4.0.0-rc.4_typanion@3.14.0/node_modules/clipanion/lib/advanced/options/String.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var core = require_core2();
      var advanced_options_utils = require_utils();
      function StringOption(descriptor, initialValueBase, optsBase) {
        const [initialValue, opts] = advanced_options_utils.rerouteArguments(initialValueBase, optsBase !== null && optsBase !== undefined ? optsBase : {});
        const { arity = 1 } = opts;
        const optNames = descriptor.split(`,`);
        const nameSet = new Set(optNames);
        return advanced_options_utils.makeCommandOption({
          definition(builder) {
            builder.addOption({
              names: optNames,
              arity: opts.tolerateBoolean ? 0 : arity,
              hidden: opts.hidden,
              description: opts.description,
              required: opts.required
            });
          },
          transformer(builder, key, state, context) {
            let usedName;
            let currentValue = initialValue;
            if (typeof opts.env !== `undefined` && context.env[opts.env]) {
              usedName = opts.env;
              currentValue = context.env[opts.env];
            }
            for (const { name, value } of state.options) {
              if (!nameSet.has(name))
                continue;
              usedName = name;
              currentValue = value;
            }
            if (typeof currentValue === `string`) {
              return advanced_options_utils.applyValidator(usedName !== null && usedName !== undefined ? usedName : key, currentValue, opts.validator);
            } else {
              return currentValue;
            }
          }
        });
      }
      function StringPositional(opts = {}) {
        const { required = true } = opts;
        return advanced_options_utils.makeCommandOption({
          definition(builder, key) {
            var _a;
            builder.addPositional({
              name: (_a = opts.name) !== null && _a !== undefined ? _a : key,
              required: opts.required
            });
          },
          transformer(builder, key, state) {
            var _a;
            for (let i = 0;i < state.positionals.length; ++i) {
              if (state.positionals[i].extra === core.NoLimits)
                continue;
              if (required && state.positionals[i].extra === true)
                continue;
              if (!required && state.positionals[i].extra === false)
                continue;
              const [positional] = state.positionals.splice(i, 1);
              return advanced_options_utils.applyValidator((_a = opts.name) !== null && _a !== undefined ? _a : key, positional.value, opts.validator);
            }
            return;
          }
        });
      }
      function String2(descriptor, ...args) {
        if (typeof descriptor === `string`) {
          return StringOption(descriptor, ...args);
        } else {
          return StringPositional(descriptor);
        }
      }
      exports22.String = String2;
    }
  });
  var require_options = __commonJS2({
    "../../node_modules/.pnpm/clipanion@4.0.0-rc.4_typanion@3.14.0/node_modules/clipanion/lib/advanced/options/index.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var advanced_options_Array = require_Array();
      var advanced_options_Boolean = require_Boolean();
      var advanced_options_Counter = require_Counter();
      var advanced_options_Proxy = require_Proxy();
      var advanced_options_Rest = require_Rest();
      var advanced_options_String = require_String();
      var advanced_options_utils = require_utils();
      exports22.Array = advanced_options_Array.Array;
      exports22.Boolean = advanced_options_Boolean.Boolean;
      exports22.Counter = advanced_options_Counter.Counter;
      exports22.Proxy = advanced_options_Proxy.Proxy;
      exports22.Rest = advanced_options_Rest.Rest;
      exports22.String = advanced_options_String.String;
      exports22.applyValidator = advanced_options_utils.applyValidator;
      exports22.cleanValidationError = advanced_options_utils.cleanValidationError;
      exports22.formatError = advanced_options_utils.formatError;
      exports22.isOptionSymbol = advanced_options_utils.isOptionSymbol;
      exports22.makeCommandOption = advanced_options_utils.makeCommandOption;
      exports22.rerouteArguments = advanced_options_utils.rerouteArguments;
    }
  });
  var require_advanced = __commonJS2({
    "../../node_modules/.pnpm/clipanion@4.0.0-rc.4_typanion@3.14.0/node_modules/clipanion/lib/advanced/index.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var advanced_Command = require_Command();
      var advanced_Cli = require_Cli();
      var errors = require_errors2();
      var format = require_format();
      var advanced_builtins_index = require_builtins();
      var advanced_options_index = require_options();
      exports22.Command = advanced_Command.Command;
      exports22.Cli = advanced_Cli.Cli;
      exports22.run = advanced_Cli.run;
      exports22.runExit = advanced_Cli.runExit;
      exports22.UsageError = errors.UsageError;
      exports22.formatMarkdownish = format.formatMarkdownish;
      exports22.Builtins = advanced_builtins_index;
      exports22.Option = advanced_options_index;
    }
  });
  var require_package = __commonJS2({
    "../../node_modules/.pnpm/dotenv@16.4.7/node_modules/dotenv/package.json"(exports22, module22) {
      module22.exports = {
        name: "dotenv",
        version: "16.4.7",
        description: "Loads environment variables from .env file",
        main: "lib/main.js",
        types: "lib/main.d.ts",
        exports: {
          ".": {
            types: "./lib/main.d.ts",
            require: "./lib/main.js",
            default: "./lib/main.js"
          },
          "./config": "./config.js",
          "./config.js": "./config.js",
          "./lib/env-options": "./lib/env-options.js",
          "./lib/env-options.js": "./lib/env-options.js",
          "./lib/cli-options": "./lib/cli-options.js",
          "./lib/cli-options.js": "./lib/cli-options.js",
          "./package.json": "./package.json"
        },
        scripts: {
          "dts-check": "tsc --project tests/types/tsconfig.json",
          lint: "standard",
          pretest: "npm run lint && npm run dts-check",
          test: "tap run --allow-empty-coverage --disable-coverage --timeout=60000",
          "test:coverage": "tap run --show-full-coverage --timeout=60000 --coverage-report=lcov",
          prerelease: "npm test",
          release: "standard-version"
        },
        repository: {
          type: "git",
          url: "git://github.com/motdotla/dotenv.git"
        },
        funding: "https://dotenvx.com",
        keywords: [
          "dotenv",
          "env",
          ".env",
          "environment",
          "variables",
          "config",
          "settings"
        ],
        readmeFilename: "README.md",
        license: "BSD-2-Clause",
        devDependencies: {
          "@types/node": "^18.11.3",
          decache: "^4.6.2",
          sinon: "^14.0.1",
          standard: "^17.0.0",
          "standard-version": "^9.5.0",
          tap: "^19.2.0",
          typescript: "^4.8.4"
        },
        engines: {
          node: ">=12"
        },
        browser: {
          fs: false
        }
      };
    }
  });
  var require_main = __commonJS2({
    "../../node_modules/.pnpm/dotenv@16.4.7/node_modules/dotenv/lib/main.js"(exports22, module22) {
      var fs = __require("fs");
      var path2 = __require("path");
      var os = __require("os");
      var crypto = __require("crypto");
      var packageJson = require_package();
      var version = packageJson.version;
      var LINE = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;
      function parse(src) {
        const obj = {};
        let lines = src.toString();
        lines = lines.replace(/\r\n?/mg, `
`);
        let match;
        while ((match = LINE.exec(lines)) != null) {
          const key = match[1];
          let value = match[2] || "";
          value = value.trim();
          const maybeQuote = value[0];
          value = value.replace(/^(['"`])([\s\S]*)\1$/mg, "$2");
          if (maybeQuote === '"') {
            value = value.replace(/\\n/g, `
`);
            value = value.replace(/\\r/g, "\r");
          }
          obj[key] = value;
        }
        return obj;
      }
      function _parseVault(options) {
        const vaultPath = _vaultPath(options);
        const result2 = DotenvModule.configDotenv({ path: vaultPath });
        if (!result2.parsed) {
          const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`);
          err.code = "MISSING_DATA";
          throw err;
        }
        const keys = _dotenvKey(options).split(",");
        const length = keys.length;
        let decrypted;
        for (let i = 0;i < length; i++) {
          try {
            const key = keys[i].trim();
            const attrs = _instructions(result2, key);
            decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key);
            break;
          } catch (error) {
            if (i + 1 >= length) {
              throw error;
            }
          }
        }
        return DotenvModule.parse(decrypted);
      }
      function _log(message) {
        console.log(`[dotenv@${version}][INFO] ${message}`);
      }
      function _warn(message) {
        console.log(`[dotenv@${version}][WARN] ${message}`);
      }
      function _debug(message) {
        console.log(`[dotenv@${version}][DEBUG] ${message}`);
      }
      function _dotenvKey(options) {
        if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {
          return options.DOTENV_KEY;
        }
        if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {
          return process.env.DOTENV_KEY;
        }
        return "";
      }
      function _instructions(result2, dotenvKey) {
        let uri;
        try {
          uri = new URL(dotenvKey);
        } catch (error) {
          if (error.code === "ERR_INVALID_URL") {
            const err = new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");
            err.code = "INVALID_DOTENV_KEY";
            throw err;
          }
          throw error;
        }
        const key = uri.password;
        if (!key) {
          const err = new Error("INVALID_DOTENV_KEY: Missing key part");
          err.code = "INVALID_DOTENV_KEY";
          throw err;
        }
        const environment = uri.searchParams.get("environment");
        if (!environment) {
          const err = new Error("INVALID_DOTENV_KEY: Missing environment part");
          err.code = "INVALID_DOTENV_KEY";
          throw err;
        }
        const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`;
        const ciphertext = result2.parsed[environmentKey];
        if (!ciphertext) {
          const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`);
          err.code = "NOT_FOUND_DOTENV_ENVIRONMENT";
          throw err;
        }
        return { ciphertext, key };
      }
      function _vaultPath(options) {
        let possibleVaultPath = null;
        if (options && options.path && options.path.length > 0) {
          if (Array.isArray(options.path)) {
            for (const filepath of options.path) {
              if (fs.existsSync(filepath)) {
                possibleVaultPath = filepath.endsWith(".vault") ? filepath : `${filepath}.vault`;
              }
            }
          } else {
            possibleVaultPath = options.path.endsWith(".vault") ? options.path : `${options.path}.vault`;
          }
        } else {
          possibleVaultPath = path2.resolve(process.cwd(), ".env.vault");
        }
        if (fs.existsSync(possibleVaultPath)) {
          return possibleVaultPath;
        }
        return null;
      }
      function _resolveHome(envPath) {
        return envPath[0] === "~" ? path2.join(os.homedir(), envPath.slice(1)) : envPath;
      }
      function _configVault(options) {
        _log("Loading env from encrypted .env.vault");
        const parsed = DotenvModule._parseVault(options);
        let processEnv = process.env;
        if (options && options.processEnv != null) {
          processEnv = options.processEnv;
        }
        DotenvModule.populate(processEnv, parsed, options);
        return { parsed };
      }
      function configDotenv(options) {
        const dotenvPath = path2.resolve(process.cwd(), ".env");
        let encoding = "utf8";
        const debug = Boolean(options && options.debug);
        if (options && options.encoding) {
          encoding = options.encoding;
        } else {
          if (debug) {
            _debug("No encoding is specified. UTF-8 is used by default");
          }
        }
        let optionPaths = [dotenvPath];
        if (options && options.path) {
          if (!Array.isArray(options.path)) {
            optionPaths = [_resolveHome(options.path)];
          } else {
            optionPaths = [];
            for (const filepath of options.path) {
              optionPaths.push(_resolveHome(filepath));
            }
          }
        }
        let lastError;
        const parsedAll = {};
        for (const path3 of optionPaths) {
          try {
            const parsed = DotenvModule.parse(fs.readFileSync(path3, { encoding }));
            DotenvModule.populate(parsedAll, parsed, options);
          } catch (e) {
            if (debug) {
              _debug(`Failed to load ${path3} ${e.message}`);
            }
            lastError = e;
          }
        }
        let processEnv = process.env;
        if (options && options.processEnv != null) {
          processEnv = options.processEnv;
        }
        DotenvModule.populate(processEnv, parsedAll, options);
        if (lastError) {
          return { parsed: parsedAll, error: lastError };
        } else {
          return { parsed: parsedAll };
        }
      }
      function config(options) {
        if (_dotenvKey(options).length === 0) {
          return DotenvModule.configDotenv(options);
        }
        const vaultPath = _vaultPath(options);
        if (!vaultPath) {
          _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`);
          return DotenvModule.configDotenv(options);
        }
        return DotenvModule._configVault(options);
      }
      function decrypt(encrypted, keyStr) {
        const key = Buffer.from(keyStr.slice(-64), "hex");
        let ciphertext = Buffer.from(encrypted, "base64");
        const nonce = ciphertext.subarray(0, 12);
        const authTag = ciphertext.subarray(-16);
        ciphertext = ciphertext.subarray(12, -16);
        try {
          const aesgcm = crypto.createDecipheriv("aes-256-gcm", key, nonce);
          aesgcm.setAuthTag(authTag);
          return `${aesgcm.update(ciphertext)}${aesgcm.final()}`;
        } catch (error) {
          const isRange = error instanceof RangeError;
          const invalidKeyLength = error.message === "Invalid key length";
          const decryptionFailed = error.message === "Unsupported state or unable to authenticate data";
          if (isRange || invalidKeyLength) {
            const err = new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");
            err.code = "INVALID_DOTENV_KEY";
            throw err;
          } else if (decryptionFailed) {
            const err = new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");
            err.code = "DECRYPTION_FAILED";
            throw err;
          } else {
            throw error;
          }
        }
      }
      function populate(processEnv, parsed, options = {}) {
        const debug = Boolean(options && options.debug);
        const override = Boolean(options && options.override);
        if (typeof parsed !== "object") {
          const err = new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");
          err.code = "OBJECT_REQUIRED";
          throw err;
        }
        for (const key of Object.keys(parsed)) {
          if (Object.prototype.hasOwnProperty.call(processEnv, key)) {
            if (override === true) {
              processEnv[key] = parsed[key];
            }
            if (debug) {
              if (override === true) {
                _debug(`"${key}" is already defined and WAS overwritten`);
              } else {
                _debug(`"${key}" is already defined and was NOT overwritten`);
              }
            }
          } else {
            processEnv[key] = parsed[key];
          }
        }
      }
      var DotenvModule = {
        configDotenv,
        _configVault,
        _parseVault,
        config,
        decrypt,
        parse,
        populate
      };
      module22.exports.configDotenv = DotenvModule.configDotenv;
      module22.exports._configVault = DotenvModule._configVault;
      module22.exports._parseVault = DotenvModule._parseVault;
      module22.exports.config = DotenvModule.config;
      module22.exports.decrypt = DotenvModule.decrypt;
      module22.exports.parse = DotenvModule.parse;
      module22.exports.populate = DotenvModule.populate;
      module22.exports = DotenvModule;
    }
  });
  var require_p_try = __commonJS2({
    "../../node_modules/.pnpm/p-try@2.2.0/node_modules/p-try/index.js"(exports22, module22) {
      var pTry = (fn, ...arguments_) => new Promise((resolve) => {
        resolve(fn(...arguments_));
      });
      module22.exports = pTry;
      module22.exports.default = pTry;
    }
  });
  var require_p_limit = __commonJS2({
    "../../node_modules/.pnpm/p-limit@2.3.0/node_modules/p-limit/index.js"(exports22, module22) {
      var pTry = require_p_try();
      var pLimit = (concurrency) => {
        if (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {
          return Promise.reject(new TypeError("Expected `concurrency` to be a number from 1 and up"));
        }
        const queue = [];
        let activeCount = 0;
        const next = () => {
          activeCount--;
          if (queue.length > 0) {
            queue.shift()();
          }
        };
        const run = (fn, resolve, ...args) => {
          activeCount++;
          const result2 = pTry(fn, ...args);
          resolve(result2);
          result2.then(next, next);
        };
        const enqueue = (fn, resolve, ...args) => {
          if (activeCount < concurrency) {
            run(fn, resolve, ...args);
          } else {
            queue.push(run.bind(null, fn, resolve, ...args));
          }
        };
        const generator = (fn, ...args) => new Promise((resolve) => enqueue(fn, resolve, ...args));
        Object.defineProperties(generator, {
          activeCount: {
            get: () => activeCount
          },
          pendingCount: {
            get: () => queue.length
          },
          clearQueue: {
            value: () => {
              queue.length = 0;
            }
          }
        });
        return generator;
      };
      module22.exports = pLimit;
      module22.exports.default = pLimit;
    }
  });
  var require_MessageName = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/MessageName.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.MessageName = undefined;
      exports22.stringifyMessageName = stringifyMessageName2;
      exports22.parseMessageName = parseMessageName;
      var MessageName2;
      (function(MessageName3) {
        MessageName3[MessageName3["UNNAMED"] = 0] = "UNNAMED";
        MessageName3[MessageName3["EXCEPTION"] = 1] = "EXCEPTION";
        MessageName3[MessageName3["MISSING_PEER_DEPENDENCY"] = 2] = "MISSING_PEER_DEPENDENCY";
        MessageName3[MessageName3["CYCLIC_DEPENDENCIES"] = 3] = "CYCLIC_DEPENDENCIES";
        MessageName3[MessageName3["DISABLED_BUILD_SCRIPTS"] = 4] = "DISABLED_BUILD_SCRIPTS";
        MessageName3[MessageName3["BUILD_DISABLED"] = 5] = "BUILD_DISABLED";
        MessageName3[MessageName3["SOFT_LINK_BUILD"] = 6] = "SOFT_LINK_BUILD";
        MessageName3[MessageName3["MUST_BUILD"] = 7] = "MUST_BUILD";
        MessageName3[MessageName3["MUST_REBUILD"] = 8] = "MUST_REBUILD";
        MessageName3[MessageName3["BUILD_FAILED"] = 9] = "BUILD_FAILED";
        MessageName3[MessageName3["RESOLVER_NOT_FOUND"] = 10] = "RESOLVER_NOT_FOUND";
        MessageName3[MessageName3["FETCHER_NOT_FOUND"] = 11] = "FETCHER_NOT_FOUND";
        MessageName3[MessageName3["LINKER_NOT_FOUND"] = 12] = "LINKER_NOT_FOUND";
        MessageName3[MessageName3["FETCH_NOT_CACHED"] = 13] = "FETCH_NOT_CACHED";
        MessageName3[MessageName3["YARN_IMPORT_FAILED"] = 14] = "YARN_IMPORT_FAILED";
        MessageName3[MessageName3["REMOTE_INVALID"] = 15] = "REMOTE_INVALID";
        MessageName3[MessageName3["REMOTE_NOT_FOUND"] = 16] = "REMOTE_NOT_FOUND";
        MessageName3[MessageName3["RESOLUTION_PACK"] = 17] = "RESOLUTION_PACK";
        MessageName3[MessageName3["CACHE_CHECKSUM_MISMATCH"] = 18] = "CACHE_CHECKSUM_MISMATCH";
        MessageName3[MessageName3["UNUSED_CACHE_ENTRY"] = 19] = "UNUSED_CACHE_ENTRY";
        MessageName3[MessageName3["MISSING_LOCKFILE_ENTRY"] = 20] = "MISSING_LOCKFILE_ENTRY";
        MessageName3[MessageName3["WORKSPACE_NOT_FOUND"] = 21] = "WORKSPACE_NOT_FOUND";
        MessageName3[MessageName3["TOO_MANY_MATCHING_WORKSPACES"] = 22] = "TOO_MANY_MATCHING_WORKSPACES";
        MessageName3[MessageName3["CONSTRAINTS_MISSING_DEPENDENCY"] = 23] = "CONSTRAINTS_MISSING_DEPENDENCY";
        MessageName3[MessageName3["CONSTRAINTS_INCOMPATIBLE_DEPENDENCY"] = 24] = "CONSTRAINTS_INCOMPATIBLE_DEPENDENCY";
        MessageName3[MessageName3["CONSTRAINTS_EXTRANEOUS_DEPENDENCY"] = 25] = "CONSTRAINTS_EXTRANEOUS_DEPENDENCY";
        MessageName3[MessageName3["CONSTRAINTS_INVALID_DEPENDENCY"] = 26] = "CONSTRAINTS_INVALID_DEPENDENCY";
        MessageName3[MessageName3["CANT_SUGGEST_RESOLUTIONS"] = 27] = "CANT_SUGGEST_RESOLUTIONS";
        MessageName3[MessageName3["FROZEN_LOCKFILE_EXCEPTION"] = 28] = "FROZEN_LOCKFILE_EXCEPTION";
        MessageName3[MessageName3["CROSS_DRIVE_VIRTUAL_LOCAL"] = 29] = "CROSS_DRIVE_VIRTUAL_LOCAL";
        MessageName3[MessageName3["FETCH_FAILED"] = 30] = "FETCH_FAILED";
        MessageName3[MessageName3["DANGEROUS_NODE_MODULES"] = 31] = "DANGEROUS_NODE_MODULES";
        MessageName3[MessageName3["NODE_GYP_INJECTED"] = 32] = "NODE_GYP_INJECTED";
        MessageName3[MessageName3["AUTHENTICATION_NOT_FOUND"] = 33] = "AUTHENTICATION_NOT_FOUND";
        MessageName3[MessageName3["INVALID_CONFIGURATION_KEY"] = 34] = "INVALID_CONFIGURATION_KEY";
        MessageName3[MessageName3["NETWORK_ERROR"] = 35] = "NETWORK_ERROR";
        MessageName3[MessageName3["LIFECYCLE_SCRIPT"] = 36] = "LIFECYCLE_SCRIPT";
        MessageName3[MessageName3["CONSTRAINTS_MISSING_FIELD"] = 37] = "CONSTRAINTS_MISSING_FIELD";
        MessageName3[MessageName3["CONSTRAINTS_INCOMPATIBLE_FIELD"] = 38] = "CONSTRAINTS_INCOMPATIBLE_FIELD";
        MessageName3[MessageName3["CONSTRAINTS_EXTRANEOUS_FIELD"] = 39] = "CONSTRAINTS_EXTRANEOUS_FIELD";
        MessageName3[MessageName3["CONSTRAINTS_INVALID_FIELD"] = 40] = "CONSTRAINTS_INVALID_FIELD";
        MessageName3[MessageName3["AUTHENTICATION_INVALID"] = 41] = "AUTHENTICATION_INVALID";
        MessageName3[MessageName3["PROLOG_UNKNOWN_ERROR"] = 42] = "PROLOG_UNKNOWN_ERROR";
        MessageName3[MessageName3["PROLOG_SYNTAX_ERROR"] = 43] = "PROLOG_SYNTAX_ERROR";
        MessageName3[MessageName3["PROLOG_EXISTENCE_ERROR"] = 44] = "PROLOG_EXISTENCE_ERROR";
        MessageName3[MessageName3["STACK_OVERFLOW_RESOLUTION"] = 45] = "STACK_OVERFLOW_RESOLUTION";
        MessageName3[MessageName3["AUTOMERGE_FAILED_TO_PARSE"] = 46] = "AUTOMERGE_FAILED_TO_PARSE";
        MessageName3[MessageName3["AUTOMERGE_IMMUTABLE"] = 47] = "AUTOMERGE_IMMUTABLE";
        MessageName3[MessageName3["AUTOMERGE_SUCCESS"] = 48] = "AUTOMERGE_SUCCESS";
        MessageName3[MessageName3["AUTOMERGE_REQUIRED"] = 49] = "AUTOMERGE_REQUIRED";
        MessageName3[MessageName3["DEPRECATED_CLI_SETTINGS"] = 50] = "DEPRECATED_CLI_SETTINGS";
        MessageName3[MessageName3["PLUGIN_NAME_NOT_FOUND"] = 51] = "PLUGIN_NAME_NOT_FOUND";
        MessageName3[MessageName3["INVALID_PLUGIN_REFERENCE"] = 52] = "INVALID_PLUGIN_REFERENCE";
        MessageName3[MessageName3["CONSTRAINTS_AMBIGUITY"] = 53] = "CONSTRAINTS_AMBIGUITY";
        MessageName3[MessageName3["CACHE_OUTSIDE_PROJECT"] = 54] = "CACHE_OUTSIDE_PROJECT";
        MessageName3[MessageName3["IMMUTABLE_INSTALL"] = 55] = "IMMUTABLE_INSTALL";
        MessageName3[MessageName3["IMMUTABLE_CACHE"] = 56] = "IMMUTABLE_CACHE";
        MessageName3[MessageName3["INVALID_MANIFEST"] = 57] = "INVALID_MANIFEST";
        MessageName3[MessageName3["PACKAGE_PREPARATION_FAILED"] = 58] = "PACKAGE_PREPARATION_FAILED";
        MessageName3[MessageName3["INVALID_RANGE_PEER_DEPENDENCY"] = 59] = "INVALID_RANGE_PEER_DEPENDENCY";
        MessageName3[MessageName3["INCOMPATIBLE_PEER_DEPENDENCY"] = 60] = "INCOMPATIBLE_PEER_DEPENDENCY";
        MessageName3[MessageName3["DEPRECATED_PACKAGE"] = 61] = "DEPRECATED_PACKAGE";
        MessageName3[MessageName3["INCOMPATIBLE_OS"] = 62] = "INCOMPATIBLE_OS";
        MessageName3[MessageName3["INCOMPATIBLE_CPU"] = 63] = "INCOMPATIBLE_CPU";
        MessageName3[MessageName3["FROZEN_ARTIFACT_EXCEPTION"] = 64] = "FROZEN_ARTIFACT_EXCEPTION";
        MessageName3[MessageName3["TELEMETRY_NOTICE"] = 65] = "TELEMETRY_NOTICE";
        MessageName3[MessageName3["PATCH_HUNK_FAILED"] = 66] = "PATCH_HUNK_FAILED";
        MessageName3[MessageName3["INVALID_CONFIGURATION_VALUE"] = 67] = "INVALID_CONFIGURATION_VALUE";
        MessageName3[MessageName3["UNUSED_PACKAGE_EXTENSION"] = 68] = "UNUSED_PACKAGE_EXTENSION";
        MessageName3[MessageName3["REDUNDANT_PACKAGE_EXTENSION"] = 69] = "REDUNDANT_PACKAGE_EXTENSION";
        MessageName3[MessageName3["AUTO_NM_SUCCESS"] = 70] = "AUTO_NM_SUCCESS";
        MessageName3[MessageName3["NM_CANT_INSTALL_EXTERNAL_SOFT_LINK"] = 71] = "NM_CANT_INSTALL_EXTERNAL_SOFT_LINK";
        MessageName3[MessageName3["NM_PRESERVE_SYMLINKS_REQUIRED"] = 72] = "NM_PRESERVE_SYMLINKS_REQUIRED";
        MessageName3[MessageName3["UPDATE_LOCKFILE_ONLY_SKIP_LINK"] = 73] = "UPDATE_LOCKFILE_ONLY_SKIP_LINK";
        MessageName3[MessageName3["NM_HARDLINKS_MODE_DOWNGRADED"] = 74] = "NM_HARDLINKS_MODE_DOWNGRADED";
        MessageName3[MessageName3["PROLOG_INSTANTIATION_ERROR"] = 75] = "PROLOG_INSTANTIATION_ERROR";
        MessageName3[MessageName3["INCOMPATIBLE_ARCHITECTURE"] = 76] = "INCOMPATIBLE_ARCHITECTURE";
        MessageName3[MessageName3["GHOST_ARCHITECTURE"] = 77] = "GHOST_ARCHITECTURE";
        MessageName3[MessageName3["RESOLUTION_MISMATCH"] = 78] = "RESOLUTION_MISMATCH";
        MessageName3[MessageName3["PROLOG_LIMIT_EXCEEDED"] = 79] = "PROLOG_LIMIT_EXCEEDED";
        MessageName3[MessageName3["NETWORK_DISABLED"] = 80] = "NETWORK_DISABLED";
        MessageName3[MessageName3["NETWORK_UNSAFE_HTTP"] = 81] = "NETWORK_UNSAFE_HTTP";
        MessageName3[MessageName3["RESOLUTION_FAILED"] = 82] = "RESOLUTION_FAILED";
        MessageName3[MessageName3["AUTOMERGE_GIT_ERROR"] = 83] = "AUTOMERGE_GIT_ERROR";
        MessageName3[MessageName3["CONSTRAINTS_CHECK_FAILED"] = 84] = "CONSTRAINTS_CHECK_FAILED";
        MessageName3[MessageName3["UPDATED_RESOLUTION_RECORD"] = 85] = "UPDATED_RESOLUTION_RECORD";
        MessageName3[MessageName3["EXPLAIN_PEER_DEPENDENCIES_CTA"] = 86] = "EXPLAIN_PEER_DEPENDENCIES_CTA";
        MessageName3[MessageName3["MIGRATION_SUCCESS"] = 87] = "MIGRATION_SUCCESS";
        MessageName3[MessageName3["VERSION_NOTICE"] = 88] = "VERSION_NOTICE";
        MessageName3[MessageName3["TIPS_NOTICE"] = 89] = "TIPS_NOTICE";
        MessageName3[MessageName3["OFFLINE_MODE_ENABLED"] = 90] = "OFFLINE_MODE_ENABLED";
      })(MessageName2 || (exports22.MessageName = MessageName2 = {}));
      function stringifyMessageName2(name) {
        return `YN${name.toString(10).padStart(4, `0`)}`;
      }
      function parseMessageName(messageName) {
        const parsed = Number(messageName.slice(2));
        if (typeof MessageName2[parsed] === `undefined`)
          throw new Error(`Unknown message name: "${messageName}"`);
        return parsed;
      }
    }
  });
  var require_constants3 = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/constants.js"(exports22, module22) {
      var SEMVER_SPEC_VERSION = "2.0.0";
      var MAX_LENGTH = 256;
      var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
      var MAX_SAFE_COMPONENT_LENGTH = 16;
      var MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;
      var RELEASE_TYPES = [
        "major",
        "premajor",
        "minor",
        "preminor",
        "patch",
        "prepatch",
        "prerelease"
      ];
      module22.exports = {
        MAX_LENGTH,
        MAX_SAFE_COMPONENT_LENGTH,
        MAX_SAFE_BUILD_LENGTH,
        MAX_SAFE_INTEGER,
        RELEASE_TYPES,
        SEMVER_SPEC_VERSION,
        FLAG_INCLUDE_PRERELEASE: 1,
        FLAG_LOOSE: 2
      };
    }
  });
  var require_debug = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/debug.js"(exports22, module22) {
      var debug = typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
      };
      module22.exports = debug;
    }
  });
  var require_re = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/re.js"(exports22, module22) {
      var {
        MAX_SAFE_COMPONENT_LENGTH,
        MAX_SAFE_BUILD_LENGTH,
        MAX_LENGTH
      } = require_constants3();
      var debug = require_debug();
      exports22 = module22.exports = {};
      var re = exports22.re = [];
      var safeRe = exports22.safeRe = [];
      var src = exports22.src = [];
      var t = exports22.t = {};
      var R = 0;
      var LETTERDASHNUMBER = "[a-zA-Z0-9-]";
      var safeRegexReplacements = [
        ["\\s", 1],
        ["\\d", MAX_LENGTH],
        [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]
      ];
      var makeSafeRegex = (value) => {
        for (const [token, max] of safeRegexReplacements) {
          value = value.split(`${token}*`).join(`${token}{0,${max}}`).split(`${token}+`).join(`${token}{1,${max}}`);
        }
        return value;
      };
      var createToken = (name, value, isGlobal) => {
        const safe = makeSafeRegex(value);
        const index = R++;
        debug(name, index, value);
        t[name] = index;
        src[index] = value;
        re[index] = new RegExp(value, isGlobal ? "g" : undefined);
        safeRe[index] = new RegExp(safe, isGlobal ? "g" : undefined);
      };
      createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
      createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
      createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
      createToken("MAINVERSION", `(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})`);
      createToken("MAINVERSIONLOOSE", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})`);
      createToken("PRERELEASEIDENTIFIER", `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`);
      createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`);
      createToken("PRERELEASE", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);
      createToken("PRERELEASELOOSE", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);
      createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
      createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);
      createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);
      createToken("FULL", `^${src[t.FULLPLAIN]}$`);
      createToken("LOOSEPLAIN", `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);
      createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`);
      createToken("GTLT", "((?:<|>)?=?)");
      createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
      createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
      createToken("XRANGEPLAIN", `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?)?)?`);
      createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?)?)?`);
      createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
      createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);
      createToken("COERCEPLAIN", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`);
      createToken("COERCE", `${src[t.COERCEPLAIN]}(?:$|[^\\d])`);
      createToken("COERCEFULL", src[t.COERCEPLAIN] + `(?:${src[t.PRERELEASE]})?(?:${src[t.BUILD]})?(?:$|[^\\d])`);
      createToken("COERCERTL", src[t.COERCE], true);
      createToken("COERCERTLFULL", src[t.COERCEFULL], true);
      createToken("LONETILDE", "(?:~>?)");
      createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, true);
      exports22.tildeTrimReplace = "$1~";
      createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
      createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);
      createToken("LONECARET", "(?:\\^)");
      createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, true);
      exports22.caretTrimReplace = "$1^";
      createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
      createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);
      createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
      createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);
      createToken("COMPARATORTRIM", `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
      exports22.comparatorTrimReplace = "$1$2$3";
      createToken("HYPHENRANGE", `^\\s*(${src[t.XRANGEPLAIN]})\\s+-\\s+(${src[t.XRANGEPLAIN]})\\s*$`);
      createToken("HYPHENRANGELOOSE", `^\\s*(${src[t.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t.XRANGEPLAINLOOSE]})\\s*$`);
      createToken("STAR", "(<|>)?=?\\s*\\*");
      createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
      createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
    }
  });
  var require_parse_options = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/parse-options.js"(exports22, module22) {
      var looseOption = Object.freeze({ loose: true });
      var emptyOpts = Object.freeze({});
      var parseOptions = (options) => {
        if (!options) {
          return emptyOpts;
        }
        if (typeof options !== "object") {
          return looseOption;
        }
        return options;
      };
      module22.exports = parseOptions;
    }
  });
  var require_identifiers = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/identifiers.js"(exports22, module22) {
      var numeric = /^[0-9]+$/;
      var compareIdentifiers = (a, b) => {
        const anum = numeric.test(a);
        const bnum = numeric.test(b);
        if (anum && bnum) {
          a = +a;
          b = +b;
        }
        return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
      };
      var rcompareIdentifiers = (a, b) => compareIdentifiers(b, a);
      module22.exports = {
        compareIdentifiers,
        rcompareIdentifiers
      };
    }
  });
  var require_semver = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/semver.js"(exports22, module22) {
      var debug = require_debug();
      var { MAX_LENGTH, MAX_SAFE_INTEGER } = require_constants3();
      var { safeRe: re, t } = require_re();
      var parseOptions = require_parse_options();
      var { compareIdentifiers } = require_identifiers();
      var SemVer = class _SemVer {
        constructor(version, options) {
          options = parseOptions(options);
          if (version instanceof _SemVer) {
            if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease) {
              return version;
            } else {
              version = version.version;
            }
          } else if (typeof version !== "string") {
            throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version}".`);
          }
          if (version.length > MAX_LENGTH) {
            throw new TypeError(`version is longer than ${MAX_LENGTH} characters`);
          }
          debug("SemVer", version, options);
          this.options = options;
          this.loose = !!options.loose;
          this.includePrerelease = !!options.includePrerelease;
          const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
          if (!m) {
            throw new TypeError(`Invalid Version: ${version}`);
          }
          this.raw = version;
          this.major = +m[1];
          this.minor = +m[2];
          this.patch = +m[3];
          if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
            throw new TypeError("Invalid major version");
          }
          if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
            throw new TypeError("Invalid minor version");
          }
          if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
            throw new TypeError("Invalid patch version");
          }
          if (!m[4]) {
            this.prerelease = [];
          } else {
            this.prerelease = m[4].split(".").map((id) => {
              if (/^[0-9]+$/.test(id)) {
                const num = +id;
                if (num >= 0 && num < MAX_SAFE_INTEGER) {
                  return num;
                }
              }
              return id;
            });
          }
          this.build = m[5] ? m[5].split(".") : [];
          this.format();
        }
        format() {
          this.version = `${this.major}.${this.minor}.${this.patch}`;
          if (this.prerelease.length) {
            this.version += `-${this.prerelease.join(".")}`;
          }
          return this.version;
        }
        toString() {
          return this.version;
        }
        compare(other) {
          debug("SemVer.compare", this.version, this.options, other);
          if (!(other instanceof _SemVer)) {
            if (typeof other === "string" && other === this.version) {
              return 0;
            }
            other = new _SemVer(other, this.options);
          }
          if (other.version === this.version) {
            return 0;
          }
          return this.compareMain(other) || this.comparePre(other);
        }
        compareMain(other) {
          if (!(other instanceof _SemVer)) {
            other = new _SemVer(other, this.options);
          }
          return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
        }
        comparePre(other) {
          if (!(other instanceof _SemVer)) {
            other = new _SemVer(other, this.options);
          }
          if (this.prerelease.length && !other.prerelease.length) {
            return -1;
          } else if (!this.prerelease.length && other.prerelease.length) {
            return 1;
          } else if (!this.prerelease.length && !other.prerelease.length) {
            return 0;
          }
          let i = 0;
          do {
            const a = this.prerelease[i];
            const b = other.prerelease[i];
            debug("prerelease compare", i, a, b);
            if (a === undefined && b === undefined) {
              return 0;
            } else if (b === undefined) {
              return 1;
            } else if (a === undefined) {
              return -1;
            } else if (a === b) {
              continue;
            } else {
              return compareIdentifiers(a, b);
            }
          } while (++i);
        }
        compareBuild(other) {
          if (!(other instanceof _SemVer)) {
            other = new _SemVer(other, this.options);
          }
          let i = 0;
          do {
            const a = this.build[i];
            const b = other.build[i];
            debug("build compare", i, a, b);
            if (a === undefined && b === undefined) {
              return 0;
            } else if (b === undefined) {
              return 1;
            } else if (a === undefined) {
              return -1;
            } else if (a === b) {
              continue;
            } else {
              return compareIdentifiers(a, b);
            }
          } while (++i);
        }
        inc(release, identifier, identifierBase) {
          switch (release) {
            case "premajor":
              this.prerelease.length = 0;
              this.patch = 0;
              this.minor = 0;
              this.major++;
              this.inc("pre", identifier, identifierBase);
              break;
            case "preminor":
              this.prerelease.length = 0;
              this.patch = 0;
              this.minor++;
              this.inc("pre", identifier, identifierBase);
              break;
            case "prepatch":
              this.prerelease.length = 0;
              this.inc("patch", identifier, identifierBase);
              this.inc("pre", identifier, identifierBase);
              break;
            case "prerelease":
              if (this.prerelease.length === 0) {
                this.inc("patch", identifier, identifierBase);
              }
              this.inc("pre", identifier, identifierBase);
              break;
            case "major":
              if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
                this.major++;
              }
              this.minor = 0;
              this.patch = 0;
              this.prerelease = [];
              break;
            case "minor":
              if (this.patch !== 0 || this.prerelease.length === 0) {
                this.minor++;
              }
              this.patch = 0;
              this.prerelease = [];
              break;
            case "patch":
              if (this.prerelease.length === 0) {
                this.patch++;
              }
              this.prerelease = [];
              break;
            case "pre": {
              const base = Number(identifierBase) ? 1 : 0;
              if (!identifier && identifierBase === false) {
                throw new Error("invalid increment argument: identifier is empty");
              }
              if (this.prerelease.length === 0) {
                this.prerelease = [base];
              } else {
                let i = this.prerelease.length;
                while (--i >= 0) {
                  if (typeof this.prerelease[i] === "number") {
                    this.prerelease[i]++;
                    i = -2;
                  }
                }
                if (i === -1) {
                  if (identifier === this.prerelease.join(".") && identifierBase === false) {
                    throw new Error("invalid increment argument: identifier already exists");
                  }
                  this.prerelease.push(base);
                }
              }
              if (identifier) {
                let prerelease = [identifier, base];
                if (identifierBase === false) {
                  prerelease = [identifier];
                }
                if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
                  if (isNaN(this.prerelease[1])) {
                    this.prerelease = prerelease;
                  }
                } else {
                  this.prerelease = prerelease;
                }
              }
              break;
            }
            default:
              throw new Error(`invalid increment argument: ${release}`);
          }
          this.raw = this.format();
          if (this.build.length) {
            this.raw += `+${this.build.join(".")}`;
          }
          return this;
        }
      };
      module22.exports = SemVer;
    }
  });
  var require_parse2 = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/parse.js"(exports22, module22) {
      var SemVer = require_semver();
      var parse = (version, options, throwErrors = false) => {
        if (version instanceof SemVer) {
          return version;
        }
        try {
          return new SemVer(version, options);
        } catch (er) {
          if (!throwErrors) {
            return null;
          }
          throw er;
        }
      };
      module22.exports = parse;
    }
  });
  var require_valid = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/valid.js"(exports22, module22) {
      var parse = require_parse2();
      var valid = (version, options) => {
        const v = parse(version, options);
        return v ? v.version : null;
      };
      module22.exports = valid;
    }
  });
  var require_clean = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/clean.js"(exports22, module22) {
      var parse = require_parse2();
      var clean = (version, options) => {
        const s = parse(version.trim().replace(/^[=v]+/, ""), options);
        return s ? s.version : null;
      };
      module22.exports = clean;
    }
  });
  var require_inc = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/inc.js"(exports22, module22) {
      var SemVer = require_semver();
      var inc = (version, release, options, identifier, identifierBase) => {
        if (typeof options === "string") {
          identifierBase = identifier;
          identifier = options;
          options = undefined;
        }
        try {
          return new SemVer(version instanceof SemVer ? version.version : version, options).inc(release, identifier, identifierBase).version;
        } catch (er) {
          return null;
        }
      };
      module22.exports = inc;
    }
  });
  var require_diff = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/diff.js"(exports22, module22) {
      var parse = require_parse2();
      var diff = (version1, version2) => {
        const v1 = parse(version1, null, true);
        const v2 = parse(version2, null, true);
        const comparison = v1.compare(v2);
        if (comparison === 0) {
          return null;
        }
        const v1Higher = comparison > 0;
        const highVersion = v1Higher ? v1 : v2;
        const lowVersion = v1Higher ? v2 : v1;
        const highHasPre = !!highVersion.prerelease.length;
        const lowHasPre = !!lowVersion.prerelease.length;
        if (lowHasPre && !highHasPre) {
          if (!lowVersion.patch && !lowVersion.minor) {
            return "major";
          }
          if (highVersion.patch) {
            return "patch";
          }
          if (highVersion.minor) {
            return "minor";
          }
          return "major";
        }
        const prefix = highHasPre ? "pre" : "";
        if (v1.major !== v2.major) {
          return prefix + "major";
        }
        if (v1.minor !== v2.minor) {
          return prefix + "minor";
        }
        if (v1.patch !== v2.patch) {
          return prefix + "patch";
        }
        return "prerelease";
      };
      module22.exports = diff;
    }
  });
  var require_major = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/major.js"(exports22, module22) {
      var SemVer = require_semver();
      var major = (a, loose) => new SemVer(a, loose).major;
      module22.exports = major;
    }
  });
  var require_minor = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/minor.js"(exports22, module22) {
      var SemVer = require_semver();
      var minor = (a, loose) => new SemVer(a, loose).minor;
      module22.exports = minor;
    }
  });
  var require_patch = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/patch.js"(exports22, module22) {
      var SemVer = require_semver();
      var patch = (a, loose) => new SemVer(a, loose).patch;
      module22.exports = patch;
    }
  });
  var require_prerelease = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/prerelease.js"(exports22, module22) {
      var parse = require_parse2();
      var prerelease = (version, options) => {
        const parsed = parse(version, options);
        return parsed && parsed.prerelease.length ? parsed.prerelease : null;
      };
      module22.exports = prerelease;
    }
  });
  var require_compare = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare.js"(exports22, module22) {
      var SemVer = require_semver();
      var compare = (a, b, loose) => new SemVer(a, loose).compare(new SemVer(b, loose));
      module22.exports = compare;
    }
  });
  var require_rcompare = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/rcompare.js"(exports22, module22) {
      var compare = require_compare();
      var rcompare = (a, b, loose) => compare(b, a, loose);
      module22.exports = rcompare;
    }
  });
  var require_compare_loose = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare-loose.js"(exports22, module22) {
      var compare = require_compare();
      var compareLoose = (a, b) => compare(a, b, true);
      module22.exports = compareLoose;
    }
  });
  var require_compare_build = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare-build.js"(exports22, module22) {
      var SemVer = require_semver();
      var compareBuild = (a, b, loose) => {
        const versionA = new SemVer(a, loose);
        const versionB = new SemVer(b, loose);
        return versionA.compare(versionB) || versionA.compareBuild(versionB);
      };
      module22.exports = compareBuild;
    }
  });
  var require_sort = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/sort.js"(exports22, module22) {
      var compareBuild = require_compare_build();
      var sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose));
      module22.exports = sort;
    }
  });
  var require_rsort = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/rsort.js"(exports22, module22) {
      var compareBuild = require_compare_build();
      var rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose));
      module22.exports = rsort;
    }
  });
  var require_gt = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/gt.js"(exports22, module22) {
      var compare = require_compare();
      var gt = (a, b, loose) => compare(a, b, loose) > 0;
      module22.exports = gt;
    }
  });
  var require_lt = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/lt.js"(exports22, module22) {
      var compare = require_compare();
      var lt = (a, b, loose) => compare(a, b, loose) < 0;
      module22.exports = lt;
    }
  });
  var require_eq = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/eq.js"(exports22, module22) {
      var compare = require_compare();
      var eq = (a, b, loose) => compare(a, b, loose) === 0;
      module22.exports = eq;
    }
  });
  var require_neq = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/neq.js"(exports22, module22) {
      var compare = require_compare();
      var neq = (a, b, loose) => compare(a, b, loose) !== 0;
      module22.exports = neq;
    }
  });
  var require_gte = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/gte.js"(exports22, module22) {
      var compare = require_compare();
      var gte = (a, b, loose) => compare(a, b, loose) >= 0;
      module22.exports = gte;
    }
  });
  var require_lte = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/lte.js"(exports22, module22) {
      var compare = require_compare();
      var lte = (a, b, loose) => compare(a, b, loose) <= 0;
      module22.exports = lte;
    }
  });
  var require_cmp = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/cmp.js"(exports22, module22) {
      var eq = require_eq();
      var neq = require_neq();
      var gt = require_gt();
      var gte = require_gte();
      var lt = require_lt();
      var lte = require_lte();
      var cmp = (a, op, b, loose) => {
        switch (op) {
          case "===":
            if (typeof a === "object") {
              a = a.version;
            }
            if (typeof b === "object") {
              b = b.version;
            }
            return a === b;
          case "!==":
            if (typeof a === "object") {
              a = a.version;
            }
            if (typeof b === "object") {
              b = b.version;
            }
            return a !== b;
          case "":
          case "=":
          case "==":
            return eq(a, b, loose);
          case "!=":
            return neq(a, b, loose);
          case ">":
            return gt(a, b, loose);
          case ">=":
            return gte(a, b, loose);
          case "<":
            return lt(a, b, loose);
          case "<=":
            return lte(a, b, loose);
          default:
            throw new TypeError(`Invalid operator: ${op}`);
        }
      };
      module22.exports = cmp;
    }
  });
  var require_coerce = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/coerce.js"(exports22, module22) {
      var SemVer = require_semver();
      var parse = require_parse2();
      var { safeRe: re, t } = require_re();
      var coerce = (version, options) => {
        if (version instanceof SemVer) {
          return version;
        }
        if (typeof version === "number") {
          version = String(version);
        }
        if (typeof version !== "string") {
          return null;
        }
        options = options || {};
        let match = null;
        if (!options.rtl) {
          match = version.match(options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE]);
        } else {
          const coerceRtlRegex = options.includePrerelease ? re[t.COERCERTLFULL] : re[t.COERCERTL];
          let next;
          while ((next = coerceRtlRegex.exec(version)) && (!match || match.index + match[0].length !== version.length)) {
            if (!match || next.index + next[0].length !== match.index + match[0].length) {
              match = next;
            }
            coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length;
          }
          coerceRtlRegex.lastIndex = -1;
        }
        if (match === null) {
          return null;
        }
        const major = match[2];
        const minor = match[3] || "0";
        const patch = match[4] || "0";
        const prerelease = options.includePrerelease && match[5] ? `-${match[5]}` : "";
        const build = options.includePrerelease && match[6] ? `+${match[6]}` : "";
        return parse(`${major}.${minor}.${patch}${prerelease}${build}`, options);
      };
      module22.exports = coerce;
    }
  });
  var require_lrucache = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/lrucache.js"(exports22, module22) {
      var LRUCache = class {
        constructor() {
          this.max = 1000;
          this.map = /* @__PURE__ */ new Map;
        }
        get(key) {
          const value = this.map.get(key);
          if (value === undefined) {
            return;
          } else {
            this.map.delete(key);
            this.map.set(key, value);
            return value;
          }
        }
        delete(key) {
          return this.map.delete(key);
        }
        set(key, value) {
          const deleted = this.delete(key);
          if (!deleted && value !== undefined) {
            if (this.map.size >= this.max) {
              const firstKey = this.map.keys().next().value;
              this.delete(firstKey);
            }
            this.map.set(key, value);
          }
          return this;
        }
      };
      module22.exports = LRUCache;
    }
  });
  var require_range = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/range.js"(exports22, module22) {
      var SPACE_CHARACTERS = /\s+/g;
      var Range = class _Range {
        constructor(range, options) {
          options = parseOptions(options);
          if (range instanceof _Range) {
            if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
              return range;
            } else {
              return new _Range(range.raw, options);
            }
          }
          if (range instanceof Comparator) {
            this.raw = range.value;
            this.set = [[range]];
            this.formatted = undefined;
            return this;
          }
          this.options = options;
          this.loose = !!options.loose;
          this.includePrerelease = !!options.includePrerelease;
          this.raw = range.trim().replace(SPACE_CHARACTERS, " ");
          this.set = this.raw.split("||").map((r) => this.parseRange(r.trim())).filter((c) => c.length);
          if (!this.set.length) {
            throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
          }
          if (this.set.length > 1) {
            const first = this.set[0];
            this.set = this.set.filter((c) => !isNullSet(c[0]));
            if (this.set.length === 0) {
              this.set = [first];
            } else if (this.set.length > 1) {
              for (const c of this.set) {
                if (c.length === 1 && isAny(c[0])) {
                  this.set = [c];
                  break;
                }
              }
            }
          }
          this.formatted = undefined;
        }
        get range() {
          if (this.formatted === undefined) {
            this.formatted = "";
            for (let i = 0;i < this.set.length; i++) {
              if (i > 0) {
                this.formatted += "||";
              }
              const comps = this.set[i];
              for (let k = 0;k < comps.length; k++) {
                if (k > 0) {
                  this.formatted += " ";
                }
                this.formatted += comps[k].toString().trim();
              }
            }
          }
          return this.formatted;
        }
        format() {
          return this.range;
        }
        toString() {
          return this.range;
        }
        parseRange(range) {
          const memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);
          const memoKey = memoOpts + ":" + range;
          const cached = cache.get(memoKey);
          if (cached) {
            return cached;
          }
          const loose = this.options.loose;
          const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
          range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
          debug("hyphen replace", range);
          range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
          debug("comparator trim", range);
          range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
          debug("tilde trim", range);
          range = range.replace(re[t.CARETTRIM], caretTrimReplace);
          debug("caret trim", range);
          let rangeList = range.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
          if (loose) {
            rangeList = rangeList.filter((comp) => {
              debug("loose invalid filter", comp, this.options);
              return !!comp.match(re[t.COMPARATORLOOSE]);
            });
          }
          debug("range list", rangeList);
          const rangeMap = /* @__PURE__ */ new Map;
          const comparators = rangeList.map((comp) => new Comparator(comp, this.options));
          for (const comp of comparators) {
            if (isNullSet(comp)) {
              return [comp];
            }
            rangeMap.set(comp.value, comp);
          }
          if (rangeMap.size > 1 && rangeMap.has("")) {
            rangeMap.delete("");
          }
          const result2 = [...rangeMap.values()];
          cache.set(memoKey, result2);
          return result2;
        }
        intersects(range, options) {
          if (!(range instanceof _Range)) {
            throw new TypeError("a Range is required");
          }
          return this.set.some((thisComparators) => {
            return isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => {
              return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {
                return rangeComparators.every((rangeComparator) => {
                  return thisComparator.intersects(rangeComparator, options);
                });
              });
            });
          });
        }
        test(version) {
          if (!version) {
            return false;
          }
          if (typeof version === "string") {
            try {
              version = new SemVer(version, this.options);
            } catch (er) {
              return false;
            }
          }
          for (let i = 0;i < this.set.length; i++) {
            if (testSet(this.set[i], version, this.options)) {
              return true;
            }
          }
          return false;
        }
      };
      module22.exports = Range;
      var LRU = require_lrucache();
      var cache = new LRU;
      var parseOptions = require_parse_options();
      var Comparator = require_comparator();
      var debug = require_debug();
      var SemVer = require_semver();
      var {
        safeRe: re,
        t,
        comparatorTrimReplace,
        tildeTrimReplace,
        caretTrimReplace
      } = require_re();
      var { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require_constants3();
      var isNullSet = (c) => c.value === "<0.0.0-0";
      var isAny = (c) => c.value === "";
      var isSatisfiable = (comparators, options) => {
        let result2 = true;
        const remainingComparators = comparators.slice();
        let testComparator = remainingComparators.pop();
        while (result2 && remainingComparators.length) {
          result2 = remainingComparators.every((otherComparator) => {
            return testComparator.intersects(otherComparator, options);
          });
          testComparator = remainingComparators.pop();
        }
        return result2;
      };
      var parseComparator = (comp, options) => {
        debug("comp", comp, options);
        comp = replaceCarets(comp, options);
        debug("caret", comp);
        comp = replaceTildes(comp, options);
        debug("tildes", comp);
        comp = replaceXRanges(comp, options);
        debug("xrange", comp);
        comp = replaceStars(comp, options);
        debug("stars", comp);
        return comp;
      };
      var isX = (id) => !id || id.toLowerCase() === "x" || id === "*";
      var replaceTildes = (comp, options) => {
        return comp.trim().split(/\s+/).map((c) => replaceTilde(c, options)).join(" ");
      };
      var replaceTilde = (comp, options) => {
        const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
        return comp.replace(r, (_, M, m, p, pr) => {
          debug("tilde", comp, _, M, m, p, pr);
          let ret;
          if (isX(M)) {
            ret = "";
          } else if (isX(m)) {
            ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
          } else if (isX(p)) {
            ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
          } else if (pr) {
            debug("replaceTilde pr", pr);
            ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
          } else {
            ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
          }
          debug("tilde return", ret);
          return ret;
        });
      };
      var replaceCarets = (comp, options) => {
        return comp.trim().split(/\s+/).map((c) => replaceCaret(c, options)).join(" ");
      };
      var replaceCaret = (comp, options) => {
        debug("caret", comp, options);
        const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
        const z = options.includePrerelease ? "-0" : "";
        return comp.replace(r, (_, M, m, p, pr) => {
          debug("caret", comp, _, M, m, p, pr);
          let ret;
          if (isX(M)) {
            ret = "";
          } else if (isX(m)) {
            ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
          } else if (isX(p)) {
            if (M === "0") {
              ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
            } else {
              ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
            }
          } else if (pr) {
            debug("replaceCaret pr", pr);
            if (M === "0") {
              if (m === "0") {
                ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
              } else {
                ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
              }
            } else {
              ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
            }
          } else {
            debug("no pr");
            if (M === "0") {
              if (m === "0") {
                ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
              } else {
                ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
              }
            } else {
              ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
            }
          }
          debug("caret return", ret);
          return ret;
        });
      };
      var replaceXRanges = (comp, options) => {
        debug("replaceXRanges", comp, options);
        return comp.split(/\s+/).map((c) => replaceXRange(c, options)).join(" ");
      };
      var replaceXRange = (comp, options) => {
        comp = comp.trim();
        const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
        return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
          debug("xRange", comp, ret, gtlt, M, m, p, pr);
          const xM = isX(M);
          const xm = xM || isX(m);
          const xp = xm || isX(p);
          const anyX = xp;
          if (gtlt === "=" && anyX) {
            gtlt = "";
          }
          pr = options.includePrerelease ? "-0" : "";
          if (xM) {
            if (gtlt === ">" || gtlt === "<") {
              ret = "<0.0.0-0";
            } else {
              ret = "*";
            }
          } else if (gtlt && anyX) {
            if (xm) {
              m = 0;
            }
            p = 0;
            if (gtlt === ">") {
              gtlt = ">=";
              if (xm) {
                M = +M + 1;
                m = 0;
                p = 0;
              } else {
                m = +m + 1;
                p = 0;
              }
            } else if (gtlt === "<=") {
              gtlt = "<";
              if (xm) {
                M = +M + 1;
              } else {
                m = +m + 1;
              }
            }
            if (gtlt === "<") {
              pr = "-0";
            }
            ret = `${gtlt + M}.${m}.${p}${pr}`;
          } else if (xm) {
            ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
          } else if (xp) {
            ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
          }
          debug("xRange return", ret);
          return ret;
        });
      };
      var replaceStars = (comp, options) => {
        debug("replaceStars", comp, options);
        return comp.trim().replace(re[t.STAR], "");
      };
      var replaceGTE0 = (comp, options) => {
        debug("replaceGTE0", comp, options);
        return comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], "");
      };
      var hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr) => {
        if (isX(fM)) {
          from = "";
        } else if (isX(fm)) {
          from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
        } else if (isX(fp)) {
          from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
        } else if (fpr) {
          from = `>=${from}`;
        } else {
          from = `>=${from}${incPr ? "-0" : ""}`;
        }
        if (isX(tM)) {
          to = "";
        } else if (isX(tm)) {
          to = `<${+tM + 1}.0.0-0`;
        } else if (isX(tp)) {
          to = `<${tM}.${+tm + 1}.0-0`;
        } else if (tpr) {
          to = `<=${tM}.${tm}.${tp}-${tpr}`;
        } else if (incPr) {
          to = `<${tM}.${tm}.${+tp + 1}-0`;
        } else {
          to = `<=${to}`;
        }
        return `${from} ${to}`.trim();
      };
      var testSet = (set, version, options) => {
        for (let i = 0;i < set.length; i++) {
          if (!set[i].test(version)) {
            return false;
          }
        }
        if (version.prerelease.length && !options.includePrerelease) {
          for (let i = 0;i < set.length; i++) {
            debug(set[i].semver);
            if (set[i].semver === Comparator.ANY) {
              continue;
            }
            if (set[i].semver.prerelease.length > 0) {
              const allowed = set[i].semver;
              if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
                return true;
              }
            }
          }
          return false;
        }
        return true;
      };
    }
  });
  var require_comparator = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/comparator.js"(exports22, module22) {
      var ANY = Symbol("SemVer ANY");
      var Comparator = class _Comparator {
        static get ANY() {
          return ANY;
        }
        constructor(comp, options) {
          options = parseOptions(options);
          if (comp instanceof _Comparator) {
            if (comp.loose === !!options.loose) {
              return comp;
            } else {
              comp = comp.value;
            }
          }
          comp = comp.trim().split(/\s+/).join(" ");
          debug("comparator", comp, options);
          this.options = options;
          this.loose = !!options.loose;
          this.parse(comp);
          if (this.semver === ANY) {
            this.value = "";
          } else {
            this.value = this.operator + this.semver.version;
          }
          debug("comp", this);
        }
        parse(comp) {
          const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
          const m = comp.match(r);
          if (!m) {
            throw new TypeError(`Invalid comparator: ${comp}`);
          }
          this.operator = m[1] !== undefined ? m[1] : "";
          if (this.operator === "=") {
            this.operator = "";
          }
          if (!m[2]) {
            this.semver = ANY;
          } else {
            this.semver = new SemVer(m[2], this.options.loose);
          }
        }
        toString() {
          return this.value;
        }
        test(version) {
          debug("Comparator.test", version, this.options.loose);
          if (this.semver === ANY || version === ANY) {
            return true;
          }
          if (typeof version === "string") {
            try {
              version = new SemVer(version, this.options);
            } catch (er) {
              return false;
            }
          }
          return cmp(version, this.operator, this.semver, this.options);
        }
        intersects(comp, options) {
          if (!(comp instanceof _Comparator)) {
            throw new TypeError("a Comparator is required");
          }
          if (this.operator === "") {
            if (this.value === "") {
              return true;
            }
            return new Range(comp.value, options).test(this.value);
          } else if (comp.operator === "") {
            if (comp.value === "") {
              return true;
            }
            return new Range(this.value, options).test(comp.semver);
          }
          options = parseOptions(options);
          if (options.includePrerelease && (this.value === "<0.0.0-0" || comp.value === "<0.0.0-0")) {
            return false;
          }
          if (!options.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))) {
            return false;
          }
          if (this.operator.startsWith(">") && comp.operator.startsWith(">")) {
            return true;
          }
          if (this.operator.startsWith("<") && comp.operator.startsWith("<")) {
            return true;
          }
          if (this.semver.version === comp.semver.version && this.operator.includes("=") && comp.operator.includes("=")) {
            return true;
          }
          if (cmp(this.semver, "<", comp.semver, options) && this.operator.startsWith(">") && comp.operator.startsWith("<")) {
            return true;
          }
          if (cmp(this.semver, ">", comp.semver, options) && this.operator.startsWith("<") && comp.operator.startsWith(">")) {
            return true;
          }
          return false;
        }
      };
      module22.exports = Comparator;
      var parseOptions = require_parse_options();
      var { safeRe: re, t } = require_re();
      var cmp = require_cmp();
      var debug = require_debug();
      var SemVer = require_semver();
      var Range = require_range();
    }
  });
  var require_satisfies = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/satisfies.js"(exports22, module22) {
      var Range = require_range();
      var satisfies = (version, range, options) => {
        try {
          range = new Range(range, options);
        } catch (er) {
          return false;
        }
        return range.test(version);
      };
      module22.exports = satisfies;
    }
  });
  var require_to_comparators = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/to-comparators.js"(exports22, module22) {
      var Range = require_range();
      var toComparators = (range, options) => new Range(range, options).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" "));
      module22.exports = toComparators;
    }
  });
  var require_max_satisfying = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/max-satisfying.js"(exports22, module22) {
      var SemVer = require_semver();
      var Range = require_range();
      var maxSatisfying = (versions, range, options) => {
        let max = null;
        let maxSV = null;
        let rangeObj = null;
        try {
          rangeObj = new Range(range, options);
        } catch (er) {
          return null;
        }
        versions.forEach((v) => {
          if (rangeObj.test(v)) {
            if (!max || maxSV.compare(v) === -1) {
              max = v;
              maxSV = new SemVer(max, options);
            }
          }
        });
        return max;
      };
      module22.exports = maxSatisfying;
    }
  });
  var require_min_satisfying = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/min-satisfying.js"(exports22, module22) {
      var SemVer = require_semver();
      var Range = require_range();
      var minSatisfying = (versions, range, options) => {
        let min = null;
        let minSV = null;
        let rangeObj = null;
        try {
          rangeObj = new Range(range, options);
        } catch (er) {
          return null;
        }
        versions.forEach((v) => {
          if (rangeObj.test(v)) {
            if (!min || minSV.compare(v) === 1) {
              min = v;
              minSV = new SemVer(min, options);
            }
          }
        });
        return min;
      };
      module22.exports = minSatisfying;
    }
  });
  var require_min_version = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/min-version.js"(exports22, module22) {
      var SemVer = require_semver();
      var Range = require_range();
      var gt = require_gt();
      var minVersion = (range, loose) => {
        range = new Range(range, loose);
        let minver = new SemVer("0.0.0");
        if (range.test(minver)) {
          return minver;
        }
        minver = new SemVer("0.0.0-0");
        if (range.test(minver)) {
          return minver;
        }
        minver = null;
        for (let i = 0;i < range.set.length; ++i) {
          const comparators = range.set[i];
          let setMin = null;
          comparators.forEach((comparator) => {
            const compver = new SemVer(comparator.semver.version);
            switch (comparator.operator) {
              case ">":
                if (compver.prerelease.length === 0) {
                  compver.patch++;
                } else {
                  compver.prerelease.push(0);
                }
                compver.raw = compver.format();
              case "":
              case ">=":
                if (!setMin || gt(compver, setMin)) {
                  setMin = compver;
                }
                break;
              case "<":
              case "<=":
                break;
              default:
                throw new Error(`Unexpected operation: ${comparator.operator}`);
            }
          });
          if (setMin && (!minver || gt(minver, setMin))) {
            minver = setMin;
          }
        }
        if (minver && range.test(minver)) {
          return minver;
        }
        return null;
      };
      module22.exports = minVersion;
    }
  });
  var require_valid2 = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/valid.js"(exports22, module22) {
      var Range = require_range();
      var validRange = (range, options) => {
        try {
          return new Range(range, options).range || "*";
        } catch (er) {
          return null;
        }
      };
      module22.exports = validRange;
    }
  });
  var require_outside = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/outside.js"(exports22, module22) {
      var SemVer = require_semver();
      var Comparator = require_comparator();
      var { ANY } = Comparator;
      var Range = require_range();
      var satisfies = require_satisfies();
      var gt = require_gt();
      var lt = require_lt();
      var lte = require_lte();
      var gte = require_gte();
      var outside = (version, range, hilo, options) => {
        version = new SemVer(version, options);
        range = new Range(range, options);
        let gtfn, ltefn, ltfn, comp, ecomp;
        switch (hilo) {
          case ">":
            gtfn = gt;
            ltefn = lte;
            ltfn = lt;
            comp = ">";
            ecomp = ">=";
            break;
          case "<":
            gtfn = lt;
            ltefn = gte;
            ltfn = gt;
            comp = "<";
            ecomp = "<=";
            break;
          default:
            throw new TypeError('Must provide a hilo val of "<" or ">"');
        }
        if (satisfies(version, range, options)) {
          return false;
        }
        for (let i = 0;i < range.set.length; ++i) {
          const comparators = range.set[i];
          let high = null;
          let low = null;
          comparators.forEach((comparator) => {
            if (comparator.semver === ANY) {
              comparator = new Comparator(">=0.0.0");
            }
            high = high || comparator;
            low = low || comparator;
            if (gtfn(comparator.semver, high.semver, options)) {
              high = comparator;
            } else if (ltfn(comparator.semver, low.semver, options)) {
              low = comparator;
            }
          });
          if (high.operator === comp || high.operator === ecomp) {
            return false;
          }
          if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
            return false;
          } else if (low.operator === ecomp && ltfn(version, low.semver)) {
            return false;
          }
        }
        return true;
      };
      module22.exports = outside;
    }
  });
  var require_gtr = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/gtr.js"(exports22, module22) {
      var outside = require_outside();
      var gtr = (version, range, options) => outside(version, range, ">", options);
      module22.exports = gtr;
    }
  });
  var require_ltr = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/ltr.js"(exports22, module22) {
      var outside = require_outside();
      var ltr = (version, range, options) => outside(version, range, "<", options);
      module22.exports = ltr;
    }
  });
  var require_intersects = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/intersects.js"(exports22, module22) {
      var Range = require_range();
      var intersects = (r1, r2, options) => {
        r1 = new Range(r1, options);
        r2 = new Range(r2, options);
        return r1.intersects(r2, options);
      };
      module22.exports = intersects;
    }
  });
  var require_simplify = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/simplify.js"(exports22, module22) {
      var satisfies = require_satisfies();
      var compare = require_compare();
      module22.exports = (versions, range, options) => {
        const set = [];
        let first = null;
        let prev = null;
        const v = versions.sort((a, b) => compare(a, b, options));
        for (const version of v) {
          const included = satisfies(version, range, options);
          if (included) {
            prev = version;
            if (!first) {
              first = version;
            }
          } else {
            if (prev) {
              set.push([first, prev]);
            }
            prev = null;
            first = null;
          }
        }
        if (first) {
          set.push([first, null]);
        }
        const ranges = [];
        for (const [min, max] of set) {
          if (min === max) {
            ranges.push(min);
          } else if (!max && min === v[0]) {
            ranges.push("*");
          } else if (!max) {
            ranges.push(`>=${min}`);
          } else if (min === v[0]) {
            ranges.push(`<=${max}`);
          } else {
            ranges.push(`${min} - ${max}`);
          }
        }
        const simplified = ranges.join(" || ");
        const original = typeof range.raw === "string" ? range.raw : String(range);
        return simplified.length < original.length ? simplified : range;
      };
    }
  });
  var require_subset = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/subset.js"(exports22, module22) {
      var Range = require_range();
      var Comparator = require_comparator();
      var { ANY } = Comparator;
      var satisfies = require_satisfies();
      var compare = require_compare();
      var subset = (sub, dom, options = {}) => {
        if (sub === dom) {
          return true;
        }
        sub = new Range(sub, options);
        dom = new Range(dom, options);
        let sawNonNull = false;
        OUTER:
          for (const simpleSub of sub.set) {
            for (const simpleDom of dom.set) {
              const isSub = simpleSubset(simpleSub, simpleDom, options);
              sawNonNull = sawNonNull || isSub !== null;
              if (isSub) {
                continue OUTER;
              }
            }
            if (sawNonNull) {
              return false;
            }
          }
        return true;
      };
      var minimumVersionWithPreRelease = [new Comparator(">=0.0.0-0")];
      var minimumVersion = [new Comparator(">=0.0.0")];
      var simpleSubset = (sub, dom, options) => {
        if (sub === dom) {
          return true;
        }
        if (sub.length === 1 && sub[0].semver === ANY) {
          if (dom.length === 1 && dom[0].semver === ANY) {
            return true;
          } else if (options.includePrerelease) {
            sub = minimumVersionWithPreRelease;
          } else {
            sub = minimumVersion;
          }
        }
        if (dom.length === 1 && dom[0].semver === ANY) {
          if (options.includePrerelease) {
            return true;
          } else {
            dom = minimumVersion;
          }
        }
        const eqSet = /* @__PURE__ */ new Set;
        let gt, lt;
        for (const c of sub) {
          if (c.operator === ">" || c.operator === ">=") {
            gt = higherGT(gt, c, options);
          } else if (c.operator === "<" || c.operator === "<=") {
            lt = lowerLT(lt, c, options);
          } else {
            eqSet.add(c.semver);
          }
        }
        if (eqSet.size > 1) {
          return null;
        }
        let gtltComp;
        if (gt && lt) {
          gtltComp = compare(gt.semver, lt.semver, options);
          if (gtltComp > 0) {
            return null;
          } else if (gtltComp === 0 && (gt.operator !== ">=" || lt.operator !== "<=")) {
            return null;
          }
        }
        for (const eq of eqSet) {
          if (gt && !satisfies(eq, String(gt), options)) {
            return null;
          }
          if (lt && !satisfies(eq, String(lt), options)) {
            return null;
          }
          for (const c of dom) {
            if (!satisfies(eq, String(c), options)) {
              return false;
            }
          }
          return true;
        }
        let higher, lower;
        let hasDomLT, hasDomGT;
        let needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;
        let needDomGTPre = gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false;
        if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === "<" && needDomLTPre.prerelease[0] === 0) {
          needDomLTPre = false;
        }
        for (const c of dom) {
          hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=";
          hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=";
          if (gt) {
            if (needDomGTPre) {
              if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) {
                needDomGTPre = false;
              }
            }
            if (c.operator === ">" || c.operator === ">=") {
              higher = higherGT(gt, c, options);
              if (higher === c && higher !== gt) {
                return false;
              }
            } else if (gt.operator === ">=" && !satisfies(gt.semver, String(c), options)) {
              return false;
            }
          }
          if (lt) {
            if (needDomLTPre) {
              if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) {
                needDomLTPre = false;
              }
            }
            if (c.operator === "<" || c.operator === "<=") {
              lower = lowerLT(lt, c, options);
              if (lower === c && lower !== lt) {
                return false;
              }
            } else if (lt.operator === "<=" && !satisfies(lt.semver, String(c), options)) {
              return false;
            }
          }
          if (!c.operator && (lt || gt) && gtltComp !== 0) {
            return false;
          }
        }
        if (gt && hasDomLT && !lt && gtltComp !== 0) {
          return false;
        }
        if (lt && hasDomGT && !gt && gtltComp !== 0) {
          return false;
        }
        if (needDomGTPre || needDomLTPre) {
          return false;
        }
        return true;
      };
      var higherGT = (a, b, options) => {
        if (!a) {
          return b;
        }
        const comp = compare(a.semver, b.semver, options);
        return comp > 0 ? a : comp < 0 ? b : b.operator === ">" && a.operator === ">=" ? b : a;
      };
      var lowerLT = (a, b, options) => {
        if (!a) {
          return b;
        }
        const comp = compare(a.semver, b.semver, options);
        return comp < 0 ? a : comp > 0 ? b : b.operator === "<" && a.operator === "<=" ? b : a;
      };
      module22.exports = subset;
    }
  });
  var require_semver2 = __commonJS2({
    "../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/index.js"(exports22, module22) {
      var internalRe = require_re();
      var constants = require_constants3();
      var SemVer = require_semver();
      var identifiers = require_identifiers();
      var parse = require_parse2();
      var valid = require_valid();
      var clean = require_clean();
      var inc = require_inc();
      var diff = require_diff();
      var major = require_major();
      var minor = require_minor();
      var patch = require_patch();
      var prerelease = require_prerelease();
      var compare = require_compare();
      var rcompare = require_rcompare();
      var compareLoose = require_compare_loose();
      var compareBuild = require_compare_build();
      var sort = require_sort();
      var rsort = require_rsort();
      var gt = require_gt();
      var lt = require_lt();
      var eq = require_eq();
      var neq = require_neq();
      var gte = require_gte();
      var lte = require_lte();
      var cmp = require_cmp();
      var coerce = require_coerce();
      var Comparator = require_comparator();
      var Range = require_range();
      var satisfies = require_satisfies();
      var toComparators = require_to_comparators();
      var maxSatisfying = require_max_satisfying();
      var minSatisfying = require_min_satisfying();
      var minVersion = require_min_version();
      var validRange = require_valid2();
      var outside = require_outside();
      var gtr = require_gtr();
      var ltr = require_ltr();
      var intersects = require_intersects();
      var simplifyRange = require_simplify();
      var subset = require_subset();
      module22.exports = {
        parse,
        valid,
        clean,
        inc,
        diff,
        major,
        minor,
        patch,
        prerelease,
        compare,
        rcompare,
        compareLoose,
        compareBuild,
        sort,
        rsort,
        gt,
        lt,
        eq,
        neq,
        gte,
        lte,
        cmp,
        coerce,
        Comparator,
        Range,
        satisfies,
        toComparators,
        maxSatisfying,
        minSatisfying,
        minVersion,
        validRange,
        outside,
        gtr,
        ltr,
        intersects,
        simplifyRange,
        subset,
        SemVer,
        re: internalRe.re,
        src: internalRe.src,
        tokens: internalRe.t,
        SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
        RELEASE_TYPES: constants.RELEASE_TYPES,
        compareIdentifiers: identifiers.compareIdentifiers,
        rcompareIdentifiers: identifiers.rcompareIdentifiers
      };
    }
  });
  var require_grammar = __commonJS2({
    "../../node_modules/.pnpm/tinylogic@2.0.0/node_modules/tinylogic/grammar.js"(exports22, module22) {
      function peg$subclass(child, parent) {
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
      }
      function peg$SyntaxError(message, expected, found, location) {
        this.message = message;
        this.expected = expected;
        this.found = found;
        this.location = location;
        this.name = "SyntaxError";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, peg$SyntaxError);
        }
      }
      peg$subclass(peg$SyntaxError, Error);
      peg$SyntaxError.buildMessage = function(expected, found) {
        var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return '"' + literalEscape(expectation.text) + '"';
          },
          class: function(expectation) {
            var escapedParts = "", i;
            for (i = 0;i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);
            }
            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },
          any: function(expectation) {
            return "any character";
          },
          end: function(expectation) {
            return "end of input";
          },
          other: function(expectation) {
            return expectation.description;
          }
        };
        function hex(ch) {
          return ch.charCodeAt(0).toString(16).toUpperCase();
        }
        function literalEscape(s) {
          return s.replace(/\\/g, "\\\\").replace(/"/g, "\\\"").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
            return "\\x0" + hex(ch);
          }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
            return "\\x" + hex(ch);
          });
        }
        function classEscape(s) {
          return s.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
            return "\\x0" + hex(ch);
          }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
            return "\\x" + hex(ch);
          });
        }
        function describeExpectation(expectation) {
          return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
        }
        function describeExpected(expected2) {
          var descriptions = new Array(expected2.length), i, j;
          for (i = 0;i < expected2.length; i++) {
            descriptions[i] = describeExpectation(expected2[i]);
          }
          descriptions.sort();
          if (descriptions.length > 0) {
            for (i = 1, j = 1;i < descriptions.length; i++) {
              if (descriptions[i - 1] !== descriptions[i]) {
                descriptions[j] = descriptions[i];
                j++;
              }
            }
            descriptions.length = j;
          }
          switch (descriptions.length) {
            case 1:
              return descriptions[0];
            case 2:
              return descriptions[0] + " or " + descriptions[1];
            default:
              return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
          }
        }
        function describeFound(found2) {
          return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
        }
        return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
      };
      function peg$parse(input, options) {
        options = options !== undefined ? options : {};
        var peg$FAILED = {}, peg$startRuleFunctions = { Expression: peg$parseExpression }, peg$startRuleFunction = peg$parseExpression, peg$c0 = "|", peg$c1 = peg$literalExpectation("|", false), peg$c2 = "&", peg$c3 = peg$literalExpectation("&", false), peg$c4 = "^", peg$c5 = peg$literalExpectation("^", false), peg$c6 = function(head, tail) {
          return !!tail.reduce((result2, element) => {
            switch (element[1]) {
              case "|":
                return result2 | element[3];
              case "&":
                return result2 & element[3];
              case "^":
                return result2 ^ element[3];
            }
          }, head);
        }, peg$c7 = "!", peg$c8 = peg$literalExpectation("!", false), peg$c9 = function(term) {
          return !term;
        }, peg$c10 = "(", peg$c11 = peg$literalExpectation("(", false), peg$c12 = ")", peg$c13 = peg$literalExpectation(")", false), peg$c14 = function(expr) {
          return expr;
        }, peg$c15 = /^[^ \t\n\r()!|&\^]/, peg$c16 = peg$classExpectation([" ", "\t", `
`, "\r", "(", ")", "!", "|", "&", "^"], true, false), peg$c17 = function(token) {
          return options.queryPattern.test(token);
        }, peg$c18 = function(token) {
          return options.checkFn(token);
        }, peg$c19 = peg$otherExpectation("whitespace"), peg$c20 = /^[ \t\n\r]/, peg$c21 = peg$classExpectation([" ", "\t", `
`, "\r"], false, false), peg$currPos = 0, peg$savedPos = 0, peg$posDetailsCache = [{ line: 1, column: 1 }], peg$maxFailPos = 0, peg$maxFailExpected = [], peg$silentFails = 0, peg$result;
        if ("startRule" in options) {
          if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error(`Can't start parsing from rule "` + options.startRule + '".');
          }
          peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }
        function text() {
          return input.substring(peg$savedPos, peg$currPos);
        }
        function location() {
          return peg$computeLocation(peg$savedPos, peg$currPos);
        }
        function expected(description, location2) {
          location2 = location2 !== undefined ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
          throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location2);
        }
        function error(message, location2) {
          location2 = location2 !== undefined ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
          throw peg$buildSimpleError(message, location2);
        }
        function peg$literalExpectation(text2, ignoreCase) {
          return { type: "literal", text: text2, ignoreCase };
        }
        function peg$classExpectation(parts, inverted, ignoreCase) {
          return { type: "class", parts, inverted, ignoreCase };
        }
        function peg$anyExpectation() {
          return { type: "any" };
        }
        function peg$endExpectation() {
          return { type: "end" };
        }
        function peg$otherExpectation(description) {
          return { type: "other", description };
        }
        function peg$computePosDetails(pos) {
          var details = peg$posDetailsCache[pos], p;
          if (details) {
            return details;
          } else {
            p = pos - 1;
            while (!peg$posDetailsCache[p]) {
              p--;
            }
            details = peg$posDetailsCache[p];
            details = {
              line: details.line,
              column: details.column
            };
            while (p < pos) {
              if (input.charCodeAt(p) === 10) {
                details.line++;
                details.column = 1;
              } else {
                details.column++;
              }
              p++;
            }
            peg$posDetailsCache[pos] = details;
            return details;
          }
        }
        function peg$computeLocation(startPos, endPos) {
          var startPosDetails = peg$computePosDetails(startPos), endPosDetails = peg$computePosDetails(endPos);
          return {
            start: {
              offset: startPos,
              line: startPosDetails.line,
              column: startPosDetails.column
            },
            end: {
              offset: endPos,
              line: endPosDetails.line,
              column: endPosDetails.column
            }
          };
        }
        function peg$fail(expected2) {
          if (peg$currPos < peg$maxFailPos) {
            return;
          }
          if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
          }
          peg$maxFailExpected.push(expected2);
        }
        function peg$buildSimpleError(message, location2) {
          return new peg$SyntaxError(message, null, null, location2);
        }
        function peg$buildStructuredError(expected2, found, location2) {
          return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected2, found), expected2, found, location2);
        }
        function peg$parseExpression() {
          var s0, s1, s2, s3, s4, s5, s6, s7;
          s0 = peg$currPos;
          s1 = peg$parseTerm();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 124) {
                s5 = peg$c0;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c1);
                }
              }
              if (s5 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 38) {
                  s5 = peg$c2;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c3);
                  }
                }
                if (s5 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 94) {
                    s5 = peg$c4;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c5);
                    }
                  }
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseTerm();
                  if (s7 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$currPos;
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 124) {
                  s5 = peg$c0;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c1);
                  }
                }
                if (s5 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 38) {
                    s5 = peg$c2;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c3);
                    }
                  }
                  if (s5 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 94) {
                      s5 = peg$c4;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c5);
                      }
                    }
                  }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseTerm();
                    if (s7 !== peg$FAILED) {
                      s4 = [s4, s5, s6, s7];
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c6(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseTerm() {
          var s0, s1, s2, s3, s4, s5;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 33) {
            s1 = peg$c7;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c8);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseTerm();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c9(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 40) {
              s1 = peg$c10;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c11);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseExpression();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse_();
                  if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s5 = peg$c12;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c13);
                      }
                    }
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c14(s3);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parseToken();
            }
          }
          return s0;
        }
        function peg$parseToken() {
          var s0, s1, s2, s3, s4;
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            if (peg$c15.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c16);
              }
            }
            if (s4 !== peg$FAILED) {
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                if (peg$c15.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c16);
                  }
                }
              }
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s2 = input.substring(s2, peg$currPos);
            } else {
              s2 = s3;
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = peg$currPos;
              s3 = peg$c17(s2);
              if (s3) {
                s3 = undefined;
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c18(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parse_() {
          var s0, s1;
          peg$silentFails++;
          s0 = [];
          if (peg$c20.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c21);
            }
          }
          while (s1 !== peg$FAILED) {
            s0.push(s1);
            if (peg$c20.test(input.charAt(peg$currPos))) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c21);
              }
            }
          }
          peg$silentFails--;
          if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c19);
            }
          }
          return s0;
        }
        peg$result = peg$startRuleFunction();
        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
          return peg$result;
        } else {
          if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$fail(peg$endExpectation());
          }
          throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
        }
      }
      module22.exports = {
        SyntaxError: peg$SyntaxError,
        parse: peg$parse
      };
    }
  });
  var require_tinylogic = __commonJS2({
    "../../node_modules/.pnpm/tinylogic@2.0.0/node_modules/tinylogic/index.js"(exports22) {
      var { parse } = require_grammar();
      exports22.makeParser = (queryPattern = /[a-z]+/) => {
        return (str, checkFn) => parse(str, { queryPattern, checkFn });
      };
      exports22.parse = exports22.makeParser();
    }
  });
  var require_color_name = __commonJS2({
    "../../node_modules/.pnpm/color-name@1.1.4/node_modules/color-name/index.js"(exports22, module22) {
      module22.exports = {
        aliceblue: [240, 248, 255],
        antiquewhite: [250, 235, 215],
        aqua: [0, 255, 255],
        aquamarine: [127, 255, 212],
        azure: [240, 255, 255],
        beige: [245, 245, 220],
        bisque: [255, 228, 196],
        black: [0, 0, 0],
        blanchedalmond: [255, 235, 205],
        blue: [0, 0, 255],
        blueviolet: [138, 43, 226],
        brown: [165, 42, 42],
        burlywood: [222, 184, 135],
        cadetblue: [95, 158, 160],
        chartreuse: [127, 255, 0],
        chocolate: [210, 105, 30],
        coral: [255, 127, 80],
        cornflowerblue: [100, 149, 237],
        cornsilk: [255, 248, 220],
        crimson: [220, 20, 60],
        cyan: [0, 255, 255],
        darkblue: [0, 0, 139],
        darkcyan: [0, 139, 139],
        darkgoldenrod: [184, 134, 11],
        darkgray: [169, 169, 169],
        darkgreen: [0, 100, 0],
        darkgrey: [169, 169, 169],
        darkkhaki: [189, 183, 107],
        darkmagenta: [139, 0, 139],
        darkolivegreen: [85, 107, 47],
        darkorange: [255, 140, 0],
        darkorchid: [153, 50, 204],
        darkred: [139, 0, 0],
        darksalmon: [233, 150, 122],
        darkseagreen: [143, 188, 143],
        darkslateblue: [72, 61, 139],
        darkslategray: [47, 79, 79],
        darkslategrey: [47, 79, 79],
        darkturquoise: [0, 206, 209],
        darkviolet: [148, 0, 211],
        deeppink: [255, 20, 147],
        deepskyblue: [0, 191, 255],
        dimgray: [105, 105, 105],
        dimgrey: [105, 105, 105],
        dodgerblue: [30, 144, 255],
        firebrick: [178, 34, 34],
        floralwhite: [255, 250, 240],
        forestgreen: [34, 139, 34],
        fuchsia: [255, 0, 255],
        gainsboro: [220, 220, 220],
        ghostwhite: [248, 248, 255],
        gold: [255, 215, 0],
        goldenrod: [218, 165, 32],
        gray: [128, 128, 128],
        green: [0, 128, 0],
        greenyellow: [173, 255, 47],
        grey: [128, 128, 128],
        honeydew: [240, 255, 240],
        hotpink: [255, 105, 180],
        indianred: [205, 92, 92],
        indigo: [75, 0, 130],
        ivory: [255, 255, 240],
        khaki: [240, 230, 140],
        lavender: [230, 230, 250],
        lavenderblush: [255, 240, 245],
        lawngreen: [124, 252, 0],
        lemonchiffon: [255, 250, 205],
        lightblue: [173, 216, 230],
        lightcoral: [240, 128, 128],
        lightcyan: [224, 255, 255],
        lightgoldenrodyellow: [250, 250, 210],
        lightgray: [211, 211, 211],
        lightgreen: [144, 238, 144],
        lightgrey: [211, 211, 211],
        lightpink: [255, 182, 193],
        lightsalmon: [255, 160, 122],
        lightseagreen: [32, 178, 170],
        lightskyblue: [135, 206, 250],
        lightslategray: [119, 136, 153],
        lightslategrey: [119, 136, 153],
        lightsteelblue: [176, 196, 222],
        lightyellow: [255, 255, 224],
        lime: [0, 255, 0],
        limegreen: [50, 205, 50],
        linen: [250, 240, 230],
        magenta: [255, 0, 255],
        maroon: [128, 0, 0],
        mediumaquamarine: [102, 205, 170],
        mediumblue: [0, 0, 205],
        mediumorchid: [186, 85, 211],
        mediumpurple: [147, 112, 219],
        mediumseagreen: [60, 179, 113],
        mediumslateblue: [123, 104, 238],
        mediumspringgreen: [0, 250, 154],
        mediumturquoise: [72, 209, 204],
        mediumvioletred: [199, 21, 133],
        midnightblue: [25, 25, 112],
        mintcream: [245, 255, 250],
        mistyrose: [255, 228, 225],
        moccasin: [255, 228, 181],
        navajowhite: [255, 222, 173],
        navy: [0, 0, 128],
        oldlace: [253, 245, 230],
        olive: [128, 128, 0],
        olivedrab: [107, 142, 35],
        orange: [255, 165, 0],
        orangered: [255, 69, 0],
        orchid: [218, 112, 214],
        palegoldenrod: [238, 232, 170],
        palegreen: [152, 251, 152],
        paleturquoise: [175, 238, 238],
        palevioletred: [219, 112, 147],
        papayawhip: [255, 239, 213],
        peachpuff: [255, 218, 185],
        peru: [205, 133, 63],
        pink: [255, 192, 203],
        plum: [221, 160, 221],
        powderblue: [176, 224, 230],
        purple: [128, 0, 128],
        rebeccapurple: [102, 51, 153],
        red: [255, 0, 0],
        rosybrown: [188, 143, 143],
        royalblue: [65, 105, 225],
        saddlebrown: [139, 69, 19],
        salmon: [250, 128, 114],
        sandybrown: [244, 164, 96],
        seagreen: [46, 139, 87],
        seashell: [255, 245, 238],
        sienna: [160, 82, 45],
        silver: [192, 192, 192],
        skyblue: [135, 206, 235],
        slateblue: [106, 90, 205],
        slategray: [112, 128, 144],
        slategrey: [112, 128, 144],
        snow: [255, 250, 250],
        springgreen: [0, 255, 127],
        steelblue: [70, 130, 180],
        tan: [210, 180, 140],
        teal: [0, 128, 128],
        thistle: [216, 191, 216],
        tomato: [255, 99, 71],
        turquoise: [64, 224, 208],
        violet: [238, 130, 238],
        wheat: [245, 222, 179],
        white: [255, 255, 255],
        whitesmoke: [245, 245, 245],
        yellow: [255, 255, 0],
        yellowgreen: [154, 205, 50]
      };
    }
  });
  var require_conversions = __commonJS2({
    "../../node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/conversions.js"(exports22, module22) {
      var cssKeywords = require_color_name();
      var reverseKeywords = {};
      for (const key of Object.keys(cssKeywords)) {
        reverseKeywords[cssKeywords[key]] = key;
      }
      var convert = {
        rgb: { channels: 3, labels: "rgb" },
        hsl: { channels: 3, labels: "hsl" },
        hsv: { channels: 3, labels: "hsv" },
        hwb: { channels: 3, labels: "hwb" },
        cmyk: { channels: 4, labels: "cmyk" },
        xyz: { channels: 3, labels: "xyz" },
        lab: { channels: 3, labels: "lab" },
        lch: { channels: 3, labels: "lch" },
        hex: { channels: 1, labels: ["hex"] },
        keyword: { channels: 1, labels: ["keyword"] },
        ansi16: { channels: 1, labels: ["ansi16"] },
        ansi256: { channels: 1, labels: ["ansi256"] },
        hcg: { channels: 3, labels: ["h", "c", "g"] },
        apple: { channels: 3, labels: ["r16", "g16", "b16"] },
        gray: { channels: 1, labels: ["gray"] }
      };
      module22.exports = convert;
      for (const model of Object.keys(convert)) {
        if (!("channels" in convert[model])) {
          throw new Error("missing channels property: " + model);
        }
        if (!("labels" in convert[model])) {
          throw new Error("missing channel labels property: " + model);
        }
        if (convert[model].labels.length !== convert[model].channels) {
          throw new Error("channel and label counts mismatch: " + model);
        }
        const { channels, labels } = convert[model];
        delete convert[model].channels;
        delete convert[model].labels;
        Object.defineProperty(convert[model], "channels", { value: channels });
        Object.defineProperty(convert[model], "labels", { value: labels });
      }
      convert.rgb.hsl = function(rgb) {
        const r = rgb[0] / 255;
        const g = rgb[1] / 255;
        const b = rgb[2] / 255;
        const min = Math.min(r, g, b);
        const max = Math.max(r, g, b);
        const delta = max - min;
        let h;
        let s;
        if (max === min) {
          h = 0;
        } else if (r === max) {
          h = (g - b) / delta;
        } else if (g === max) {
          h = 2 + (b - r) / delta;
        } else if (b === max) {
          h = 4 + (r - g) / delta;
        }
        h = Math.min(h * 60, 360);
        if (h < 0) {
          h += 360;
        }
        const l = (min + max) / 2;
        if (max === min) {
          s = 0;
        } else if (l <= 0.5) {
          s = delta / (max + min);
        } else {
          s = delta / (2 - max - min);
        }
        return [h, s * 100, l * 100];
      };
      convert.rgb.hsv = function(rgb) {
        let rdif;
        let gdif;
        let bdif;
        let h;
        let s;
        const r = rgb[0] / 255;
        const g = rgb[1] / 255;
        const b = rgb[2] / 255;
        const v = Math.max(r, g, b);
        const diff = v - Math.min(r, g, b);
        const diffc = function(c) {
          return (v - c) / 6 / diff + 1 / 2;
        };
        if (diff === 0) {
          h = 0;
          s = 0;
        } else {
          s = diff / v;
          rdif = diffc(r);
          gdif = diffc(g);
          bdif = diffc(b);
          if (r === v) {
            h = bdif - gdif;
          } else if (g === v) {
            h = 1 / 3 + rdif - bdif;
          } else if (b === v) {
            h = 2 / 3 + gdif - rdif;
          }
          if (h < 0) {
            h += 1;
          } else if (h > 1) {
            h -= 1;
          }
        }
        return [
          h * 360,
          s * 100,
          v * 100
        ];
      };
      convert.rgb.hwb = function(rgb) {
        const r = rgb[0];
        const g = rgb[1];
        let b = rgb[2];
        const h = convert.rgb.hsl(rgb)[0];
        const w = 1 / 255 * Math.min(r, Math.min(g, b));
        b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
        return [h, w * 100, b * 100];
      };
      convert.rgb.cmyk = function(rgb) {
        const r = rgb[0] / 255;
        const g = rgb[1] / 255;
        const b = rgb[2] / 255;
        const k = Math.min(1 - r, 1 - g, 1 - b);
        const c = (1 - r - k) / (1 - k) || 0;
        const m = (1 - g - k) / (1 - k) || 0;
        const y = (1 - b - k) / (1 - k) || 0;
        return [c * 100, m * 100, y * 100, k * 100];
      };
      function comparativeDistance(x, y) {
        return (x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2 + (x[2] - y[2]) ** 2;
      }
      convert.rgb.keyword = function(rgb) {
        const reversed = reverseKeywords[rgb];
        if (reversed) {
          return reversed;
        }
        let currentClosestDistance = Infinity;
        let currentClosestKeyword;
        for (const keyword of Object.keys(cssKeywords)) {
          const value = cssKeywords[keyword];
          const distance = comparativeDistance(rgb, value);
          if (distance < currentClosestDistance) {
            currentClosestDistance = distance;
            currentClosestKeyword = keyword;
          }
        }
        return currentClosestKeyword;
      };
      convert.keyword.rgb = function(keyword) {
        return cssKeywords[keyword];
      };
      convert.rgb.xyz = function(rgb) {
        let r = rgb[0] / 255;
        let g = rgb[1] / 255;
        let b = rgb[2] / 255;
        r = r > 0.04045 ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92;
        g = g > 0.04045 ? ((g + 0.055) / 1.055) ** 2.4 : g / 12.92;
        b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92;
        const x = r * 0.4124 + g * 0.3576 + b * 0.1805;
        const y = r * 0.2126 + g * 0.7152 + b * 0.0722;
        const z = r * 0.0193 + g * 0.1192 + b * 0.9505;
        return [x * 100, y * 100, z * 100];
      };
      convert.rgb.lab = function(rgb) {
        const xyz = convert.rgb.xyz(rgb);
        let x = xyz[0];
        let y = xyz[1];
        let z = xyz[2];
        x /= 95.047;
        y /= 100;
        z /= 108.883;
        x = x > 0.008856 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
        y = y > 0.008856 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
        z = z > 0.008856 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
        const l = 116 * y - 16;
        const a = 500 * (x - y);
        const b = 200 * (y - z);
        return [l, a, b];
      };
      convert.hsl.rgb = function(hsl) {
        const h = hsl[0] / 360;
        const s = hsl[1] / 100;
        const l = hsl[2] / 100;
        let t2;
        let t3;
        let val;
        if (s === 0) {
          val = l * 255;
          return [val, val, val];
        }
        if (l < 0.5) {
          t2 = l * (1 + s);
        } else {
          t2 = l + s - l * s;
        }
        const t1 = 2 * l - t2;
        const rgb = [0, 0, 0];
        for (let i = 0;i < 3; i++) {
          t3 = h + 1 / 3 * -(i - 1);
          if (t3 < 0) {
            t3++;
          }
          if (t3 > 1) {
            t3--;
          }
          if (6 * t3 < 1) {
            val = t1 + (t2 - t1) * 6 * t3;
          } else if (2 * t3 < 1) {
            val = t2;
          } else if (3 * t3 < 2) {
            val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
          } else {
            val = t1;
          }
          rgb[i] = val * 255;
        }
        return rgb;
      };
      convert.hsl.hsv = function(hsl) {
        const h = hsl[0];
        let s = hsl[1] / 100;
        let l = hsl[2] / 100;
        let smin = s;
        const lmin = Math.max(l, 0.01);
        l *= 2;
        s *= l <= 1 ? l : 2 - l;
        smin *= lmin <= 1 ? lmin : 2 - lmin;
        const v = (l + s) / 2;
        const sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
        return [h, sv * 100, v * 100];
      };
      convert.hsv.rgb = function(hsv) {
        const h = hsv[0] / 60;
        const s = hsv[1] / 100;
        let v = hsv[2] / 100;
        const hi = Math.floor(h) % 6;
        const f = h - Math.floor(h);
        const p = 255 * v * (1 - s);
        const q = 255 * v * (1 - s * f);
        const t = 255 * v * (1 - s * (1 - f));
        v *= 255;
        switch (hi) {
          case 0:
            return [v, t, p];
          case 1:
            return [q, v, p];
          case 2:
            return [p, v, t];
          case 3:
            return [p, q, v];
          case 4:
            return [t, p, v];
          case 5:
            return [v, p, q];
        }
      };
      convert.hsv.hsl = function(hsv) {
        const h = hsv[0];
        const s = hsv[1] / 100;
        const v = hsv[2] / 100;
        const vmin = Math.max(v, 0.01);
        let sl;
        let l;
        l = (2 - s) * v;
        const lmin = (2 - s) * vmin;
        sl = s * vmin;
        sl /= lmin <= 1 ? lmin : 2 - lmin;
        sl = sl || 0;
        l /= 2;
        return [h, sl * 100, l * 100];
      };
      convert.hwb.rgb = function(hwb) {
        const h = hwb[0] / 360;
        let wh = hwb[1] / 100;
        let bl = hwb[2] / 100;
        const ratio = wh + bl;
        let f;
        if (ratio > 1) {
          wh /= ratio;
          bl /= ratio;
        }
        const i = Math.floor(6 * h);
        const v = 1 - bl;
        f = 6 * h - i;
        if ((i & 1) !== 0) {
          f = 1 - f;
        }
        const n = wh + f * (v - wh);
        let r;
        let g;
        let b;
        switch (i) {
          default:
          case 6:
          case 0:
            r = v;
            g = n;
            b = wh;
            break;
          case 1:
            r = n;
            g = v;
            b = wh;
            break;
          case 2:
            r = wh;
            g = v;
            b = n;
            break;
          case 3:
            r = wh;
            g = n;
            b = v;
            break;
          case 4:
            r = n;
            g = wh;
            b = v;
            break;
          case 5:
            r = v;
            g = wh;
            b = n;
            break;
        }
        return [r * 255, g * 255, b * 255];
      };
      convert.cmyk.rgb = function(cmyk) {
        const c = cmyk[0] / 100;
        const m = cmyk[1] / 100;
        const y = cmyk[2] / 100;
        const k = cmyk[3] / 100;
        const r = 1 - Math.min(1, c * (1 - k) + k);
        const g = 1 - Math.min(1, m * (1 - k) + k);
        const b = 1 - Math.min(1, y * (1 - k) + k);
        return [r * 255, g * 255, b * 255];
      };
      convert.xyz.rgb = function(xyz) {
        const x = xyz[0] / 100;
        const y = xyz[1] / 100;
        const z = xyz[2] / 100;
        let r;
        let g;
        let b;
        r = x * 3.2406 + y * -1.5372 + z * -0.4986;
        g = x * -0.9689 + y * 1.8758 + z * 0.0415;
        b = x * 0.0557 + y * -0.204 + z * 1.057;
        r = r > 0.0031308 ? 1.055 * r ** (1 / 2.4) - 0.055 : r * 12.92;
        g = g > 0.0031308 ? 1.055 * g ** (1 / 2.4) - 0.055 : g * 12.92;
        b = b > 0.0031308 ? 1.055 * b ** (1 / 2.4) - 0.055 : b * 12.92;
        r = Math.min(Math.max(0, r), 1);
        g = Math.min(Math.max(0, g), 1);
        b = Math.min(Math.max(0, b), 1);
        return [r * 255, g * 255, b * 255];
      };
      convert.xyz.lab = function(xyz) {
        let x = xyz[0];
        let y = xyz[1];
        let z = xyz[2];
        x /= 95.047;
        y /= 100;
        z /= 108.883;
        x = x > 0.008856 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
        y = y > 0.008856 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
        z = z > 0.008856 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
        const l = 116 * y - 16;
        const a = 500 * (x - y);
        const b = 200 * (y - z);
        return [l, a, b];
      };
      convert.lab.xyz = function(lab) {
        const l = lab[0];
        const a = lab[1];
        const b = lab[2];
        let x;
        let y;
        let z;
        y = (l + 16) / 116;
        x = a / 500 + y;
        z = y - b / 200;
        const y2 = y ** 3;
        const x2 = x ** 3;
        const z2 = z ** 3;
        y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
        x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
        z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;
        x *= 95.047;
        y *= 100;
        z *= 108.883;
        return [x, y, z];
      };
      convert.lab.lch = function(lab) {
        const l = lab[0];
        const a = lab[1];
        const b = lab[2];
        let h;
        const hr = Math.atan2(b, a);
        h = hr * 360 / 2 / Math.PI;
        if (h < 0) {
          h += 360;
        }
        const c = Math.sqrt(a * a + b * b);
        return [l, c, h];
      };
      convert.lch.lab = function(lch) {
        const l = lch[0];
        const c = lch[1];
        const h = lch[2];
        const hr = h / 360 * 2 * Math.PI;
        const a = c * Math.cos(hr);
        const b = c * Math.sin(hr);
        return [l, a, b];
      };
      convert.rgb.ansi16 = function(args, saturation = null) {
        const [r, g, b] = args;
        let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation;
        value = Math.round(value / 50);
        if (value === 0) {
          return 30;
        }
        let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
        if (value === 2) {
          ansi += 60;
        }
        return ansi;
      };
      convert.hsv.ansi16 = function(args) {
        return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
      };
      convert.rgb.ansi256 = function(args) {
        const r = args[0];
        const g = args[1];
        const b = args[2];
        if (r === g && g === b) {
          if (r < 8) {
            return 16;
          }
          if (r > 248) {
            return 231;
          }
          return Math.round((r - 8) / 247 * 24) + 232;
        }
        const ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
        return ansi;
      };
      convert.ansi16.rgb = function(args) {
        let color = args % 10;
        if (color === 0 || color === 7) {
          if (args > 50) {
            color += 3.5;
          }
          color = color / 10.5 * 255;
          return [color, color, color];
        }
        const mult = (~~(args > 50) + 1) * 0.5;
        const r = (color & 1) * mult * 255;
        const g = (color >> 1 & 1) * mult * 255;
        const b = (color >> 2 & 1) * mult * 255;
        return [r, g, b];
      };
      convert.ansi256.rgb = function(args) {
        if (args >= 232) {
          const c = (args - 232) * 10 + 8;
          return [c, c, c];
        }
        args -= 16;
        let rem;
        const r = Math.floor(args / 36) / 5 * 255;
        const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
        const b = rem % 6 / 5 * 255;
        return [r, g, b];
      };
      convert.rgb.hex = function(args) {
        const integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
        const string = integer.toString(16).toUpperCase();
        return "000000".substring(string.length) + string;
      };
      convert.hex.rgb = function(args) {
        const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
        if (!match) {
          return [0, 0, 0];
        }
        let colorString = match[0];
        if (match[0].length === 3) {
          colorString = colorString.split("").map((char) => {
            return char + char;
          }).join("");
        }
        const integer = parseInt(colorString, 16);
        const r = integer >> 16 & 255;
        const g = integer >> 8 & 255;
        const b = integer & 255;
        return [r, g, b];
      };
      convert.rgb.hcg = function(rgb) {
        const r = rgb[0] / 255;
        const g = rgb[1] / 255;
        const b = rgb[2] / 255;
        const max = Math.max(Math.max(r, g), b);
        const min = Math.min(Math.min(r, g), b);
        const chroma = max - min;
        let grayscale;
        let hue;
        if (chroma < 1) {
          grayscale = min / (1 - chroma);
        } else {
          grayscale = 0;
        }
        if (chroma <= 0) {
          hue = 0;
        } else if (max === r) {
          hue = (g - b) / chroma % 6;
        } else if (max === g) {
          hue = 2 + (b - r) / chroma;
        } else {
          hue = 4 + (r - g) / chroma;
        }
        hue /= 6;
        hue %= 1;
        return [hue * 360, chroma * 100, grayscale * 100];
      };
      convert.hsl.hcg = function(hsl) {
        const s = hsl[1] / 100;
        const l = hsl[2] / 100;
        const c = l < 0.5 ? 2 * s * l : 2 * s * (1 - l);
        let f = 0;
        if (c < 1) {
          f = (l - 0.5 * c) / (1 - c);
        }
        return [hsl[0], c * 100, f * 100];
      };
      convert.hsv.hcg = function(hsv) {
        const s = hsv[1] / 100;
        const v = hsv[2] / 100;
        const c = s * v;
        let f = 0;
        if (c < 1) {
          f = (v - c) / (1 - c);
        }
        return [hsv[0], c * 100, f * 100];
      };
      convert.hcg.rgb = function(hcg) {
        const h = hcg[0] / 360;
        const c = hcg[1] / 100;
        const g = hcg[2] / 100;
        if (c === 0) {
          return [g * 255, g * 255, g * 255];
        }
        const pure = [0, 0, 0];
        const hi = h % 1 * 6;
        const v = hi % 1;
        const w = 1 - v;
        let mg = 0;
        switch (Math.floor(hi)) {
          case 0:
            pure[0] = 1;
            pure[1] = v;
            pure[2] = 0;
            break;
          case 1:
            pure[0] = w;
            pure[1] = 1;
            pure[2] = 0;
            break;
          case 2:
            pure[0] = 0;
            pure[1] = 1;
            pure[2] = v;
            break;
          case 3:
            pure[0] = 0;
            pure[1] = w;
            pure[2] = 1;
            break;
          case 4:
            pure[0] = v;
            pure[1] = 0;
            pure[2] = 1;
            break;
          default:
            pure[0] = 1;
            pure[1] = 0;
            pure[2] = w;
        }
        mg = (1 - c) * g;
        return [
          (c * pure[0] + mg) * 255,
          (c * pure[1] + mg) * 255,
          (c * pure[2] + mg) * 255
        ];
      };
      convert.hcg.hsv = function(hcg) {
        const c = hcg[1] / 100;
        const g = hcg[2] / 100;
        const v = c + g * (1 - c);
        let f = 0;
        if (v > 0) {
          f = c / v;
        }
        return [hcg[0], f * 100, v * 100];
      };
      convert.hcg.hsl = function(hcg) {
        const c = hcg[1] / 100;
        const g = hcg[2] / 100;
        const l = g * (1 - c) + 0.5 * c;
        let s = 0;
        if (l > 0 && l < 0.5) {
          s = c / (2 * l);
        } else if (l >= 0.5 && l < 1) {
          s = c / (2 * (1 - l));
        }
        return [hcg[0], s * 100, l * 100];
      };
      convert.hcg.hwb = function(hcg) {
        const c = hcg[1] / 100;
        const g = hcg[2] / 100;
        const v = c + g * (1 - c);
        return [hcg[0], (v - c) * 100, (1 - v) * 100];
      };
      convert.hwb.hcg = function(hwb) {
        const w = hwb[1] / 100;
        const b = hwb[2] / 100;
        const v = 1 - b;
        const c = v - w;
        let g = 0;
        if (c < 1) {
          g = (v - c) / (1 - c);
        }
        return [hwb[0], c * 100, g * 100];
      };
      convert.apple.rgb = function(apple) {
        return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
      };
      convert.rgb.apple = function(rgb) {
        return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
      };
      convert.gray.rgb = function(args) {
        return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
      };
      convert.gray.hsl = function(args) {
        return [0, 0, args[0]];
      };
      convert.gray.hsv = convert.gray.hsl;
      convert.gray.hwb = function(gray) {
        return [0, 100, gray[0]];
      };
      convert.gray.cmyk = function(gray) {
        return [0, 0, 0, gray[0]];
      };
      convert.gray.lab = function(gray) {
        return [gray[0], 0, 0];
      };
      convert.gray.hex = function(gray) {
        const val = Math.round(gray[0] / 100 * 255) & 255;
        const integer = (val << 16) + (val << 8) + val;
        const string = integer.toString(16).toUpperCase();
        return "000000".substring(string.length) + string;
      };
      convert.rgb.gray = function(rgb) {
        const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
        return [val / 255 * 100];
      };
    }
  });
  var require_route = __commonJS2({
    "../../node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/route.js"(exports22, module22) {
      var conversions = require_conversions();
      function buildGraph() {
        const graph = {};
        const models = Object.keys(conversions);
        for (let len = models.length, i = 0;i < len; i++) {
          graph[models[i]] = {
            distance: -1,
            parent: null
          };
        }
        return graph;
      }
      function deriveBFS(fromModel) {
        const graph = buildGraph();
        const queue = [fromModel];
        graph[fromModel].distance = 0;
        while (queue.length) {
          const current = queue.pop();
          const adjacents = Object.keys(conversions[current]);
          for (let len = adjacents.length, i = 0;i < len; i++) {
            const adjacent = adjacents[i];
            const node = graph[adjacent];
            if (node.distance === -1) {
              node.distance = graph[current].distance + 1;
              node.parent = current;
              queue.unshift(adjacent);
            }
          }
        }
        return graph;
      }
      function link(from, to) {
        return function(args) {
          return to(from(args));
        };
      }
      function wrapConversion(toModel, graph) {
        const path2 = [graph[toModel].parent, toModel];
        let fn = conversions[graph[toModel].parent][toModel];
        let cur = graph[toModel].parent;
        while (graph[cur].parent) {
          path2.unshift(graph[cur].parent);
          fn = link(conversions[graph[cur].parent][cur], fn);
          cur = graph[cur].parent;
        }
        fn.conversion = path2;
        return fn;
      }
      module22.exports = function(fromModel) {
        const graph = deriveBFS(fromModel);
        const conversion = {};
        const models = Object.keys(graph);
        for (let len = models.length, i = 0;i < len; i++) {
          const toModel = models[i];
          const node = graph[toModel];
          if (node.parent === null) {
            continue;
          }
          conversion[toModel] = wrapConversion(toModel, graph);
        }
        return conversion;
      };
    }
  });
  var require_color_convert = __commonJS2({
    "../../node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/index.js"(exports22, module22) {
      var conversions = require_conversions();
      var route = require_route();
      var convert = {};
      var models = Object.keys(conversions);
      function wrapRaw(fn) {
        const wrappedFn = function(...args) {
          const arg0 = args[0];
          if (arg0 === undefined || arg0 === null) {
            return arg0;
          }
          if (arg0.length > 1) {
            args = arg0;
          }
          return fn(args);
        };
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion;
        }
        return wrappedFn;
      }
      function wrapRounded(fn) {
        const wrappedFn = function(...args) {
          const arg0 = args[0];
          if (arg0 === undefined || arg0 === null) {
            return arg0;
          }
          if (arg0.length > 1) {
            args = arg0;
          }
          const result2 = fn(args);
          if (typeof result2 === "object") {
            for (let len = result2.length, i = 0;i < len; i++) {
              result2[i] = Math.round(result2[i]);
            }
          }
          return result2;
        };
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion;
        }
        return wrappedFn;
      }
      models.forEach((fromModel) => {
        convert[fromModel] = {};
        Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
        Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
        const routes = route(fromModel);
        const routeModels = Object.keys(routes);
        routeModels.forEach((toModel) => {
          const fn = routes[toModel];
          convert[fromModel][toModel] = wrapRounded(fn);
          convert[fromModel][toModel].raw = wrapRaw(fn);
        });
      });
      module22.exports = convert;
    }
  });
  var require_ansi_styles = __commonJS2({
    "../../node_modules/.pnpm/ansi-styles@4.3.0/node_modules/ansi-styles/index.js"(exports22, module22) {
      var wrapAnsi16 = (fn, offset) => (...args) => {
        const code = fn(...args);
        return `\x1B[${code + offset}m`;
      };
      var wrapAnsi256 = (fn, offset) => (...args) => {
        const code = fn(...args);
        return `\x1B[${38 + offset};5;${code}m`;
      };
      var wrapAnsi16m = (fn, offset) => (...args) => {
        const rgb = fn(...args);
        return `\x1B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
      };
      var ansi2ansi = (n) => n;
      var rgb2rgb = (r, g, b) => [r, g, b];
      var setLazyProperty = (object, property, get) => {
        Object.defineProperty(object, property, {
          get: () => {
            const value = get();
            Object.defineProperty(object, property, {
              value,
              enumerable: true,
              configurable: true
            });
            return value;
          },
          enumerable: true,
          configurable: true
        });
      };
      var colorConvert;
      var makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {
        if (colorConvert === undefined) {
          colorConvert = require_color_convert();
        }
        const offset = isBackground ? 10 : 0;
        const styles = {};
        for (const [sourceSpace, suite] of Object.entries(colorConvert)) {
          const name = sourceSpace === "ansi16" ? "ansi" : sourceSpace;
          if (sourceSpace === targetSpace) {
            styles[name] = wrap(identity, offset);
          } else if (typeof suite === "object") {
            styles[name] = wrap(suite[targetSpace], offset);
          }
        }
        return styles;
      };
      function assembleStyles() {
        const codes = /* @__PURE__ */ new Map;
        const styles = {
          modifier: {
            reset: [0, 0],
            bold: [1, 22],
            dim: [2, 22],
            italic: [3, 23],
            underline: [4, 24],
            inverse: [7, 27],
            hidden: [8, 28],
            strikethrough: [9, 29]
          },
          color: {
            black: [30, 39],
            red: [31, 39],
            green: [32, 39],
            yellow: [33, 39],
            blue: [34, 39],
            magenta: [35, 39],
            cyan: [36, 39],
            white: [37, 39],
            blackBright: [90, 39],
            redBright: [91, 39],
            greenBright: [92, 39],
            yellowBright: [93, 39],
            blueBright: [94, 39],
            magentaBright: [95, 39],
            cyanBright: [96, 39],
            whiteBright: [97, 39]
          },
          bgColor: {
            bgBlack: [40, 49],
            bgRed: [41, 49],
            bgGreen: [42, 49],
            bgYellow: [43, 49],
            bgBlue: [44, 49],
            bgMagenta: [45, 49],
            bgCyan: [46, 49],
            bgWhite: [47, 49],
            bgBlackBright: [100, 49],
            bgRedBright: [101, 49],
            bgGreenBright: [102, 49],
            bgYellowBright: [103, 49],
            bgBlueBright: [104, 49],
            bgMagentaBright: [105, 49],
            bgCyanBright: [106, 49],
            bgWhiteBright: [107, 49]
          }
        };
        styles.color.gray = styles.color.blackBright;
        styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
        styles.color.grey = styles.color.blackBright;
        styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;
        for (const [groupName, group] of Object.entries(styles)) {
          for (const [styleName, style] of Object.entries(group)) {
            styles[styleName] = {
              open: `\x1B[${style[0]}m`,
              close: `\x1B[${style[1]}m`
            };
            group[styleName] = styles[styleName];
            codes.set(style[0], style[1]);
          }
          Object.defineProperty(styles, groupName, {
            value: group,
            enumerable: false
          });
        }
        Object.defineProperty(styles, "codes", {
          value: codes,
          enumerable: false
        });
        styles.color.close = "\x1B[39m";
        styles.bgColor.close = "\x1B[49m";
        setLazyProperty(styles.color, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, false));
        setLazyProperty(styles.color, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, false));
        setLazyProperty(styles.color, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, false));
        setLazyProperty(styles.bgColor, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, true));
        setLazyProperty(styles.bgColor, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, true));
        setLazyProperty(styles.bgColor, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, true));
        return styles;
      }
      Object.defineProperty(module22, "exports", {
        enumerable: true,
        get: assembleStyles
      });
    }
  });
  var require_has_flag = __commonJS2({
    "../../node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js"(exports22, module22) {
      module22.exports = (flag, argv = process.argv) => {
        const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
        const position = argv.indexOf(prefix + flag);
        const terminatorPosition = argv.indexOf("--");
        return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
      };
    }
  });
  var require_supports_color = __commonJS2({
    "../../node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js"(exports22, module22) {
      var os = __require("os");
      var tty = __require("tty");
      var hasFlag = require_has_flag();
      var { env } = process;
      var forceColor;
      if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
        forceColor = 0;
      } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
        forceColor = 1;
      }
      if ("FORCE_COLOR" in env) {
        if (env.FORCE_COLOR === "true") {
          forceColor = 1;
        } else if (env.FORCE_COLOR === "false") {
          forceColor = 0;
        } else {
          forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
        }
      }
      function translateLevel(level) {
        if (level === 0) {
          return false;
        }
        return {
          level,
          hasBasic: true,
          has256: level >= 2,
          has16m: level >= 3
        };
      }
      function supportsColor(haveStream, streamIsTTY) {
        if (forceColor === 0) {
          return 0;
        }
        if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
          return 3;
        }
        if (hasFlag("color=256")) {
          return 2;
        }
        if (haveStream && !streamIsTTY && forceColor === undefined) {
          return 0;
        }
        const min = forceColor || 0;
        if (env.TERM === "dumb") {
          return min;
        }
        if (process.platform === "win32") {
          const osRelease = os.release().split(".");
          if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
            return Number(osRelease[2]) >= 14931 ? 3 : 2;
          }
          return 1;
        }
        if ("CI" in env) {
          if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((sign) => (sign in env)) || env.CI_NAME === "codeship") {
            return 1;
          }
          return min;
        }
        if ("TEAMCITY_VERSION" in env) {
          return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
        }
        if (env.COLORTERM === "truecolor") {
          return 3;
        }
        if ("TERM_PROGRAM" in env) {
          const version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
          switch (env.TERM_PROGRAM) {
            case "iTerm.app":
              return version >= 3 ? 3 : 2;
            case "Apple_Terminal":
              return 2;
          }
        }
        if (/-256(color)?$/i.test(env.TERM)) {
          return 2;
        }
        if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
          return 1;
        }
        if ("COLORTERM" in env) {
          return 1;
        }
        return min;
      }
      function getSupportLevel(stream) {
        const level = supportsColor(stream, stream && stream.isTTY);
        return translateLevel(level);
      }
      module22.exports = {
        supportsColor: getSupportLevel,
        stdout: translateLevel(supportsColor(true, tty.isatty(1))),
        stderr: translateLevel(supportsColor(true, tty.isatty(2)))
      };
    }
  });
  var require_util = __commonJS2({
    "../../node_modules/.pnpm/chalk@3.0.0/node_modules/chalk/source/util.js"(exports22, module22) {
      var stringReplaceAll = (string, substring, replacer) => {
        let index = string.indexOf(substring);
        if (index === -1) {
          return string;
        }
        const substringLength = substring.length;
        let endIndex = 0;
        let returnValue = "";
        do {
          returnValue += string.substr(endIndex, index - endIndex) + substring + replacer;
          endIndex = index + substringLength;
          index = string.indexOf(substring, endIndex);
        } while (index !== -1);
        returnValue += string.substr(endIndex);
        return returnValue;
      };
      var stringEncaseCRLFWithFirstIndex = (string, prefix, postfix, index) => {
        let endIndex = 0;
        let returnValue = "";
        do {
          const gotCR = string[index - 1] === "\r";
          returnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? `\r
` : `
`) + postfix;
          endIndex = index + 1;
          index = string.indexOf(`
`, endIndex);
        } while (index !== -1);
        returnValue += string.substr(endIndex);
        return returnValue;
      };
      module22.exports = {
        stringReplaceAll,
        stringEncaseCRLFWithFirstIndex
      };
    }
  });
  var require_templates = __commonJS2({
    "../../node_modules/.pnpm/chalk@3.0.0/node_modules/chalk/source/templates.js"(exports22, module22) {
      var TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
      var STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
      var STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
      var ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.)|([^\\])/gi;
      var ESCAPES = /* @__PURE__ */ new Map([
        ["n", `
`],
        ["r", "\r"],
        ["t", "\t"],
        ["b", "\b"],
        ["f", "\f"],
        ["v", "\v"],
        ["0", "\x00"],
        ["\\", "\\"],
        ["e", "\x1B"],
        ["a", "\x07"]
      ]);
      function unescape(c) {
        const u = c[0] === "u";
        const bracket = c[1] === "{";
        if (u && !bracket && c.length === 5 || c[0] === "x" && c.length === 3) {
          return String.fromCharCode(parseInt(c.slice(1), 16));
        }
        if (u && bracket) {
          return String.fromCodePoint(parseInt(c.slice(2, -1), 16));
        }
        return ESCAPES.get(c) || c;
      }
      function parseArguments(name, arguments_) {
        const results = [];
        const chunks = arguments_.trim().split(/\s*,\s*/g);
        let matches;
        for (const chunk of chunks) {
          const number = Number(chunk);
          if (!Number.isNaN(number)) {
            results.push(number);
          } else if (matches = chunk.match(STRING_REGEX)) {
            results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, character) => escape ? unescape(escape) : character));
          } else {
            throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
          }
        }
        return results;
      }
      function parseStyle(style) {
        STYLE_REGEX.lastIndex = 0;
        const results = [];
        let matches;
        while ((matches = STYLE_REGEX.exec(style)) !== null) {
          const name = matches[1];
          if (matches[2]) {
            const args = parseArguments(name, matches[2]);
            results.push([name].concat(args));
          } else {
            results.push([name]);
          }
        }
        return results;
      }
      function buildStyle(chalk, styles) {
        const enabled = {};
        for (const layer of styles) {
          for (const style of layer.styles) {
            enabled[style[0]] = layer.inverse ? null : style.slice(1);
          }
        }
        let current = chalk;
        for (const [styleName, styles2] of Object.entries(enabled)) {
          if (!Array.isArray(styles2)) {
            continue;
          }
          if (!(styleName in current)) {
            throw new Error(`Unknown Chalk style: ${styleName}`);
          }
          current = styles2.length > 0 ? current[styleName](...styles2) : current[styleName];
        }
        return current;
      }
      module22.exports = (chalk, temporary) => {
        const styles = [];
        const chunks = [];
        let chunk = [];
        temporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {
          if (escapeCharacter) {
            chunk.push(unescape(escapeCharacter));
          } else if (style) {
            const string = chunk.join("");
            chunk = [];
            chunks.push(styles.length === 0 ? string : buildStyle(chalk, styles)(string));
            styles.push({ inverse, styles: parseStyle(style) });
          } else if (close) {
            if (styles.length === 0) {
              throw new Error("Found extraneous } in Chalk template literal");
            }
            chunks.push(buildStyle(chalk, styles)(chunk.join("")));
            chunk = [];
            styles.pop();
          } else {
            chunk.push(character);
          }
        });
        chunks.push(chunk.join(""));
        if (styles.length > 0) {
          const errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? "" : "s"} (\`}\`)`;
          throw new Error(errMsg);
        }
        return chunks.join("");
      };
    }
  });
  var require_source = __commonJS2({
    "../../node_modules/.pnpm/chalk@3.0.0/node_modules/chalk/source/index.js"(exports22, module22) {
      var ansiStyles = require_ansi_styles();
      var { stdout: stdoutColor, stderr: stderrColor } = require_supports_color();
      var {
        stringReplaceAll,
        stringEncaseCRLFWithFirstIndex
      } = require_util();
      var levelMapping = [
        "ansi",
        "ansi",
        "ansi256",
        "ansi16m"
      ];
      var styles = /* @__PURE__ */ Object.create(null);
      var applyOptions = (object, options = {}) => {
        if (options.level > 3 || options.level < 0) {
          throw new Error("The `level` option should be an integer from 0 to 3");
        }
        const colorLevel = stdoutColor ? stdoutColor.level : 0;
        object.level = options.level === undefined ? colorLevel : options.level;
      };
      var ChalkClass = class {
        constructor(options) {
          return chalkFactory(options);
        }
      };
      var chalkFactory = (options) => {
        const chalk2 = {};
        applyOptions(chalk2, options);
        chalk2.template = (...arguments_) => chalkTag(chalk2.template, ...arguments_);
        Object.setPrototypeOf(chalk2, Chalk.prototype);
        Object.setPrototypeOf(chalk2.template, chalk2);
        chalk2.template.constructor = () => {
          throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.");
        };
        chalk2.template.Instance = ChalkClass;
        return chalk2.template;
      };
      function Chalk(options) {
        return chalkFactory(options);
      }
      for (const [styleName, style] of Object.entries(ansiStyles)) {
        styles[styleName] = {
          get() {
            const builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
            Object.defineProperty(this, styleName, { value: builder });
            return builder;
          }
        };
      }
      styles.visible = {
        get() {
          const builder = createBuilder(this, this._styler, true);
          Object.defineProperty(this, "visible", { value: builder });
          return builder;
        }
      };
      var usedModels = ["rgb", "hex", "keyword", "hsl", "hsv", "hwb", "ansi", "ansi256"];
      for (const model of usedModels) {
        styles[model] = {
          get() {
            const { level } = this;
            return function(...arguments_) {
              const styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);
              return createBuilder(this, styler, this._isEmpty);
            };
          }
        };
      }
      for (const model of usedModels) {
        const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
        styles[bgModel] = {
          get() {
            const { level } = this;
            return function(...arguments_) {
              const styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);
              return createBuilder(this, styler, this._isEmpty);
            };
          }
        };
      }
      var proto = Object.defineProperties(() => {
      }, {
        ...styles,
        level: {
          enumerable: true,
          get() {
            return this._generator.level;
          },
          set(level) {
            this._generator.level = level;
          }
        }
      });
      var createStyler = (open, close, parent) => {
        let openAll;
        let closeAll;
        if (parent === undefined) {
          openAll = open;
          closeAll = close;
        } else {
          openAll = parent.openAll + open;
          closeAll = close + parent.closeAll;
        }
        return {
          open,
          close,
          openAll,
          closeAll,
          parent
        };
      };
      var createBuilder = (self2, _styler, _isEmpty) => {
        const builder = (...arguments_) => {
          return applyStyle(builder, arguments_.length === 1 ? "" + arguments_[0] : arguments_.join(" "));
        };
        builder.__proto__ = proto;
        builder._generator = self2;
        builder._styler = _styler;
        builder._isEmpty = _isEmpty;
        return builder;
      };
      var applyStyle = (self2, string) => {
        if (self2.level <= 0 || !string) {
          return self2._isEmpty ? "" : string;
        }
        let styler = self2._styler;
        if (styler === undefined) {
          return string;
        }
        const { openAll, closeAll } = styler;
        if (string.indexOf("\x1B") !== -1) {
          while (styler !== undefined) {
            string = stringReplaceAll(string, styler.close, styler.open);
            styler = styler.parent;
          }
        }
        const lfIndex = string.indexOf(`
`);
        if (lfIndex !== -1) {
          string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
        }
        return openAll + string + closeAll;
      };
      var template;
      var chalkTag = (chalk2, ...strings) => {
        const [firstString] = strings;
        if (!Array.isArray(firstString)) {
          return strings.join(" ");
        }
        const arguments_ = strings.slice(1);
        const parts = [firstString.raw[0]];
        for (let i = 1;i < firstString.length; i++) {
          parts.push(String(arguments_[i - 1]).replace(/[{}\\]/g, "\\$&"), String(firstString.raw[i]));
        }
        if (template === undefined) {
          template = require_templates();
        }
        return template(chalk2, parts.join(""));
      };
      Object.defineProperties(Chalk.prototype, styles);
      var chalk = Chalk();
      chalk.supportsColor = stdoutColor;
      chalk.stderr = Chalk({ level: stderrColor ? stderrColor.level : 0 });
      chalk.stderr.supportsColor = stderrColor;
      chalk.Level = {
        None: 0,
        Basic: 1,
        Ansi256: 2,
        TrueColor: 3,
        0: "None",
        1: "Basic",
        2: "Ansi256",
        3: "TrueColor"
      };
      module22.exports = chalk;
    }
  });
  var require_utils2 = __commonJS2({
    "../../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/utils.js"(exports22) {
      exports22.isInteger = (num) => {
        if (typeof num === "number") {
          return Number.isInteger(num);
        }
        if (typeof num === "string" && num.trim() !== "") {
          return Number.isInteger(Number(num));
        }
        return false;
      };
      exports22.find = (node, type) => node.nodes.find((node2) => node2.type === type);
      exports22.exceedsLimit = (min, max, step = 1, limit) => {
        if (limit === false)
          return false;
        if (!exports22.isInteger(min) || !exports22.isInteger(max))
          return false;
        return (Number(max) - Number(min)) / Number(step) >= limit;
      };
      exports22.escapeNode = (block, n = 0, type) => {
        const node = block.nodes[n];
        if (!node)
          return;
        if (type && node.type === type || node.type === "open" || node.type === "close") {
          if (node.escaped !== true) {
            node.value = "\\" + node.value;
            node.escaped = true;
          }
        }
      };
      exports22.encloseBrace = (node) => {
        if (node.type !== "brace")
          return false;
        if (node.commas >> 0 + node.ranges >> 0 === 0) {
          node.invalid = true;
          return true;
        }
        return false;
      };
      exports22.isInvalidBrace = (block) => {
        if (block.type !== "brace")
          return false;
        if (block.invalid === true || block.dollar)
          return true;
        if (block.commas >> 0 + block.ranges >> 0 === 0) {
          block.invalid = true;
          return true;
        }
        if (block.open !== true || block.close !== true) {
          block.invalid = true;
          return true;
        }
        return false;
      };
      exports22.isOpenOrClose = (node) => {
        if (node.type === "open" || node.type === "close") {
          return true;
        }
        return node.open === true || node.close === true;
      };
      exports22.reduce = (nodes) => nodes.reduce((acc, node) => {
        if (node.type === "text")
          acc.push(node.value);
        if (node.type === "range")
          node.type = "text";
        return acc;
      }, []);
      exports22.flatten = (...args) => {
        const result2 = [];
        const flat = (arr) => {
          for (let i = 0;i < arr.length; i++) {
            const ele = arr[i];
            if (Array.isArray(ele)) {
              flat(ele);
              continue;
            }
            if (ele !== undefined) {
              result2.push(ele);
            }
          }
          return result2;
        };
        flat(args);
        return result2;
      };
    }
  });
  var require_stringify = __commonJS2({
    "../../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/stringify.js"(exports22, module22) {
      var utils = require_utils2();
      module22.exports = (ast, options = {}) => {
        const stringify = (node, parent = {}) => {
          const invalidBlock = options.escapeInvalid && utils.isInvalidBrace(parent);
          const invalidNode = node.invalid === true && options.escapeInvalid === true;
          let output = "";
          if (node.value) {
            if ((invalidBlock || invalidNode) && utils.isOpenOrClose(node)) {
              return "\\" + node.value;
            }
            return node.value;
          }
          if (node.value) {
            return node.value;
          }
          if (node.nodes) {
            for (const child of node.nodes) {
              output += stringify(child);
            }
          }
          return output;
        };
        return stringify(ast);
      };
    }
  });
  var require_is_number = __commonJS2({
    "../../node_modules/.pnpm/is-number@7.0.0/node_modules/is-number/index.js"(exports22, module22) {
      module22.exports = function(num) {
        if (typeof num === "number") {
          return num - num === 0;
        }
        if (typeof num === "string" && num.trim() !== "") {
          return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);
        }
        return false;
      };
    }
  });
  var require_to_regex_range = __commonJS2({
    "../../node_modules/.pnpm/to-regex-range@5.0.1/node_modules/to-regex-range/index.js"(exports22, module22) {
      var isNumber = require_is_number();
      var toRegexRange = (min, max, options) => {
        if (isNumber(min) === false) {
          throw new TypeError("toRegexRange: expected the first argument to be a number");
        }
        if (max === undefined || min === max) {
          return String(min);
        }
        if (isNumber(max) === false) {
          throw new TypeError("toRegexRange: expected the second argument to be a number.");
        }
        let opts = { relaxZeros: true, ...options };
        if (typeof opts.strictZeros === "boolean") {
          opts.relaxZeros = opts.strictZeros === false;
        }
        let relax = String(opts.relaxZeros);
        let shorthand = String(opts.shorthand);
        let capture = String(opts.capture);
        let wrap = String(opts.wrap);
        let cacheKey = min + ":" + max + "=" + relax + shorthand + capture + wrap;
        if (toRegexRange.cache.hasOwnProperty(cacheKey)) {
          return toRegexRange.cache[cacheKey].result;
        }
        let a = Math.min(min, max);
        let b = Math.max(min, max);
        if (Math.abs(a - b) === 1) {
          let result2 = min + "|" + max;
          if (opts.capture) {
            return `(${result2})`;
          }
          if (opts.wrap === false) {
            return result2;
          }
          return `(?:${result2})`;
        }
        let isPadded = hasPadding(min) || hasPadding(max);
        let state = { min, max, a, b };
        let positives = [];
        let negatives = [];
        if (isPadded) {
          state.isPadded = isPadded;
          state.maxLen = String(state.max).length;
        }
        if (a < 0) {
          let newMin = b < 0 ? Math.abs(b) : 1;
          negatives = splitToPatterns(newMin, Math.abs(a), state, opts);
          a = state.a = 0;
        }
        if (b >= 0) {
          positives = splitToPatterns(a, b, state, opts);
        }
        state.negatives = negatives;
        state.positives = positives;
        state.result = collatePatterns(negatives, positives, opts);
        if (opts.capture === true) {
          state.result = `(${state.result})`;
        } else if (opts.wrap !== false && positives.length + negatives.length > 1) {
          state.result = `(?:${state.result})`;
        }
        toRegexRange.cache[cacheKey] = state;
        return state.result;
      };
      function collatePatterns(neg, pos, options) {
        let onlyNegative = filterPatterns(neg, pos, "-", false, options) || [];
        let onlyPositive = filterPatterns(pos, neg, "", false, options) || [];
        let intersected = filterPatterns(neg, pos, "-?", true, options) || [];
        let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);
        return subpatterns.join("|");
      }
      function splitToRanges(min, max) {
        let nines = 1;
        let zeros = 1;
        let stop = countNines(min, nines);
        let stops = /* @__PURE__ */ new Set([max]);
        while (min <= stop && stop <= max) {
          stops.add(stop);
          nines += 1;
          stop = countNines(min, nines);
        }
        stop = countZeros(max + 1, zeros) - 1;
        while (min < stop && stop <= max) {
          stops.add(stop);
          zeros += 1;
          stop = countZeros(max + 1, zeros) - 1;
        }
        stops = [...stops];
        stops.sort(compare);
        return stops;
      }
      function rangeToPattern(start, stop, options) {
        if (start === stop) {
          return { pattern: start, count: [], digits: 0 };
        }
        let zipped = zip(start, stop);
        let digits = zipped.length;
        let pattern = "";
        let count = 0;
        for (let i = 0;i < digits; i++) {
          let [startDigit, stopDigit] = zipped[i];
          if (startDigit === stopDigit) {
            pattern += startDigit;
          } else if (startDigit !== "0" || stopDigit !== "9") {
            pattern += toCharacterClass(startDigit, stopDigit, options);
          } else {
            count++;
          }
        }
        if (count) {
          pattern += options.shorthand === true ? "\\d" : "[0-9]";
        }
        return { pattern, count: [count], digits };
      }
      function splitToPatterns(min, max, tok, options) {
        let ranges = splitToRanges(min, max);
        let tokens = [];
        let start = min;
        let prev;
        for (let i = 0;i < ranges.length; i++) {
          let max2 = ranges[i];
          let obj = rangeToPattern(String(start), String(max2), options);
          let zeros = "";
          if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
            if (prev.count.length > 1) {
              prev.count.pop();
            }
            prev.count.push(obj.count[0]);
            prev.string = prev.pattern + toQuantifier(prev.count);
            start = max2 + 1;
            continue;
          }
          if (tok.isPadded) {
            zeros = padZeros(max2, tok, options);
          }
          obj.string = zeros + obj.pattern + toQuantifier(obj.count);
          tokens.push(obj);
          start = max2 + 1;
          prev = obj;
        }
        return tokens;
      }
      function filterPatterns(arr, comparison, prefix, intersection, options) {
        let result2 = [];
        for (let ele of arr) {
          let { string } = ele;
          if (!intersection && !contains(comparison, "string", string)) {
            result2.push(prefix + string);
          }
          if (intersection && contains(comparison, "string", string)) {
            result2.push(prefix + string);
          }
        }
        return result2;
      }
      function zip(a, b) {
        let arr = [];
        for (let i = 0;i < a.length; i++)
          arr.push([a[i], b[i]]);
        return arr;
      }
      function compare(a, b) {
        return a > b ? 1 : b > a ? -1 : 0;
      }
      function contains(arr, key, val) {
        return arr.some((ele) => ele[key] === val);
      }
      function countNines(min, len) {
        return Number(String(min).slice(0, -len) + "9".repeat(len));
      }
      function countZeros(integer, zeros) {
        return integer - integer % Math.pow(10, zeros);
      }
      function toQuantifier(digits) {
        let [start = 0, stop = ""] = digits;
        if (stop || start > 1) {
          return `{${start + (stop ? "," + stop : "")}}`;
        }
        return "";
      }
      function toCharacterClass(a, b, options) {
        return `[${a}${b - a === 1 ? "" : "-"}${b}]`;
      }
      function hasPadding(str) {
        return /^-?(0+)\d/.test(str);
      }
      function padZeros(value, tok, options) {
        if (!tok.isPadded) {
          return value;
        }
        let diff = Math.abs(tok.maxLen - String(value).length);
        let relax = options.relaxZeros !== false;
        switch (diff) {
          case 0:
            return "";
          case 1:
            return relax ? "0?" : "0";
          case 2:
            return relax ? "0{0,2}" : "00";
          default: {
            return relax ? `0{0,${diff}}` : `0{${diff}}`;
          }
        }
      }
      toRegexRange.cache = {};
      toRegexRange.clearCache = () => toRegexRange.cache = {};
      module22.exports = toRegexRange;
    }
  });
  var require_fill_range = __commonJS2({
    "../../node_modules/.pnpm/fill-range@7.1.1/node_modules/fill-range/index.js"(exports22, module22) {
      var util = __require("util");
      var toRegexRange = require_to_regex_range();
      var isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
      var transform = (toNumber) => {
        return (value) => toNumber === true ? Number(value) : String(value);
      };
      var isValidValue = (value) => {
        return typeof value === "number" || typeof value === "string" && value !== "";
      };
      var isNumber = (num) => Number.isInteger(+num);
      var zeros = (input) => {
        let value = `${input}`;
        let index = -1;
        if (value[0] === "-")
          value = value.slice(1);
        if (value === "0")
          return false;
        while (value[++index] === "0")
          ;
        return index > 0;
      };
      var stringify = (start, end, options) => {
        if (typeof start === "string" || typeof end === "string") {
          return true;
        }
        return options.stringify === true;
      };
      var pad = (input, maxLength, toNumber) => {
        if (maxLength > 0) {
          let dash = input[0] === "-" ? "-" : "";
          if (dash)
            input = input.slice(1);
          input = dash + input.padStart(dash ? maxLength - 1 : maxLength, "0");
        }
        if (toNumber === false) {
          return String(input);
        }
        return input;
      };
      var toMaxLen = (input, maxLength) => {
        let negative = input[0] === "-" ? "-" : "";
        if (negative) {
          input = input.slice(1);
          maxLength--;
        }
        while (input.length < maxLength)
          input = "0" + input;
        return negative ? "-" + input : input;
      };
      var toSequence = (parts, options, maxLen) => {
        parts.negatives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
        parts.positives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
        let prefix = options.capture ? "" : "?:";
        let positives = "";
        let negatives = "";
        let result2;
        if (parts.positives.length) {
          positives = parts.positives.map((v) => toMaxLen(String(v), maxLen)).join("|");
        }
        if (parts.negatives.length) {
          negatives = `-(${prefix}${parts.negatives.map((v) => toMaxLen(String(v), maxLen)).join("|")})`;
        }
        if (positives && negatives) {
          result2 = `${positives}|${negatives}`;
        } else {
          result2 = positives || negatives;
        }
        if (options.wrap) {
          return `(${prefix}${result2})`;
        }
        return result2;
      };
      var toRange = (a, b, isNumbers, options) => {
        if (isNumbers) {
          return toRegexRange(a, b, { wrap: false, ...options });
        }
        let start = String.fromCharCode(a);
        if (a === b)
          return start;
        let stop = String.fromCharCode(b);
        return `[${start}-${stop}]`;
      };
      var toRegex = (start, end, options) => {
        if (Array.isArray(start)) {
          let wrap = options.wrap === true;
          let prefix = options.capture ? "" : "?:";
          return wrap ? `(${prefix}${start.join("|")})` : start.join("|");
        }
        return toRegexRange(start, end, options);
      };
      var rangeError = (...args) => {
        return new RangeError("Invalid range arguments: " + util.inspect(...args));
      };
      var invalidRange = (start, end, options) => {
        if (options.strictRanges === true)
          throw rangeError([start, end]);
        return [];
      };
      var invalidStep = (step, options) => {
        if (options.strictRanges === true) {
          throw new TypeError(`Expected step "${step}" to be a number`);
        }
        return [];
      };
      var fillNumbers = (start, end, step = 1, options = {}) => {
        let a = Number(start);
        let b = Number(end);
        if (!Number.isInteger(a) || !Number.isInteger(b)) {
          if (options.strictRanges === true)
            throw rangeError([start, end]);
          return [];
        }
        if (a === 0)
          a = 0;
        if (b === 0)
          b = 0;
        let descending = a > b;
        let startString = String(start);
        let endString = String(end);
        let stepString = String(step);
        step = Math.max(Math.abs(step), 1);
        let padded = zeros(startString) || zeros(endString) || zeros(stepString);
        let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;
        let toNumber = padded === false && stringify(start, end, options) === false;
        let format = options.transform || transform(toNumber);
        if (options.toRegex && step === 1) {
          return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options);
        }
        let parts = { negatives: [], positives: [] };
        let push = (num) => parts[num < 0 ? "negatives" : "positives"].push(Math.abs(num));
        let range = [];
        let index = 0;
        while (descending ? a >= b : a <= b) {
          if (options.toRegex === true && step > 1) {
            push(a);
          } else {
            range.push(pad(format(a, index), maxLen, toNumber));
          }
          a = descending ? a - step : a + step;
          index++;
        }
        if (options.toRegex === true) {
          return step > 1 ? toSequence(parts, options, maxLen) : toRegex(range, null, { wrap: false, ...options });
        }
        return range;
      };
      var fillLetters = (start, end, step = 1, options = {}) => {
        if (!isNumber(start) && start.length > 1 || !isNumber(end) && end.length > 1) {
          return invalidRange(start, end, options);
        }
        let format = options.transform || ((val) => String.fromCharCode(val));
        let a = `${start}`.charCodeAt(0);
        let b = `${end}`.charCodeAt(0);
        let descending = a > b;
        let min = Math.min(a, b);
        let max = Math.max(a, b);
        if (options.toRegex && step === 1) {
          return toRange(min, max, false, options);
        }
        let range = [];
        let index = 0;
        while (descending ? a >= b : a <= b) {
          range.push(format(a, index));
          a = descending ? a - step : a + step;
          index++;
        }
        if (options.toRegex === true) {
          return toRegex(range, null, { wrap: false, options });
        }
        return range;
      };
      var fill = (start, end, step, options = {}) => {
        if (end == null && isValidValue(start)) {
          return [start];
        }
        if (!isValidValue(start) || !isValidValue(end)) {
          return invalidRange(start, end, options);
        }
        if (typeof step === "function") {
          return fill(start, end, 1, { transform: step });
        }
        if (isObject(step)) {
          return fill(start, end, 0, step);
        }
        let opts = { ...options };
        if (opts.capture === true)
          opts.wrap = true;
        step = step || opts.step || 1;
        if (!isNumber(step)) {
          if (step != null && !isObject(step))
            return invalidStep(step, opts);
          return fill(start, end, 1, step);
        }
        if (isNumber(start) && isNumber(end)) {
          return fillNumbers(start, end, step, opts);
        }
        return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);
      };
      module22.exports = fill;
    }
  });
  var require_compile = __commonJS2({
    "../../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/compile.js"(exports22, module22) {
      var fill = require_fill_range();
      var utils = require_utils2();
      var compile = (ast, options = {}) => {
        const walk = (node, parent = {}) => {
          const invalidBlock = utils.isInvalidBrace(parent);
          const invalidNode = node.invalid === true && options.escapeInvalid === true;
          const invalid = invalidBlock === true || invalidNode === true;
          const prefix = options.escapeInvalid === true ? "\\" : "";
          let output = "";
          if (node.isOpen === true) {
            return prefix + node.value;
          }
          if (node.isClose === true) {
            console.log("node.isClose", prefix, node.value);
            return prefix + node.value;
          }
          if (node.type === "open") {
            return invalid ? prefix + node.value : "(";
          }
          if (node.type === "close") {
            return invalid ? prefix + node.value : ")";
          }
          if (node.type === "comma") {
            return node.prev.type === "comma" ? "" : invalid ? node.value : "|";
          }
          if (node.value) {
            return node.value;
          }
          if (node.nodes && node.ranges > 0) {
            const args = utils.reduce(node.nodes);
            const range = fill(...args, { ...options, wrap: false, toRegex: true, strictZeros: true });
            if (range.length !== 0) {
              return args.length > 1 && range.length > 1 ? `(${range})` : range;
            }
          }
          if (node.nodes) {
            for (const child of node.nodes) {
              output += walk(child, node);
            }
          }
          return output;
        };
        return walk(ast);
      };
      module22.exports = compile;
    }
  });
  var require_expand = __commonJS2({
    "../../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/expand.js"(exports22, module22) {
      var fill = require_fill_range();
      var stringify = require_stringify();
      var utils = require_utils2();
      var append = (queue = "", stash = "", enclose = false) => {
        const result2 = [];
        queue = [].concat(queue);
        stash = [].concat(stash);
        if (!stash.length)
          return queue;
        if (!queue.length) {
          return enclose ? utils.flatten(stash).map((ele) => `{${ele}}`) : stash;
        }
        for (const item of queue) {
          if (Array.isArray(item)) {
            for (const value of item) {
              result2.push(append(value, stash, enclose));
            }
          } else {
            for (let ele of stash) {
              if (enclose === true && typeof ele === "string")
                ele = `{${ele}}`;
              result2.push(Array.isArray(ele) ? append(item, ele, enclose) : item + ele);
            }
          }
        }
        return utils.flatten(result2);
      };
      var expand = (ast, options = {}) => {
        const rangeLimit = options.rangeLimit === undefined ? 1000 : options.rangeLimit;
        const walk = (node, parent = {}) => {
          node.queue = [];
          let p = parent;
          let q = parent.queue;
          while (p.type !== "brace" && p.type !== "root" && p.parent) {
            p = p.parent;
            q = p.queue;
          }
          if (node.invalid || node.dollar) {
            q.push(append(q.pop(), stringify(node, options)));
            return;
          }
          if (node.type === "brace" && node.invalid !== true && node.nodes.length === 2) {
            q.push(append(q.pop(), ["{}"]));
            return;
          }
          if (node.nodes && node.ranges > 0) {
            const args = utils.reduce(node.nodes);
            if (utils.exceedsLimit(...args, options.step, rangeLimit)) {
              throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");
            }
            let range = fill(...args, options);
            if (range.length === 0) {
              range = stringify(node, options);
            }
            q.push(append(q.pop(), range));
            node.nodes = [];
            return;
          }
          const enclose = utils.encloseBrace(node);
          let queue = node.queue;
          let block = node;
          while (block.type !== "brace" && block.type !== "root" && block.parent) {
            block = block.parent;
            queue = block.queue;
          }
          for (let i = 0;i < node.nodes.length; i++) {
            const child = node.nodes[i];
            if (child.type === "comma" && node.type === "brace") {
              if (i === 1)
                queue.push("");
              queue.push("");
              continue;
            }
            if (child.type === "close") {
              q.push(append(q.pop(), queue, enclose));
              continue;
            }
            if (child.value && child.type !== "open") {
              queue.push(append(queue.pop(), child.value));
              continue;
            }
            if (child.nodes) {
              walk(child, node);
            }
          }
          return queue;
        };
        return utils.flatten(walk(ast));
      };
      module22.exports = expand;
    }
  });
  var require_constants4 = __commonJS2({
    "../../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/constants.js"(exports22, module22) {
      module22.exports = {
        MAX_LENGTH: 1e4,
        CHAR_0: "0",
        CHAR_9: "9",
        CHAR_UPPERCASE_A: "A",
        CHAR_LOWERCASE_A: "a",
        CHAR_UPPERCASE_Z: "Z",
        CHAR_LOWERCASE_Z: "z",
        CHAR_LEFT_PARENTHESES: "(",
        CHAR_RIGHT_PARENTHESES: ")",
        CHAR_ASTERISK: "*",
        CHAR_AMPERSAND: "&",
        CHAR_AT: "@",
        CHAR_BACKSLASH: "\\",
        CHAR_BACKTICK: "`",
        CHAR_CARRIAGE_RETURN: "\r",
        CHAR_CIRCUMFLEX_ACCENT: "^",
        CHAR_COLON: ":",
        CHAR_COMMA: ",",
        CHAR_DOLLAR: "$",
        CHAR_DOT: ".",
        CHAR_DOUBLE_QUOTE: '"',
        CHAR_EQUAL: "=",
        CHAR_EXCLAMATION_MARK: "!",
        CHAR_FORM_FEED: "\f",
        CHAR_FORWARD_SLASH: "/",
        CHAR_HASH: "#",
        CHAR_HYPHEN_MINUS: "-",
        CHAR_LEFT_ANGLE_BRACKET: "<",
        CHAR_LEFT_CURLY_BRACE: "{",
        CHAR_LEFT_SQUARE_BRACKET: "[",
        CHAR_LINE_FEED: `
`,
        CHAR_NO_BREAK_SPACE: "\xA0",
        CHAR_PERCENT: "%",
        CHAR_PLUS: "+",
        CHAR_QUESTION_MARK: "?",
        CHAR_RIGHT_ANGLE_BRACKET: ">",
        CHAR_RIGHT_CURLY_BRACE: "}",
        CHAR_RIGHT_SQUARE_BRACKET: "]",
        CHAR_SEMICOLON: ";",
        CHAR_SINGLE_QUOTE: "'",
        CHAR_SPACE: " ",
        CHAR_TAB: "\t",
        CHAR_UNDERSCORE: "_",
        CHAR_VERTICAL_LINE: "|",
        CHAR_ZERO_WIDTH_NOBREAK_SPACE: "\uFEFF"
      };
    }
  });
  var require_parse3 = __commonJS2({
    "../../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/parse.js"(exports22, module22) {
      var stringify = require_stringify();
      var {
        MAX_LENGTH,
        CHAR_BACKSLASH,
        CHAR_BACKTICK,
        CHAR_COMMA,
        CHAR_DOT,
        CHAR_LEFT_PARENTHESES,
        CHAR_RIGHT_PARENTHESES,
        CHAR_LEFT_CURLY_BRACE,
        CHAR_RIGHT_CURLY_BRACE,
        CHAR_LEFT_SQUARE_BRACKET,
        CHAR_RIGHT_SQUARE_BRACKET,
        CHAR_DOUBLE_QUOTE,
        CHAR_SINGLE_QUOTE,
        CHAR_NO_BREAK_SPACE,
        CHAR_ZERO_WIDTH_NOBREAK_SPACE
      } = require_constants4();
      var parse = (input, options = {}) => {
        if (typeof input !== "string") {
          throw new TypeError("Expected a string");
        }
        const opts = options || {};
        const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
        if (input.length > max) {
          throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);
        }
        const ast = { type: "root", input, nodes: [] };
        const stack = [ast];
        let block = ast;
        let prev = ast;
        let brackets = 0;
        const length = input.length;
        let index = 0;
        let depth = 0;
        let value;
        const advance = () => input[index++];
        const push = (node) => {
          if (node.type === "text" && prev.type === "dot") {
            prev.type = "text";
          }
          if (prev && prev.type === "text" && node.type === "text") {
            prev.value += node.value;
            return;
          }
          block.nodes.push(node);
          node.parent = block;
          node.prev = prev;
          prev = node;
          return node;
        };
        push({ type: "bos" });
        while (index < length) {
          block = stack[stack.length - 1];
          value = advance();
          if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {
            continue;
          }
          if (value === CHAR_BACKSLASH) {
            push({ type: "text", value: (options.keepEscaping ? value : "") + advance() });
            continue;
          }
          if (value === CHAR_RIGHT_SQUARE_BRACKET) {
            push({ type: "text", value: "\\" + value });
            continue;
          }
          if (value === CHAR_LEFT_SQUARE_BRACKET) {
            brackets++;
            let next;
            while (index < length && (next = advance())) {
              value += next;
              if (next === CHAR_LEFT_SQUARE_BRACKET) {
                brackets++;
                continue;
              }
              if (next === CHAR_BACKSLASH) {
                value += advance();
                continue;
              }
              if (next === CHAR_RIGHT_SQUARE_BRACKET) {
                brackets--;
                if (brackets === 0) {
                  break;
                }
              }
            }
            push({ type: "text", value });
            continue;
          }
          if (value === CHAR_LEFT_PARENTHESES) {
            block = push({ type: "paren", nodes: [] });
            stack.push(block);
            push({ type: "text", value });
            continue;
          }
          if (value === CHAR_RIGHT_PARENTHESES) {
            if (block.type !== "paren") {
              push({ type: "text", value });
              continue;
            }
            block = stack.pop();
            push({ type: "text", value });
            block = stack[stack.length - 1];
            continue;
          }
          if (value === CHAR_DOUBLE_QUOTE || value === CHAR_SINGLE_QUOTE || value === CHAR_BACKTICK) {
            const open = value;
            let next;
            if (options.keepQuotes !== true) {
              value = "";
            }
            while (index < length && (next = advance())) {
              if (next === CHAR_BACKSLASH) {
                value += next + advance();
                continue;
              }
              if (next === open) {
                if (options.keepQuotes === true)
                  value += next;
                break;
              }
              value += next;
            }
            push({ type: "text", value });
            continue;
          }
          if (value === CHAR_LEFT_CURLY_BRACE) {
            depth++;
            const dollar = prev.value && prev.value.slice(-1) === "$" || block.dollar === true;
            const brace = {
              type: "brace",
              open: true,
              close: false,
              dollar,
              depth,
              commas: 0,
              ranges: 0,
              nodes: []
            };
            block = push(brace);
            stack.push(block);
            push({ type: "open", value });
            continue;
          }
          if (value === CHAR_RIGHT_CURLY_BRACE) {
            if (block.type !== "brace") {
              push({ type: "text", value });
              continue;
            }
            const type = "close";
            block = stack.pop();
            block.close = true;
            push({ type, value });
            depth--;
            block = stack[stack.length - 1];
            continue;
          }
          if (value === CHAR_COMMA && depth > 0) {
            if (block.ranges > 0) {
              block.ranges = 0;
              const open = block.nodes.shift();
              block.nodes = [open, { type: "text", value: stringify(block) }];
            }
            push({ type: "comma", value });
            block.commas++;
            continue;
          }
          if (value === CHAR_DOT && depth > 0 && block.commas === 0) {
            const siblings = block.nodes;
            if (depth === 0 || siblings.length === 0) {
              push({ type: "text", value });
              continue;
            }
            if (prev.type === "dot") {
              block.range = [];
              prev.value += value;
              prev.type = "range";
              if (block.nodes.length !== 3 && block.nodes.length !== 5) {
                block.invalid = true;
                block.ranges = 0;
                prev.type = "text";
                continue;
              }
              block.ranges++;
              block.args = [];
              continue;
            }
            if (prev.type === "range") {
              siblings.pop();
              const before = siblings[siblings.length - 1];
              before.value += prev.value + value;
              prev = before;
              block.ranges--;
              continue;
            }
            push({ type: "dot", value });
            continue;
          }
          push({ type: "text", value });
        }
        do {
          block = stack.pop();
          if (block.type !== "root") {
            block.nodes.forEach((node) => {
              if (!node.nodes) {
                if (node.type === "open")
                  node.isOpen = true;
                if (node.type === "close")
                  node.isClose = true;
                if (!node.nodes)
                  node.type = "text";
                node.invalid = true;
              }
            });
            const parent = stack[stack.length - 1];
            const index2 = parent.nodes.indexOf(block);
            parent.nodes.splice(index2, 1, ...block.nodes);
          }
        } while (stack.length > 0);
        push({ type: "eos" });
        return ast;
      };
      module22.exports = parse;
    }
  });
  var require_braces = __commonJS2({
    "../../node_modules/.pnpm/braces@3.0.3/node_modules/braces/index.js"(exports22, module22) {
      var stringify = require_stringify();
      var compile = require_compile();
      var expand = require_expand();
      var parse = require_parse3();
      var braces = (input, options = {}) => {
        let output = [];
        if (Array.isArray(input)) {
          for (const pattern of input) {
            const result2 = braces.create(pattern, options);
            if (Array.isArray(result2)) {
              output.push(...result2);
            } else {
              output.push(result2);
            }
          }
        } else {
          output = [].concat(braces.create(input, options));
        }
        if (options && options.expand === true && options.nodupes === true) {
          output = [...new Set(output)];
        }
        return output;
      };
      braces.parse = (input, options = {}) => parse(input, options);
      braces.stringify = (input, options = {}) => {
        if (typeof input === "string") {
          return stringify(braces.parse(input, options), options);
        }
        return stringify(input, options);
      };
      braces.compile = (input, options = {}) => {
        if (typeof input === "string") {
          input = braces.parse(input, options);
        }
        return compile(input, options);
      };
      braces.expand = (input, options = {}) => {
        if (typeof input === "string") {
          input = braces.parse(input, options);
        }
        let result2 = expand(input, options);
        if (options.noempty === true) {
          result2 = result2.filter(Boolean);
        }
        if (options.nodupes === true) {
          result2 = [...new Set(result2)];
        }
        return result2;
      };
      braces.create = (input, options = {}) => {
        if (input === "" || input.length < 3) {
          return [input];
        }
        return options.expand !== true ? braces.compile(input, options) : braces.expand(input, options);
      };
      module22.exports = braces;
    }
  });
  var require_constants5 = __commonJS2({
    "../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/constants.js"(exports22, module22) {
      var path2 = __require("path");
      var WIN_SLASH = "\\\\/";
      var WIN_NO_SLASH = `[^${WIN_SLASH}]`;
      var DOT_LITERAL = "\\.";
      var PLUS_LITERAL = "\\+";
      var QMARK_LITERAL = "\\?";
      var SLASH_LITERAL = "\\/";
      var ONE_CHAR = "(?=.)";
      var QMARK = "[^/]";
      var END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
      var START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
      var DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
      var NO_DOT = `(?!${DOT_LITERAL})`;
      var NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
      var NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
      var NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
      var QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
      var STAR = `${QMARK}*?`;
      var POSIX_CHARS = {
        DOT_LITERAL,
        PLUS_LITERAL,
        QMARK_LITERAL,
        SLASH_LITERAL,
        ONE_CHAR,
        QMARK,
        END_ANCHOR,
        DOTS_SLASH,
        NO_DOT,
        NO_DOTS,
        NO_DOT_SLASH,
        NO_DOTS_SLASH,
        QMARK_NO_DOT,
        STAR,
        START_ANCHOR
      };
      var WINDOWS_CHARS = {
        ...POSIX_CHARS,
        SLASH_LITERAL: `[${WIN_SLASH}]`,
        QMARK: WIN_NO_SLASH,
        STAR: `${WIN_NO_SLASH}*?`,
        DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
        NO_DOT: `(?!${DOT_LITERAL})`,
        NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
        NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
        NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
        QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
        START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
        END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
      };
      var POSIX_REGEX_SOURCE = {
        alnum: "a-zA-Z0-9",
        alpha: "a-zA-Z",
        ascii: "\\x00-\\x7F",
        blank: " \\t",
        cntrl: "\\x00-\\x1F\\x7F",
        digit: "0-9",
        graph: "\\x21-\\x7E",
        lower: "a-z",
        print: "\\x20-\\x7E ",
        punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
        space: " \\t\\r\\n\\v\\f",
        upper: "A-Z",
        word: "A-Za-z0-9_",
        xdigit: "A-Fa-f0-9"
      };
      module22.exports = {
        MAX_LENGTH: 1024 * 64,
        POSIX_REGEX_SOURCE,
        REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
        REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
        REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
        REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
        REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
        REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
        REPLACEMENTS: {
          "***": "*",
          "**/**": "**",
          "**/**/**": "**"
        },
        CHAR_0: 48,
        CHAR_9: 57,
        CHAR_UPPERCASE_A: 65,
        CHAR_LOWERCASE_A: 97,
        CHAR_UPPERCASE_Z: 90,
        CHAR_LOWERCASE_Z: 122,
        CHAR_LEFT_PARENTHESES: 40,
        CHAR_RIGHT_PARENTHESES: 41,
        CHAR_ASTERISK: 42,
        CHAR_AMPERSAND: 38,
        CHAR_AT: 64,
        CHAR_BACKWARD_SLASH: 92,
        CHAR_CARRIAGE_RETURN: 13,
        CHAR_CIRCUMFLEX_ACCENT: 94,
        CHAR_COLON: 58,
        CHAR_COMMA: 44,
        CHAR_DOT: 46,
        CHAR_DOUBLE_QUOTE: 34,
        CHAR_EQUAL: 61,
        CHAR_EXCLAMATION_MARK: 33,
        CHAR_FORM_FEED: 12,
        CHAR_FORWARD_SLASH: 47,
        CHAR_GRAVE_ACCENT: 96,
        CHAR_HASH: 35,
        CHAR_HYPHEN_MINUS: 45,
        CHAR_LEFT_ANGLE_BRACKET: 60,
        CHAR_LEFT_CURLY_BRACE: 123,
        CHAR_LEFT_SQUARE_BRACKET: 91,
        CHAR_LINE_FEED: 10,
        CHAR_NO_BREAK_SPACE: 160,
        CHAR_PERCENT: 37,
        CHAR_PLUS: 43,
        CHAR_QUESTION_MARK: 63,
        CHAR_RIGHT_ANGLE_BRACKET: 62,
        CHAR_RIGHT_CURLY_BRACE: 125,
        CHAR_RIGHT_SQUARE_BRACKET: 93,
        CHAR_SEMICOLON: 59,
        CHAR_SINGLE_QUOTE: 39,
        CHAR_SPACE: 32,
        CHAR_TAB: 9,
        CHAR_UNDERSCORE: 95,
        CHAR_VERTICAL_LINE: 124,
        CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
        SEP: path2.sep,
        extglobChars(chars) {
          return {
            "!": { type: "negate", open: "(?:(?!(?:", close: `))${chars.STAR})` },
            "?": { type: "qmark", open: "(?:", close: ")?" },
            "+": { type: "plus", open: "(?:", close: ")+" },
            "*": { type: "star", open: "(?:", close: ")*" },
            "@": { type: "at", open: "(?:", close: ")" }
          };
        },
        globChars(win32) {
          return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;
        }
      };
    }
  });
  var require_utils3 = __commonJS2({
    "../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/utils.js"(exports22) {
      var path2 = __require("path");
      var win32 = process.platform === "win32";
      var {
        REGEX_BACKSLASH,
        REGEX_REMOVE_BACKSLASH,
        REGEX_SPECIAL_CHARS,
        REGEX_SPECIAL_CHARS_GLOBAL
      } = require_constants5();
      exports22.isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
      exports22.hasRegexChars = (str) => REGEX_SPECIAL_CHARS.test(str);
      exports22.isRegexChar = (str) => str.length === 1 && exports22.hasRegexChars(str);
      exports22.escapeRegex = (str) => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, "\\$1");
      exports22.toPosixSlashes = (str) => str.replace(REGEX_BACKSLASH, "/");
      exports22.removeBackslashes = (str) => {
        return str.replace(REGEX_REMOVE_BACKSLASH, (match) => {
          return match === "\\" ? "" : match;
        });
      };
      exports22.supportsLookbehinds = () => {
        const segs = process.version.slice(1).split(".").map(Number);
        if (segs.length === 3 && segs[0] >= 9 || segs[0] === 8 && segs[1] >= 10) {
          return true;
        }
        return false;
      };
      exports22.isWindows = (options) => {
        if (options && typeof options.windows === "boolean") {
          return options.windows;
        }
        return win32 === true || path2.sep === "\\";
      };
      exports22.escapeLast = (input, char, lastIdx) => {
        const idx = input.lastIndexOf(char, lastIdx);
        if (idx === -1)
          return input;
        if (input[idx - 1] === "\\")
          return exports22.escapeLast(input, char, idx - 1);
        return `${input.slice(0, idx)}\\${input.slice(idx)}`;
      };
      exports22.removePrefix = (input, state = {}) => {
        let output = input;
        if (output.startsWith("./")) {
          output = output.slice(2);
          state.prefix = "./";
        }
        return output;
      };
      exports22.wrapOutput = (input, state = {}, options = {}) => {
        const prepend = options.contains ? "" : "^";
        const append = options.contains ? "" : "$";
        let output = `${prepend}(?:${input})${append}`;
        if (state.negated === true) {
          output = `(?:^(?!${output}).*$)`;
        }
        return output;
      };
    }
  });
  var require_scan = __commonJS2({
    "../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/scan.js"(exports22, module22) {
      var utils = require_utils3();
      var {
        CHAR_ASTERISK,
        CHAR_AT,
        CHAR_BACKWARD_SLASH,
        CHAR_COMMA,
        CHAR_DOT,
        CHAR_EXCLAMATION_MARK,
        CHAR_FORWARD_SLASH,
        CHAR_LEFT_CURLY_BRACE,
        CHAR_LEFT_PARENTHESES,
        CHAR_LEFT_SQUARE_BRACKET,
        CHAR_PLUS,
        CHAR_QUESTION_MARK,
        CHAR_RIGHT_CURLY_BRACE,
        CHAR_RIGHT_PARENTHESES,
        CHAR_RIGHT_SQUARE_BRACKET
      } = require_constants5();
      var isPathSeparator = (code) => {
        return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;
      };
      var depth = (token) => {
        if (token.isPrefix !== true) {
          token.depth = token.isGlobstar ? Infinity : 1;
        }
      };
      var scan = (input, options) => {
        const opts = options || {};
        const length = input.length - 1;
        const scanToEnd = opts.parts === true || opts.scanToEnd === true;
        const slashes = [];
        const tokens = [];
        const parts = [];
        let str = input;
        let index = -1;
        let start = 0;
        let lastIndex = 0;
        let isBrace = false;
        let isBracket = false;
        let isGlob = false;
        let isExtglob = false;
        let isGlobstar = false;
        let braceEscaped = false;
        let backslashes = false;
        let negated = false;
        let negatedExtglob = false;
        let finished = false;
        let braces = 0;
        let prev;
        let code;
        let token = { value: "", depth: 0, isGlob: false };
        const eos = () => index >= length;
        const peek = () => str.charCodeAt(index + 1);
        const advance = () => {
          prev = code;
          return str.charCodeAt(++index);
        };
        while (index < length) {
          code = advance();
          let next;
          if (code === CHAR_BACKWARD_SLASH) {
            backslashes = token.backslashes = true;
            code = advance();
            if (code === CHAR_LEFT_CURLY_BRACE) {
              braceEscaped = true;
            }
            continue;
          }
          if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {
            braces++;
            while (eos() !== true && (code = advance())) {
              if (code === CHAR_BACKWARD_SLASH) {
                backslashes = token.backslashes = true;
                advance();
                continue;
              }
              if (code === CHAR_LEFT_CURLY_BRACE) {
                braces++;
                continue;
              }
              if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {
                isBrace = token.isBrace = true;
                isGlob = token.isGlob = true;
                finished = true;
                if (scanToEnd === true) {
                  continue;
                }
                break;
              }
              if (braceEscaped !== true && code === CHAR_COMMA) {
                isBrace = token.isBrace = true;
                isGlob = token.isGlob = true;
                finished = true;
                if (scanToEnd === true) {
                  continue;
                }
                break;
              }
              if (code === CHAR_RIGHT_CURLY_BRACE) {
                braces--;
                if (braces === 0) {
                  braceEscaped = false;
                  isBrace = token.isBrace = true;
                  finished = true;
                  break;
                }
              }
            }
            if (scanToEnd === true) {
              continue;
            }
            break;
          }
          if (code === CHAR_FORWARD_SLASH) {
            slashes.push(index);
            tokens.push(token);
            token = { value: "", depth: 0, isGlob: false };
            if (finished === true)
              continue;
            if (prev === CHAR_DOT && index === start + 1) {
              start += 2;
              continue;
            }
            lastIndex = index + 1;
            continue;
          }
          if (opts.noext !== true) {
            const isExtglobChar = code === CHAR_PLUS || code === CHAR_AT || code === CHAR_ASTERISK || code === CHAR_QUESTION_MARK || code === CHAR_EXCLAMATION_MARK;
            if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {
              isGlob = token.isGlob = true;
              isExtglob = token.isExtglob = true;
              finished = true;
              if (code === CHAR_EXCLAMATION_MARK && index === start) {
                negatedExtglob = true;
              }
              if (scanToEnd === true) {
                while (eos() !== true && (code = advance())) {
                  if (code === CHAR_BACKWARD_SLASH) {
                    backslashes = token.backslashes = true;
                    code = advance();
                    continue;
                  }
                  if (code === CHAR_RIGHT_PARENTHESES) {
                    isGlob = token.isGlob = true;
                    finished = true;
                    break;
                  }
                }
                continue;
              }
              break;
            }
          }
          if (code === CHAR_ASTERISK) {
            if (prev === CHAR_ASTERISK)
              isGlobstar = token.isGlobstar = true;
            isGlob = token.isGlob = true;
            finished = true;
            if (scanToEnd === true) {
              continue;
            }
            break;
          }
          if (code === CHAR_QUESTION_MARK) {
            isGlob = token.isGlob = true;
            finished = true;
            if (scanToEnd === true) {
              continue;
            }
            break;
          }
          if (code === CHAR_LEFT_SQUARE_BRACKET) {
            while (eos() !== true && (next = advance())) {
              if (next === CHAR_BACKWARD_SLASH) {
                backslashes = token.backslashes = true;
                advance();
                continue;
              }
              if (next === CHAR_RIGHT_SQUARE_BRACKET) {
                isBracket = token.isBracket = true;
                isGlob = token.isGlob = true;
                finished = true;
                break;
              }
            }
            if (scanToEnd === true) {
              continue;
            }
            break;
          }
          if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {
            negated = token.negated = true;
            start++;
            continue;
          }
          if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {
            isGlob = token.isGlob = true;
            if (scanToEnd === true) {
              while (eos() !== true && (code = advance())) {
                if (code === CHAR_LEFT_PARENTHESES) {
                  backslashes = token.backslashes = true;
                  code = advance();
                  continue;
                }
                if (code === CHAR_RIGHT_PARENTHESES) {
                  finished = true;
                  break;
                }
              }
              continue;
            }
            break;
          }
          if (isGlob === true) {
            finished = true;
            if (scanToEnd === true) {
              continue;
            }
            break;
          }
        }
        if (opts.noext === true) {
          isExtglob = false;
          isGlob = false;
        }
        let base = str;
        let prefix = "";
        let glob = "";
        if (start > 0) {
          prefix = str.slice(0, start);
          str = str.slice(start);
          lastIndex -= start;
        }
        if (base && isGlob === true && lastIndex > 0) {
          base = str.slice(0, lastIndex);
          glob = str.slice(lastIndex);
        } else if (isGlob === true) {
          base = "";
          glob = str;
        } else {
          base = str;
        }
        if (base && base !== "" && base !== "/" && base !== str) {
          if (isPathSeparator(base.charCodeAt(base.length - 1))) {
            base = base.slice(0, -1);
          }
        }
        if (opts.unescape === true) {
          if (glob)
            glob = utils.removeBackslashes(glob);
          if (base && backslashes === true) {
            base = utils.removeBackslashes(base);
          }
        }
        const state = {
          prefix,
          input,
          start,
          base,
          glob,
          isBrace,
          isBracket,
          isGlob,
          isExtglob,
          isGlobstar,
          negated,
          negatedExtglob
        };
        if (opts.tokens === true) {
          state.maxDepth = 0;
          if (!isPathSeparator(code)) {
            tokens.push(token);
          }
          state.tokens = tokens;
        }
        if (opts.parts === true || opts.tokens === true) {
          let prevIndex;
          for (let idx = 0;idx < slashes.length; idx++) {
            const n = prevIndex ? prevIndex + 1 : start;
            const i = slashes[idx];
            const value = input.slice(n, i);
            if (opts.tokens) {
              if (idx === 0 && start !== 0) {
                tokens[idx].isPrefix = true;
                tokens[idx].value = prefix;
              } else {
                tokens[idx].value = value;
              }
              depth(tokens[idx]);
              state.maxDepth += tokens[idx].depth;
            }
            if (idx !== 0 || value !== "") {
              parts.push(value);
            }
            prevIndex = i;
          }
          if (prevIndex && prevIndex + 1 < input.length) {
            const value = input.slice(prevIndex + 1);
            parts.push(value);
            if (opts.tokens) {
              tokens[tokens.length - 1].value = value;
              depth(tokens[tokens.length - 1]);
              state.maxDepth += tokens[tokens.length - 1].depth;
            }
          }
          state.slashes = slashes;
          state.parts = parts;
        }
        return state;
      };
      module22.exports = scan;
    }
  });
  var require_parse4 = __commonJS2({
    "../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/parse.js"(exports22, module22) {
      var constants = require_constants5();
      var utils = require_utils3();
      var {
        MAX_LENGTH,
        POSIX_REGEX_SOURCE,
        REGEX_NON_SPECIAL_CHARS,
        REGEX_SPECIAL_CHARS_BACKREF,
        REPLACEMENTS
      } = constants;
      var expandRange = (args, options) => {
        if (typeof options.expandRange === "function") {
          return options.expandRange(...args, options);
        }
        args.sort();
        const value = `[${args.join("-")}]`;
        try {
          new RegExp(value);
        } catch (ex) {
          return args.map((v) => utils.escapeRegex(v)).join("..");
        }
        return value;
      };
      var syntaxError = (type, char) => {
        return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`;
      };
      var parse = (input, options) => {
        if (typeof input !== "string") {
          throw new TypeError("Expected a string");
        }
        input = REPLACEMENTS[input] || input;
        const opts = { ...options };
        const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
        let len = input.length;
        if (len > max) {
          throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
        }
        const bos = { type: "bos", value: "", output: opts.prepend || "" };
        const tokens = [bos];
        const capture = opts.capture ? "" : "?:";
        const win32 = utils.isWindows(options);
        const PLATFORM_CHARS = constants.globChars(win32);
        const EXTGLOB_CHARS = constants.extglobChars(PLATFORM_CHARS);
        const {
          DOT_LITERAL,
          PLUS_LITERAL,
          SLASH_LITERAL,
          ONE_CHAR,
          DOTS_SLASH,
          NO_DOT,
          NO_DOT_SLASH,
          NO_DOTS_SLASH,
          QMARK,
          QMARK_NO_DOT,
          STAR,
          START_ANCHOR
        } = PLATFORM_CHARS;
        const globstar = (opts2) => {
          return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
        };
        const nodot = opts.dot ? "" : NO_DOT;
        const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;
        let star = opts.bash === true ? globstar(opts) : STAR;
        if (opts.capture) {
          star = `(${star})`;
        }
        if (typeof opts.noext === "boolean") {
          opts.noextglob = opts.noext;
        }
        const state = {
          input,
          index: -1,
          start: 0,
          dot: opts.dot === true,
          consumed: "",
          output: "",
          prefix: "",
          backtrack: false,
          negated: false,
          brackets: 0,
          braces: 0,
          parens: 0,
          quotes: 0,
          globstar: false,
          tokens
        };
        input = utils.removePrefix(input, state);
        len = input.length;
        const extglobs = [];
        const braces = [];
        const stack = [];
        let prev = bos;
        let value;
        const eos = () => state.index === len - 1;
        const peek = state.peek = (n = 1) => input[state.index + n];
        const advance = state.advance = () => input[++state.index] || "";
        const remaining = () => input.slice(state.index + 1);
        const consume = (value2 = "", num = 0) => {
          state.consumed += value2;
          state.index += num;
        };
        const append = (token) => {
          state.output += token.output != null ? token.output : token.value;
          consume(token.value);
        };
        const negate = () => {
          let count = 1;
          while (peek() === "!" && (peek(2) !== "(" || peek(3) === "?")) {
            advance();
            state.start++;
            count++;
          }
          if (count % 2 === 0) {
            return false;
          }
          state.negated = true;
          state.start++;
          return true;
        };
        const increment = (type) => {
          state[type]++;
          stack.push(type);
        };
        const decrement = (type) => {
          state[type]--;
          stack.pop();
        };
        const push = (tok) => {
          if (prev.type === "globstar") {
            const isBrace = state.braces > 0 && (tok.type === "comma" || tok.type === "brace");
            const isExtglob = tok.extglob === true || extglobs.length && (tok.type === "pipe" || tok.type === "paren");
            if (tok.type !== "slash" && tok.type !== "paren" && !isBrace && !isExtglob) {
              state.output = state.output.slice(0, -prev.output.length);
              prev.type = "star";
              prev.value = "*";
              prev.output = star;
              state.output += prev.output;
            }
          }
          if (extglobs.length && tok.type !== "paren") {
            extglobs[extglobs.length - 1].inner += tok.value;
          }
          if (tok.value || tok.output)
            append(tok);
          if (prev && prev.type === "text" && tok.type === "text") {
            prev.value += tok.value;
            prev.output = (prev.output || "") + tok.value;
            return;
          }
          tok.prev = prev;
          tokens.push(tok);
          prev = tok;
        };
        const extglobOpen = (type, value2) => {
          const token = { ...EXTGLOB_CHARS[value2], conditions: 1, inner: "" };
          token.prev = prev;
          token.parens = state.parens;
          token.output = state.output;
          const output = (opts.capture ? "(" : "") + token.open;
          increment("parens");
          push({ type, value: value2, output: state.output ? "" : ONE_CHAR });
          push({ type: "paren", extglob: true, value: advance(), output });
          extglobs.push(token);
        };
        const extglobClose = (token) => {
          let output = token.close + (opts.capture ? ")" : "");
          let rest;
          if (token.type === "negate") {
            let extglobStar = star;
            if (token.inner && token.inner.length > 1 && token.inner.includes("/")) {
              extglobStar = globstar(opts);
            }
            if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) {
              output = token.close = `)$))${extglobStar}`;
            }
            if (token.inner.includes("*") && (rest = remaining()) && /^\.[^\\/.]+$/.test(rest)) {
              const expression = parse(rest, { ...options, fastpaths: false }).output;
              output = token.close = `)${expression})${extglobStar})`;
            }
            if (token.prev.type === "bos") {
              state.negatedExtglob = true;
            }
          }
          push({ type: "paren", extglob: true, value, output });
          decrement("parens");
        };
        if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
          let backslashes = false;
          let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index) => {
            if (first === "\\") {
              backslashes = true;
              return m;
            }
            if (first === "?") {
              if (esc) {
                return esc + first + (rest ? QMARK.repeat(rest.length) : "");
              }
              if (index === 0) {
                return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : "");
              }
              return QMARK.repeat(chars.length);
            }
            if (first === ".") {
              return DOT_LITERAL.repeat(chars.length);
            }
            if (first === "*") {
              if (esc) {
                return esc + first + (rest ? star : "");
              }
              return star;
            }
            return esc ? m : `\\${m}`;
          });
          if (backslashes === true) {
            if (opts.unescape === true) {
              output = output.replace(/\\/g, "");
            } else {
              output = output.replace(/\\+/g, (m) => {
                return m.length % 2 === 0 ? "\\\\" : m ? "\\" : "";
              });
            }
          }
          if (output === input && opts.contains === true) {
            state.output = input;
            return state;
          }
          state.output = utils.wrapOutput(output, state, options);
          return state;
        }
        while (!eos()) {
          value = advance();
          if (value === "\x00") {
            continue;
          }
          if (value === "\\") {
            const next = peek();
            if (next === "/" && opts.bash !== true) {
              continue;
            }
            if (next === "." || next === ";") {
              continue;
            }
            if (!next) {
              value += "\\";
              push({ type: "text", value });
              continue;
            }
            const match = /^\\+/.exec(remaining());
            let slashes = 0;
            if (match && match[0].length > 2) {
              slashes = match[0].length;
              state.index += slashes;
              if (slashes % 2 !== 0) {
                value += "\\";
              }
            }
            if (opts.unescape === true) {
              value = advance();
            } else {
              value += advance();
            }
            if (state.brackets === 0) {
              push({ type: "text", value });
              continue;
            }
          }
          if (state.brackets > 0 && (value !== "]" || prev.value === "[" || prev.value === "[^")) {
            if (opts.posix !== false && value === ":") {
              const inner = prev.value.slice(1);
              if (inner.includes("[")) {
                prev.posix = true;
                if (inner.includes(":")) {
                  const idx = prev.value.lastIndexOf("[");
                  const pre = prev.value.slice(0, idx);
                  const rest2 = prev.value.slice(idx + 2);
                  const posix = POSIX_REGEX_SOURCE[rest2];
                  if (posix) {
                    prev.value = pre + posix;
                    state.backtrack = true;
                    advance();
                    if (!bos.output && tokens.indexOf(prev) === 1) {
                      bos.output = ONE_CHAR;
                    }
                    continue;
                  }
                }
              }
            }
            if (value === "[" && peek() !== ":" || value === "-" && peek() === "]") {
              value = `\\${value}`;
            }
            if (value === "]" && (prev.value === "[" || prev.value === "[^")) {
              value = `\\${value}`;
            }
            if (opts.posix === true && value === "!" && prev.value === "[") {
              value = "^";
            }
            prev.value += value;
            append({ value });
            continue;
          }
          if (state.quotes === 1 && value !== '"') {
            value = utils.escapeRegex(value);
            prev.value += value;
            append({ value });
            continue;
          }
          if (value === '"') {
            state.quotes = state.quotes === 1 ? 0 : 1;
            if (opts.keepQuotes === true) {
              push({ type: "text", value });
            }
            continue;
          }
          if (value === "(") {
            increment("parens");
            push({ type: "paren", value });
            continue;
          }
          if (value === ")") {
            if (state.parens === 0 && opts.strictBrackets === true) {
              throw new SyntaxError(syntaxError("opening", "("));
            }
            const extglob = extglobs[extglobs.length - 1];
            if (extglob && state.parens === extglob.parens + 1) {
              extglobClose(extglobs.pop());
              continue;
            }
            push({ type: "paren", value, output: state.parens ? ")" : "\\)" });
            decrement("parens");
            continue;
          }
          if (value === "[") {
            if (opts.nobracket === true || !remaining().includes("]")) {
              if (opts.nobracket !== true && opts.strictBrackets === true) {
                throw new SyntaxError(syntaxError("closing", "]"));
              }
              value = `\\${value}`;
            } else {
              increment("brackets");
            }
            push({ type: "bracket", value });
            continue;
          }
          if (value === "]") {
            if (opts.nobracket === true || prev && prev.type === "bracket" && prev.value.length === 1) {
              push({ type: "text", value, output: `\\${value}` });
              continue;
            }
            if (state.brackets === 0) {
              if (opts.strictBrackets === true) {
                throw new SyntaxError(syntaxError("opening", "["));
              }
              push({ type: "text", value, output: `\\${value}` });
              continue;
            }
            decrement("brackets");
            const prevValue = prev.value.slice(1);
            if (prev.posix !== true && prevValue[0] === "^" && !prevValue.includes("/")) {
              value = `/${value}`;
            }
            prev.value += value;
            append({ value });
            if (opts.literalBrackets === false || utils.hasRegexChars(prevValue)) {
              continue;
            }
            const escaped = utils.escapeRegex(prev.value);
            state.output = state.output.slice(0, -prev.value.length);
            if (opts.literalBrackets === true) {
              state.output += escaped;
              prev.value = escaped;
              continue;
            }
            prev.value = `(${capture}${escaped}|${prev.value})`;
            state.output += prev.value;
            continue;
          }
          if (value === "{" && opts.nobrace !== true) {
            increment("braces");
            const open = {
              type: "brace",
              value,
              output: "(",
              outputIndex: state.output.length,
              tokensIndex: state.tokens.length
            };
            braces.push(open);
            push(open);
            continue;
          }
          if (value === "}") {
            const brace = braces[braces.length - 1];
            if (opts.nobrace === true || !brace) {
              push({ type: "text", value, output: value });
              continue;
            }
            let output = ")";
            if (brace.dots === true) {
              const arr = tokens.slice();
              const range = [];
              for (let i = arr.length - 1;i >= 0; i--) {
                tokens.pop();
                if (arr[i].type === "brace") {
                  break;
                }
                if (arr[i].type !== "dots") {
                  range.unshift(arr[i].value);
                }
              }
              output = expandRange(range, opts);
              state.backtrack = true;
            }
            if (brace.comma !== true && brace.dots !== true) {
              const out = state.output.slice(0, brace.outputIndex);
              const toks = state.tokens.slice(brace.tokensIndex);
              brace.value = brace.output = "\\{";
              value = output = "\\}";
              state.output = out;
              for (const t of toks) {
                state.output += t.output || t.value;
              }
            }
            push({ type: "brace", value, output });
            decrement("braces");
            braces.pop();
            continue;
          }
          if (value === "|") {
            if (extglobs.length > 0) {
              extglobs[extglobs.length - 1].conditions++;
            }
            push({ type: "text", value });
            continue;
          }
          if (value === ",") {
            let output = value;
            const brace = braces[braces.length - 1];
            if (brace && stack[stack.length - 1] === "braces") {
              brace.comma = true;
              output = "|";
            }
            push({ type: "comma", value, output });
            continue;
          }
          if (value === "/") {
            if (prev.type === "dot" && state.index === state.start + 1) {
              state.start = state.index + 1;
              state.consumed = "";
              state.output = "";
              tokens.pop();
              prev = bos;
              continue;
            }
            push({ type: "slash", value, output: SLASH_LITERAL });
            continue;
          }
          if (value === ".") {
            if (state.braces > 0 && prev.type === "dot") {
              if (prev.value === ".")
                prev.output = DOT_LITERAL;
              const brace = braces[braces.length - 1];
              prev.type = "dots";
              prev.output += value;
              prev.value += value;
              brace.dots = true;
              continue;
            }
            if (state.braces + state.parens === 0 && prev.type !== "bos" && prev.type !== "slash") {
              push({ type: "text", value, output: DOT_LITERAL });
              continue;
            }
            push({ type: "dot", value, output: DOT_LITERAL });
            continue;
          }
          if (value === "?") {
            const isGroup = prev && prev.value === "(";
            if (!isGroup && opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
              extglobOpen("qmark", value);
              continue;
            }
            if (prev && prev.type === "paren") {
              const next = peek();
              let output = value;
              if (next === "<" && !utils.supportsLookbehinds()) {
                throw new Error("Node.js v10 or higher is required for regex lookbehinds");
              }
              if (prev.value === "(" && !/[!=<:]/.test(next) || next === "<" && !/<([!=]|\w+>)/.test(remaining())) {
                output = `\\${value}`;
              }
              push({ type: "text", value, output });
              continue;
            }
            if (opts.dot !== true && (prev.type === "slash" || prev.type === "bos")) {
              push({ type: "qmark", value, output: QMARK_NO_DOT });
              continue;
            }
            push({ type: "qmark", value, output: QMARK });
            continue;
          }
          if (value === "!") {
            if (opts.noextglob !== true && peek() === "(") {
              if (peek(2) !== "?" || !/[!=<:]/.test(peek(3))) {
                extglobOpen("negate", value);
                continue;
              }
            }
            if (opts.nonegate !== true && state.index === 0) {
              negate();
              continue;
            }
          }
          if (value === "+") {
            if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
              extglobOpen("plus", value);
              continue;
            }
            if (prev && prev.value === "(" || opts.regex === false) {
              push({ type: "plus", value, output: PLUS_LITERAL });
              continue;
            }
            if (prev && (prev.type === "bracket" || prev.type === "paren" || prev.type === "brace") || state.parens > 0) {
              push({ type: "plus", value });
              continue;
            }
            push({ type: "plus", value: PLUS_LITERAL });
            continue;
          }
          if (value === "@") {
            if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
              push({ type: "at", extglob: true, value, output: "" });
              continue;
            }
            push({ type: "text", value });
            continue;
          }
          if (value !== "*") {
            if (value === "$" || value === "^") {
              value = `\\${value}`;
            }
            const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());
            if (match) {
              value += match[0];
              state.index += match[0].length;
            }
            push({ type: "text", value });
            continue;
          }
          if (prev && (prev.type === "globstar" || prev.star === true)) {
            prev.type = "star";
            prev.star = true;
            prev.value += value;
            prev.output = star;
            state.backtrack = true;
            state.globstar = true;
            consume(value);
            continue;
          }
          let rest = remaining();
          if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
            extglobOpen("star", value);
            continue;
          }
          if (prev.type === "star") {
            if (opts.noglobstar === true) {
              consume(value);
              continue;
            }
            const prior = prev.prev;
            const before = prior.prev;
            const isStart = prior.type === "slash" || prior.type === "bos";
            const afterStar = before && (before.type === "star" || before.type === "globstar");
            if (opts.bash === true && (!isStart || rest[0] && rest[0] !== "/")) {
              push({ type: "star", value, output: "" });
              continue;
            }
            const isBrace = state.braces > 0 && (prior.type === "comma" || prior.type === "brace");
            const isExtglob = extglobs.length && (prior.type === "pipe" || prior.type === "paren");
            if (!isStart && prior.type !== "paren" && !isBrace && !isExtglob) {
              push({ type: "star", value, output: "" });
              continue;
            }
            while (rest.slice(0, 3) === "/**") {
              const after = input[state.index + 4];
              if (after && after !== "/") {
                break;
              }
              rest = rest.slice(3);
              consume("/**", 3);
            }
            if (prior.type === "bos" && eos()) {
              prev.type = "globstar";
              prev.value += value;
              prev.output = globstar(opts);
              state.output = prev.output;
              state.globstar = true;
              consume(value);
              continue;
            }
            if (prior.type === "slash" && prior.prev.type !== "bos" && !afterStar && eos()) {
              state.output = state.output.slice(0, -(prior.output + prev.output).length);
              prior.output = `(?:${prior.output}`;
              prev.type = "globstar";
              prev.output = globstar(opts) + (opts.strictSlashes ? ")" : "|$)");
              prev.value += value;
              state.globstar = true;
              state.output += prior.output + prev.output;
              consume(value);
              continue;
            }
            if (prior.type === "slash" && prior.prev.type !== "bos" && rest[0] === "/") {
              const end = rest[1] !== undefined ? "|$" : "";
              state.output = state.output.slice(0, -(prior.output + prev.output).length);
              prior.output = `(?:${prior.output}`;
              prev.type = "globstar";
              prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;
              prev.value += value;
              state.output += prior.output + prev.output;
              state.globstar = true;
              consume(value + advance());
              push({ type: "slash", value: "/", output: "" });
              continue;
            }
            if (prior.type === "bos" && rest[0] === "/") {
              prev.type = "globstar";
              prev.value += value;
              prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;
              state.output = prev.output;
              state.globstar = true;
              consume(value + advance());
              push({ type: "slash", value: "/", output: "" });
              continue;
            }
            state.output = state.output.slice(0, -prev.output.length);
            prev.type = "globstar";
            prev.output = globstar(opts);
            prev.value += value;
            state.output += prev.output;
            state.globstar = true;
            consume(value);
            continue;
          }
          const token = { type: "star", value, output: star };
          if (opts.bash === true) {
            token.output = ".*?";
            if (prev.type === "bos" || prev.type === "slash") {
              token.output = nodot + token.output;
            }
            push(token);
            continue;
          }
          if (prev && (prev.type === "bracket" || prev.type === "paren") && opts.regex === true) {
            token.output = value;
            push(token);
            continue;
          }
          if (state.index === state.start || prev.type === "slash" || prev.type === "dot") {
            if (prev.type === "dot") {
              state.output += NO_DOT_SLASH;
              prev.output += NO_DOT_SLASH;
            } else if (opts.dot === true) {
              state.output += NO_DOTS_SLASH;
              prev.output += NO_DOTS_SLASH;
            } else {
              state.output += nodot;
              prev.output += nodot;
            }
            if (peek() !== "*") {
              state.output += ONE_CHAR;
              prev.output += ONE_CHAR;
            }
          }
          push(token);
        }
        while (state.brackets > 0) {
          if (opts.strictBrackets === true)
            throw new SyntaxError(syntaxError("closing", "]"));
          state.output = utils.escapeLast(state.output, "[");
          decrement("brackets");
        }
        while (state.parens > 0) {
          if (opts.strictBrackets === true)
            throw new SyntaxError(syntaxError("closing", ")"));
          state.output = utils.escapeLast(state.output, "(");
          decrement("parens");
        }
        while (state.braces > 0) {
          if (opts.strictBrackets === true)
            throw new SyntaxError(syntaxError("closing", "}"));
          state.output = utils.escapeLast(state.output, "{");
          decrement("braces");
        }
        if (opts.strictSlashes !== true && (prev.type === "star" || prev.type === "bracket")) {
          push({ type: "maybe_slash", value: "", output: `${SLASH_LITERAL}?` });
        }
        if (state.backtrack === true) {
          state.output = "";
          for (const token of state.tokens) {
            state.output += token.output != null ? token.output : token.value;
            if (token.suffix) {
              state.output += token.suffix;
            }
          }
        }
        return state;
      };
      parse.fastpaths = (input, options) => {
        const opts = { ...options };
        const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
        const len = input.length;
        if (len > max) {
          throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
        }
        input = REPLACEMENTS[input] || input;
        const win32 = utils.isWindows(options);
        const {
          DOT_LITERAL,
          SLASH_LITERAL,
          ONE_CHAR,
          DOTS_SLASH,
          NO_DOT,
          NO_DOTS,
          NO_DOTS_SLASH,
          STAR,
          START_ANCHOR
        } = constants.globChars(win32);
        const nodot = opts.dot ? NO_DOTS : NO_DOT;
        const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;
        const capture = opts.capture ? "" : "?:";
        const state = { negated: false, prefix: "" };
        let star = opts.bash === true ? ".*?" : STAR;
        if (opts.capture) {
          star = `(${star})`;
        }
        const globstar = (opts2) => {
          if (opts2.noglobstar === true)
            return star;
          return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
        };
        const create = (str) => {
          switch (str) {
            case "*":
              return `${nodot}${ONE_CHAR}${star}`;
            case ".*":
              return `${DOT_LITERAL}${ONE_CHAR}${star}`;
            case "*.*":
              return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
            case "*/*":
              return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;
            case "**":
              return nodot + globstar(opts);
            case "**/*":
              return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;
            case "**/*.*":
              return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
            case "**/.*":
              return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;
            default: {
              const match = /^(.*?)\.(\w+)$/.exec(str);
              if (!match)
                return;
              const source2 = create(match[1]);
              if (!source2)
                return;
              return source2 + DOT_LITERAL + match[2];
            }
          }
        };
        const output = utils.removePrefix(input, state);
        let source = create(output);
        if (source && opts.strictSlashes !== true) {
          source += `${SLASH_LITERAL}?`;
        }
        return source;
      };
      module22.exports = parse;
    }
  });
  var require_picomatch = __commonJS2({
    "../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/picomatch.js"(exports22, module22) {
      var path2 = __require("path");
      var scan = require_scan();
      var parse = require_parse4();
      var utils = require_utils3();
      var constants = require_constants5();
      var isObject = (val) => val && typeof val === "object" && !Array.isArray(val);
      var picomatch = (glob, options, returnState = false) => {
        if (Array.isArray(glob)) {
          const fns = glob.map((input) => picomatch(input, options, returnState));
          const arrayMatcher = (str) => {
            for (const isMatch of fns) {
              const state2 = isMatch(str);
              if (state2)
                return state2;
            }
            return false;
          };
          return arrayMatcher;
        }
        const isState = isObject(glob) && glob.tokens && glob.input;
        if (glob === "" || typeof glob !== "string" && !isState) {
          throw new TypeError("Expected pattern to be a non-empty string");
        }
        const opts = options || {};
        const posix = utils.isWindows(options);
        const regex = isState ? picomatch.compileRe(glob, options) : picomatch.makeRe(glob, options, false, true);
        const state = regex.state;
        delete regex.state;
        let isIgnored = () => false;
        if (opts.ignore) {
          const ignoreOpts = { ...options, ignore: null, onMatch: null, onResult: null };
          isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);
        }
        const matcher = (input, returnObject = false) => {
          const { isMatch, match, output } = picomatch.test(input, regex, options, { glob, posix });
          const result2 = { glob, state, regex, posix, input, output, match, isMatch };
          if (typeof opts.onResult === "function") {
            opts.onResult(result2);
          }
          if (isMatch === false) {
            result2.isMatch = false;
            return returnObject ? result2 : false;
          }
          if (isIgnored(input)) {
            if (typeof opts.onIgnore === "function") {
              opts.onIgnore(result2);
            }
            result2.isMatch = false;
            return returnObject ? result2 : false;
          }
          if (typeof opts.onMatch === "function") {
            opts.onMatch(result2);
          }
          return returnObject ? result2 : true;
        };
        if (returnState) {
          matcher.state = state;
        }
        return matcher;
      };
      picomatch.test = (input, regex, options, { glob, posix } = {}) => {
        if (typeof input !== "string") {
          throw new TypeError("Expected input to be a string");
        }
        if (input === "") {
          return { isMatch: false, output: "" };
        }
        const opts = options || {};
        const format = opts.format || (posix ? utils.toPosixSlashes : null);
        let match = input === glob;
        let output = match && format ? format(input) : input;
        if (match === false) {
          output = format ? format(input) : input;
          match = output === glob;
        }
        if (match === false || opts.capture === true) {
          if (opts.matchBase === true || opts.basename === true) {
            match = picomatch.matchBase(input, regex, options, posix);
          } else {
            match = regex.exec(output);
          }
        }
        return { isMatch: Boolean(match), match, output };
      };
      picomatch.matchBase = (input, glob, options, posix = utils.isWindows(options)) => {
        const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);
        return regex.test(path2.basename(input));
      };
      picomatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);
      picomatch.parse = (pattern, options) => {
        if (Array.isArray(pattern))
          return pattern.map((p) => picomatch.parse(p, options));
        return parse(pattern, { ...options, fastpaths: false });
      };
      picomatch.scan = (input, options) => scan(input, options);
      picomatch.compileRe = (state, options, returnOutput = false, returnState = false) => {
        if (returnOutput === true) {
          return state.output;
        }
        const opts = options || {};
        const prepend = opts.contains ? "" : "^";
        const append = opts.contains ? "" : "$";
        let source = `${prepend}(?:${state.output})${append}`;
        if (state && state.negated === true) {
          source = `^(?!${source}).*$`;
        }
        const regex = picomatch.toRegex(source, options);
        if (returnState === true) {
          regex.state = state;
        }
        return regex;
      };
      picomatch.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {
        if (!input || typeof input !== "string") {
          throw new TypeError("Expected a non-empty string");
        }
        let parsed = { negated: false, fastpaths: true };
        if (options.fastpaths !== false && (input[0] === "." || input[0] === "*")) {
          parsed.output = parse.fastpaths(input, options);
        }
        if (!parsed.output) {
          parsed = parse(input, options);
        }
        return picomatch.compileRe(parsed, options, returnOutput, returnState);
      };
      picomatch.toRegex = (source, options) => {
        try {
          const opts = options || {};
          return new RegExp(source, opts.flags || (opts.nocase ? "i" : ""));
        } catch (err) {
          if (options && options.debug === true)
            throw err;
          return /$^/;
        }
      };
      picomatch.constants = constants;
      module22.exports = picomatch;
    }
  });
  var require_picomatch2 = __commonJS2({
    "../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/index.js"(exports22, module22) {
      module22.exports = require_picomatch();
    }
  });
  var require_micromatch = __commonJS2({
    "../../node_modules/.pnpm/micromatch@4.0.8/node_modules/micromatch/index.js"(exports22, module22) {
      var util = __require("util");
      var braces = require_braces();
      var picomatch = require_picomatch2();
      var utils = require_utils3();
      var isEmptyString = (v) => v === "" || v === "./";
      var hasBraces = (v) => {
        const index = v.indexOf("{");
        return index > -1 && v.indexOf("}", index) > -1;
      };
      var micromatch = (list, patterns, options) => {
        patterns = [].concat(patterns);
        list = [].concat(list);
        let omit = /* @__PURE__ */ new Set;
        let keep = /* @__PURE__ */ new Set;
        let items = /* @__PURE__ */ new Set;
        let negatives = 0;
        let onResult = (state) => {
          items.add(state.output);
          if (options && options.onResult) {
            options.onResult(state);
          }
        };
        for (let i = 0;i < patterns.length; i++) {
          let isMatch = picomatch(String(patterns[i]), { ...options, onResult }, true);
          let negated = isMatch.state.negated || isMatch.state.negatedExtglob;
          if (negated)
            negatives++;
          for (let item of list) {
            let matched = isMatch(item, true);
            let match = negated ? !matched.isMatch : matched.isMatch;
            if (!match)
              continue;
            if (negated) {
              omit.add(matched.output);
            } else {
              omit.delete(matched.output);
              keep.add(matched.output);
            }
          }
        }
        let result2 = negatives === patterns.length ? [...items] : [...keep];
        let matches = result2.filter((item) => !omit.has(item));
        if (options && matches.length === 0) {
          if (options.failglob === true) {
            throw new Error(`No matches found for "${patterns.join(", ")}"`);
          }
          if (options.nonull === true || options.nullglob === true) {
            return options.unescape ? patterns.map((p) => p.replace(/\\/g, "")) : patterns;
          }
        }
        return matches;
      };
      micromatch.match = micromatch;
      micromatch.matcher = (pattern, options) => picomatch(pattern, options);
      micromatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);
      micromatch.any = micromatch.isMatch;
      micromatch.not = (list, patterns, options = {}) => {
        patterns = [].concat(patterns).map(String);
        let result2 = /* @__PURE__ */ new Set;
        let items = [];
        let onResult = (state) => {
          if (options.onResult)
            options.onResult(state);
          items.push(state.output);
        };
        let matches = new Set(micromatch(list, patterns, { ...options, onResult }));
        for (let item of items) {
          if (!matches.has(item)) {
            result2.add(item);
          }
        }
        return [...result2];
      };
      micromatch.contains = (str, pattern, options) => {
        if (typeof str !== "string") {
          throw new TypeError(`Expected a string: "${util.inspect(str)}"`);
        }
        if (Array.isArray(pattern)) {
          return pattern.some((p) => micromatch.contains(str, p, options));
        }
        if (typeof pattern === "string") {
          if (isEmptyString(str) || isEmptyString(pattern)) {
            return false;
          }
          if (str.includes(pattern) || str.startsWith("./") && str.slice(2).includes(pattern)) {
            return true;
          }
        }
        return micromatch.isMatch(str, pattern, { ...options, contains: true });
      };
      micromatch.matchKeys = (obj, patterns, options) => {
        if (!utils.isObject(obj)) {
          throw new TypeError("Expected the first argument to be an object");
        }
        let keys = micromatch(Object.keys(obj), patterns, options);
        let res = {};
        for (let key of keys)
          res[key] = obj[key];
        return res;
      };
      micromatch.some = (list, patterns, options) => {
        let items = [].concat(list);
        for (let pattern of [].concat(patterns)) {
          let isMatch = picomatch(String(pattern), options);
          if (items.some((item) => isMatch(item))) {
            return true;
          }
        }
        return false;
      };
      micromatch.every = (list, patterns, options) => {
        let items = [].concat(list);
        for (let pattern of [].concat(patterns)) {
          let isMatch = picomatch(String(pattern), options);
          if (!items.every((item) => isMatch(item))) {
            return false;
          }
        }
        return true;
      };
      micromatch.all = (str, patterns, options) => {
        if (typeof str !== "string") {
          throw new TypeError(`Expected a string: "${util.inspect(str)}"`);
        }
        return [].concat(patterns).every((p) => picomatch(p, options)(str));
      };
      micromatch.capture = (glob, input, options) => {
        let posix = utils.isWindows(options);
        let regex = picomatch.makeRe(String(glob), { ...options, capture: true });
        let match = regex.exec(posix ? utils.toPosixSlashes(input) : input);
        if (match) {
          return match.slice(1).map((v) => v === undefined ? "" : v);
        }
      };
      micromatch.makeRe = (...args) => picomatch.makeRe(...args);
      micromatch.scan = (...args) => picomatch.scan(...args);
      micromatch.parse = (patterns, options) => {
        let res = [];
        for (let pattern of [].concat(patterns || [])) {
          for (let str of braces(String(pattern), options)) {
            res.push(picomatch.parse(str, options));
          }
        }
        return res;
      };
      micromatch.braces = (pattern, options) => {
        if (typeof pattern !== "string")
          throw new TypeError("Expected a string");
        if (options && options.nobrace === true || !hasBraces(pattern)) {
          return [pattern];
        }
        return braces(pattern, options);
      };
      micromatch.braceExpand = (pattern, options) => {
        if (typeof pattern !== "string")
          throw new TypeError("Expected a string");
        return micromatch.braces(pattern, { ...options, expand: true });
      };
      micromatch.hasBraces = hasBraces;
      module22.exports = micromatch;
    }
  });
  var require_ansi_regex = __commonJS2({
    "../../node_modules/.pnpm/ansi-regex@5.0.1/node_modules/ansi-regex/index.js"(exports22, module22) {
      module22.exports = ({ onlyFirst = false } = {}) => {
        const pattern = [
          "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
          "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"
        ].join("|");
        return new RegExp(pattern, onlyFirst ? undefined : "g");
      };
    }
  });
  var require_strip_ansi = __commonJS2({
    "../../node_modules/.pnpm/strip-ansi@6.0.1/node_modules/strip-ansi/index.js"(exports22, module22) {
      var ansiRegex = require_ansi_regex();
      module22.exports = (string) => typeof string === "string" ? string.replace(ansiRegex(), "") : string;
    }
  });
  var require_listCacheClear = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_listCacheClear.js"(exports22, module22) {
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }
      module22.exports = listCacheClear;
    }
  });
  var require_eq2 = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/eq.js"(exports22, module22) {
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      module22.exports = eq;
    }
  });
  var require_assocIndexOf = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_assocIndexOf.js"(exports22, module22) {
      var eq = require_eq2();
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      module22.exports = assocIndexOf;
    }
  });
  var require_listCacheDelete = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_listCacheDelete.js"(exports22, module22) {
      var assocIndexOf = require_assocIndexOf();
      var arrayProto = Array.prototype;
      var splice = arrayProto.splice;
      function listCacheDelete(key) {
        var data = this.__data__, index = assocIndexOf(data, key);
        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }
        --this.size;
        return true;
      }
      module22.exports = listCacheDelete;
    }
  });
  var require_listCacheGet = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_listCacheGet.js"(exports22, module22) {
      var assocIndexOf = require_assocIndexOf();
      function listCacheGet(key) {
        var data = this.__data__, index = assocIndexOf(data, key);
        return index < 0 ? undefined : data[index][1];
      }
      module22.exports = listCacheGet;
    }
  });
  var require_listCacheHas = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_listCacheHas.js"(exports22, module22) {
      var assocIndexOf = require_assocIndexOf();
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      module22.exports = listCacheHas;
    }
  });
  var require_listCacheSet = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_listCacheSet.js"(exports22, module22) {
      var assocIndexOf = require_assocIndexOf();
      function listCacheSet(key, value) {
        var data = this.__data__, index = assocIndexOf(data, key);
        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }
        return this;
      }
      module22.exports = listCacheSet;
    }
  });
  var require_ListCache = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_ListCache.js"(exports22, module22) {
      var listCacheClear = require_listCacheClear();
      var listCacheDelete = require_listCacheDelete();
      var listCacheGet = require_listCacheGet();
      var listCacheHas = require_listCacheHas();
      var listCacheSet = require_listCacheSet();
      function ListCache(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      module22.exports = ListCache;
    }
  });
  var require_stackClear = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_stackClear.js"(exports22, module22) {
      var ListCache = require_ListCache();
      function stackClear() {
        this.__data__ = new ListCache;
        this.size = 0;
      }
      module22.exports = stackClear;
    }
  });
  var require_stackDelete = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_stackDelete.js"(exports22, module22) {
      function stackDelete(key) {
        var data = this.__data__, result2 = data["delete"](key);
        this.size = data.size;
        return result2;
      }
      module22.exports = stackDelete;
    }
  });
  var require_stackGet = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_stackGet.js"(exports22, module22) {
      function stackGet(key) {
        return this.__data__.get(key);
      }
      module22.exports = stackGet;
    }
  });
  var require_stackHas = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_stackHas.js"(exports22, module22) {
      function stackHas(key) {
        return this.__data__.has(key);
      }
      module22.exports = stackHas;
    }
  });
  var require_freeGlobal = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_freeGlobal.js"(exports22, module22) {
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      module22.exports = freeGlobal;
    }
  });
  var require_root = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_root.js"(exports22, module22) {
      var freeGlobal = require_freeGlobal();
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      module22.exports = root;
    }
  });
  var require_Symbol = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_Symbol.js"(exports22, module22) {
      var root = require_root();
      var Symbol2 = root.Symbol;
      module22.exports = Symbol2;
    }
  });
  var require_getRawTag = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getRawTag.js"(exports22, module22) {
      var Symbol2 = require_Symbol();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var nativeObjectToString = objectProto.toString;
      var symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined;
      function getRawTag(value) {
        var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
        try {
          value[symToStringTag] = undefined;
          var unmasked = true;
        } catch (e) {
        }
        var result2 = nativeObjectToString.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result2;
      }
      module22.exports = getRawTag;
    }
  });
  var require_objectToString = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_objectToString.js"(exports22, module22) {
      var objectProto = Object.prototype;
      var nativeObjectToString = objectProto.toString;
      function objectToString(value) {
        return nativeObjectToString.call(value);
      }
      module22.exports = objectToString;
    }
  });
  var require_baseGetTag = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseGetTag.js"(exports22, module22) {
      var Symbol2 = require_Symbol();
      var getRawTag = require_getRawTag();
      var objectToString = require_objectToString();
      var nullTag = "[object Null]";
      var undefinedTag = "[object Undefined]";
      var symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined;
      function baseGetTag(value) {
        if (value == null) {
          return value === undefined ? undefinedTag : nullTag;
        }
        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
      }
      module22.exports = baseGetTag;
    }
  });
  var require_isObject = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isObject.js"(exports22, module22) {
      function isObject(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      module22.exports = isObject;
    }
  });
  var require_isFunction = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isFunction.js"(exports22, module22) {
      var baseGetTag = require_baseGetTag();
      var isObject = require_isObject();
      var asyncTag = "[object AsyncFunction]";
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var proxyTag = "[object Proxy]";
      function isFunction(value) {
        if (!isObject(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }
      module22.exports = isFunction;
    }
  });
  var require_coreJsData = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_coreJsData.js"(exports22, module22) {
      var root = require_root();
      var coreJsData = root["__core-js_shared__"];
      module22.exports = coreJsData;
    }
  });
  var require_isMasked = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_isMasked.js"(exports22, module22) {
      var coreJsData = require_coreJsData();
      var maskSrcKey = function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      module22.exports = isMasked;
    }
  });
  var require_toSource = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_toSource.js"(exports22, module22) {
      var funcProto = Function.prototype;
      var funcToString = funcProto.toString;
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {
          }
          try {
            return func + "";
          } catch (e) {
          }
        }
        return "";
      }
      module22.exports = toSource;
    }
  });
  var require_baseIsNative = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseIsNative.js"(exports22, module22) {
      var isFunction = require_isFunction();
      var isMasked = require_isMasked();
      var isObject = require_isObject();
      var toSource = require_toSource();
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var funcProto = Function.prototype;
      var objectProto = Object.prototype;
      var funcToString = funcProto.toString;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      module22.exports = baseIsNative;
    }
  });
  var require_getValue = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getValue.js"(exports22, module22) {
      function getValue(object, key) {
        return object == null ? undefined : object[key];
      }
      module22.exports = getValue;
    }
  });
  var require_getNative = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getNative.js"(exports22, module22) {
      var baseIsNative = require_baseIsNative();
      var getValue = require_getValue();
      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : undefined;
      }
      module22.exports = getNative;
    }
  });
  var require_Map = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_Map.js"(exports22, module22) {
      var getNative = require_getNative();
      var root = require_root();
      var Map2 = getNative(root, "Map");
      module22.exports = Map2;
    }
  });
  var require_nativeCreate = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_nativeCreate.js"(exports22, module22) {
      var getNative = require_getNative();
      var nativeCreate = getNative(Object, "create");
      module22.exports = nativeCreate;
    }
  });
  var require_hashClear = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_hashClear.js"(exports22, module22) {
      var nativeCreate = require_nativeCreate();
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }
      module22.exports = hashClear;
    }
  });
  var require_hashDelete = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_hashDelete.js"(exports22, module22) {
      function hashDelete(key) {
        var result2 = this.has(key) && delete this.__data__[key];
        this.size -= result2 ? 1 : 0;
        return result2;
      }
      module22.exports = hashDelete;
    }
  });
  var require_hashGet = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_hashGet.js"(exports22, module22) {
      var nativeCreate = require_nativeCreate();
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result2 = data[key];
          return result2 === HASH_UNDEFINED ? undefined : result2;
        }
        return hasOwnProperty2.call(data, key) ? data[key] : undefined;
      }
      module22.exports = hashGet;
    }
  });
  var require_hashHas = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_hashHas.js"(exports22, module22) {
      var nativeCreate = require_nativeCreate();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== undefined : hasOwnProperty2.call(data, key);
      }
      module22.exports = hashHas;
    }
  });
  var require_hashSet = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_hashSet.js"(exports22, module22) {
      var nativeCreate = require_nativeCreate();
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
        return this;
      }
      module22.exports = hashSet;
    }
  });
  var require_Hash = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_Hash.js"(exports22, module22) {
      var hashClear = require_hashClear();
      var hashDelete = require_hashDelete();
      var hashGet = require_hashGet();
      var hashHas = require_hashHas();
      var hashSet = require_hashSet();
      function Hash(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      module22.exports = Hash;
    }
  });
  var require_mapCacheClear = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_mapCacheClear.js"(exports22, module22) {
      var Hash = require_Hash();
      var ListCache = require_ListCache();
      var Map2 = require_Map();
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          hash: new Hash,
          map: new (Map2 || ListCache),
          string: new Hash
        };
      }
      module22.exports = mapCacheClear;
    }
  });
  var require_isKeyable = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_isKeyable.js"(exports22, module22) {
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      module22.exports = isKeyable;
    }
  });
  var require_getMapData = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getMapData.js"(exports22, module22) {
      var isKeyable = require_isKeyable();
      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      module22.exports = getMapData;
    }
  });
  var require_mapCacheDelete = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_mapCacheDelete.js"(exports22, module22) {
      var getMapData = require_getMapData();
      function mapCacheDelete(key) {
        var result2 = getMapData(this, key)["delete"](key);
        this.size -= result2 ? 1 : 0;
        return result2;
      }
      module22.exports = mapCacheDelete;
    }
  });
  var require_mapCacheGet = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_mapCacheGet.js"(exports22, module22) {
      var getMapData = require_getMapData();
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
      module22.exports = mapCacheGet;
    }
  });
  var require_mapCacheHas = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_mapCacheHas.js"(exports22, module22) {
      var getMapData = require_getMapData();
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
      module22.exports = mapCacheHas;
    }
  });
  var require_mapCacheSet = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_mapCacheSet.js"(exports22, module22) {
      var getMapData = require_getMapData();
      function mapCacheSet(key, value) {
        var data = getMapData(this, key), size = data.size;
        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }
      module22.exports = mapCacheSet;
    }
  });
  var require_MapCache = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_MapCache.js"(exports22, module22) {
      var mapCacheClear = require_mapCacheClear();
      var mapCacheDelete = require_mapCacheDelete();
      var mapCacheGet = require_mapCacheGet();
      var mapCacheHas = require_mapCacheHas();
      var mapCacheSet = require_mapCacheSet();
      function MapCache(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      module22.exports = MapCache;
    }
  });
  var require_stackSet = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_stackSet.js"(exports22, module22) {
      var ListCache = require_ListCache();
      var Map2 = require_Map();
      var MapCache = require_MapCache();
      var LARGE_ARRAY_SIZE = 200;
      function stackSet(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache) {
          var pairs = data.__data__;
          if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }
      module22.exports = stackSet;
    }
  });
  var require_Stack = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_Stack.js"(exports22, module22) {
      var ListCache = require_ListCache();
      var stackClear = require_stackClear();
      var stackDelete = require_stackDelete();
      var stackGet = require_stackGet();
      var stackHas = require_stackHas();
      var stackSet = require_stackSet();
      function Stack(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }
      Stack.prototype.clear = stackClear;
      Stack.prototype["delete"] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;
      module22.exports = Stack;
    }
  });
  var require_setCacheAdd = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_setCacheAdd.js"(exports22, module22) {
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }
      module22.exports = setCacheAdd;
    }
  });
  var require_setCacheHas = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_setCacheHas.js"(exports22, module22) {
      function setCacheHas(value) {
        return this.__data__.has(value);
      }
      module22.exports = setCacheHas;
    }
  });
  var require_SetCache = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_SetCache.js"(exports22, module22) {
      var MapCache = require_MapCache();
      var setCacheAdd = require_setCacheAdd();
      var setCacheHas = require_setCacheHas();
      function SetCache(values) {
        var index = -1, length = values == null ? 0 : values.length;
        this.__data__ = new MapCache;
        while (++index < length) {
          this.add(values[index]);
        }
      }
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;
      module22.exports = SetCache;
    }
  });
  var require_arraySome = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_arraySome.js"(exports22, module22) {
      function arraySome(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
      module22.exports = arraySome;
    }
  });
  var require_cacheHas = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_cacheHas.js"(exports22, module22) {
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      module22.exports = cacheHas;
    }
  });
  var require_equalArrays = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_equalArrays.js"(exports22, module22) {
      var SetCache = require_SetCache();
      var arraySome = require_arraySome();
      var cacheHas = require_cacheHas();
      var COMPARE_PARTIAL_FLAG = 1;
      var COMPARE_UNORDERED_FLAG = 2;
      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        var arrStacked = stack.get(array);
        var othStacked = stack.get(other);
        if (arrStacked && othStacked) {
          return arrStacked == other && othStacked == array;
        }
        var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache : undefined;
        stack.set(array, other);
        stack.set(other, array);
        while (++index < arrLength) {
          var arrValue = array[index], othValue = other[index];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
          }
          if (compared !== undefined) {
            if (compared) {
              continue;
            }
            result2 = false;
            break;
          }
          if (seen) {
            if (!arraySome(other, function(othValue2, othIndex) {
              if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result2 = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result2 = false;
            break;
          }
        }
        stack["delete"](array);
        stack["delete"](other);
        return result2;
      }
      module22.exports = equalArrays;
    }
  });
  var require_Uint8Array = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_Uint8Array.js"(exports22, module22) {
      var root = require_root();
      var Uint8Array2 = root.Uint8Array;
      module22.exports = Uint8Array2;
    }
  });
  var require_mapToArray = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_mapToArray.js"(exports22, module22) {
      function mapToArray(map) {
        var index = -1, result2 = Array(map.size);
        map.forEach(function(value, key) {
          result2[++index] = [key, value];
        });
        return result2;
      }
      module22.exports = mapToArray;
    }
  });
  var require_setToArray = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_setToArray.js"(exports22, module22) {
      function setToArray(set) {
        var index = -1, result2 = Array(set.size);
        set.forEach(function(value) {
          result2[++index] = value;
        });
        return result2;
      }
      module22.exports = setToArray;
    }
  });
  var require_equalByTag = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_equalByTag.js"(exports22, module22) {
      var Symbol2 = require_Symbol();
      var Uint8Array2 = require_Uint8Array();
      var eq = require_eq2();
      var equalArrays = require_equalArrays();
      var mapToArray = require_mapToArray();
      var setToArray = require_setToArray();
      var COMPARE_PARTIAL_FLAG = 1;
      var COMPARE_UNORDERED_FLAG = 2;
      var boolTag = "[object Boolean]";
      var dateTag = "[object Date]";
      var errorTag = "[object Error]";
      var mapTag = "[object Map]";
      var numberTag = "[object Number]";
      var regexpTag = "[object RegExp]";
      var setTag = "[object Set]";
      var stringTag = "[object String]";
      var symbolTag = "[object Symbol]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var dataViewTag = "[object DataView]";
      var symbolProto = Symbol2 ? Symbol2.prototype : undefined;
      var symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }
            object = object.buffer;
            other = other.buffer;
          case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
              return false;
            }
            return true;
          case boolTag:
          case dateTag:
          case numberTag:
            return eq(+object, +other);
          case errorTag:
            return object.name == other.name && object.message == other.message;
          case regexpTag:
          case stringTag:
            return object == other + "";
          case mapTag:
            var convert = mapToArray;
          case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);
            if (object.size != other.size && !isPartial) {
              return false;
            }
            var stacked = stack.get(object);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG;
            stack.set(object, other);
            var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack["delete"](object);
            return result2;
          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
        }
        return false;
      }
      module22.exports = equalByTag;
    }
  });
  var require_arrayPush = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_arrayPush.js"(exports22, module22) {
      function arrayPush(array, values) {
        var index = -1, length = values.length, offset = array.length;
        while (++index < length) {
          array[offset + index] = values[index];
        }
        return array;
      }
      module22.exports = arrayPush;
    }
  });
  var require_isArray = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isArray.js"(exports22, module22) {
      var isArray = Array.isArray;
      module22.exports = isArray;
    }
  });
  var require_baseGetAllKeys = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseGetAllKeys.js"(exports22, module22) {
      var arrayPush = require_arrayPush();
      var isArray = require_isArray();
      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result2 = keysFunc(object);
        return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
      }
      module22.exports = baseGetAllKeys;
    }
  });
  var require_arrayFilter = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_arrayFilter.js"(exports22, module22) {
      function arrayFilter(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result2[resIndex++] = value;
          }
        }
        return result2;
      }
      module22.exports = arrayFilter;
    }
  });
  var require_stubArray = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/stubArray.js"(exports22, module22) {
      function stubArray() {
        return [];
      }
      module22.exports = stubArray;
    }
  });
  var require_getSymbols = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getSymbols.js"(exports22, module22) {
      var arrayFilter = require_arrayFilter();
      var stubArray = require_stubArray();
      var objectProto = Object.prototype;
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      var nativeGetSymbols = Object.getOwnPropertySymbols;
      var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
        if (object == null) {
          return [];
        }
        object = Object(object);
        return arrayFilter(nativeGetSymbols(object), function(symbol) {
          return propertyIsEnumerable.call(object, symbol);
        });
      };
      module22.exports = getSymbols;
    }
  });
  var require_baseTimes = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseTimes.js"(exports22, module22) {
      function baseTimes(n, iteratee) {
        var index = -1, result2 = Array(n);
        while (++index < n) {
          result2[index] = iteratee(index);
        }
        return result2;
      }
      module22.exports = baseTimes;
    }
  });
  var require_isObjectLike = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isObjectLike.js"(exports22, module22) {
      function isObjectLike(value) {
        return value != null && typeof value == "object";
      }
      module22.exports = isObjectLike;
    }
  });
  var require_baseIsArguments = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseIsArguments.js"(exports22, module22) {
      var baseGetTag = require_baseGetTag();
      var isObjectLike = require_isObjectLike();
      var argsTag = "[object Arguments]";
      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }
      module22.exports = baseIsArguments;
    }
  });
  var require_isArguments = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isArguments.js"(exports22, module22) {
      var baseIsArguments = require_baseIsArguments();
      var isObjectLike = require_isObjectLike();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      var isArguments = baseIsArguments(/* @__PURE__ */ function() {
        return arguments;
      }()) ? baseIsArguments : function(value) {
        return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
      };
      module22.exports = isArguments;
    }
  });
  var require_stubFalse = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/stubFalse.js"(exports22, module22) {
      function stubFalse() {
        return false;
      }
      module22.exports = stubFalse;
    }
  });
  var require_isBuffer = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isBuffer.js"(exports22, module22) {
      var root = require_root();
      var stubFalse = require_stubFalse();
      var freeExports = typeof exports22 == "object" && exports22 && !exports22.nodeType && exports22;
      var freeModule = freeExports && typeof module22 == "object" && module22 && !module22.nodeType && module22;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var Buffer2 = moduleExports ? root.Buffer : undefined;
      var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined;
      var isBuffer = nativeIsBuffer || stubFalse;
      module22.exports = isBuffer;
    }
  });
  var require_isIndex = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_isIndex.js"(exports22, module22) {
      var MAX_SAFE_INTEGER = 9007199254740991;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      function isIndex(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
      }
      module22.exports = isIndex;
    }
  });
  var require_isLength = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isLength.js"(exports22, module22) {
      var MAX_SAFE_INTEGER = 9007199254740991;
      function isLength(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }
      module22.exports = isLength;
    }
  });
  var require_baseIsTypedArray = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseIsTypedArray.js"(exports22, module22) {
      var baseGetTag = require_baseGetTag();
      var isLength = require_isLength();
      var isObjectLike = require_isObjectLike();
      var argsTag = "[object Arguments]";
      var arrayTag = "[object Array]";
      var boolTag = "[object Boolean]";
      var dateTag = "[object Date]";
      var errorTag = "[object Error]";
      var funcTag = "[object Function]";
      var mapTag = "[object Map]";
      var numberTag = "[object Number]";
      var objectTag = "[object Object]";
      var regexpTag = "[object RegExp]";
      var setTag = "[object Set]";
      var stringTag = "[object String]";
      var weakMapTag = "[object WeakMap]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var dataViewTag = "[object DataView]";
      var float32Tag = "[object Float32Array]";
      var float64Tag = "[object Float64Array]";
      var int8Tag = "[object Int8Array]";
      var int16Tag = "[object Int16Array]";
      var int32Tag = "[object Int32Array]";
      var uint8Tag = "[object Uint8Array]";
      var uint8ClampedTag = "[object Uint8ClampedArray]";
      var uint16Tag = "[object Uint16Array]";
      var uint32Tag = "[object Uint32Array]";
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }
      module22.exports = baseIsTypedArray;
    }
  });
  var require_baseUnary = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseUnary.js"(exports22, module22) {
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      module22.exports = baseUnary;
    }
  });
  var require_nodeUtil = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_nodeUtil.js"(exports22, module22) {
      var freeGlobal = require_freeGlobal();
      var freeExports = typeof exports22 == "object" && exports22 && !exports22.nodeType && exports22;
      var freeModule = freeExports && typeof module22 == "object" && module22 && !module22.nodeType && module22;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      module22.exports = nodeUtil;
    }
  });
  var require_isTypedArray = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isTypedArray.js"(exports22, module22) {
      var baseIsTypedArray = require_baseIsTypedArray();
      var baseUnary = require_baseUnary();
      var nodeUtil = require_nodeUtil();
      var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
      module22.exports = isTypedArray;
    }
  });
  var require_arrayLikeKeys = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_arrayLikeKeys.js"(exports22, module22) {
      var baseTimes = require_baseTimes();
      var isArguments = require_isArguments();
      var isArray = require_isArray();
      var isBuffer = require_isBuffer();
      var isIndex = require_isIndex();
      var isTypedArray = require_isTypedArray();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function arrayLikeKeys(value, inherited) {
        var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String) : [], length = result2.length;
        for (var key in value) {
          if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
            result2.push(key);
          }
        }
        return result2;
      }
      module22.exports = arrayLikeKeys;
    }
  });
  var require_isPrototype = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_isPrototype.js"(exports22, module22) {
      var objectProto = Object.prototype;
      function isPrototype(value) {
        var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
        return value === proto;
      }
      module22.exports = isPrototype;
    }
  });
  var require_overArg = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_overArg.js"(exports22, module22) {
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      module22.exports = overArg;
    }
  });
  var require_nativeKeys = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_nativeKeys.js"(exports22, module22) {
      var overArg = require_overArg();
      var nativeKeys = overArg(Object.keys, Object);
      module22.exports = nativeKeys;
    }
  });
  var require_baseKeys = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseKeys.js"(exports22, module22) {
      var isPrototype = require_isPrototype();
      var nativeKeys = require_nativeKeys();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object);
        }
        var result2 = [];
        for (var key in Object(object)) {
          if (hasOwnProperty2.call(object, key) && key != "constructor") {
            result2.push(key);
          }
        }
        return result2;
      }
      module22.exports = baseKeys;
    }
  });
  var require_isArrayLike = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isArrayLike.js"(exports22, module22) {
      var isFunction = require_isFunction();
      var isLength = require_isLength();
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }
      module22.exports = isArrayLike;
    }
  });
  var require_keys = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/keys.js"(exports22, module22) {
      var arrayLikeKeys = require_arrayLikeKeys();
      var baseKeys = require_baseKeys();
      var isArrayLike = require_isArrayLike();
      function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }
      module22.exports = keys;
    }
  });
  var require_getAllKeys = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getAllKeys.js"(exports22, module22) {
      var baseGetAllKeys = require_baseGetAllKeys();
      var getSymbols = require_getSymbols();
      var keys = require_keys();
      function getAllKeys(object) {
        return baseGetAllKeys(object, keys, getSymbols);
      }
      module22.exports = getAllKeys;
    }
  });
  var require_equalObjects = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_equalObjects.js"(exports22, module22) {
      var getAllKeys = require_getAllKeys();
      var COMPARE_PARTIAL_FLAG = 1;
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index = objLength;
        while (index--) {
          var key = objProps[index];
          if (!(isPartial ? key in other : hasOwnProperty2.call(other, key))) {
            return false;
          }
        }
        var objStacked = stack.get(object);
        var othStacked = stack.get(other);
        if (objStacked && othStacked) {
          return objStacked == other && othStacked == object;
        }
        var result2 = true;
        stack.set(object, other);
        stack.set(other, object);
        var skipCtor = isPartial;
        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key], othValue = other[key];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          }
          if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result2 = false;
            break;
          }
          skipCtor || (skipCtor = key == "constructor");
        }
        if (result2 && !skipCtor) {
          var objCtor = object.constructor, othCtor = other.constructor;
          if (objCtor != othCtor && (("constructor" in object) && ("constructor" in other)) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
            result2 = false;
          }
        }
        stack["delete"](object);
        stack["delete"](other);
        return result2;
      }
      module22.exports = equalObjects;
    }
  });
  var require_DataView = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_DataView.js"(exports22, module22) {
      var getNative = require_getNative();
      var root = require_root();
      var DataView2 = getNative(root, "DataView");
      module22.exports = DataView2;
    }
  });
  var require_Promise = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_Promise.js"(exports22, module22) {
      var getNative = require_getNative();
      var root = require_root();
      var Promise2 = getNative(root, "Promise");
      module22.exports = Promise2;
    }
  });
  var require_Set = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_Set.js"(exports22, module22) {
      var getNative = require_getNative();
      var root = require_root();
      var Set2 = getNative(root, "Set");
      module22.exports = Set2;
    }
  });
  var require_WeakMap = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_WeakMap.js"(exports22, module22) {
      var getNative = require_getNative();
      var root = require_root();
      var WeakMap2 = getNative(root, "WeakMap");
      module22.exports = WeakMap2;
    }
  });
  var require_getTag = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getTag.js"(exports22, module22) {
      var DataView2 = require_DataView();
      var Map2 = require_Map();
      var Promise2 = require_Promise();
      var Set2 = require_Set();
      var WeakMap2 = require_WeakMap();
      var baseGetTag = require_baseGetTag();
      var toSource = require_toSource();
      var mapTag = "[object Map]";
      var objectTag = "[object Object]";
      var promiseTag = "[object Promise]";
      var setTag = "[object Set]";
      var weakMapTag = "[object WeakMap]";
      var dataViewTag = "[object DataView]";
      var dataViewCtorString = toSource(DataView2);
      var mapCtorString = toSource(Map2);
      var promiseCtorString = toSource(Promise2);
      var setCtorString = toSource(Set2);
      var weakMapCtorString = toSource(WeakMap2);
      var getTag = baseGetTag;
      if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2) != setTag || WeakMap2 && getTag(new WeakMap2) != weakMapTag) {
        getTag = function(value) {
          var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined, ctorString = Ctor ? toSource(Ctor) : "";
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;
              case mapCtorString:
                return mapTag;
              case promiseCtorString:
                return promiseTag;
              case setCtorString:
                return setTag;
              case weakMapCtorString:
                return weakMapTag;
            }
          }
          return result2;
        };
      }
      module22.exports = getTag;
    }
  });
  var require_baseIsEqualDeep = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseIsEqualDeep.js"(exports22, module22) {
      var Stack = require_Stack();
      var equalArrays = require_equalArrays();
      var equalByTag = require_equalByTag();
      var equalObjects = require_equalObjects();
      var getTag = require_getTag();
      var isArray = require_isArray();
      var isBuffer = require_isBuffer();
      var isTypedArray = require_isTypedArray();
      var COMPARE_PARTIAL_FLAG = 1;
      var argsTag = "[object Arguments]";
      var arrayTag = "[object Array]";
      var objectTag = "[object Object]";
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;
        var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
        if (isSameTag && isBuffer(object)) {
          if (!isBuffer(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack);
          return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty2.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack);
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack);
        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
      }
      module22.exports = baseIsEqualDeep;
    }
  });
  var require_baseIsEqual = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseIsEqual.js"(exports22, module22) {
      var baseIsEqualDeep = require_baseIsEqualDeep();
      var isObjectLike = require_isObjectLike();
      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
      }
      module22.exports = baseIsEqual;
    }
  });
  var require_isEqual = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isEqual.js"(exports22, module22) {
      var baseIsEqual = require_baseIsEqual();
      function isEqual(value, other) {
        return baseIsEqual(value, other);
      }
      module22.exports = isEqual;
    }
  });
  var require_defineProperty = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_defineProperty.js"(exports22, module22) {
      var getNative = require_getNative();
      var defineProperty = function() {
        try {
          var func = getNative(Object, "defineProperty");
          func({}, "", {});
          return func;
        } catch (e) {
        }
      }();
      module22.exports = defineProperty;
    }
  });
  var require_baseAssignValue = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseAssignValue.js"(exports22, module22) {
      var defineProperty = require_defineProperty();
      function baseAssignValue(object, key, value) {
        if (key == "__proto__" && defineProperty) {
          defineProperty(object, key, {
            configurable: true,
            enumerable: true,
            value,
            writable: true
          });
        } else {
          object[key] = value;
        }
      }
      module22.exports = baseAssignValue;
    }
  });
  var require_assignMergeValue = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_assignMergeValue.js"(exports22, module22) {
      var baseAssignValue = require_baseAssignValue();
      var eq = require_eq2();
      function assignMergeValue(object, key, value) {
        if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }
      module22.exports = assignMergeValue;
    }
  });
  var require_createBaseFor = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_createBaseFor.js"(exports22, module22) {
      function createBaseFor(fromRight) {
        return function(object, iteratee, keysFunc) {
          var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
          while (length--) {
            var key = props[fromRight ? length : ++index];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }
      module22.exports = createBaseFor;
    }
  });
  var require_baseFor = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseFor.js"(exports22, module22) {
      var createBaseFor = require_createBaseFor();
      var baseFor = createBaseFor();
      module22.exports = baseFor;
    }
  });
  var require_cloneBuffer = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_cloneBuffer.js"(exports22, module22) {
      var root = require_root();
      var freeExports = typeof exports22 == "object" && exports22 && !exports22.nodeType && exports22;
      var freeModule = freeExports && typeof module22 == "object" && module22 && !module22.nodeType && module22;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var Buffer2 = moduleExports ? root.Buffer : undefined;
      var allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined;
      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
        buffer.copy(result2);
        return result2;
      }
      module22.exports = cloneBuffer;
    }
  });
  var require_cloneArrayBuffer = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_cloneArrayBuffer.js"(exports22, module22) {
      var Uint8Array2 = require_Uint8Array();
      function cloneArrayBuffer(arrayBuffer) {
        var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
        return result2;
      }
      module22.exports = cloneArrayBuffer;
    }
  });
  var require_cloneTypedArray = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_cloneTypedArray.js"(exports22, module22) {
      var cloneArrayBuffer = require_cloneArrayBuffer();
      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }
      module22.exports = cloneTypedArray;
    }
  });
  var require_copyArray = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_copyArray.js"(exports22, module22) {
      function copyArray(source, array) {
        var index = -1, length = source.length;
        array || (array = Array(length));
        while (++index < length) {
          array[index] = source[index];
        }
        return array;
      }
      module22.exports = copyArray;
    }
  });
  var require_baseCreate = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseCreate.js"(exports22, module22) {
      var isObject = require_isObject();
      var objectCreate = Object.create;
      var baseCreate = /* @__PURE__ */ function() {
        function object() {
        }
        return function(proto) {
          if (!isObject(proto)) {
            return {};
          }
          if (objectCreate) {
            return objectCreate(proto);
          }
          object.prototype = proto;
          var result2 = new object;
          object.prototype = undefined;
          return result2;
        };
      }();
      module22.exports = baseCreate;
    }
  });
  var require_getPrototype = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getPrototype.js"(exports22, module22) {
      var overArg = require_overArg();
      var getPrototype = overArg(Object.getPrototypeOf, Object);
      module22.exports = getPrototype;
    }
  });
  var require_initCloneObject = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_initCloneObject.js"(exports22, module22) {
      var baseCreate = require_baseCreate();
      var getPrototype = require_getPrototype();
      var isPrototype = require_isPrototype();
      function initCloneObject(object) {
        return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
      }
      module22.exports = initCloneObject;
    }
  });
  var require_isArrayLikeObject = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isArrayLikeObject.js"(exports22, module22) {
      var isArrayLike = require_isArrayLike();
      var isObjectLike = require_isObjectLike();
      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }
      module22.exports = isArrayLikeObject;
    }
  });
  var require_isPlainObject = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isPlainObject.js"(exports22, module22) {
      var baseGetTag = require_baseGetTag();
      var getPrototype = require_getPrototype();
      var isObjectLike = require_isObjectLike();
      var objectTag = "[object Object]";
      var funcProto = Function.prototype;
      var objectProto = Object.prototype;
      var funcToString = funcProto.toString;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var objectCtorString = funcToString.call(Object);
      function isPlainObject(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false;
        }
        var proto = getPrototype(value);
        if (proto === null) {
          return true;
        }
        var Ctor = hasOwnProperty2.call(proto, "constructor") && proto.constructor;
        return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
      }
      module22.exports = isPlainObject;
    }
  });
  var require_safeGet = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_safeGet.js"(exports22, module22) {
      function safeGet(object, key) {
        if (key === "constructor" && typeof object[key] === "function") {
          return;
        }
        if (key == "__proto__") {
          return;
        }
        return object[key];
      }
      module22.exports = safeGet;
    }
  });
  var require_assignValue = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_assignValue.js"(exports22, module22) {
      var baseAssignValue = require_baseAssignValue();
      var eq = require_eq2();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function assignValue(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty2.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }
      module22.exports = assignValue;
    }
  });
  var require_copyObject = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_copyObject.js"(exports22, module22) {
      var assignValue = require_assignValue();
      var baseAssignValue = require_baseAssignValue();
      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index = -1, length = props.length;
        while (++index < length) {
          var key = props[index];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
          if (newValue === undefined) {
            newValue = source[key];
          }
          if (isNew) {
            baseAssignValue(object, key, newValue);
          } else {
            assignValue(object, key, newValue);
          }
        }
        return object;
      }
      module22.exports = copyObject;
    }
  });
  var require_nativeKeysIn = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_nativeKeysIn.js"(exports22, module22) {
      function nativeKeysIn(object) {
        var result2 = [];
        if (object != null) {
          for (var key in Object(object)) {
            result2.push(key);
          }
        }
        return result2;
      }
      module22.exports = nativeKeysIn;
    }
  });
  var require_baseKeysIn = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseKeysIn.js"(exports22, module22) {
      var isObject = require_isObject();
      var isPrototype = require_isPrototype();
      var nativeKeysIn = require_nativeKeysIn();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function baseKeysIn(object) {
        if (!isObject(object)) {
          return nativeKeysIn(object);
        }
        var isProto = isPrototype(object), result2 = [];
        for (var key in object) {
          if (!(key == "constructor" && (isProto || !hasOwnProperty2.call(object, key)))) {
            result2.push(key);
          }
        }
        return result2;
      }
      module22.exports = baseKeysIn;
    }
  });
  var require_keysIn = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/keysIn.js"(exports22, module22) {
      var arrayLikeKeys = require_arrayLikeKeys();
      var baseKeysIn = require_baseKeysIn();
      var isArrayLike = require_isArrayLike();
      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
      }
      module22.exports = keysIn;
    }
  });
  var require_toPlainObject = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/toPlainObject.js"(exports22, module22) {
      var copyObject = require_copyObject();
      var keysIn = require_keysIn();
      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }
      module22.exports = toPlainObject;
    }
  });
  var require_baseMergeDeep = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseMergeDeep.js"(exports22, module22) {
      var assignMergeValue = require_assignMergeValue();
      var cloneBuffer = require_cloneBuffer();
      var cloneTypedArray = require_cloneTypedArray();
      var copyArray = require_copyArray();
      var initCloneObject = require_initCloneObject();
      var isArguments = require_isArguments();
      var isArray = require_isArray();
      var isArrayLikeObject = require_isArrayLikeObject();
      var isBuffer = require_isBuffer();
      var isFunction = require_isFunction();
      var isObject = require_isObject();
      var isPlainObject = require_isPlainObject();
      var isTypedArray = require_isTypedArray();
      var safeGet = require_safeGet();
      var toPlainObject = require_toPlainObject();
      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
        if (stacked) {
          assignMergeValue(object, key, stacked);
          return;
        }
        var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined;
        var isCommon = newValue === undefined;
        if (isCommon) {
          var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
          newValue = srcValue;
          if (isArr || isBuff || isTyped) {
            if (isArray(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue;
            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue);
            } else if (!isObject(objValue) || isFunction(objValue)) {
              newValue = initCloneObject(srcValue);
            }
          } else {
            isCommon = false;
          }
        }
        if (isCommon) {
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack["delete"](srcValue);
        }
        assignMergeValue(object, key, newValue);
      }
      module22.exports = baseMergeDeep;
    }
  });
  var require_baseMerge = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseMerge.js"(exports22, module22) {
      var Stack = require_Stack();
      var assignMergeValue = require_assignMergeValue();
      var baseFor = require_baseFor();
      var baseMergeDeep = require_baseMergeDeep();
      var isObject = require_isObject();
      var keysIn = require_keysIn();
      var safeGet = require_safeGet();
      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }
        baseFor(source, function(srcValue, key) {
          stack || (stack = new Stack);
          if (isObject(srcValue)) {
            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined;
            if (newValue === undefined) {
              newValue = srcValue;
            }
            assignMergeValue(object, key, newValue);
          }
        }, keysIn);
      }
      module22.exports = baseMerge;
    }
  });
  var require_identity = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/identity.js"(exports22, module22) {
      function identity(value) {
        return value;
      }
      module22.exports = identity;
    }
  });
  var require_apply = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_apply.js"(exports22, module22) {
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      module22.exports = apply;
    }
  });
  var require_overRest = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_overRest.js"(exports22, module22) {
      var apply = require_apply();
      var nativeMax = Math.max;
      function overRest(func, start, transform) {
        start = nativeMax(start === undefined ? func.length - 1 : start, 0);
        return function() {
          var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
          while (++index < length) {
            array[index] = args[start + index];
          }
          index = -1;
          var otherArgs = Array(start + 1);
          while (++index < start) {
            otherArgs[index] = args[index];
          }
          otherArgs[start] = transform(array);
          return apply(func, this, otherArgs);
        };
      }
      module22.exports = overRest;
    }
  });
  var require_constant = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/constant.js"(exports22, module22) {
      function constant(value) {
        return function() {
          return value;
        };
      }
      module22.exports = constant;
    }
  });
  var require_baseSetToString = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseSetToString.js"(exports22, module22) {
      var constant = require_constant();
      var defineProperty = require_defineProperty();
      var identity = require_identity();
      var baseSetToString = !defineProperty ? identity : function(func, string) {
        return defineProperty(func, "toString", {
          configurable: true,
          enumerable: false,
          value: constant(string),
          writable: true
        });
      };
      module22.exports = baseSetToString;
    }
  });
  var require_shortOut = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_shortOut.js"(exports22, module22) {
      var HOT_COUNT = 800;
      var HOT_SPAN = 16;
      var nativeNow = Date.now;
      function shortOut(func) {
        var count = 0, lastCalled = 0;
        return function() {
          var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }
          return func.apply(undefined, arguments);
        };
      }
      module22.exports = shortOut;
    }
  });
  var require_setToString = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_setToString.js"(exports22, module22) {
      var baseSetToString = require_baseSetToString();
      var shortOut = require_shortOut();
      var setToString = shortOut(baseSetToString);
      module22.exports = setToString;
    }
  });
  var require_baseRest = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseRest.js"(exports22, module22) {
      var identity = require_identity();
      var overRest = require_overRest();
      var setToString = require_setToString();
      function baseRest(func, start) {
        return setToString(overRest(func, start, identity), func + "");
      }
      module22.exports = baseRest;
    }
  });
  var require_isIterateeCall = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_isIterateeCall.js"(exports22, module22) {
      var eq = require_eq2();
      var isArrayLike = require_isArrayLike();
      var isIndex = require_isIndex();
      var isObject = require_isObject();
      function isIterateeCall(value, index, object) {
        if (!isObject(object)) {
          return false;
        }
        var type = typeof index;
        if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && (index in object)) {
          return eq(object[index], value);
        }
        return false;
      }
      module22.exports = isIterateeCall;
    }
  });
  var require_createAssigner = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_createAssigner.js"(exports22, module22) {
      var baseRest = require_baseRest();
      var isIterateeCall = require_isIterateeCall();
      function createAssigner(assigner) {
        return baseRest(function(object, sources) {
          var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined, guard = length > 2 ? sources[2] : undefined;
          customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined : customizer;
            length = 1;
          }
          object = Object(object);
          while (++index < length) {
            var source = sources[index];
            if (source) {
              assigner(object, source, index, customizer);
            }
          }
          return object;
        });
      }
      module22.exports = createAssigner;
    }
  });
  var require_mergeWith = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/mergeWith.js"(exports22, module22) {
      var baseMerge = require_baseMerge();
      var createAssigner = require_createAssigner();
      var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
        baseMerge(object, source, srcIndex, customizer);
      });
      module22.exports = mergeWith;
    }
  });
  var require_miscUtils = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/miscUtils.js"(exports, module) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.CachingStrategy = exports.DefaultStream = exports.AsyncActions = exports.BufferStream = undefined;
      exports.isTaggedYarnVersion = isTaggedYarnVersion;
      exports.plural = plural;
      exports.escapeRegExp = escapeRegExp;
      exports.overrideType = overrideType;
      exports.assertNever = assertNever;
      exports.validateEnum = validateEnum;
      exports.mapAndFilter = mapAndFilter;
      exports.mapAndFind = mapAndFind;
      exports.isIndexableObject = isIndexableObject;
      exports.allSettledSafe = allSettledSafe;
      exports.convertMapsToIndexableObjects = convertMapsToIndexableObjects;
      exports.getFactoryWithDefault = getFactoryWithDefault;
      exports.getArrayWithDefault = getArrayWithDefault;
      exports.getSetWithDefault = getSetWithDefault;
      exports.getMapWithDefault = getMapWithDefault;
      exports.releaseAfterUseAsync = releaseAfterUseAsync;
      exports.prettifyAsyncErrors = prettifyAsyncErrors;
      exports.prettifySyncErrors = prettifySyncErrors;
      exports.bufferStream = bufferStream;
      exports.makeDeferred = makeDeferred;
      exports.dynamicRequire = dynamicRequire;
      exports.sortMap = sortMap;
      exports.buildIgnorePattern = buildIgnorePattern;
      exports.replaceEnvVariables = replaceEnvVariables;
      exports.parseBoolean = parseBoolean;
      exports.parseOptionalBoolean = parseOptionalBoolean;
      exports.tryParseOptionalBoolean = tryParseOptionalBoolean;
      exports.isPathLike = isPathLike;
      exports.mergeIntoTarget = mergeIntoTarget;
      exports.toMerged = toMerged;
      exports.groupBy = groupBy;
      exports.parseInt = parseInt;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var fslib_1 = require_lib();
      var clipanion_1 = require_advanced();
      var isEqual_1 = tslib_1.__importDefault(require_isEqual());
      var mergeWith_1 = tslib_1.__importDefault(require_mergeWith());
      var micromatch_1 = tslib_1.__importDefault(require_micromatch());
      var p_limit_1 = tslib_1.__importDefault(require_p_limit());
      var semver_1 = tslib_1.__importDefault(require_semver2());
      var stream_1 = __require("stream");
      function isTaggedYarnVersion(version) {
        return !!(semver_1.default.valid(version) && version.match(/^[^-]+(-rc\.[0-9]+)?$/));
      }
      function plural(n, { one, more, zero = more }) {
        return n === 0 ? zero : n === 1 ? one : more;
      }
      function escapeRegExp(str) {
        return str.replace(/[.*+?^${}()|[\]\\]/g, `\\$&`);
      }
      function overrideType(val) {
      }
      function assertNever(arg) {
        throw new Error(`Assertion failed: Unexpected object '${arg}'`);
      }
      function validateEnum(def, value) {
        const values = Object.values(def);
        if (!values.includes(value))
          throw new clipanion_1.UsageError(`Invalid value for enumeration: ${JSON.stringify(value)} (expected one of ${values.map((value2) => JSON.stringify(value2)).join(`, `)})`);
        return value;
      }
      function mapAndFilter(iterable, cb) {
        const output = [];
        for (const value of iterable) {
          const out = cb(value);
          if (out !== mapAndFilterSkip) {
            output.push(out);
          }
        }
        return output;
      }
      var mapAndFilterSkip = Symbol();
      mapAndFilter.skip = mapAndFilterSkip;
      function mapAndFind(iterable, cb) {
        for (const value of iterable) {
          const out = cb(value);
          if (out !== mapAndFindSkip) {
            return out;
          }
        }
        return;
      }
      var mapAndFindSkip = Symbol();
      mapAndFind.skip = mapAndFindSkip;
      function isIndexableObject(value) {
        return typeof value === `object` && value !== null;
      }
      async function allSettledSafe(promises) {
        const results = await Promise.allSettled(promises);
        const values = [];
        for (const result2 of results) {
          if (result2.status === `rejected`) {
            throw result2.reason;
          } else {
            values.push(result2.value);
          }
        }
        return values;
      }
      function convertMapsToIndexableObjects(arg) {
        if (arg instanceof Map)
          arg = Object.fromEntries(arg);
        if (isIndexableObject(arg)) {
          for (const key of Object.keys(arg)) {
            const value = arg[key];
            if (isIndexableObject(value)) {
              arg[key] = convertMapsToIndexableObjects(value);
            }
          }
        }
        return arg;
      }
      function getFactoryWithDefault(map, key, factory) {
        let value = map.get(key);
        if (typeof value === `undefined`)
          map.set(key, value = factory());
        return value;
      }
      function getArrayWithDefault(map, key) {
        let value = map.get(key);
        if (typeof value === `undefined`)
          map.set(key, value = []);
        return value;
      }
      function getSetWithDefault(map, key) {
        let value = map.get(key);
        if (typeof value === `undefined`)
          map.set(key, value = /* @__PURE__ */ new Set);
        return value;
      }
      function getMapWithDefault(map, key) {
        let value = map.get(key);
        if (typeof value === `undefined`)
          map.set(key, value = /* @__PURE__ */ new Map);
        return value;
      }
      async function releaseAfterUseAsync(fn, cleanup) {
        if (cleanup == null)
          return await fn();
        try {
          return await fn();
        } finally {
          await cleanup();
        }
      }
      async function prettifyAsyncErrors(fn, update) {
        try {
          return await fn();
        } catch (error) {
          error.message = update(error.message);
          throw error;
        }
      }
      function prettifySyncErrors(fn, update) {
        try {
          return fn();
        } catch (error) {
          error.message = update(error.message);
          throw error;
        }
      }
      async function bufferStream(stream) {
        return await new Promise((resolve, reject) => {
          const chunks = [];
          stream.on(`error`, (error) => {
            reject(error);
          });
          stream.on(`data`, (chunk) => {
            chunks.push(chunk);
          });
          stream.on(`end`, () => {
            resolve(Buffer.concat(chunks));
          });
        });
      }
      var BufferStream = class extends stream_1.Transform {
        constructor() {
          super(...arguments);
          this.chunks = [];
        }
        _transform(chunk, encoding, cb) {
          if (encoding !== `buffer` || !Buffer.isBuffer(chunk))
            throw new Error(`Assertion failed: BufferStream only accept buffers`);
          this.chunks.push(chunk);
          cb(null, null);
        }
        _flush(cb) {
          cb(null, Buffer.concat(this.chunks));
        }
      };
      exports.BufferStream = BufferStream;
      function makeDeferred() {
        let resolve;
        let reject;
        const promise = new Promise((resolveFn, rejectFn) => {
          resolve = resolveFn;
          reject = rejectFn;
        });
        return { promise, resolve, reject };
      }
      var AsyncActions = class {
        constructor(limit) {
          this.deferred = /* @__PURE__ */ new Map;
          this.promises = /* @__PURE__ */ new Map;
          this.limit = (0, p_limit_1.default)(limit);
        }
        set(key, factory) {
          let deferred = this.deferred.get(key);
          if (typeof deferred === `undefined`)
            this.deferred.set(key, deferred = makeDeferred());
          const promise = this.limit(() => factory());
          this.promises.set(key, promise);
          promise.then(() => {
            if (this.promises.get(key) === promise) {
              deferred.resolve();
            }
          }, (err) => {
            if (this.promises.get(key) === promise) {
              deferred.reject(err);
            }
          });
          return deferred.promise;
        }
        reduce(key, factory) {
          const promise = this.promises.get(key) ?? Promise.resolve();
          this.set(key, () => factory(promise));
        }
        async wait() {
          await Promise.all(this.promises.values());
        }
      };
      exports.AsyncActions = AsyncActions;
      var DefaultStream = class extends stream_1.Transform {
        constructor(ifEmpty = Buffer.alloc(0)) {
          super();
          this.active = true;
          this.ifEmpty = ifEmpty;
        }
        _transform(chunk, encoding, cb) {
          if (encoding !== `buffer` || !Buffer.isBuffer(chunk))
            throw new Error(`Assertion failed: DefaultStream only accept buffers`);
          this.active = false;
          cb(null, chunk);
        }
        _flush(cb) {
          if (this.active && this.ifEmpty.length > 0) {
            cb(null, this.ifEmpty);
          } else {
            cb(null);
          }
        }
      };
      exports.DefaultStream = DefaultStream;
      var realRequire = eval(`require`);
      function dynamicRequireNode(path2) {
        return realRequire(fslib_1.npath.fromPortablePath(path2));
      }
      function dynamicRequireNoCache(path) {
        const physicalPath = fslib_1.npath.fromPortablePath(path);
        const currentCacheEntry = realRequire.cache[physicalPath];
        delete realRequire.cache[physicalPath];
        let result;
        try {
          result = dynamicRequireNode(physicalPath);
          const freshCacheEntry = realRequire.cache[physicalPath];
          const dynamicModule = eval(`module`);
          const freshCacheIndex = dynamicModule.children.indexOf(freshCacheEntry);
          if (freshCacheIndex !== -1) {
            dynamicModule.children.splice(freshCacheIndex, 1);
          }
        } finally {
          realRequire.cache[physicalPath] = currentCacheEntry;
        }
        return result;
      }
      var dynamicRequireFsTimeCache = /* @__PURE__ */ new Map;
      function dynamicRequireFsTime(path2) {
        const cachedInstance = dynamicRequireFsTimeCache.get(path2);
        const stat = fslib_1.xfs.statSync(path2);
        if (cachedInstance?.mtime === stat.mtimeMs)
          return cachedInstance.instance;
        const instance = dynamicRequireNoCache(path2);
        dynamicRequireFsTimeCache.set(path2, { mtime: stat.mtimeMs, instance });
        return instance;
      }
      var CachingStrategy;
      (function(CachingStrategy2) {
        CachingStrategy2[CachingStrategy2["NoCache"] = 0] = "NoCache";
        CachingStrategy2[CachingStrategy2["FsTime"] = 1] = "FsTime";
        CachingStrategy2[CachingStrategy2["Node"] = 2] = "Node";
      })(CachingStrategy || (exports.CachingStrategy = CachingStrategy = {}));
      function dynamicRequire(path2, { cachingStrategy = CachingStrategy.Node } = {}) {
        switch (cachingStrategy) {
          case CachingStrategy.NoCache:
            return dynamicRequireNoCache(path2);
          case CachingStrategy.FsTime:
            return dynamicRequireFsTime(path2);
          case CachingStrategy.Node:
            return dynamicRequireNode(path2);
          default: {
            throw new Error(`Unsupported caching strategy`);
          }
        }
      }
      function sortMap(values, mappers) {
        const asArray = Array.from(values);
        if (!Array.isArray(mappers))
          mappers = [mappers];
        const stringified = [];
        for (const mapper of mappers)
          stringified.push(asArray.map((value) => mapper(value)));
        const indices = asArray.map((_, index) => index);
        indices.sort((a, b) => {
          for (const layer of stringified) {
            const comparison = layer[a] < layer[b] ? -1 : layer[a] > layer[b] ? 1 : 0;
            if (comparison !== 0) {
              return comparison;
            }
          }
          return 0;
        });
        return indices.map((index) => {
          return asArray[index];
        });
      }
      function buildIgnorePattern(ignorePatterns) {
        if (ignorePatterns.length === 0)
          return null;
        return ignorePatterns.map((pattern) => {
          return `(${micromatch_1.default.makeRe(pattern, {
            windows: false,
            dot: true
          }).source})`;
        }).join(`|`);
      }
      function replaceEnvVariables(value, { env }) {
        const regex = /\${(?<variableName>[\d\w_]+)(?<colon>:)?(?:-(?<fallback>[^}]*))?}/g;
        return value.replace(regex, (...args) => {
          const { variableName, colon, fallback } = args[args.length - 1];
          const variableExist = Object.hasOwn(env, variableName);
          const variableValue = env[variableName];
          if (variableValue)
            return variableValue;
          if (variableExist && !colon)
            return variableValue;
          if (fallback != null)
            return fallback;
          throw new clipanion_1.UsageError(`Environment variable not found (${variableName})`);
        });
      }
      function parseBoolean(value) {
        switch (value) {
          case `true`:
          case `1`:
          case 1:
          case true: {
            return true;
          }
          case `false`:
          case `0`:
          case 0:
          case false: {
            return false;
          }
          default: {
            throw new Error(`Couldn't parse "${value}" as a boolean`);
          }
        }
      }
      function parseOptionalBoolean(value) {
        if (typeof value === `undefined`)
          return value;
        return parseBoolean(value);
      }
      function tryParseOptionalBoolean(value) {
        try {
          return parseOptionalBoolean(value);
        } catch {
          return null;
        }
      }
      function isPathLike(value) {
        if (fslib_1.npath.isAbsolute(value) || value.match(/^(\.{1,2}|~)\//))
          return true;
        return false;
      }
      function mergeIntoTarget(target, ...sources) {
        const wrap = (value2) => ({ value: value2 });
        const wrappedTarget = wrap(target);
        const wrappedSources = sources.map((source) => wrap(source));
        const { value } = (0, mergeWith_1.default)(wrappedTarget, ...wrappedSources, (targetValue, sourceValue) => {
          if (Array.isArray(targetValue) && Array.isArray(sourceValue)) {
            for (const sourceItem of sourceValue) {
              if (!targetValue.find((targetItem) => (0, isEqual_1.default)(targetItem, sourceItem))) {
                targetValue.push(sourceItem);
              }
            }
            return targetValue;
          }
          return;
        });
        return value;
      }
      function toMerged(...sources) {
        return mergeIntoTarget({}, ...sources);
      }
      function groupBy(items, key) {
        const groups = /* @__PURE__ */ Object.create(null);
        for (const item of items) {
          const groupKey = item[key];
          groups[groupKey] ??= [];
          groups[groupKey].push(item);
        }
        return groups;
      }
      function parseInt(val) {
        return typeof val === `string` ? Number.parseInt(val, 10) : val;
      }
    }
  });
  var require_types = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/types.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.PackageExtensionStatus = exports22.PackageExtensionType = exports22.LinkType = undefined;
      var LinkType;
      (function(LinkType2) {
        LinkType2["HARD"] = "HARD";
        LinkType2["SOFT"] = "SOFT";
      })(LinkType || (exports22.LinkType = LinkType = {}));
      var PackageExtensionType;
      (function(PackageExtensionType2) {
        PackageExtensionType2["Dependency"] = "Dependency";
        PackageExtensionType2["PeerDependency"] = "PeerDependency";
        PackageExtensionType2["PeerDependencyMeta"] = "PeerDependencyMeta";
      })(PackageExtensionType || (exports22.PackageExtensionType = PackageExtensionType = {}));
      var PackageExtensionStatus;
      (function(PackageExtensionStatus2) {
        PackageExtensionStatus2["Inactive"] = "inactive";
        PackageExtensionStatus2["Redundant"] = "redundant";
        PackageExtensionStatus2["Active"] = "active";
      })(PackageExtensionStatus || (exports22.PackageExtensionStatus = PackageExtensionStatus = {}));
    }
  });
  var require_formatUtils = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/formatUtils.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.LogLevel = exports22.supportsHyperlinks = exports22.supportsColor = exports22.Style = exports22.Type = exports22.stripAnsi = undefined;
      exports22.tuple = tuple;
      exports22.applyStyle = applyStyle;
      exports22.applyColor = applyColor;
      exports22.applyHyperlink = applyHyperlink;
      exports22.pretty = pretty;
      exports22.prettyList = prettyList;
      exports22.json = json;
      exports22.jsonOrPretty = jsonOrPretty;
      exports22.mark = mark;
      exports22.prettyField = prettyField;
      exports22.prettyTruncatedLocatorList = prettyTruncatedLocatorList;
      exports22.addLogFilterSupport = addLogFilterSupport;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var fslib_12 = require_lib();
      var chalk_1 = tslib_12.__importDefault(require_source());
      var ci_info_1 = tslib_12.__importDefault(require_ci_info());
      var clipanion_12 = require_advanced();
      var micromatch_12 = tslib_12.__importDefault(require_micromatch());
      var strip_ansi_1 = tslib_12.__importDefault(require_strip_ansi());
      exports22.stripAnsi = strip_ansi_1.default;
      var util_1 = __require("util");
      var MessageName_1 = require_MessageName();
      var miscUtils = tslib_12.__importStar(require_miscUtils());
      var structUtils = tslib_12.__importStar(require_structUtils());
      var types_1 = require_types();
      exports22.Type = {
        NO_HINT: `NO_HINT`,
        ID: `ID`,
        NULL: `NULL`,
        SCOPE: `SCOPE`,
        NAME: `NAME`,
        RANGE: `RANGE`,
        REFERENCE: `REFERENCE`,
        NUMBER: `NUMBER`,
        PATH: `PATH`,
        URL: `URL`,
        ADDED: `ADDED`,
        REMOVED: `REMOVED`,
        CODE: `CODE`,
        INSPECT: `INSPECT`,
        DURATION: `DURATION`,
        SIZE: `SIZE`,
        SIZE_DIFF: `SIZE_DIFF`,
        IDENT: `IDENT`,
        DESCRIPTOR: `DESCRIPTOR`,
        LOCATOR: `LOCATOR`,
        RESOLUTION: `RESOLUTION`,
        DEPENDENT: `DEPENDENT`,
        PACKAGE_EXTENSION: `PACKAGE_EXTENSION`,
        SETTING: `SETTING`,
        MARKDOWN: `MARKDOWN`,
        MARKDOWN_INLINE: `MARKDOWN_INLINE`
      };
      var Style;
      (function(Style2) {
        Style2[Style2["BOLD"] = 2] = "BOLD";
      })(Style || (exports22.Style = Style = {}));
      var chalkOptions = ci_info_1.default.GITHUB_ACTIONS ? { level: 2 } : chalk_1.default.supportsColor ? { level: chalk_1.default.supportsColor.level } : { level: 0 };
      exports22.supportsColor = chalkOptions.level !== 0;
      exports22.supportsHyperlinks = exports22.supportsColor && !ci_info_1.default.GITHUB_ACTIONS && !ci_info_1.default.CIRCLE && !ci_info_1.default.GITLAB;
      var chalkInstance = new chalk_1.default.Instance(chalkOptions);
      var colors = /* @__PURE__ */ new Map([
        [exports22.Type.NO_HINT, null],
        [exports22.Type.NULL, [`#a853b5`, 129]],
        [exports22.Type.SCOPE, [`#d75f00`, 166]],
        [exports22.Type.NAME, [`#d7875f`, 173]],
        [exports22.Type.RANGE, [`#00afaf`, 37]],
        [exports22.Type.REFERENCE, [`#87afff`, 111]],
        [exports22.Type.NUMBER, [`#ffd700`, 220]],
        [exports22.Type.PATH, [`#d75fd7`, 170]],
        [exports22.Type.URL, [`#d75fd7`, 170]],
        [exports22.Type.ADDED, [`#5faf00`, 70]],
        [exports22.Type.REMOVED, [`#ff3131`, 160]],
        [exports22.Type.CODE, [`#87afff`, 111]],
        [exports22.Type.SIZE, [`#ffd700`, 220]]
      ]);
      var validateTransform = (spec) => spec;
      function sizeToText(size) {
        const thresholds = [`KiB`, `MiB`, `GiB`, `TiB`];
        let power = thresholds.length;
        while (power > 1 && size < 1024 ** power)
          power -= 1;
        const factor = 1024 ** power;
        const value = Math.floor(size * 100 / factor) / 100;
        return `${value} ${thresholds[power - 1]}`;
      }
      var transforms = {
        [exports22.Type.ID]: validateTransform({
          pretty: (configuration, value) => {
            if (typeof value === `number`) {
              return applyColor(configuration, `${value}`, exports22.Type.NUMBER);
            } else {
              return applyColor(configuration, value, exports22.Type.CODE);
            }
          },
          json: (id) => {
            return id;
          }
        }),
        [exports22.Type.INSPECT]: validateTransform({
          pretty: (configuration, value) => {
            return (0, util_1.inspect)(value, { depth: Infinity, colors: configuration.get(`enableColors`), compact: true, breakLength: Infinity });
          },
          json: (value) => {
            return value;
          }
        }),
        [exports22.Type.NUMBER]: validateTransform({
          pretty: (configuration, value) => {
            return applyColor(configuration, `${value}`, exports22.Type.NUMBER);
          },
          json: (value) => {
            return value;
          }
        }),
        [exports22.Type.IDENT]: validateTransform({
          pretty: (configuration, ident) => {
            return structUtils.prettyIdent(configuration, ident);
          },
          json: (ident) => {
            return structUtils.stringifyIdent(ident);
          }
        }),
        [exports22.Type.LOCATOR]: validateTransform({
          pretty: (configuration, locator) => {
            return structUtils.prettyLocator(configuration, locator);
          },
          json: (locator) => {
            return structUtils.stringifyLocator(locator);
          }
        }),
        [exports22.Type.DESCRIPTOR]: validateTransform({
          pretty: (configuration, descriptor) => {
            return structUtils.prettyDescriptor(configuration, descriptor);
          },
          json: (descriptor) => {
            return structUtils.stringifyDescriptor(descriptor);
          }
        }),
        [exports22.Type.RESOLUTION]: validateTransform({
          pretty: (configuration, { descriptor, locator }) => {
            return structUtils.prettyResolution(configuration, descriptor, locator);
          },
          json: ({ descriptor, locator }) => {
            return {
              descriptor: structUtils.stringifyDescriptor(descriptor),
              locator: locator !== null ? structUtils.stringifyLocator(locator) : null
            };
          }
        }),
        [exports22.Type.DEPENDENT]: validateTransform({
          pretty: (configuration, { locator, descriptor }) => {
            return structUtils.prettyDependent(configuration, locator, descriptor);
          },
          json: ({ locator, descriptor }) => {
            return {
              locator: structUtils.stringifyLocator(locator),
              descriptor: structUtils.stringifyDescriptor(descriptor)
            };
          }
        }),
        [exports22.Type.PACKAGE_EXTENSION]: validateTransform({
          pretty: (configuration, packageExtension) => {
            switch (packageExtension.type) {
              case types_1.PackageExtensionType.Dependency:
                return `${structUtils.prettyIdent(configuration, packageExtension.parentDescriptor)} \u27A4 ${applyColor(configuration, `dependencies`, exports22.Type.CODE)} \u27A4 ${structUtils.prettyIdent(configuration, packageExtension.descriptor)}`;
              case types_1.PackageExtensionType.PeerDependency:
                return `${structUtils.prettyIdent(configuration, packageExtension.parentDescriptor)} \u27A4 ${applyColor(configuration, `peerDependencies`, exports22.Type.CODE)} \u27A4 ${structUtils.prettyIdent(configuration, packageExtension.descriptor)}`;
              case types_1.PackageExtensionType.PeerDependencyMeta:
                return `${structUtils.prettyIdent(configuration, packageExtension.parentDescriptor)} \u27A4 ${applyColor(configuration, `peerDependenciesMeta`, exports22.Type.CODE)} \u27A4 ${structUtils.prettyIdent(configuration, structUtils.parseIdent(packageExtension.selector))} \u27A4 ${applyColor(configuration, packageExtension.key, exports22.Type.CODE)}`;
              default:
                throw new Error(`Assertion failed: Unsupported package extension type: ${packageExtension.type}`);
            }
          },
          json: (packageExtension) => {
            switch (packageExtension.type) {
              case types_1.PackageExtensionType.Dependency:
                return `${structUtils.stringifyIdent(packageExtension.parentDescriptor)} > ${structUtils.stringifyIdent(packageExtension.descriptor)}`;
              case types_1.PackageExtensionType.PeerDependency:
                return `${structUtils.stringifyIdent(packageExtension.parentDescriptor)} >> ${structUtils.stringifyIdent(packageExtension.descriptor)}`;
              case types_1.PackageExtensionType.PeerDependencyMeta:
                return `${structUtils.stringifyIdent(packageExtension.parentDescriptor)} >> ${packageExtension.selector} / ${packageExtension.key}`;
              default:
                throw new Error(`Assertion failed: Unsupported package extension type: ${packageExtension.type}`);
            }
          }
        }),
        [exports22.Type.SETTING]: validateTransform({
          pretty: (configuration, settingName) => {
            configuration.get(settingName);
            return applyHyperlink(configuration, applyColor(configuration, settingName, exports22.Type.CODE), `https://yarnpkg.com/configuration/yarnrc#${settingName}`);
          },
          json: (settingName) => {
            return settingName;
          }
        }),
        [exports22.Type.DURATION]: validateTransform({
          pretty: (configuration, duration) => {
            if (duration > 1000 * 60) {
              const minutes = Math.floor(duration / 1000 / 60);
              const seconds = Math.ceil((duration - minutes * 60 * 1000) / 1000);
              return seconds === 0 ? `${minutes}m` : `${minutes}m ${seconds}s`;
            } else {
              const seconds = Math.floor(duration / 1000);
              const milliseconds = duration - seconds * 1000;
              return milliseconds === 0 ? `${seconds}s` : `${seconds}s ${milliseconds}ms`;
            }
          },
          json: (duration) => {
            return duration;
          }
        }),
        [exports22.Type.SIZE]: validateTransform({
          pretty: (configuration, size) => {
            return applyColor(configuration, sizeToText(size), exports22.Type.NUMBER);
          },
          json: (size) => {
            return size;
          }
        }),
        [exports22.Type.SIZE_DIFF]: validateTransform({
          pretty: (configuration, size) => {
            const sign = size >= 0 ? `+` : `-`;
            const type = sign === `+` ? exports22.Type.REMOVED : exports22.Type.ADDED;
            return applyColor(configuration, `${sign} ${sizeToText(Math.max(Math.abs(size), 1))}`, type);
          },
          json: (size) => {
            return size;
          }
        }),
        [exports22.Type.PATH]: validateTransform({
          pretty: (configuration, filePath) => {
            return applyColor(configuration, fslib_12.npath.fromPortablePath(filePath), exports22.Type.PATH);
          },
          json: (filePath) => {
            return fslib_12.npath.fromPortablePath(filePath);
          }
        }),
        [exports22.Type.MARKDOWN]: validateTransform({
          pretty: (configuration, { text, format, paragraphs }) => {
            return (0, clipanion_12.formatMarkdownish)(text, { format, paragraphs });
          },
          json: ({ text }) => {
            return text;
          }
        }),
        [exports22.Type.MARKDOWN_INLINE]: validateTransform({
          pretty: (configuration, text) => {
            text = text.replace(/(`+)((?:.|[\n])*?)\1/g, ($0, $1, $2) => {
              return pretty(configuration, $1 + $2 + $1, exports22.Type.CODE);
            });
            text = text.replace(/(\*\*)((?:.|[\n])*?)\1/g, ($0, $1, $2) => {
              return applyStyle(configuration, $2, Style.BOLD);
            });
            return text;
          },
          json: (text) => {
            return text;
          }
        })
      };
      function tuple(formatType, value) {
        return [value, formatType];
      }
      function applyStyle(configuration, text, flags) {
        if (!configuration.get(`enableColors`))
          return text;
        if (flags & Style.BOLD)
          text = chalk_1.default.bold(text);
        return text;
      }
      function applyColor(configuration, value, formatType) {
        if (!configuration.get(`enableColors`))
          return value;
        const colorSpec = colors.get(formatType);
        if (colorSpec === null)
          return value;
        const color = typeof colorSpec === `undefined` ? formatType : chalkOptions.level >= 3 ? colorSpec[0] : colorSpec[1];
        const fn = typeof color === `number` ? chalkInstance.ansi256(color) : color.startsWith(`#`) ? chalkInstance.hex(color) : chalkInstance[color];
        if (typeof fn !== `function`)
          throw new Error(`Invalid format type ${color}`);
        return fn(value);
      }
      var isKonsole = !!process.env.KONSOLE_VERSION;
      function applyHyperlink(configuration, text, href) {
        if (!configuration.get(`enableHyperlinks`))
          return text;
        if (isKonsole)
          return `\x1B]8;;${href}\x1B\\${text}\x1B]8;;\x1B\\`;
        return `\x1B]8;;${href}\x07${text}\x1B]8;;\x07`;
      }
      function pretty(configuration, value, formatType) {
        if (value === null)
          return applyColor(configuration, `null`, exports22.Type.NULL);
        if (Object.hasOwn(transforms, formatType)) {
          const transform = transforms[formatType];
          const typedTransform = transform;
          return typedTransform.pretty(configuration, value);
        }
        if (typeof value !== `string`)
          throw new Error(`Assertion failed: Expected the value to be a string, got ${typeof value}`);
        return applyColor(configuration, value, formatType);
      }
      function prettyList(configuration, values, formatType, { separator = `, ` } = {}) {
        return [...values].map((value) => pretty(configuration, value, formatType)).join(separator);
      }
      function json(value, formatType) {
        if (value === null)
          return null;
        if (Object.hasOwn(transforms, formatType)) {
          miscUtils.overrideType(formatType);
          return transforms[formatType].json(value);
        }
        if (typeof value !== `string`)
          throw new Error(`Assertion failed: Expected the value to be a string, got ${typeof value}`);
        return value;
      }
      function jsonOrPretty(outputJson, configuration, [value, formatType]) {
        return outputJson ? json(value, formatType) : pretty(configuration, value, formatType);
      }
      function mark(configuration) {
        return {
          Check: applyColor(configuration, `\u2713`, `green`),
          Cross: applyColor(configuration, `\u2718`, `red`),
          Question: applyColor(configuration, `?`, `cyan`)
        };
      }
      function prettyField(configuration, { label, value: [value, formatType] }) {
        return `${pretty(configuration, label, exports22.Type.CODE)}: ${pretty(configuration, value, formatType)}`;
      }
      function prettyTruncatedLocatorList(configuration, locators, recommendedLength) {
        const named = [];
        const locatorsCopy = [...locators];
        let remainingLength = recommendedLength;
        while (locatorsCopy.length > 0) {
          const locator = locatorsCopy[0];
          const asString = `${structUtils.prettyLocator(configuration, locator)}, `;
          const asLength = structUtils.prettyLocatorNoColors(locator).length + 2;
          if (named.length > 0 && remainingLength < asLength)
            break;
          named.push([asString, asLength]);
          remainingLength -= asLength;
          locatorsCopy.shift();
        }
        if (locatorsCopy.length === 0)
          return named.map(([str]) => str).join(``).slice(0, -2);
        const mark2 = `X`.repeat(locatorsCopy.length.toString().length);
        const suffix = `and ${mark2} more.`;
        let otherCount = locatorsCopy.length;
        while (named.length > 1 && remainingLength < suffix.length) {
          remainingLength += named[named.length - 1][1];
          otherCount += 1;
          named.pop();
        }
        return [
          named.map(([str]) => str).join(``),
          suffix.replace(mark2, pretty(configuration, otherCount, exports22.Type.NUMBER))
        ].join(``);
      }
      var LogLevel;
      (function(LogLevel2) {
        LogLevel2["Error"] = "error";
        LogLevel2["Warning"] = "warning";
        LogLevel2["Info"] = "info";
        LogLevel2["Discard"] = "discard";
      })(LogLevel || (exports22.LogLevel = LogLevel = {}));
      function addLogFilterSupport(report, { configuration }) {
        const logFilters = configuration.get(`logFilters`);
        const logFiltersByCode = /* @__PURE__ */ new Map;
        const logFiltersByText = /* @__PURE__ */ new Map;
        const logFiltersByPatternMatcher = [];
        for (const filter of logFilters) {
          const level = filter.get(`level`);
          if (typeof level === `undefined`)
            continue;
          const code = filter.get(`code`);
          if (typeof code !== `undefined`)
            logFiltersByCode.set(code, level);
          const text = filter.get(`text`);
          if (typeof text !== `undefined`)
            logFiltersByText.set(text, level);
          const pattern = filter.get(`pattern`);
          if (typeof pattern !== `undefined`) {
            logFiltersByPatternMatcher.push([micromatch_12.default.matcher(pattern, { contains: true }), level]);
          }
        }
        logFiltersByPatternMatcher.reverse();
        const findLogLevel = (name, text, defaultLevel) => {
          if (name === null || name === MessageName_1.MessageName.UNNAMED)
            return defaultLevel;
          const strippedText = logFiltersByText.size > 0 || logFiltersByPatternMatcher.length > 0 ? (0, strip_ansi_1.default)(text) : text;
          if (logFiltersByText.size > 0) {
            const level = logFiltersByText.get(strippedText);
            if (typeof level !== `undefined`) {
              return level ?? defaultLevel;
            }
          }
          if (logFiltersByPatternMatcher.length > 0) {
            for (const [filterMatcher, filterLevel] of logFiltersByPatternMatcher) {
              if (filterMatcher(strippedText)) {
                return filterLevel ?? defaultLevel;
              }
            }
          }
          if (logFiltersByCode.size > 0) {
            const level = logFiltersByCode.get((0, MessageName_1.stringifyMessageName)(name));
            if (typeof level !== `undefined`) {
              return level ?? defaultLevel;
            }
          }
          return defaultLevel;
        };
        const reportInfo = report.reportInfo;
        const reportWarning = report.reportWarning;
        const reportError = report.reportError;
        const routeMessage = function(report2, name, text, level) {
          switch (findLogLevel(name, text, level)) {
            case LogLevel.Info:
              {
                reportInfo.call(report2, name, text);
              }
              break;
            case LogLevel.Warning:
              {
                reportWarning.call(report2, name ?? MessageName_1.MessageName.UNNAMED, text);
              }
              break;
            case LogLevel.Error:
              {
                reportError.call(report2, name ?? MessageName_1.MessageName.UNNAMED, text);
              }
              break;
          }
        };
        report.reportInfo = function(...args) {
          return routeMessage(this, ...args, LogLevel.Info);
        };
        report.reportWarning = function(...args) {
          return routeMessage(this, ...args, LogLevel.Warning);
        };
        report.reportError = function(...args) {
          return routeMessage(this, ...args, LogLevel.Error);
        };
      }
    }
  });
  var require_array = __commonJS2({
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/array.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.splitWhen = exports22.flatten = undefined;
      function flatten(items) {
        return items.reduce((collection, item) => [].concat(collection, item), []);
      }
      exports22.flatten = flatten;
      function splitWhen(items, predicate) {
        const result2 = [[]];
        let groupIndex = 0;
        for (const item of items) {
          if (predicate(item)) {
            groupIndex++;
            result2[groupIndex] = [];
          } else {
            result2[groupIndex].push(item);
          }
        }
        return result2;
      }
      exports22.splitWhen = splitWhen;
    }
  });
  var require_errno = __commonJS2({
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/errno.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.isEnoentCodeError = undefined;
      function isEnoentCodeError(error) {
        return error.code === "ENOENT";
      }
      exports22.isEnoentCodeError = isEnoentCodeError;
    }
  });
  var require_fs = __commonJS2({
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/fs.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.createDirentFromStats = undefined;
      var DirentFromStats = class {
        constructor(name, stats) {
          this.name = name;
          this.isBlockDevice = stats.isBlockDevice.bind(stats);
          this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
          this.isDirectory = stats.isDirectory.bind(stats);
          this.isFIFO = stats.isFIFO.bind(stats);
          this.isFile = stats.isFile.bind(stats);
          this.isSocket = stats.isSocket.bind(stats);
          this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
        }
      };
      function createDirentFromStats(name, stats) {
        return new DirentFromStats(name, stats);
      }
      exports22.createDirentFromStats = createDirentFromStats;
    }
  });
  var require_path2 = __commonJS2({
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/path.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.convertPosixPathToPattern = exports22.convertWindowsPathToPattern = exports22.convertPathToPattern = exports22.escapePosixPath = exports22.escapeWindowsPath = exports22.escape = exports22.removeLeadingDotSegment = exports22.makeAbsolute = exports22.unixify = undefined;
      var os = __require("os");
      var path2 = __require("path");
      var IS_WINDOWS_PLATFORM = os.platform() === "win32";
      var LEADING_DOT_SEGMENT_CHARACTERS_COUNT = 2;
      var POSIX_UNESCAPED_GLOB_SYMBOLS_RE = /(\\?)([()*?[\]{|}]|^!|[!+@](?=\()|\\(?![!()*+?@[\]{|}]))/g;
      var WINDOWS_UNESCAPED_GLOB_SYMBOLS_RE = /(\\?)([()[\]{}]|^!|[!+@](?=\())/g;
      var DOS_DEVICE_PATH_RE = /^\\\\([.?])/;
      var WINDOWS_BACKSLASHES_RE = /\\(?![!()+@[\]{}])/g;
      function unixify(filepath) {
        return filepath.replace(/\\/g, "/");
      }
      exports22.unixify = unixify;
      function makeAbsolute(cwd, filepath) {
        return path2.resolve(cwd, filepath);
      }
      exports22.makeAbsolute = makeAbsolute;
      function removeLeadingDotSegment(entry) {
        if (entry.charAt(0) === ".") {
          const secondCharactery = entry.charAt(1);
          if (secondCharactery === "/" || secondCharactery === "\\") {
            return entry.slice(LEADING_DOT_SEGMENT_CHARACTERS_COUNT);
          }
        }
        return entry;
      }
      exports22.removeLeadingDotSegment = removeLeadingDotSegment;
      exports22.escape = IS_WINDOWS_PLATFORM ? escapeWindowsPath : escapePosixPath;
      function escapeWindowsPath(pattern) {
        return pattern.replace(WINDOWS_UNESCAPED_GLOB_SYMBOLS_RE, "\\$2");
      }
      exports22.escapeWindowsPath = escapeWindowsPath;
      function escapePosixPath(pattern) {
        return pattern.replace(POSIX_UNESCAPED_GLOB_SYMBOLS_RE, "\\$2");
      }
      exports22.escapePosixPath = escapePosixPath;
      exports22.convertPathToPattern = IS_WINDOWS_PLATFORM ? convertWindowsPathToPattern : convertPosixPathToPattern;
      function convertWindowsPathToPattern(filepath) {
        return escapeWindowsPath(filepath).replace(DOS_DEVICE_PATH_RE, "//$1").replace(WINDOWS_BACKSLASHES_RE, "/");
      }
      exports22.convertWindowsPathToPattern = convertWindowsPathToPattern;
      function convertPosixPathToPattern(filepath) {
        return escapePosixPath(filepath);
      }
      exports22.convertPosixPathToPattern = convertPosixPathToPattern;
    }
  });
  var require_is_extglob = __commonJS2({
    "../../node_modules/.pnpm/is-extglob@2.1.1/node_modules/is-extglob/index.js"(exports22, module22) {
      module22.exports = function isExtglob(str) {
        if (typeof str !== "string" || str === "") {
          return false;
        }
        var match;
        while (match = /(\\).|([@?!+*]\(.*\))/g.exec(str)) {
          if (match[2])
            return true;
          str = str.slice(match.index + match[0].length);
        }
        return false;
      };
    }
  });
  var require_is_glob = __commonJS2({
    "../../node_modules/.pnpm/is-glob@4.0.3/node_modules/is-glob/index.js"(exports22, module22) {
      var isExtglob = require_is_extglob();
      var chars = { "{": "}", "(": ")", "[": "]" };
      var strictCheck = function(str) {
        if (str[0] === "!") {
          return true;
        }
        var index = 0;
        var pipeIndex = -2;
        var closeSquareIndex = -2;
        var closeCurlyIndex = -2;
        var closeParenIndex = -2;
        var backSlashIndex = -2;
        while (index < str.length) {
          if (str[index] === "*") {
            return true;
          }
          if (str[index + 1] === "?" && /[\].+)]/.test(str[index])) {
            return true;
          }
          if (closeSquareIndex !== -1 && str[index] === "[" && str[index + 1] !== "]") {
            if (closeSquareIndex < index) {
              closeSquareIndex = str.indexOf("]", index);
            }
            if (closeSquareIndex > index) {
              if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
                return true;
              }
              backSlashIndex = str.indexOf("\\", index);
              if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
                return true;
              }
            }
          }
          if (closeCurlyIndex !== -1 && str[index] === "{" && str[index + 1] !== "}") {
            closeCurlyIndex = str.indexOf("}", index);
            if (closeCurlyIndex > index) {
              backSlashIndex = str.indexOf("\\", index);
              if (backSlashIndex === -1 || backSlashIndex > closeCurlyIndex) {
                return true;
              }
            }
          }
          if (closeParenIndex !== -1 && str[index] === "(" && str[index + 1] === "?" && /[:!=]/.test(str[index + 2]) && str[index + 3] !== ")") {
            closeParenIndex = str.indexOf(")", index);
            if (closeParenIndex > index) {
              backSlashIndex = str.indexOf("\\", index);
              if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
                return true;
              }
            }
          }
          if (pipeIndex !== -1 && str[index] === "(" && str[index + 1] !== "|") {
            if (pipeIndex < index) {
              pipeIndex = str.indexOf("|", index);
            }
            if (pipeIndex !== -1 && str[pipeIndex + 1] !== ")") {
              closeParenIndex = str.indexOf(")", pipeIndex);
              if (closeParenIndex > pipeIndex) {
                backSlashIndex = str.indexOf("\\", pipeIndex);
                if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
                  return true;
                }
              }
            }
          }
          if (str[index] === "\\") {
            var open = str[index + 1];
            index += 2;
            var close = chars[open];
            if (close) {
              var n = str.indexOf(close, index);
              if (n !== -1) {
                index = n + 1;
              }
            }
            if (str[index] === "!") {
              return true;
            }
          } else {
            index++;
          }
        }
        return false;
      };
      var relaxedCheck = function(str) {
        if (str[0] === "!") {
          return true;
        }
        var index = 0;
        while (index < str.length) {
          if (/[*?{}()[\]]/.test(str[index])) {
            return true;
          }
          if (str[index] === "\\") {
            var open = str[index + 1];
            index += 2;
            var close = chars[open];
            if (close) {
              var n = str.indexOf(close, index);
              if (n !== -1) {
                index = n + 1;
              }
            }
            if (str[index] === "!") {
              return true;
            }
          } else {
            index++;
          }
        }
        return false;
      };
      module22.exports = function isGlob(str, options) {
        if (typeof str !== "string" || str === "") {
          return false;
        }
        if (isExtglob(str)) {
          return true;
        }
        var check = strictCheck;
        if (options && options.strict === false) {
          check = relaxedCheck;
        }
        return check(str);
      };
    }
  });
  var require_glob_parent = __commonJS2({
    "../../node_modules/.pnpm/glob-parent@5.1.2/node_modules/glob-parent/index.js"(exports22, module22) {
      var isGlob = require_is_glob();
      var pathPosixDirname = __require("path").posix.dirname;
      var isWin32 = __require("os").platform() === "win32";
      var slash = "/";
      var backslash = /\\/g;
      var enclosure = /[\{\[].*[\}\]]$/;
      var globby = /(^|[^\\])([\{\[]|\([^\)]+$)/;
      var escaped = /\\([\!\*\?\|\[\]\(\)\{\}])/g;
      module22.exports = function globParent(str, opts) {
        var options = Object.assign({ flipBackslashes: true }, opts);
        if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {
          str = str.replace(backslash, slash);
        }
        if (enclosure.test(str)) {
          str += slash;
        }
        str += "a";
        do {
          str = pathPosixDirname(str);
        } while (isGlob(str) || globby.test(str));
        return str.replace(escaped, "$1");
      };
    }
  });
  var require_pattern = __commonJS2({
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/pattern.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.isAbsolute = exports22.partitionAbsoluteAndRelative = exports22.removeDuplicateSlashes = exports22.matchAny = exports22.convertPatternsToRe = exports22.makeRe = exports22.getPatternParts = exports22.expandBraceExpansion = exports22.expandPatternsWithBraceExpansion = exports22.isAffectDepthOfReadingPattern = exports22.endsWithSlashGlobStar = exports22.hasGlobStar = exports22.getBaseDirectory = exports22.isPatternRelatedToParentDirectory = exports22.getPatternsOutsideCurrentDirectory = exports22.getPatternsInsideCurrentDirectory = exports22.getPositivePatterns = exports22.getNegativePatterns = exports22.isPositivePattern = exports22.isNegativePattern = exports22.convertToNegativePattern = exports22.convertToPositivePattern = exports22.isDynamicPattern = exports22.isStaticPattern = undefined;
      var path2 = __require("path");
      var globParent = require_glob_parent();
      var micromatch = require_micromatch();
      var GLOBSTAR = "**";
      var ESCAPE_SYMBOL = "\\";
      var COMMON_GLOB_SYMBOLS_RE = /[*?]|^!/;
      var REGEX_CHARACTER_CLASS_SYMBOLS_RE = /\[[^[]*]/;
      var REGEX_GROUP_SYMBOLS_RE = /(?:^|[^!*+?@])\([^(]*\|[^|]*\)/;
      var GLOB_EXTENSION_SYMBOLS_RE = /[!*+?@]\([^(]*\)/;
      var BRACE_EXPANSION_SEPARATORS_RE = /,|\.\./;
      var DOUBLE_SLASH_RE = /(?!^)\/{2,}/g;
      function isStaticPattern(pattern, options = {}) {
        return !isDynamicPattern(pattern, options);
      }
      exports22.isStaticPattern = isStaticPattern;
      function isDynamicPattern(pattern, options = {}) {
        if (pattern === "") {
          return false;
        }
        if (options.caseSensitiveMatch === false || pattern.includes(ESCAPE_SYMBOL)) {
          return true;
        }
        if (COMMON_GLOB_SYMBOLS_RE.test(pattern) || REGEX_CHARACTER_CLASS_SYMBOLS_RE.test(pattern) || REGEX_GROUP_SYMBOLS_RE.test(pattern)) {
          return true;
        }
        if (options.extglob !== false && GLOB_EXTENSION_SYMBOLS_RE.test(pattern)) {
          return true;
        }
        if (options.braceExpansion !== false && hasBraceExpansion(pattern)) {
          return true;
        }
        return false;
      }
      exports22.isDynamicPattern = isDynamicPattern;
      function hasBraceExpansion(pattern) {
        const openingBraceIndex = pattern.indexOf("{");
        if (openingBraceIndex === -1) {
          return false;
        }
        const closingBraceIndex = pattern.indexOf("}", openingBraceIndex + 1);
        if (closingBraceIndex === -1) {
          return false;
        }
        const braceContent = pattern.slice(openingBraceIndex, closingBraceIndex);
        return BRACE_EXPANSION_SEPARATORS_RE.test(braceContent);
      }
      function convertToPositivePattern(pattern) {
        return isNegativePattern(pattern) ? pattern.slice(1) : pattern;
      }
      exports22.convertToPositivePattern = convertToPositivePattern;
      function convertToNegativePattern(pattern) {
        return "!" + pattern;
      }
      exports22.convertToNegativePattern = convertToNegativePattern;
      function isNegativePattern(pattern) {
        return pattern.startsWith("!") && pattern[1] !== "(";
      }
      exports22.isNegativePattern = isNegativePattern;
      function isPositivePattern(pattern) {
        return !isNegativePattern(pattern);
      }
      exports22.isPositivePattern = isPositivePattern;
      function getNegativePatterns(patterns) {
        return patterns.filter(isNegativePattern);
      }
      exports22.getNegativePatterns = getNegativePatterns;
      function getPositivePatterns(patterns) {
        return patterns.filter(isPositivePattern);
      }
      exports22.getPositivePatterns = getPositivePatterns;
      function getPatternsInsideCurrentDirectory(patterns) {
        return patterns.filter((pattern) => !isPatternRelatedToParentDirectory(pattern));
      }
      exports22.getPatternsInsideCurrentDirectory = getPatternsInsideCurrentDirectory;
      function getPatternsOutsideCurrentDirectory(patterns) {
        return patterns.filter(isPatternRelatedToParentDirectory);
      }
      exports22.getPatternsOutsideCurrentDirectory = getPatternsOutsideCurrentDirectory;
      function isPatternRelatedToParentDirectory(pattern) {
        return pattern.startsWith("..") || pattern.startsWith("./..");
      }
      exports22.isPatternRelatedToParentDirectory = isPatternRelatedToParentDirectory;
      function getBaseDirectory(pattern) {
        return globParent(pattern, { flipBackslashes: false });
      }
      exports22.getBaseDirectory = getBaseDirectory;
      function hasGlobStar(pattern) {
        return pattern.includes(GLOBSTAR);
      }
      exports22.hasGlobStar = hasGlobStar;
      function endsWithSlashGlobStar(pattern) {
        return pattern.endsWith("/" + GLOBSTAR);
      }
      exports22.endsWithSlashGlobStar = endsWithSlashGlobStar;
      function isAffectDepthOfReadingPattern(pattern) {
        const basename = path2.basename(pattern);
        return endsWithSlashGlobStar(pattern) || isStaticPattern(basename);
      }
      exports22.isAffectDepthOfReadingPattern = isAffectDepthOfReadingPattern;
      function expandPatternsWithBraceExpansion(patterns) {
        return patterns.reduce((collection, pattern) => {
          return collection.concat(expandBraceExpansion(pattern));
        }, []);
      }
      exports22.expandPatternsWithBraceExpansion = expandPatternsWithBraceExpansion;
      function expandBraceExpansion(pattern) {
        const patterns = micromatch.braces(pattern, { expand: true, nodupes: true, keepEscaping: true });
        patterns.sort((a, b) => a.length - b.length);
        return patterns.filter((pattern2) => pattern2 !== "");
      }
      exports22.expandBraceExpansion = expandBraceExpansion;
      function getPatternParts(pattern, options) {
        let { parts } = micromatch.scan(pattern, Object.assign(Object.assign({}, options), { parts: true }));
        if (parts.length === 0) {
          parts = [pattern];
        }
        if (parts[0].startsWith("/")) {
          parts[0] = parts[0].slice(1);
          parts.unshift("");
        }
        return parts;
      }
      exports22.getPatternParts = getPatternParts;
      function makeRe(pattern, options) {
        return micromatch.makeRe(pattern, options);
      }
      exports22.makeRe = makeRe;
      function convertPatternsToRe(patterns, options) {
        return patterns.map((pattern) => makeRe(pattern, options));
      }
      exports22.convertPatternsToRe = convertPatternsToRe;
      function matchAny(entry, patternsRe) {
        return patternsRe.some((patternRe) => patternRe.test(entry));
      }
      exports22.matchAny = matchAny;
      function removeDuplicateSlashes(pattern) {
        return pattern.replace(DOUBLE_SLASH_RE, "/");
      }
      exports22.removeDuplicateSlashes = removeDuplicateSlashes;
      function partitionAbsoluteAndRelative(patterns) {
        const absolute = [];
        const relative = [];
        for (const pattern of patterns) {
          if (isAbsolute(pattern)) {
            absolute.push(pattern);
          } else {
            relative.push(pattern);
          }
        }
        return [absolute, relative];
      }
      exports22.partitionAbsoluteAndRelative = partitionAbsoluteAndRelative;
      function isAbsolute(pattern) {
        return path2.isAbsolute(pattern);
      }
      exports22.isAbsolute = isAbsolute;
    }
  });
  var require_merge2 = __commonJS2({
    "../../node_modules/.pnpm/merge2@1.4.1/node_modules/merge2/index.js"(exports22, module22) {
      var Stream = __require("stream");
      var PassThrough = Stream.PassThrough;
      var slice = Array.prototype.slice;
      module22.exports = merge2;
      function merge2() {
        const streamsQueue = [];
        const args = slice.call(arguments);
        let merging = false;
        let options = args[args.length - 1];
        if (options && !Array.isArray(options) && options.pipe == null) {
          args.pop();
        } else {
          options = {};
        }
        const doEnd = options.end !== false;
        const doPipeError = options.pipeError === true;
        if (options.objectMode == null) {
          options.objectMode = true;
        }
        if (options.highWaterMark == null) {
          options.highWaterMark = 64 * 1024;
        }
        const mergedStream = PassThrough(options);
        function addStream() {
          for (let i = 0, len = arguments.length;i < len; i++) {
            streamsQueue.push(pauseStreams(arguments[i], options));
          }
          mergeStream();
          return this;
        }
        function mergeStream() {
          if (merging) {
            return;
          }
          merging = true;
          let streams = streamsQueue.shift();
          if (!streams) {
            process.nextTick(endStream);
            return;
          }
          if (!Array.isArray(streams)) {
            streams = [streams];
          }
          let pipesCount = streams.length + 1;
          function next() {
            if (--pipesCount > 0) {
              return;
            }
            merging = false;
            mergeStream();
          }
          function pipe(stream) {
            function onend() {
              stream.removeListener("merge2UnpipeEnd", onend);
              stream.removeListener("end", onend);
              if (doPipeError) {
                stream.removeListener("error", onerror);
              }
              next();
            }
            function onerror(err) {
              mergedStream.emit("error", err);
            }
            if (stream._readableState.endEmitted) {
              return next();
            }
            stream.on("merge2UnpipeEnd", onend);
            stream.on("end", onend);
            if (doPipeError) {
              stream.on("error", onerror);
            }
            stream.pipe(mergedStream, { end: false });
            stream.resume();
          }
          for (let i = 0;i < streams.length; i++) {
            pipe(streams[i]);
          }
          next();
        }
        function endStream() {
          merging = false;
          mergedStream.emit("queueDrain");
          if (doEnd) {
            mergedStream.end();
          }
        }
        mergedStream.setMaxListeners(0);
        mergedStream.add = addStream;
        mergedStream.on("unpipe", function(stream) {
          stream.emit("merge2UnpipeEnd");
        });
        if (args.length) {
          addStream.apply(null, args);
        }
        return mergedStream;
      }
      function pauseStreams(streams, options) {
        if (!Array.isArray(streams)) {
          if (!streams._readableState && streams.pipe) {
            streams = streams.pipe(PassThrough(options));
          }
          if (!streams._readableState || !streams.pause || !streams.pipe) {
            throw new Error("Only readable stream can be merged.");
          }
          streams.pause();
        } else {
          for (let i = 0, len = streams.length;i < len; i++) {
            streams[i] = pauseStreams(streams[i], options);
          }
        }
        return streams;
      }
    }
  });
  var require_stream = __commonJS2({
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/stream.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.merge = undefined;
      var merge2 = require_merge2();
      function merge(streams) {
        const mergedStream = merge2(streams);
        streams.forEach((stream) => {
          stream.once("error", (error) => mergedStream.emit("error", error));
        });
        mergedStream.once("close", () => propagateCloseEventToSources(streams));
        mergedStream.once("end", () => propagateCloseEventToSources(streams));
        return mergedStream;
      }
      exports22.merge = merge;
      function propagateCloseEventToSources(streams) {
        streams.forEach((stream) => stream.emit("close"));
      }
    }
  });
  var require_string = __commonJS2({
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/string.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.isEmpty = exports22.isString = undefined;
      function isString(input) {
        return typeof input === "string";
      }
      exports22.isString = isString;
      function isEmpty(input) {
        return input === "";
      }
      exports22.isEmpty = isEmpty;
    }
  });
  var require_utils4 = __commonJS2({
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/index.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.string = exports22.stream = exports22.pattern = exports22.path = exports22.fs = exports22.errno = exports22.array = undefined;
      var array = require_array();
      exports22.array = array;
      var errno = require_errno();
      exports22.errno = errno;
      var fs = require_fs();
      exports22.fs = fs;
      var path2 = require_path2();
      exports22.path = path2;
      var pattern = require_pattern();
      exports22.pattern = pattern;
      var stream = require_stream();
      exports22.stream = stream;
      var string = require_string();
      exports22.string = string;
    }
  });
  var require_tasks = __commonJS2({
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/managers/tasks.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.convertPatternGroupToTask = exports22.convertPatternGroupsToTasks = exports22.groupPatternsByBaseDirectory = exports22.getNegativePatternsAsPositive = exports22.getPositivePatterns = exports22.convertPatternsToTasks = exports22.generate = undefined;
      var utils = require_utils4();
      function generate(input, settings) {
        const patterns = processPatterns(input, settings);
        const ignore = processPatterns(settings.ignore, settings);
        const positivePatterns = getPositivePatterns(patterns);
        const negativePatterns = getNegativePatternsAsPositive(patterns, ignore);
        const staticPatterns = positivePatterns.filter((pattern) => utils.pattern.isStaticPattern(pattern, settings));
        const dynamicPatterns = positivePatterns.filter((pattern) => utils.pattern.isDynamicPattern(pattern, settings));
        const staticTasks = convertPatternsToTasks(staticPatterns, negativePatterns, false);
        const dynamicTasks = convertPatternsToTasks(dynamicPatterns, negativePatterns, true);
        return staticTasks.concat(dynamicTasks);
      }
      exports22.generate = generate;
      function processPatterns(input, settings) {
        let patterns = input;
        if (settings.braceExpansion) {
          patterns = utils.pattern.expandPatternsWithBraceExpansion(patterns);
        }
        if (settings.baseNameMatch) {
          patterns = patterns.map((pattern) => pattern.includes("/") ? pattern : `**/${pattern}`);
        }
        return patterns.map((pattern) => utils.pattern.removeDuplicateSlashes(pattern));
      }
      function convertPatternsToTasks(positive, negative, dynamic) {
        const tasks = [];
        const patternsOutsideCurrentDirectory = utils.pattern.getPatternsOutsideCurrentDirectory(positive);
        const patternsInsideCurrentDirectory = utils.pattern.getPatternsInsideCurrentDirectory(positive);
        const outsideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsOutsideCurrentDirectory);
        const insideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsInsideCurrentDirectory);
        tasks.push(...convertPatternGroupsToTasks(outsideCurrentDirectoryGroup, negative, dynamic));
        if ("." in insideCurrentDirectoryGroup) {
          tasks.push(convertPatternGroupToTask(".", patternsInsideCurrentDirectory, negative, dynamic));
        } else {
          tasks.push(...convertPatternGroupsToTasks(insideCurrentDirectoryGroup, negative, dynamic));
        }
        return tasks;
      }
      exports22.convertPatternsToTasks = convertPatternsToTasks;
      function getPositivePatterns(patterns) {
        return utils.pattern.getPositivePatterns(patterns);
      }
      exports22.getPositivePatterns = getPositivePatterns;
      function getNegativePatternsAsPositive(patterns, ignore) {
        const negative = utils.pattern.getNegativePatterns(patterns).concat(ignore);
        const positive = negative.map(utils.pattern.convertToPositivePattern);
        return positive;
      }
      exports22.getNegativePatternsAsPositive = getNegativePatternsAsPositive;
      function groupPatternsByBaseDirectory(patterns) {
        const group = {};
        return patterns.reduce((collection, pattern) => {
          const base = utils.pattern.getBaseDirectory(pattern);
          if (base in collection) {
            collection[base].push(pattern);
          } else {
            collection[base] = [pattern];
          }
          return collection;
        }, group);
      }
      exports22.groupPatternsByBaseDirectory = groupPatternsByBaseDirectory;
      function convertPatternGroupsToTasks(positive, negative, dynamic) {
        return Object.keys(positive).map((base) => {
          return convertPatternGroupToTask(base, positive[base], negative, dynamic);
        });
      }
      exports22.convertPatternGroupsToTasks = convertPatternGroupsToTasks;
      function convertPatternGroupToTask(base, positive, negative, dynamic) {
        return {
          dynamic,
          positive,
          negative,
          base,
          patterns: [].concat(positive, negative.map(utils.pattern.convertToNegativePattern))
        };
      }
      exports22.convertPatternGroupToTask = convertPatternGroupToTask;
    }
  });
  var require_async = __commonJS2({
    "../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/providers/async.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.read = undefined;
      function read(path2, settings, callback) {
        settings.fs.lstat(path2, (lstatError, lstat) => {
          if (lstatError !== null) {
            callFailureCallback(callback, lstatError);
            return;
          }
          if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
            callSuccessCallback(callback, lstat);
            return;
          }
          settings.fs.stat(path2, (statError, stat) => {
            if (statError !== null) {
              if (settings.throwErrorOnBrokenSymbolicLink) {
                callFailureCallback(callback, statError);
                return;
              }
              callSuccessCallback(callback, lstat);
              return;
            }
            if (settings.markSymbolicLink) {
              stat.isSymbolicLink = () => true;
            }
            callSuccessCallback(callback, stat);
          });
        });
      }
      exports22.read = read;
      function callFailureCallback(callback, error) {
        callback(error);
      }
      function callSuccessCallback(callback, result2) {
        callback(null, result2);
      }
    }
  });
  var require_sync = __commonJS2({
    "../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/providers/sync.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.read = undefined;
      function read(path2, settings) {
        const lstat = settings.fs.lstatSync(path2);
        if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
          return lstat;
        }
        try {
          const stat = settings.fs.statSync(path2);
          if (settings.markSymbolicLink) {
            stat.isSymbolicLink = () => true;
          }
          return stat;
        } catch (error) {
          if (!settings.throwErrorOnBrokenSymbolicLink) {
            return lstat;
          }
          throw error;
        }
      }
      exports22.read = read;
    }
  });
  var require_fs2 = __commonJS2({
    "../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/adapters/fs.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.createFileSystemAdapter = exports22.FILE_SYSTEM_ADAPTER = undefined;
      var fs = __require("fs");
      exports22.FILE_SYSTEM_ADAPTER = {
        lstat: fs.lstat,
        stat: fs.stat,
        lstatSync: fs.lstatSync,
        statSync: fs.statSync
      };
      function createFileSystemAdapter(fsMethods) {
        if (fsMethods === undefined) {
          return exports22.FILE_SYSTEM_ADAPTER;
        }
        return Object.assign(Object.assign({}, exports22.FILE_SYSTEM_ADAPTER), fsMethods);
      }
      exports22.createFileSystemAdapter = createFileSystemAdapter;
    }
  });
  var require_settings = __commonJS2({
    "../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/settings.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var fs = require_fs2();
      var Settings = class {
        constructor(_options = {}) {
          this._options = _options;
          this.followSymbolicLink = this._getValue(this._options.followSymbolicLink, true);
          this.fs = fs.createFileSystemAdapter(this._options.fs);
          this.markSymbolicLink = this._getValue(this._options.markSymbolicLink, false);
          this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
        }
        _getValue(option, value) {
          return option !== null && option !== undefined ? option : value;
        }
      };
      exports22.default = Settings;
    }
  });
  var require_out = __commonJS2({
    "../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/index.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.statSync = exports22.stat = exports22.Settings = undefined;
      var async = require_async();
      var sync = require_sync();
      var settings_1 = require_settings();
      exports22.Settings = settings_1.default;
      function stat(path2, optionsOrSettingsOrCallback, callback) {
        if (typeof optionsOrSettingsOrCallback === "function") {
          async.read(path2, getSettings(), optionsOrSettingsOrCallback);
          return;
        }
        async.read(path2, getSettings(optionsOrSettingsOrCallback), callback);
      }
      exports22.stat = stat;
      function statSync(path2, optionsOrSettings) {
        const settings = getSettings(optionsOrSettings);
        return sync.read(path2, settings);
      }
      exports22.statSync = statSync;
      function getSettings(settingsOrOptions = {}) {
        if (settingsOrOptions instanceof settings_1.default) {
          return settingsOrOptions;
        }
        return new settings_1.default(settingsOrOptions);
      }
    }
  });
  var require_queue_microtask = __commonJS2({
    "../../node_modules/.pnpm/queue-microtask@1.2.3/node_modules/queue-microtask/index.js"(exports22, module22) {
      var promise;
      module22.exports = typeof queueMicrotask === "function" ? queueMicrotask.bind(typeof window !== "undefined" ? window : global) : (cb) => (promise || (promise = Promise.resolve())).then(cb).catch((err) => setTimeout(() => {
        throw err;
      }, 0));
    }
  });
  var require_run_parallel = __commonJS2({
    "../../node_modules/.pnpm/run-parallel@1.2.0/node_modules/run-parallel/index.js"(exports22, module22) {
      module22.exports = runParallel;
      var queueMicrotask2 = require_queue_microtask();
      function runParallel(tasks, cb) {
        let results, pending, keys;
        let isSync = true;
        if (Array.isArray(tasks)) {
          results = [];
          pending = tasks.length;
        } else {
          keys = Object.keys(tasks);
          results = {};
          pending = keys.length;
        }
        function done(err) {
          function end() {
            if (cb)
              cb(err, results);
            cb = null;
          }
          if (isSync)
            queueMicrotask2(end);
          else
            end();
        }
        function each(i, err, result2) {
          results[i] = result2;
          if (--pending === 0 || err) {
            done(err);
          }
        }
        if (!pending) {
          done(null);
        } else if (keys) {
          keys.forEach(function(key) {
            tasks[key](function(err, result2) {
              each(key, err, result2);
            });
          });
        } else {
          tasks.forEach(function(task, i) {
            task(function(err, result2) {
              each(i, err, result2);
            });
          });
        }
        isSync = false;
      }
    }
  });
  var require_constants6 = __commonJS2({
    "../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/constants.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.IS_SUPPORT_READDIR_WITH_FILE_TYPES = undefined;
      var NODE_PROCESS_VERSION_PARTS = process.versions.node.split(".");
      if (NODE_PROCESS_VERSION_PARTS[0] === undefined || NODE_PROCESS_VERSION_PARTS[1] === undefined) {
        throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`);
      }
      var MAJOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[0], 10);
      var MINOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[1], 10);
      var SUPPORTED_MAJOR_VERSION = 10;
      var SUPPORTED_MINOR_VERSION = 10;
      var IS_MATCHED_BY_MAJOR = MAJOR_VERSION > SUPPORTED_MAJOR_VERSION;
      var IS_MATCHED_BY_MAJOR_AND_MINOR = MAJOR_VERSION === SUPPORTED_MAJOR_VERSION && MINOR_VERSION >= SUPPORTED_MINOR_VERSION;
      exports22.IS_SUPPORT_READDIR_WITH_FILE_TYPES = IS_MATCHED_BY_MAJOR || IS_MATCHED_BY_MAJOR_AND_MINOR;
    }
  });
  var require_fs3 = __commonJS2({
    "../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/utils/fs.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.createDirentFromStats = undefined;
      var DirentFromStats = class {
        constructor(name, stats) {
          this.name = name;
          this.isBlockDevice = stats.isBlockDevice.bind(stats);
          this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
          this.isDirectory = stats.isDirectory.bind(stats);
          this.isFIFO = stats.isFIFO.bind(stats);
          this.isFile = stats.isFile.bind(stats);
          this.isSocket = stats.isSocket.bind(stats);
          this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
        }
      };
      function createDirentFromStats(name, stats) {
        return new DirentFromStats(name, stats);
      }
      exports22.createDirentFromStats = createDirentFromStats;
    }
  });
  var require_utils5 = __commonJS2({
    "../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/utils/index.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.fs = undefined;
      var fs = require_fs3();
      exports22.fs = fs;
    }
  });
  var require_common2 = __commonJS2({
    "../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/common.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.joinPathSegments = undefined;
      function joinPathSegments(a, b, separator) {
        if (a.endsWith(separator)) {
          return a + b;
        }
        return a + separator + b;
      }
      exports22.joinPathSegments = joinPathSegments;
    }
  });
  var require_async2 = __commonJS2({
    "../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/async.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.readdir = exports22.readdirWithFileTypes = exports22.read = undefined;
      var fsStat = require_out();
      var rpl = require_run_parallel();
      var constants_1 = require_constants6();
      var utils = require_utils5();
      var common = require_common2();
      function read(directory, settings, callback) {
        if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
          readdirWithFileTypes(directory, settings, callback);
          return;
        }
        readdir(directory, settings, callback);
      }
      exports22.read = read;
      function readdirWithFileTypes(directory, settings, callback) {
        settings.fs.readdir(directory, { withFileTypes: true }, (readdirError, dirents) => {
          if (readdirError !== null) {
            callFailureCallback(callback, readdirError);
            return;
          }
          const entries = dirents.map((dirent) => ({
            dirent,
            name: dirent.name,
            path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
          }));
          if (!settings.followSymbolicLinks) {
            callSuccessCallback(callback, entries);
            return;
          }
          const tasks = entries.map((entry) => makeRplTaskEntry(entry, settings));
          rpl(tasks, (rplError, rplEntries) => {
            if (rplError !== null) {
              callFailureCallback(callback, rplError);
              return;
            }
            callSuccessCallback(callback, rplEntries);
          });
        });
      }
      exports22.readdirWithFileTypes = readdirWithFileTypes;
      function makeRplTaskEntry(entry, settings) {
        return (done) => {
          if (!entry.dirent.isSymbolicLink()) {
            done(null, entry);
            return;
          }
          settings.fs.stat(entry.path, (statError, stats) => {
            if (statError !== null) {
              if (settings.throwErrorOnBrokenSymbolicLink) {
                done(statError);
                return;
              }
              done(null, entry);
              return;
            }
            entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
            done(null, entry);
          });
        };
      }
      function readdir(directory, settings, callback) {
        settings.fs.readdir(directory, (readdirError, names) => {
          if (readdirError !== null) {
            callFailureCallback(callback, readdirError);
            return;
          }
          const tasks = names.map((name) => {
            const path2 = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);
            return (done) => {
              fsStat.stat(path2, settings.fsStatSettings, (error, stats) => {
                if (error !== null) {
                  done(error);
                  return;
                }
                const entry = {
                  name,
                  path: path2,
                  dirent: utils.fs.createDirentFromStats(name, stats)
                };
                if (settings.stats) {
                  entry.stats = stats;
                }
                done(null, entry);
              });
            };
          });
          rpl(tasks, (rplError, entries) => {
            if (rplError !== null) {
              callFailureCallback(callback, rplError);
              return;
            }
            callSuccessCallback(callback, entries);
          });
        });
      }
      exports22.readdir = readdir;
      function callFailureCallback(callback, error) {
        callback(error);
      }
      function callSuccessCallback(callback, result2) {
        callback(null, result2);
      }
    }
  });
  var require_sync2 = __commonJS2({
    "../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/sync.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.readdir = exports22.readdirWithFileTypes = exports22.read = undefined;
      var fsStat = require_out();
      var constants_1 = require_constants6();
      var utils = require_utils5();
      var common = require_common2();
      function read(directory, settings) {
        if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
          return readdirWithFileTypes(directory, settings);
        }
        return readdir(directory, settings);
      }
      exports22.read = read;
      function readdirWithFileTypes(directory, settings) {
        const dirents = settings.fs.readdirSync(directory, { withFileTypes: true });
        return dirents.map((dirent) => {
          const entry = {
            dirent,
            name: dirent.name,
            path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
          };
          if (entry.dirent.isSymbolicLink() && settings.followSymbolicLinks) {
            try {
              const stats = settings.fs.statSync(entry.path);
              entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
            } catch (error) {
              if (settings.throwErrorOnBrokenSymbolicLink) {
                throw error;
              }
            }
          }
          return entry;
        });
      }
      exports22.readdirWithFileTypes = readdirWithFileTypes;
      function readdir(directory, settings) {
        const names = settings.fs.readdirSync(directory);
        return names.map((name) => {
          const entryPath = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);
          const stats = fsStat.statSync(entryPath, settings.fsStatSettings);
          const entry = {
            name,
            path: entryPath,
            dirent: utils.fs.createDirentFromStats(name, stats)
          };
          if (settings.stats) {
            entry.stats = stats;
          }
          return entry;
        });
      }
      exports22.readdir = readdir;
    }
  });
  var require_fs4 = __commonJS2({
    "../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/adapters/fs.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.createFileSystemAdapter = exports22.FILE_SYSTEM_ADAPTER = undefined;
      var fs = __require("fs");
      exports22.FILE_SYSTEM_ADAPTER = {
        lstat: fs.lstat,
        stat: fs.stat,
        lstatSync: fs.lstatSync,
        statSync: fs.statSync,
        readdir: fs.readdir,
        readdirSync: fs.readdirSync
      };
      function createFileSystemAdapter(fsMethods) {
        if (fsMethods === undefined) {
          return exports22.FILE_SYSTEM_ADAPTER;
        }
        return Object.assign(Object.assign({}, exports22.FILE_SYSTEM_ADAPTER), fsMethods);
      }
      exports22.createFileSystemAdapter = createFileSystemAdapter;
    }
  });
  var require_settings2 = __commonJS2({
    "../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/settings.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var path2 = __require("path");
      var fsStat = require_out();
      var fs = require_fs4();
      var Settings = class {
        constructor(_options = {}) {
          this._options = _options;
          this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, false);
          this.fs = fs.createFileSystemAdapter(this._options.fs);
          this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path2.sep);
          this.stats = this._getValue(this._options.stats, false);
          this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
          this.fsStatSettings = new fsStat.Settings({
            followSymbolicLink: this.followSymbolicLinks,
            fs: this.fs,
            throwErrorOnBrokenSymbolicLink: this.throwErrorOnBrokenSymbolicLink
          });
        }
        _getValue(option, value) {
          return option !== null && option !== undefined ? option : value;
        }
      };
      exports22.default = Settings;
    }
  });
  var require_out2 = __commonJS2({
    "../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/index.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.Settings = exports22.scandirSync = exports22.scandir = undefined;
      var async = require_async2();
      var sync = require_sync2();
      var settings_1 = require_settings2();
      exports22.Settings = settings_1.default;
      function scandir(path2, optionsOrSettingsOrCallback, callback) {
        if (typeof optionsOrSettingsOrCallback === "function") {
          async.read(path2, getSettings(), optionsOrSettingsOrCallback);
          return;
        }
        async.read(path2, getSettings(optionsOrSettingsOrCallback), callback);
      }
      exports22.scandir = scandir;
      function scandirSync(path2, optionsOrSettings) {
        const settings = getSettings(optionsOrSettings);
        return sync.read(path2, settings);
      }
      exports22.scandirSync = scandirSync;
      function getSettings(settingsOrOptions = {}) {
        if (settingsOrOptions instanceof settings_1.default) {
          return settingsOrOptions;
        }
        return new settings_1.default(settingsOrOptions);
      }
    }
  });
  var require_reusify = __commonJS2({
    "../../node_modules/.pnpm/reusify@1.0.4/node_modules/reusify/reusify.js"(exports22, module22) {
      function reusify(Constructor) {
        var head = new Constructor;
        var tail = head;
        function get() {
          var current = head;
          if (current.next) {
            head = current.next;
          } else {
            head = new Constructor;
            tail = head;
          }
          current.next = null;
          return current;
        }
        function release(obj) {
          tail.next = obj;
          tail = obj;
        }
        return {
          get,
          release
        };
      }
      module22.exports = reusify;
    }
  });
  var require_queue = __commonJS2({
    "../../node_modules/.pnpm/fastq@1.17.1/node_modules/fastq/queue.js"(exports22, module22) {
      var reusify = require_reusify();
      function fastqueue(context, worker, _concurrency) {
        if (typeof context === "function") {
          _concurrency = worker;
          worker = context;
          context = null;
        }
        if (!(_concurrency >= 1)) {
          throw new Error("fastqueue concurrency must be equal to or greater than 1");
        }
        var cache = reusify(Task);
        var queueHead = null;
        var queueTail = null;
        var _running = 0;
        var errorHandler = null;
        var self2 = {
          push,
          drain: noop,
          saturated: noop,
          pause,
          paused: false,
          get concurrency() {
            return _concurrency;
          },
          set concurrency(value) {
            if (!(value >= 1)) {
              throw new Error("fastqueue concurrency must be equal to or greater than 1");
            }
            _concurrency = value;
            if (self2.paused)
              return;
            for (;queueHead && _running < _concurrency; ) {
              _running++;
              release();
            }
          },
          running,
          resume,
          idle,
          length,
          getQueue,
          unshift,
          empty: noop,
          kill,
          killAndDrain,
          error
        };
        return self2;
        function running() {
          return _running;
        }
        function pause() {
          self2.paused = true;
        }
        function length() {
          var current = queueHead;
          var counter = 0;
          while (current) {
            current = current.next;
            counter++;
          }
          return counter;
        }
        function getQueue() {
          var current = queueHead;
          var tasks = [];
          while (current) {
            tasks.push(current.value);
            current = current.next;
          }
          return tasks;
        }
        function resume() {
          if (!self2.paused)
            return;
          self2.paused = false;
          if (queueHead === null) {
            _running++;
            release();
            return;
          }
          for (;queueHead && _running < _concurrency; ) {
            _running++;
            release();
          }
        }
        function idle() {
          return _running === 0 && self2.length() === 0;
        }
        function push(value, done) {
          var current = cache.get();
          current.context = context;
          current.release = release;
          current.value = value;
          current.callback = done || noop;
          current.errorHandler = errorHandler;
          if (_running >= _concurrency || self2.paused) {
            if (queueTail) {
              queueTail.next = current;
              queueTail = current;
            } else {
              queueHead = current;
              queueTail = current;
              self2.saturated();
            }
          } else {
            _running++;
            worker.call(context, current.value, current.worked);
          }
        }
        function unshift(value, done) {
          var current = cache.get();
          current.context = context;
          current.release = release;
          current.value = value;
          current.callback = done || noop;
          current.errorHandler = errorHandler;
          if (_running >= _concurrency || self2.paused) {
            if (queueHead) {
              current.next = queueHead;
              queueHead = current;
            } else {
              queueHead = current;
              queueTail = current;
              self2.saturated();
            }
          } else {
            _running++;
            worker.call(context, current.value, current.worked);
          }
        }
        function release(holder) {
          if (holder) {
            cache.release(holder);
          }
          var next = queueHead;
          if (next && _running <= _concurrency) {
            if (!self2.paused) {
              if (queueTail === queueHead) {
                queueTail = null;
              }
              queueHead = next.next;
              next.next = null;
              worker.call(context, next.value, next.worked);
              if (queueTail === null) {
                self2.empty();
              }
            } else {
              _running--;
            }
          } else if (--_running === 0) {
            self2.drain();
          }
        }
        function kill() {
          queueHead = null;
          queueTail = null;
          self2.drain = noop;
        }
        function killAndDrain() {
          queueHead = null;
          queueTail = null;
          self2.drain();
          self2.drain = noop;
        }
        function error(handler) {
          errorHandler = handler;
        }
      }
      function noop() {
      }
      function Task() {
        this.value = null;
        this.callback = noop;
        this.next = null;
        this.release = noop;
        this.context = null;
        this.errorHandler = null;
        var self2 = this;
        this.worked = function worked(err, result2) {
          var callback = self2.callback;
          var errorHandler = self2.errorHandler;
          var val = self2.value;
          self2.value = null;
          self2.callback = noop;
          if (self2.errorHandler) {
            errorHandler(err, val);
          }
          callback.call(self2.context, err, result2);
          self2.release(self2);
        };
      }
      function queueAsPromised(context, worker, _concurrency) {
        if (typeof context === "function") {
          _concurrency = worker;
          worker = context;
          context = null;
        }
        function asyncWrapper(arg, cb) {
          worker.call(this, arg).then(function(res) {
            cb(null, res);
          }, cb);
        }
        var queue = fastqueue(context, asyncWrapper, _concurrency);
        var pushCb = queue.push;
        var unshiftCb = queue.unshift;
        queue.push = push;
        queue.unshift = unshift;
        queue.drained = drained;
        return queue;
        function push(value) {
          var p = new Promise(function(resolve, reject) {
            pushCb(value, function(err, result2) {
              if (err) {
                reject(err);
                return;
              }
              resolve(result2);
            });
          });
          p.catch(noop);
          return p;
        }
        function unshift(value) {
          var p = new Promise(function(resolve, reject) {
            unshiftCb(value, function(err, result2) {
              if (err) {
                reject(err);
                return;
              }
              resolve(result2);
            });
          });
          p.catch(noop);
          return p;
        }
        function drained() {
          if (queue.idle()) {
            return new Promise(function(resolve) {
              resolve();
            });
          }
          var previousDrain = queue.drain;
          var p = new Promise(function(resolve) {
            queue.drain = function() {
              previousDrain();
              resolve();
            };
          });
          return p;
        }
      }
      module22.exports = fastqueue;
      module22.exports.promise = queueAsPromised;
    }
  });
  var require_common3 = __commonJS2({
    "../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/common.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.joinPathSegments = exports22.replacePathSegmentSeparator = exports22.isAppliedFilter = exports22.isFatalError = undefined;
      function isFatalError(settings, error) {
        if (settings.errorFilter === null) {
          return true;
        }
        return !settings.errorFilter(error);
      }
      exports22.isFatalError = isFatalError;
      function isAppliedFilter(filter, value) {
        return filter === null || filter(value);
      }
      exports22.isAppliedFilter = isAppliedFilter;
      function replacePathSegmentSeparator(filepath, separator) {
        return filepath.split(/[/\\]/).join(separator);
      }
      exports22.replacePathSegmentSeparator = replacePathSegmentSeparator;
      function joinPathSegments(a, b, separator) {
        if (a === "") {
          return b;
        }
        if (a.endsWith(separator)) {
          return a + b;
        }
        return a + separator + b;
      }
      exports22.joinPathSegments = joinPathSegments;
    }
  });
  var require_reader = __commonJS2({
    "../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/reader.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var common = require_common3();
      var Reader = class {
        constructor(_root, _settings) {
          this._root = _root;
          this._settings = _settings;
          this._root = common.replacePathSegmentSeparator(_root, _settings.pathSegmentSeparator);
        }
      };
      exports22.default = Reader;
    }
  });
  var require_async3 = __commonJS2({
    "../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/async.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var events_1 = __require("events");
      var fsScandir = require_out2();
      var fastq = require_queue();
      var common = require_common3();
      var reader_1 = require_reader();
      var AsyncReader = class extends reader_1.default {
        constructor(_root, _settings) {
          super(_root, _settings);
          this._settings = _settings;
          this._scandir = fsScandir.scandir;
          this._emitter = new events_1.EventEmitter;
          this._queue = fastq(this._worker.bind(this), this._settings.concurrency);
          this._isFatalError = false;
          this._isDestroyed = false;
          this._queue.drain = () => {
            if (!this._isFatalError) {
              this._emitter.emit("end");
            }
          };
        }
        read() {
          this._isFatalError = false;
          this._isDestroyed = false;
          setImmediate(() => {
            this._pushToQueue(this._root, this._settings.basePath);
          });
          return this._emitter;
        }
        get isDestroyed() {
          return this._isDestroyed;
        }
        destroy() {
          if (this._isDestroyed) {
            throw new Error("The reader is already destroyed");
          }
          this._isDestroyed = true;
          this._queue.killAndDrain();
        }
        onEntry(callback) {
          this._emitter.on("entry", callback);
        }
        onError(callback) {
          this._emitter.once("error", callback);
        }
        onEnd(callback) {
          this._emitter.once("end", callback);
        }
        _pushToQueue(directory, base) {
          const queueItem = { directory, base };
          this._queue.push(queueItem, (error) => {
            if (error !== null) {
              this._handleError(error);
            }
          });
        }
        _worker(item, done) {
          this._scandir(item.directory, this._settings.fsScandirSettings, (error, entries) => {
            if (error !== null) {
              done(error, undefined);
              return;
            }
            for (const entry of entries) {
              this._handleEntry(entry, item.base);
            }
            done(null, undefined);
          });
        }
        _handleError(error) {
          if (this._isDestroyed || !common.isFatalError(this._settings, error)) {
            return;
          }
          this._isFatalError = true;
          this._isDestroyed = true;
          this._emitter.emit("error", error);
        }
        _handleEntry(entry, base) {
          if (this._isDestroyed || this._isFatalError) {
            return;
          }
          const fullpath = entry.path;
          if (base !== undefined) {
            entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
          }
          if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
            this._emitEntry(entry);
          }
          if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {
            this._pushToQueue(fullpath, base === undefined ? undefined : entry.path);
          }
        }
        _emitEntry(entry) {
          this._emitter.emit("entry", entry);
        }
      };
      exports22.default = AsyncReader;
    }
  });
  var require_async4 = __commonJS2({
    "../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/async.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var async_1 = require_async3();
      var AsyncProvider = class {
        constructor(_root, _settings) {
          this._root = _root;
          this._settings = _settings;
          this._reader = new async_1.default(this._root, this._settings);
          this._storage = [];
        }
        read(callback) {
          this._reader.onError((error) => {
            callFailureCallback(callback, error);
          });
          this._reader.onEntry((entry) => {
            this._storage.push(entry);
          });
          this._reader.onEnd(() => {
            callSuccessCallback(callback, this._storage);
          });
          this._reader.read();
        }
      };
      exports22.default = AsyncProvider;
      function callFailureCallback(callback, error) {
        callback(error);
      }
      function callSuccessCallback(callback, entries) {
        callback(null, entries);
      }
    }
  });
  var require_stream2 = __commonJS2({
    "../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/stream.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var stream_12 = __require("stream");
      var async_1 = require_async3();
      var StreamProvider = class {
        constructor(_root, _settings) {
          this._root = _root;
          this._settings = _settings;
          this._reader = new async_1.default(this._root, this._settings);
          this._stream = new stream_12.Readable({
            objectMode: true,
            read: () => {
            },
            destroy: () => {
              if (!this._reader.isDestroyed) {
                this._reader.destroy();
              }
            }
          });
        }
        read() {
          this._reader.onError((error) => {
            this._stream.emit("error", error);
          });
          this._reader.onEntry((entry) => {
            this._stream.push(entry);
          });
          this._reader.onEnd(() => {
            this._stream.push(null);
          });
          this._reader.read();
          return this._stream;
        }
      };
      exports22.default = StreamProvider;
    }
  });
  var require_sync3 = __commonJS2({
    "../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/sync.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var fsScandir = require_out2();
      var common = require_common3();
      var reader_1 = require_reader();
      var SyncReader = class extends reader_1.default {
        constructor() {
          super(...arguments);
          this._scandir = fsScandir.scandirSync;
          this._storage = [];
          this._queue = /* @__PURE__ */ new Set;
        }
        read() {
          this._pushToQueue(this._root, this._settings.basePath);
          this._handleQueue();
          return this._storage;
        }
        _pushToQueue(directory, base) {
          this._queue.add({ directory, base });
        }
        _handleQueue() {
          for (const item of this._queue.values()) {
            this._handleDirectory(item.directory, item.base);
          }
        }
        _handleDirectory(directory, base) {
          try {
            const entries = this._scandir(directory, this._settings.fsScandirSettings);
            for (const entry of entries) {
              this._handleEntry(entry, base);
            }
          } catch (error) {
            this._handleError(error);
          }
        }
        _handleError(error) {
          if (!common.isFatalError(this._settings, error)) {
            return;
          }
          throw error;
        }
        _handleEntry(entry, base) {
          const fullpath = entry.path;
          if (base !== undefined) {
            entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
          }
          if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
            this._pushToStorage(entry);
          }
          if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {
            this._pushToQueue(fullpath, base === undefined ? undefined : entry.path);
          }
        }
        _pushToStorage(entry) {
          this._storage.push(entry);
        }
      };
      exports22.default = SyncReader;
    }
  });
  var require_sync4 = __commonJS2({
    "../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/sync.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var sync_1 = require_sync3();
      var SyncProvider = class {
        constructor(_root, _settings) {
          this._root = _root;
          this._settings = _settings;
          this._reader = new sync_1.default(this._root, this._settings);
        }
        read() {
          return this._reader.read();
        }
      };
      exports22.default = SyncProvider;
    }
  });
  var require_settings3 = __commonJS2({
    "../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/settings.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var path2 = __require("path");
      var fsScandir = require_out2();
      var Settings = class {
        constructor(_options = {}) {
          this._options = _options;
          this.basePath = this._getValue(this._options.basePath, undefined);
          this.concurrency = this._getValue(this._options.concurrency, Number.POSITIVE_INFINITY);
          this.deepFilter = this._getValue(this._options.deepFilter, null);
          this.entryFilter = this._getValue(this._options.entryFilter, null);
          this.errorFilter = this._getValue(this._options.errorFilter, null);
          this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path2.sep);
          this.fsScandirSettings = new fsScandir.Settings({
            followSymbolicLinks: this._options.followSymbolicLinks,
            fs: this._options.fs,
            pathSegmentSeparator: this._options.pathSegmentSeparator,
            stats: this._options.stats,
            throwErrorOnBrokenSymbolicLink: this._options.throwErrorOnBrokenSymbolicLink
          });
        }
        _getValue(option, value) {
          return option !== null && option !== undefined ? option : value;
        }
      };
      exports22.default = Settings;
    }
  });
  var require_out3 = __commonJS2({
    "../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/index.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.Settings = exports22.walkStream = exports22.walkSync = exports22.walk = undefined;
      var async_1 = require_async4();
      var stream_12 = require_stream2();
      var sync_1 = require_sync4();
      var settings_1 = require_settings3();
      exports22.Settings = settings_1.default;
      function walk(directory, optionsOrSettingsOrCallback, callback) {
        if (typeof optionsOrSettingsOrCallback === "function") {
          new async_1.default(directory, getSettings()).read(optionsOrSettingsOrCallback);
          return;
        }
        new async_1.default(directory, getSettings(optionsOrSettingsOrCallback)).read(callback);
      }
      exports22.walk = walk;
      function walkSync(directory, optionsOrSettings) {
        const settings = getSettings(optionsOrSettings);
        const provider = new sync_1.default(directory, settings);
        return provider.read();
      }
      exports22.walkSync = walkSync;
      function walkStream(directory, optionsOrSettings) {
        const settings = getSettings(optionsOrSettings);
        const provider = new stream_12.default(directory, settings);
        return provider.read();
      }
      exports22.walkStream = walkStream;
      function getSettings(settingsOrOptions = {}) {
        if (settingsOrOptions instanceof settings_1.default) {
          return settingsOrOptions;
        }
        return new settings_1.default(settingsOrOptions);
      }
    }
  });
  var require_reader2 = __commonJS2({
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/readers/reader.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var path2 = __require("path");
      var fsStat = require_out();
      var utils = require_utils4();
      var Reader = class {
        constructor(_settings) {
          this._settings = _settings;
          this._fsStatSettings = new fsStat.Settings({
            followSymbolicLink: this._settings.followSymbolicLinks,
            fs: this._settings.fs,
            throwErrorOnBrokenSymbolicLink: this._settings.followSymbolicLinks
          });
        }
        _getFullEntryPath(filepath) {
          return path2.resolve(this._settings.cwd, filepath);
        }
        _makeEntry(stats, pattern) {
          const entry = {
            name: pattern,
            path: pattern,
            dirent: utils.fs.createDirentFromStats(pattern, stats)
          };
          if (this._settings.stats) {
            entry.stats = stats;
          }
          return entry;
        }
        _isFatalError(error) {
          return !utils.errno.isEnoentCodeError(error) && !this._settings.suppressErrors;
        }
      };
      exports22.default = Reader;
    }
  });
  var require_stream3 = __commonJS2({
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/readers/stream.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var stream_12 = __require("stream");
      var fsStat = require_out();
      var fsWalk = require_out3();
      var reader_1 = require_reader2();
      var ReaderStream = class extends reader_1.default {
        constructor() {
          super(...arguments);
          this._walkStream = fsWalk.walkStream;
          this._stat = fsStat.stat;
        }
        dynamic(root, options) {
          return this._walkStream(root, options);
        }
        static(patterns, options) {
          const filepaths = patterns.map(this._getFullEntryPath, this);
          const stream = new stream_12.PassThrough({ objectMode: true });
          stream._write = (index, _enc, done) => {
            return this._getEntry(filepaths[index], patterns[index], options).then((entry) => {
              if (entry !== null && options.entryFilter(entry)) {
                stream.push(entry);
              }
              if (index === filepaths.length - 1) {
                stream.end();
              }
              done();
            }).catch(done);
          };
          for (let i = 0;i < filepaths.length; i++) {
            stream.write(i);
          }
          return stream;
        }
        _getEntry(filepath, pattern, options) {
          return this._getStat(filepath).then((stats) => this._makeEntry(stats, pattern)).catch((error) => {
            if (options.errorFilter(error)) {
              return null;
            }
            throw error;
          });
        }
        _getStat(filepath) {
          return new Promise((resolve, reject) => {
            this._stat(filepath, this._fsStatSettings, (error, stats) => {
              return error === null ? resolve(stats) : reject(error);
            });
          });
        }
      };
      exports22.default = ReaderStream;
    }
  });
  var require_async5 = __commonJS2({
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/readers/async.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var fsWalk = require_out3();
      var reader_1 = require_reader2();
      var stream_12 = require_stream3();
      var ReaderAsync = class extends reader_1.default {
        constructor() {
          super(...arguments);
          this._walkAsync = fsWalk.walk;
          this._readerStream = new stream_12.default(this._settings);
        }
        dynamic(root, options) {
          return new Promise((resolve, reject) => {
            this._walkAsync(root, options, (error, entries) => {
              if (error === null) {
                resolve(entries);
              } else {
                reject(error);
              }
            });
          });
        }
        async static(patterns, options) {
          const entries = [];
          const stream = this._readerStream.static(patterns, options);
          return new Promise((resolve, reject) => {
            stream.once("error", reject);
            stream.on("data", (entry) => entries.push(entry));
            stream.once("end", () => resolve(entries));
          });
        }
      };
      exports22.default = ReaderAsync;
    }
  });
  var require_matcher = __commonJS2({
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/matchers/matcher.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var utils = require_utils4();
      var Matcher = class {
        constructor(_patterns, _settings, _micromatchOptions) {
          this._patterns = _patterns;
          this._settings = _settings;
          this._micromatchOptions = _micromatchOptions;
          this._storage = [];
          this._fillStorage();
        }
        _fillStorage() {
          for (const pattern of this._patterns) {
            const segments = this._getPatternSegments(pattern);
            const sections = this._splitSegmentsIntoSections(segments);
            this._storage.push({
              complete: sections.length <= 1,
              pattern,
              segments,
              sections
            });
          }
        }
        _getPatternSegments(pattern) {
          const parts = utils.pattern.getPatternParts(pattern, this._micromatchOptions);
          return parts.map((part) => {
            const dynamic = utils.pattern.isDynamicPattern(part, this._settings);
            if (!dynamic) {
              return {
                dynamic: false,
                pattern: part
              };
            }
            return {
              dynamic: true,
              pattern: part,
              patternRe: utils.pattern.makeRe(part, this._micromatchOptions)
            };
          });
        }
        _splitSegmentsIntoSections(segments) {
          return utils.array.splitWhen(segments, (segment) => segment.dynamic && utils.pattern.hasGlobStar(segment.pattern));
        }
      };
      exports22.default = Matcher;
    }
  });
  var require_partial = __commonJS2({
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/matchers/partial.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var matcher_1 = require_matcher();
      var PartialMatcher = class extends matcher_1.default {
        match(filepath) {
          const parts = filepath.split("/");
          const levels = parts.length;
          const patterns = this._storage.filter((info) => !info.complete || info.segments.length > levels);
          for (const pattern of patterns) {
            const section = pattern.sections[0];
            if (!pattern.complete && levels > section.length) {
              return true;
            }
            const match = parts.every((part, index) => {
              const segment = pattern.segments[index];
              if (segment.dynamic && segment.patternRe.test(part)) {
                return true;
              }
              if (!segment.dynamic && segment.pattern === part) {
                return true;
              }
              return false;
            });
            if (match) {
              return true;
            }
          }
          return false;
        }
      };
      exports22.default = PartialMatcher;
    }
  });
  var require_deep = __commonJS2({
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/filters/deep.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var utils = require_utils4();
      var partial_1 = require_partial();
      var DeepFilter = class {
        constructor(_settings, _micromatchOptions) {
          this._settings = _settings;
          this._micromatchOptions = _micromatchOptions;
        }
        getFilter(basePath, positive, negative) {
          const matcher = this._getMatcher(positive);
          const negativeRe = this._getNegativePatternsRe(negative);
          return (entry) => this._filter(basePath, entry, matcher, negativeRe);
        }
        _getMatcher(patterns) {
          return new partial_1.default(patterns, this._settings, this._micromatchOptions);
        }
        _getNegativePatternsRe(patterns) {
          const affectDepthOfReadingPatterns = patterns.filter(utils.pattern.isAffectDepthOfReadingPattern);
          return utils.pattern.convertPatternsToRe(affectDepthOfReadingPatterns, this._micromatchOptions);
        }
        _filter(basePath, entry, matcher, negativeRe) {
          if (this._isSkippedByDeep(basePath, entry.path)) {
            return false;
          }
          if (this._isSkippedSymbolicLink(entry)) {
            return false;
          }
          const filepath = utils.path.removeLeadingDotSegment(entry.path);
          if (this._isSkippedByPositivePatterns(filepath, matcher)) {
            return false;
          }
          return this._isSkippedByNegativePatterns(filepath, negativeRe);
        }
        _isSkippedByDeep(basePath, entryPath) {
          if (this._settings.deep === Infinity) {
            return false;
          }
          return this._getEntryLevel(basePath, entryPath) >= this._settings.deep;
        }
        _getEntryLevel(basePath, entryPath) {
          const entryPathDepth = entryPath.split("/").length;
          if (basePath === "") {
            return entryPathDepth;
          }
          const basePathDepth = basePath.split("/").length;
          return entryPathDepth - basePathDepth;
        }
        _isSkippedSymbolicLink(entry) {
          return !this._settings.followSymbolicLinks && entry.dirent.isSymbolicLink();
        }
        _isSkippedByPositivePatterns(entryPath, matcher) {
          return !this._settings.baseNameMatch && !matcher.match(entryPath);
        }
        _isSkippedByNegativePatterns(entryPath, patternsRe) {
          return !utils.pattern.matchAny(entryPath, patternsRe);
        }
      };
      exports22.default = DeepFilter;
    }
  });
  var require_entry = __commonJS2({
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/filters/entry.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var utils = require_utils4();
      var EntryFilter = class {
        constructor(_settings, _micromatchOptions) {
          this._settings = _settings;
          this._micromatchOptions = _micromatchOptions;
          this.index = /* @__PURE__ */ new Map;
        }
        getFilter(positive, negative) {
          const [absoluteNegative, relativeNegative] = utils.pattern.partitionAbsoluteAndRelative(negative);
          const patterns = {
            positive: {
              all: utils.pattern.convertPatternsToRe(positive, this._micromatchOptions)
            },
            negative: {
              absolute: utils.pattern.convertPatternsToRe(absoluteNegative, Object.assign(Object.assign({}, this._micromatchOptions), { dot: true })),
              relative: utils.pattern.convertPatternsToRe(relativeNegative, Object.assign(Object.assign({}, this._micromatchOptions), { dot: true }))
            }
          };
          return (entry) => this._filter(entry, patterns);
        }
        _filter(entry, patterns) {
          const filepath = utils.path.removeLeadingDotSegment(entry.path);
          if (this._settings.unique && this._isDuplicateEntry(filepath)) {
            return false;
          }
          if (this._onlyFileFilter(entry) || this._onlyDirectoryFilter(entry)) {
            return false;
          }
          const isMatched = this._isMatchToPatternsSet(filepath, patterns, entry.dirent.isDirectory());
          if (this._settings.unique && isMatched) {
            this._createIndexRecord(filepath);
          }
          return isMatched;
        }
        _isDuplicateEntry(filepath) {
          return this.index.has(filepath);
        }
        _createIndexRecord(filepath) {
          this.index.set(filepath, undefined);
        }
        _onlyFileFilter(entry) {
          return this._settings.onlyFiles && !entry.dirent.isFile();
        }
        _onlyDirectoryFilter(entry) {
          return this._settings.onlyDirectories && !entry.dirent.isDirectory();
        }
        _isMatchToPatternsSet(filepath, patterns, isDirectory) {
          const isMatched = this._isMatchToPatterns(filepath, patterns.positive.all, isDirectory);
          if (!isMatched) {
            return false;
          }
          const isMatchedByRelativeNegative = this._isMatchToPatterns(filepath, patterns.negative.relative, isDirectory);
          if (isMatchedByRelativeNegative) {
            return false;
          }
          const isMatchedByAbsoluteNegative = this._isMatchToAbsoluteNegative(filepath, patterns.negative.absolute, isDirectory);
          if (isMatchedByAbsoluteNegative) {
            return false;
          }
          return true;
        }
        _isMatchToAbsoluteNegative(filepath, patternsRe, isDirectory) {
          if (patternsRe.length === 0) {
            return false;
          }
          const fullpath = utils.path.makeAbsolute(this._settings.cwd, filepath);
          return this._isMatchToPatterns(fullpath, patternsRe, isDirectory);
        }
        _isMatchToPatterns(filepath, patternsRe, isDirectory) {
          if (patternsRe.length === 0) {
            return false;
          }
          const isMatched = utils.pattern.matchAny(filepath, patternsRe);
          if (!isMatched && isDirectory) {
            return utils.pattern.matchAny(filepath + "/", patternsRe);
          }
          return isMatched;
        }
      };
      exports22.default = EntryFilter;
    }
  });
  var require_error = __commonJS2({
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/filters/error.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var utils = require_utils4();
      var ErrorFilter = class {
        constructor(_settings) {
          this._settings = _settings;
        }
        getFilter() {
          return (error) => this._isNonFatalError(error);
        }
        _isNonFatalError(error) {
          return utils.errno.isEnoentCodeError(error) || this._settings.suppressErrors;
        }
      };
      exports22.default = ErrorFilter;
    }
  });
  var require_entry2 = __commonJS2({
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/transformers/entry.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var utils = require_utils4();
      var EntryTransformer = class {
        constructor(_settings) {
          this._settings = _settings;
        }
        getTransformer() {
          return (entry) => this._transform(entry);
        }
        _transform(entry) {
          let filepath = entry.path;
          if (this._settings.absolute) {
            filepath = utils.path.makeAbsolute(this._settings.cwd, filepath);
            filepath = utils.path.unixify(filepath);
          }
          if (this._settings.markDirectories && entry.dirent.isDirectory()) {
            filepath += "/";
          }
          if (!this._settings.objectMode) {
            return filepath;
          }
          return Object.assign(Object.assign({}, entry), { path: filepath });
        }
      };
      exports22.default = EntryTransformer;
    }
  });
  var require_provider = __commonJS2({
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/provider.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var path2 = __require("path");
      var deep_1 = require_deep();
      var entry_1 = require_entry();
      var error_1 = require_error();
      var entry_2 = require_entry2();
      var Provider = class {
        constructor(_settings) {
          this._settings = _settings;
          this.errorFilter = new error_1.default(this._settings);
          this.entryFilter = new entry_1.default(this._settings, this._getMicromatchOptions());
          this.deepFilter = new deep_1.default(this._settings, this._getMicromatchOptions());
          this.entryTransformer = new entry_2.default(this._settings);
        }
        _getRootDirectory(task) {
          return path2.resolve(this._settings.cwd, task.base);
        }
        _getReaderOptions(task) {
          const basePath = task.base === "." ? "" : task.base;
          return {
            basePath,
            pathSegmentSeparator: "/",
            concurrency: this._settings.concurrency,
            deepFilter: this.deepFilter.getFilter(basePath, task.positive, task.negative),
            entryFilter: this.entryFilter.getFilter(task.positive, task.negative),
            errorFilter: this.errorFilter.getFilter(),
            followSymbolicLinks: this._settings.followSymbolicLinks,
            fs: this._settings.fs,
            stats: this._settings.stats,
            throwErrorOnBrokenSymbolicLink: this._settings.throwErrorOnBrokenSymbolicLink,
            transform: this.entryTransformer.getTransformer()
          };
        }
        _getMicromatchOptions() {
          return {
            dot: this._settings.dot,
            matchBase: this._settings.baseNameMatch,
            nobrace: !this._settings.braceExpansion,
            nocase: !this._settings.caseSensitiveMatch,
            noext: !this._settings.extglob,
            noglobstar: !this._settings.globstar,
            posix: true,
            strictSlashes: false
          };
        }
      };
      exports22.default = Provider;
    }
  });
  var require_async6 = __commonJS2({
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/async.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var async_1 = require_async5();
      var provider_1 = require_provider();
      var ProviderAsync = class extends provider_1.default {
        constructor() {
          super(...arguments);
          this._reader = new async_1.default(this._settings);
        }
        async read(task) {
          const root = this._getRootDirectory(task);
          const options = this._getReaderOptions(task);
          const entries = await this.api(root, task, options);
          return entries.map((entry) => options.transform(entry));
        }
        api(root, task, options) {
          if (task.dynamic) {
            return this._reader.dynamic(root, options);
          }
          return this._reader.static(task.patterns, options);
        }
      };
      exports22.default = ProviderAsync;
    }
  });
  var require_stream4 = __commonJS2({
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/stream.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var stream_12 = __require("stream");
      var stream_2 = require_stream3();
      var provider_1 = require_provider();
      var ProviderStream = class extends provider_1.default {
        constructor() {
          super(...arguments);
          this._reader = new stream_2.default(this._settings);
        }
        read(task) {
          const root = this._getRootDirectory(task);
          const options = this._getReaderOptions(task);
          const source = this.api(root, task, options);
          const destination = new stream_12.Readable({ objectMode: true, read: () => {
          } });
          source.once("error", (error) => destination.emit("error", error)).on("data", (entry) => destination.emit("data", options.transform(entry))).once("end", () => destination.emit("end"));
          destination.once("close", () => source.destroy());
          return destination;
        }
        api(root, task, options) {
          if (task.dynamic) {
            return this._reader.dynamic(root, options);
          }
          return this._reader.static(task.patterns, options);
        }
      };
      exports22.default = ProviderStream;
    }
  });
  var require_sync5 = __commonJS2({
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/readers/sync.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var fsStat = require_out();
      var fsWalk = require_out3();
      var reader_1 = require_reader2();
      var ReaderSync = class extends reader_1.default {
        constructor() {
          super(...arguments);
          this._walkSync = fsWalk.walkSync;
          this._statSync = fsStat.statSync;
        }
        dynamic(root, options) {
          return this._walkSync(root, options);
        }
        static(patterns, options) {
          const entries = [];
          for (const pattern of patterns) {
            const filepath = this._getFullEntryPath(pattern);
            const entry = this._getEntry(filepath, pattern, options);
            if (entry === null || !options.entryFilter(entry)) {
              continue;
            }
            entries.push(entry);
          }
          return entries;
        }
        _getEntry(filepath, pattern, options) {
          try {
            const stats = this._getStat(filepath);
            return this._makeEntry(stats, pattern);
          } catch (error) {
            if (options.errorFilter(error)) {
              return null;
            }
            throw error;
          }
        }
        _getStat(filepath) {
          return this._statSync(filepath, this._fsStatSettings);
        }
      };
      exports22.default = ReaderSync;
    }
  });
  var require_sync6 = __commonJS2({
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/sync.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var sync_1 = require_sync5();
      var provider_1 = require_provider();
      var ProviderSync = class extends provider_1.default {
        constructor() {
          super(...arguments);
          this._reader = new sync_1.default(this._settings);
        }
        read(task) {
          const root = this._getRootDirectory(task);
          const options = this._getReaderOptions(task);
          const entries = this.api(root, task, options);
          return entries.map(options.transform);
        }
        api(root, task, options) {
          if (task.dynamic) {
            return this._reader.dynamic(root, options);
          }
          return this._reader.static(task.patterns, options);
        }
      };
      exports22.default = ProviderSync;
    }
  });
  var require_settings4 = __commonJS2({
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/settings.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.DEFAULT_FILE_SYSTEM_ADAPTER = undefined;
      var fs = __require("fs");
      var os = __require("os");
      var CPU_COUNT = Math.max(os.cpus().length, 1);
      exports22.DEFAULT_FILE_SYSTEM_ADAPTER = {
        lstat: fs.lstat,
        lstatSync: fs.lstatSync,
        stat: fs.stat,
        statSync: fs.statSync,
        readdir: fs.readdir,
        readdirSync: fs.readdirSync
      };
      var Settings = class {
        constructor(_options = {}) {
          this._options = _options;
          this.absolute = this._getValue(this._options.absolute, false);
          this.baseNameMatch = this._getValue(this._options.baseNameMatch, false);
          this.braceExpansion = this._getValue(this._options.braceExpansion, true);
          this.caseSensitiveMatch = this._getValue(this._options.caseSensitiveMatch, true);
          this.concurrency = this._getValue(this._options.concurrency, CPU_COUNT);
          this.cwd = this._getValue(this._options.cwd, process.cwd());
          this.deep = this._getValue(this._options.deep, Infinity);
          this.dot = this._getValue(this._options.dot, false);
          this.extglob = this._getValue(this._options.extglob, true);
          this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, true);
          this.fs = this._getFileSystemMethods(this._options.fs);
          this.globstar = this._getValue(this._options.globstar, true);
          this.ignore = this._getValue(this._options.ignore, []);
          this.markDirectories = this._getValue(this._options.markDirectories, false);
          this.objectMode = this._getValue(this._options.objectMode, false);
          this.onlyDirectories = this._getValue(this._options.onlyDirectories, false);
          this.onlyFiles = this._getValue(this._options.onlyFiles, true);
          this.stats = this._getValue(this._options.stats, false);
          this.suppressErrors = this._getValue(this._options.suppressErrors, false);
          this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, false);
          this.unique = this._getValue(this._options.unique, true);
          if (this.onlyDirectories) {
            this.onlyFiles = false;
          }
          if (this.stats) {
            this.objectMode = true;
          }
          this.ignore = [].concat(this.ignore);
        }
        _getValue(option, value) {
          return option === undefined ? value : option;
        }
        _getFileSystemMethods(methods = {}) {
          return Object.assign(Object.assign({}, exports22.DEFAULT_FILE_SYSTEM_ADAPTER), methods);
        }
      };
      exports22.default = Settings;
    }
  });
  var require_out4 = __commonJS2({
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/index.js"(exports22, module22) {
      var taskManager = require_tasks();
      var async_1 = require_async6();
      var stream_12 = require_stream4();
      var sync_1 = require_sync6();
      var settings_1 = require_settings4();
      var utils = require_utils4();
      async function FastGlob(source, options) {
        assertPatternsInput(source);
        const works = getWorks(source, async_1.default, options);
        const result2 = await Promise.all(works);
        return utils.array.flatten(result2);
      }
      (function(FastGlob2) {
        FastGlob2.glob = FastGlob2;
        FastGlob2.globSync = sync;
        FastGlob2.globStream = stream;
        FastGlob2.async = FastGlob2;
        function sync(source, options) {
          assertPatternsInput(source);
          const works = getWorks(source, sync_1.default, options);
          return utils.array.flatten(works);
        }
        FastGlob2.sync = sync;
        function stream(source, options) {
          assertPatternsInput(source);
          const works = getWorks(source, stream_12.default, options);
          return utils.stream.merge(works);
        }
        FastGlob2.stream = stream;
        function generateTasks(source, options) {
          assertPatternsInput(source);
          const patterns = [].concat(source);
          const settings = new settings_1.default(options);
          return taskManager.generate(patterns, settings);
        }
        FastGlob2.generateTasks = generateTasks;
        function isDynamicPattern(source, options) {
          assertPatternsInput(source);
          const settings = new settings_1.default(options);
          return utils.pattern.isDynamicPattern(source, settings);
        }
        FastGlob2.isDynamicPattern = isDynamicPattern;
        function escapePath(source) {
          assertPatternsInput(source);
          return utils.path.escape(source);
        }
        FastGlob2.escapePath = escapePath;
        function convertPathToPattern(source) {
          assertPatternsInput(source);
          return utils.path.convertPathToPattern(source);
        }
        FastGlob2.convertPathToPattern = convertPathToPattern;
        let posix;
        (function(posix2) {
          function escapePath2(source) {
            assertPatternsInput(source);
            return utils.path.escapePosixPath(source);
          }
          posix2.escapePath = escapePath2;
          function convertPathToPattern2(source) {
            assertPatternsInput(source);
            return utils.path.convertPosixPathToPattern(source);
          }
          posix2.convertPathToPattern = convertPathToPattern2;
        })(posix = FastGlob2.posix || (FastGlob2.posix = {}));
        let win32;
        (function(win322) {
          function escapePath2(source) {
            assertPatternsInput(source);
            return utils.path.escapeWindowsPath(source);
          }
          win322.escapePath = escapePath2;
          function convertPathToPattern2(source) {
            assertPatternsInput(source);
            return utils.path.convertWindowsPathToPattern(source);
          }
          win322.convertPathToPattern = convertPathToPattern2;
        })(win32 = FastGlob2.win32 || (FastGlob2.win32 = {}));
      })(FastGlob || (FastGlob = {}));
      function getWorks(source, _Provider, options) {
        const patterns = [].concat(source);
        const settings = new settings_1.default(options);
        const tasks = taskManager.generate(patterns, settings);
        const provider = new _Provider(settings);
        return tasks.map(provider.read, provider);
      }
      function assertPatternsInput(input) {
        const source = [].concat(input);
        const isValidSource = source.every((item) => utils.string.isString(item) && !utils.string.isEmpty(item));
        if (!isValidSource) {
          throw new TypeError("Patterns must be a string (non empty) or an array of strings");
        }
      }
      module22.exports = FastGlob;
    }
  });
  var require_hashUtils = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/hashUtils.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.makeHash = makeHash;
      exports22.checksumFile = checksumFile;
      exports22.checksumPattern = checksumPattern;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var fslib_12 = require_lib();
      var crypto_1 = __require("crypto");
      var fast_glob_1 = tslib_12.__importDefault(require_out4());
      function makeHash(...args) {
        const hash = (0, crypto_1.createHash)(`sha512`);
        let acc = ``;
        for (const arg of args) {
          if (typeof arg === `string`) {
            acc += arg;
          } else if (arg) {
            if (acc) {
              hash.update(acc);
              acc = ``;
            }
            hash.update(arg);
          }
        }
        if (acc)
          hash.update(acc);
        return hash.digest(`hex`);
      }
      async function checksumFile(path2, { baseFs, algorithm } = { baseFs: fslib_12.xfs, algorithm: `sha512` }) {
        const fd = await baseFs.openPromise(path2, `r`);
        try {
          const CHUNK_SIZE = 65536;
          const chunk = Buffer.allocUnsafeSlow(CHUNK_SIZE);
          const hash = (0, crypto_1.createHash)(algorithm);
          let bytesRead = 0;
          while ((bytesRead = await baseFs.readPromise(fd, chunk, 0, CHUNK_SIZE)) !== 0)
            hash.update(bytesRead === CHUNK_SIZE ? chunk : chunk.slice(0, bytesRead));
          return hash.digest(`hex`);
        } finally {
          await baseFs.closePromise(fd);
        }
      }
      async function checksumPattern(pattern, { cwd }) {
        const dirListing = await (0, fast_glob_1.default)(pattern, {
          cwd: fslib_12.npath.fromPortablePath(cwd),
          onlyDirectories: true
        });
        const dirPatterns = dirListing.map((entry) => {
          return `${entry}/**/*`;
        });
        const listing = await (0, fast_glob_1.default)([pattern, ...dirPatterns], {
          cwd: fslib_12.npath.fromPortablePath(cwd),
          onlyFiles: false
        });
        listing.sort();
        const hashes = await Promise.all(listing.map(async (entry) => {
          const parts = [Buffer.from(entry)];
          const p = fslib_12.ppath.join(cwd, fslib_12.npath.toPortablePath(entry));
          const stat = await fslib_12.xfs.lstatPromise(p);
          if (stat.isSymbolicLink())
            parts.push(Buffer.from(await fslib_12.xfs.readlinkPromise(p)));
          else if (stat.isFile())
            parts.push(await fslib_12.xfs.readFilePromise(p));
          return parts.join(`\x00`);
        }));
        const hash = (0, crypto_1.createHash)(`sha512`);
        for (const sub of hashes)
          hash.update(sub);
        return hash.digest(`hex`);
      }
    }
  });
  var require_structUtils = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/structUtils.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.makeIdent = makeIdent;
      exports22.makeDescriptor = makeDescriptor;
      exports22.makeLocator = makeLocator;
      exports22.convertToIdent = convertToIdent;
      exports22.convertDescriptorToLocator = convertDescriptorToLocator;
      exports22.convertLocatorToDescriptor = convertLocatorToDescriptor;
      exports22.convertPackageToLocator = convertPackageToLocator;
      exports22.renamePackage = renamePackage;
      exports22.copyPackage = copyPackage;
      exports22.virtualizeDescriptor = virtualizeDescriptor;
      exports22.virtualizePackage = virtualizePackage;
      exports22.isVirtualDescriptor = isVirtualDescriptor;
      exports22.isVirtualLocator = isVirtualLocator;
      exports22.devirtualizeDescriptor = devirtualizeDescriptor;
      exports22.devirtualizeLocator = devirtualizeLocator;
      exports22.ensureDevirtualizedDescriptor = ensureDevirtualizedDescriptor;
      exports22.ensureDevirtualizedLocator = ensureDevirtualizedLocator;
      exports22.bindDescriptor = bindDescriptor;
      exports22.bindLocator = bindLocator;
      exports22.areIdentsEqual = areIdentsEqual;
      exports22.areDescriptorsEqual = areDescriptorsEqual;
      exports22.areLocatorsEqual = areLocatorsEqual;
      exports22.areVirtualPackagesEquivalent = areVirtualPackagesEquivalent;
      exports22.parseIdent = parseIdent;
      exports22.tryParseIdent = tryParseIdent;
      exports22.parseDescriptor = parseDescriptor;
      exports22.tryParseDescriptor = tryParseDescriptor;
      exports22.parseLocator = parseLocator;
      exports22.tryParseLocator = tryParseLocator;
      exports22.parseRange = parseRange;
      exports22.tryParseRange = tryParseRange;
      exports22.parseFileStyleRange = parseFileStyleRange;
      exports22.makeRange = makeRange;
      exports22.convertToManifestRange = convertToManifestRange;
      exports22.stringifyIdent = stringifyIdent;
      exports22.stringifyDescriptor = stringifyDescriptor;
      exports22.stringifyLocator = stringifyLocator;
      exports22.slugifyIdent = slugifyIdent;
      exports22.slugifyLocator = slugifyLocator;
      exports22.prettyIdent = prettyIdent;
      exports22.prettyRange = prettyRange;
      exports22.prettyDescriptor = prettyDescriptor;
      exports22.prettyReference = prettyReference;
      exports22.prettyLocator = prettyLocator;
      exports22.prettyLocatorNoColors = prettyLocatorNoColors;
      exports22.sortDescriptors = sortDescriptors;
      exports22.prettyWorkspace = prettyWorkspace;
      exports22.prettyResolution = prettyResolution;
      exports22.prettyDependent = prettyDependent;
      exports22.getIdentVendorPath = getIdentVendorPath;
      exports22.isPackageCompatible = isPackageCompatible;
      exports22.allPeerRequests = allPeerRequests;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var querystring_1 = tslib_12.__importDefault(__require("querystring"));
      var semver_12 = tslib_12.__importDefault(require_semver2());
      var tinylogic_1 = require_tinylogic();
      var formatUtils = tslib_12.__importStar(require_formatUtils());
      var hashUtils = tslib_12.__importStar(require_hashUtils());
      var miscUtils = tslib_12.__importStar(require_miscUtils());
      var structUtils = tslib_12.__importStar(require_structUtils());
      var VIRTUAL_PROTOCOL = `virtual:`;
      var VIRTUAL_ABBREVIATE = 5;
      var CONDITION_REGEX = /(os|cpu|libc)=([a-z0-9_-]+)/;
      var conditionParser = (0, tinylogic_1.makeParser)(CONDITION_REGEX);
      function makeIdent(scope, name) {
        if (scope?.startsWith(`@`))
          throw new Error(`Invalid scope: don't prefix it with '@'`);
        return { identHash: hashUtils.makeHash(scope, name), scope, name };
      }
      function makeDescriptor(ident, range) {
        return { identHash: ident.identHash, scope: ident.scope, name: ident.name, descriptorHash: hashUtils.makeHash(ident.identHash, range), range };
      }
      function makeLocator(ident, reference) {
        return { identHash: ident.identHash, scope: ident.scope, name: ident.name, locatorHash: hashUtils.makeHash(ident.identHash, reference), reference };
      }
      function convertToIdent(source) {
        return { identHash: source.identHash, scope: source.scope, name: source.name };
      }
      function convertDescriptorToLocator(descriptor) {
        return { identHash: descriptor.identHash, scope: descriptor.scope, name: descriptor.name, locatorHash: descriptor.descriptorHash, reference: descriptor.range };
      }
      function convertLocatorToDescriptor(locator) {
        return { identHash: locator.identHash, scope: locator.scope, name: locator.name, descriptorHash: locator.locatorHash, range: locator.reference };
      }
      function convertPackageToLocator(pkg) {
        return { identHash: pkg.identHash, scope: pkg.scope, name: pkg.name, locatorHash: pkg.locatorHash, reference: pkg.reference };
      }
      function renamePackage(pkg, locator) {
        return {
          identHash: locator.identHash,
          scope: locator.scope,
          name: locator.name,
          locatorHash: locator.locatorHash,
          reference: locator.reference,
          version: pkg.version,
          languageName: pkg.languageName,
          linkType: pkg.linkType,
          conditions: pkg.conditions,
          dependencies: new Map(pkg.dependencies),
          peerDependencies: new Map(pkg.peerDependencies),
          dependenciesMeta: new Map(pkg.dependenciesMeta),
          peerDependenciesMeta: new Map(pkg.peerDependenciesMeta),
          bin: new Map(pkg.bin)
        };
      }
      function copyPackage(pkg) {
        return renamePackage(pkg, pkg);
      }
      function virtualizeDescriptor(descriptor, entropy) {
        if (entropy.includes(`#`))
          throw new Error(`Invalid entropy`);
        return makeDescriptor(descriptor, `virtual:${entropy}#${descriptor.range}`);
      }
      function virtualizePackage(pkg, entropy) {
        if (entropy.includes(`#`))
          throw new Error(`Invalid entropy`);
        return renamePackage(pkg, makeLocator(pkg, `virtual:${entropy}#${pkg.reference}`));
      }
      function isVirtualDescriptor(descriptor) {
        return descriptor.range.startsWith(VIRTUAL_PROTOCOL);
      }
      function isVirtualLocator(locator) {
        return locator.reference.startsWith(VIRTUAL_PROTOCOL);
      }
      var VIRTUAL_PREFIX_REGEXP = /^[^#]*#/;
      function devirtualizeDescriptor(descriptor) {
        if (!isVirtualDescriptor(descriptor))
          throw new Error(`Not a virtual descriptor`);
        return makeDescriptor(descriptor, descriptor.range.replace(VIRTUAL_PREFIX_REGEXP, ``));
      }
      function devirtualizeLocator(locator) {
        if (!isVirtualLocator(locator))
          throw new Error(`Not a virtual descriptor`);
        return makeLocator(locator, locator.reference.replace(VIRTUAL_PREFIX_REGEXP, ``));
      }
      function ensureDevirtualizedDescriptor(descriptor) {
        if (!isVirtualDescriptor(descriptor))
          return descriptor;
        return makeDescriptor(descriptor, descriptor.range.replace(VIRTUAL_PREFIX_REGEXP, ``));
      }
      function ensureDevirtualizedLocator(locator) {
        if (!isVirtualLocator(locator))
          return locator;
        return makeLocator(locator, locator.reference.replace(VIRTUAL_PREFIX_REGEXP, ``));
      }
      function bindDescriptor(descriptor, params) {
        if (descriptor.range.includes(`::`))
          return descriptor;
        return makeDescriptor(descriptor, `${descriptor.range}::${querystring_1.default.stringify(params)}`);
      }
      function bindLocator(locator, params) {
        if (locator.reference.includes(`::`))
          return locator;
        return makeLocator(locator, `${locator.reference}::${querystring_1.default.stringify(params)}`);
      }
      function areIdentsEqual(a, b) {
        return a.identHash === b.identHash;
      }
      function areDescriptorsEqual(a, b) {
        return a.descriptorHash === b.descriptorHash;
      }
      function areLocatorsEqual(a, b) {
        return a.locatorHash === b.locatorHash;
      }
      function areVirtualPackagesEquivalent(a, b) {
        if (!isVirtualLocator(a))
          throw new Error(`Invalid package type`);
        if (!isVirtualLocator(b))
          throw new Error(`Invalid package type`);
        if (!areIdentsEqual(a, b))
          return false;
        if (a.dependencies.size !== b.dependencies.size)
          return false;
        for (const dependencyDescriptorA of a.dependencies.values()) {
          const dependencyDescriptorB = b.dependencies.get(dependencyDescriptorA.identHash);
          if (!dependencyDescriptorB)
            return false;
          if (!areDescriptorsEqual(dependencyDescriptorA, dependencyDescriptorB)) {
            return false;
          }
        }
        return true;
      }
      function parseIdent(string) {
        const ident = tryParseIdent(string);
        if (!ident)
          throw new Error(`Invalid ident (${string})`);
        return ident;
      }
      var IDENT_REGEXP = /^(?:@([^/]+?)\/)?([^@/]+)$/;
      function tryParseIdent(string) {
        const match = string.match(IDENT_REGEXP);
        if (!match)
          return null;
        const [, scope, name] = match;
        const realScope = typeof scope !== `undefined` ? scope : null;
        return makeIdent(realScope, name);
      }
      function parseDescriptor(string, strict = false) {
        const descriptor = tryParseDescriptor(string, strict);
        if (!descriptor)
          throw new Error(`Invalid descriptor (${string})`);
        return descriptor;
      }
      var DESCRIPTOR_REGEX_STRICT = /^(?:@([^/]+?)\/)?([^@/]+?)(?:@(.+))$/;
      var DESCRIPTOR_REGEX_LOOSE = /^(?:@([^/]+?)\/)?([^@/]+?)(?:@(.+))?$/;
      function tryParseDescriptor(string, strict = false) {
        const match = strict ? string.match(DESCRIPTOR_REGEX_STRICT) : string.match(DESCRIPTOR_REGEX_LOOSE);
        if (!match)
          return null;
        const [, scope, name, range] = match;
        if (range === `unknown`)
          throw new Error(`Invalid range (${string})`);
        const realScope = typeof scope !== `undefined` ? scope : null;
        const realRange = typeof range !== `undefined` ? range : `unknown`;
        return makeDescriptor(makeIdent(realScope, name), realRange);
      }
      function parseLocator(string, strict = false) {
        const locator = tryParseLocator(string, strict);
        if (!locator)
          throw new Error(`Invalid locator (${string})`);
        return locator;
      }
      var LOCATOR_REGEX_STRICT = /^(?:@([^/]+?)\/)?([^@/]+?)(?:@(.+))$/;
      var LOCATOR_REGEX_LOOSE = /^(?:@([^/]+?)\/)?([^@/]+?)(?:@(.+))?$/;
      function tryParseLocator(string, strict = false) {
        const match = strict ? string.match(LOCATOR_REGEX_STRICT) : string.match(LOCATOR_REGEX_LOOSE);
        if (!match)
          return null;
        const [, scope, name, reference] = match;
        if (reference === `unknown`)
          throw new Error(`Invalid reference (${string})`);
        const realScope = typeof scope !== `undefined` ? scope : null;
        const realReference = typeof reference !== `undefined` ? reference : `unknown`;
        return makeLocator(makeIdent(realScope, name), realReference);
      }
      var RANGE_REGEX = /^([^#:]*:)?((?:(?!::)[^#])*)(?:#((?:(?!::).)*))?(?:::(.*))?$/;
      function parseRange(range, opts) {
        const match = range.match(RANGE_REGEX);
        if (match === null)
          throw new Error(`Invalid range (${range})`);
        const protocol = typeof match[1] !== `undefined` ? match[1] : null;
        if (typeof opts?.requireProtocol === `string` && protocol !== opts.requireProtocol)
          throw new Error(`Invalid protocol (${protocol})`);
        else if (opts?.requireProtocol && protocol === null)
          throw new Error(`Missing protocol (${protocol})`);
        const source = typeof match[3] !== `undefined` ? decodeURIComponent(match[2]) : null;
        if (opts?.requireSource && source === null)
          throw new Error(`Missing source (${range})`);
        const rawSelector = typeof match[3] !== `undefined` ? decodeURIComponent(match[3]) : decodeURIComponent(match[2]);
        const selector = opts?.parseSelector ? querystring_1.default.parse(rawSelector) : rawSelector;
        const params = typeof match[4] !== `undefined` ? querystring_1.default.parse(match[4]) : null;
        return {
          protocol,
          source,
          selector,
          params
        };
      }
      function tryParseRange(range, opts) {
        try {
          return parseRange(range, opts);
        } catch {
          return null;
        }
      }
      function parseFileStyleRange(range, { protocol }) {
        const { selector, params } = parseRange(range, {
          requireProtocol: protocol,
          requireBindings: true
        });
        if (typeof params.locator !== `string`)
          throw new Error(`Assertion failed: Invalid bindings for ${range}`);
        const parentLocator = parseLocator(params.locator, true);
        const path2 = selector;
        return { parentLocator, path: path2 };
      }
      function encodeUnsafeCharacters(str) {
        str = str.replaceAll(`%`, `%25`);
        str = str.replaceAll(`:`, `%3A`);
        str = str.replaceAll(`#`, `%23`);
        return str;
      }
      function hasParams(params) {
        if (params === null)
          return false;
        return Object.entries(params).length > 0;
      }
      function makeRange({ protocol, source, selector, params }) {
        let range = ``;
        if (protocol !== null)
          range += `${protocol}`;
        if (source !== null)
          range += `${encodeUnsafeCharacters(source)}#`;
        range += encodeUnsafeCharacters(selector);
        if (hasParams(params))
          range += `::${querystring_1.default.stringify(params)}`;
        return range;
      }
      function convertToManifestRange(range) {
        const { params, protocol, source, selector } = parseRange(range);
        for (const name in params)
          if (name.startsWith(`__`))
            delete params[name];
        return makeRange({ protocol, source, params, selector });
      }
      function stringifyIdent(ident) {
        if (ident.scope) {
          return `@${ident.scope}/${ident.name}`;
        } else {
          return `${ident.name}`;
        }
      }
      function stringifyDescriptor(descriptor) {
        if (descriptor.scope) {
          return `@${descriptor.scope}/${descriptor.name}@${descriptor.range}`;
        } else {
          return `${descriptor.name}@${descriptor.range}`;
        }
      }
      function stringifyLocator(locator) {
        if (locator.scope) {
          return `@${locator.scope}/${locator.name}@${locator.reference}`;
        } else {
          return `${locator.name}@${locator.reference}`;
        }
      }
      function slugifyIdent(ident) {
        if (ident.scope !== null) {
          return `@${ident.scope}-${ident.name}`;
        } else {
          return ident.name;
        }
      }
      var TRAILING_COLON_REGEX = /:$/;
      function slugifyLocator(locator) {
        const { protocol, selector } = parseRange(locator.reference);
        const humanProtocol = protocol !== null ? protocol.replace(TRAILING_COLON_REGEX, ``) : `exotic`;
        const humanVersion = semver_12.default.valid(selector);
        const humanReference = humanVersion !== null ? `${humanProtocol}-${humanVersion}` : `${humanProtocol}`;
        const hashTruncate = 10;
        const slug = locator.scope ? `${slugifyIdent(locator)}-${humanReference}-${locator.locatorHash.slice(0, hashTruncate)}` : `${slugifyIdent(locator)}-${humanReference}-${locator.locatorHash.slice(0, hashTruncate)}`;
        return slug;
      }
      function prettyIdent(configuration, ident) {
        if (ident.scope) {
          return `${formatUtils.pretty(configuration, `@${ident.scope}/`, formatUtils.Type.SCOPE)}${formatUtils.pretty(configuration, ident.name, formatUtils.Type.NAME)}`;
        } else {
          return `${formatUtils.pretty(configuration, ident.name, formatUtils.Type.NAME)}`;
        }
      }
      var POST_QS_REGEX = /\?.*/;
      function prettyRangeNoColors(range) {
        if (range.startsWith(VIRTUAL_PROTOCOL)) {
          const nested = prettyRangeNoColors(range.substring(range.indexOf(`#`) + 1));
          const abbrev = range.substring(VIRTUAL_PROTOCOL.length, VIRTUAL_PROTOCOL.length + VIRTUAL_ABBREVIATE);
          return `${nested} [${abbrev}]`;
        } else {
          return range.replace(POST_QS_REGEX, `?[...]`);
        }
      }
      function prettyRange(configuration, range) {
        return `${formatUtils.pretty(configuration, prettyRangeNoColors(range), formatUtils.Type.RANGE)}`;
      }
      function prettyDescriptor(configuration, descriptor) {
        return `${prettyIdent(configuration, descriptor)}${formatUtils.pretty(configuration, `@`, formatUtils.Type.RANGE)}${prettyRange(configuration, descriptor.range)}`;
      }
      function prettyReference(configuration, reference) {
        return `${formatUtils.pretty(configuration, prettyRangeNoColors(reference), formatUtils.Type.REFERENCE)}`;
      }
      function prettyLocator(configuration, locator) {
        return `${prettyIdent(configuration, locator)}${formatUtils.pretty(configuration, `@`, formatUtils.Type.REFERENCE)}${prettyReference(configuration, locator.reference)}`;
      }
      function prettyLocatorNoColors(locator) {
        return `${stringifyIdent(locator)}@${prettyRangeNoColors(locator.reference)}`;
      }
      function sortDescriptors(descriptors) {
        return miscUtils.sortMap(descriptors, [
          (descriptor) => stringifyIdent(descriptor),
          (descriptor) => descriptor.range
        ]);
      }
      function prettyWorkspace(configuration, workspace) {
        return prettyIdent(configuration, workspace.anchoredLocator);
      }
      function prettyResolution(configuration, descriptor, locator) {
        const devirtualizedDescriptor = isVirtualDescriptor(descriptor) ? devirtualizeDescriptor(descriptor) : descriptor;
        if (locator === null) {
          return `${structUtils.prettyDescriptor(configuration, devirtualizedDescriptor)} \u2192 ${formatUtils.mark(configuration).Cross}`;
        } else if (devirtualizedDescriptor.identHash === locator.identHash) {
          return `${structUtils.prettyDescriptor(configuration, devirtualizedDescriptor)} \u2192 ${prettyReference(configuration, locator.reference)}`;
        } else {
          return `${structUtils.prettyDescriptor(configuration, devirtualizedDescriptor)} \u2192 ${prettyLocator(configuration, locator)}`;
        }
      }
      function prettyDependent(configuration, locator, descriptor) {
        if (descriptor === null) {
          return `${prettyLocator(configuration, locator)}`;
        } else {
          return `${prettyLocator(configuration, locator)} (via ${structUtils.prettyRange(configuration, descriptor.range)})`;
        }
      }
      function getIdentVendorPath(ident) {
        return `node_modules/${stringifyIdent(ident)}`;
      }
      function isPackageCompatible(pkg, architectures) {
        if (!pkg.conditions)
          return true;
        return conditionParser(pkg.conditions, (specifier) => {
          const [, name, value] = specifier.match(CONDITION_REGEX);
          const supported = architectures[name];
          return supported ? supported.includes(value) : true;
        });
      }
      function allPeerRequests(root) {
        const requests = /* @__PURE__ */ new Set;
        if (`children` in root) {
          requests.add(root);
        } else {
          for (const request of root.requests.values()) {
            requests.add(request);
          }
        }
        for (const request of requests) {
          for (const child of request.children.values()) {
            requests.add(child);
          }
        }
        return requests;
      }
    }
  });
  var require_CorePlugin = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/CorePlugin.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.CorePlugin = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var MessageName_1 = require_MessageName();
      var structUtils = tslib_12.__importStar(require_structUtils());
      exports22.CorePlugin = {
        hooks: {
          reduceDependency: (dependency, project, locator, initialDependency, { resolver, resolveOptions }) => {
            for (const { pattern, reference } of project.topLevelWorkspace.manifest.resolutions) {
              if (pattern.from) {
                if (pattern.from.fullName !== structUtils.stringifyIdent(locator))
                  continue;
                const normalizedFrom = project.configuration.normalizeLocator(structUtils.makeLocator(structUtils.parseIdent(pattern.from.fullName), pattern.from.description ?? locator.reference));
                if (normalizedFrom.locatorHash !== locator.locatorHash) {
                  continue;
                }
              }
              {
                if (pattern.descriptor.fullName !== structUtils.stringifyIdent(dependency))
                  continue;
                const normalizedDescriptor = project.configuration.normalizeDependency(structUtils.makeDescriptor(structUtils.parseLocator(pattern.descriptor.fullName), pattern.descriptor.description ?? dependency.range));
                if (normalizedDescriptor.descriptorHash !== dependency.descriptorHash) {
                  continue;
                }
              }
              const alias = resolver.bindDescriptor(project.configuration.normalizeDependency(structUtils.makeDescriptor(dependency, reference)), project.topLevelWorkspace.anchoredLocator, resolveOptions);
              return alias;
            }
            return dependency;
          },
          validateProject: async (project, report) => {
            for (const workspace of project.workspaces) {
              const workspaceName = structUtils.prettyWorkspace(project.configuration, workspace);
              await project.configuration.triggerHook((hooks) => {
                return hooks.validateWorkspace;
              }, workspace, {
                reportWarning: (name, text) => report.reportWarning(name, `${workspaceName}: ${text}`),
                reportError: (name, text) => report.reportError(name, `${workspaceName}: ${text}`)
              });
            }
          },
          validateWorkspace: async (workspace, report) => {
            const { manifest } = workspace;
            if (manifest.resolutions.length && workspace.cwd !== workspace.project.cwd)
              manifest.errors.push(new Error(`Resolutions field will be ignored`));
            for (const manifestError of manifest.errors) {
              report.reportWarning(MessageName_1.MessageName.INVALID_MANIFEST, manifestError.message);
            }
          }
        }
      };
    }
  });
  var require_WorkspaceResolver = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/WorkspaceResolver.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.WorkspaceResolver = undefined;
      var types_1 = require_types();
      var WorkspaceResolver = class _WorkspaceResolver {
        supportsDescriptor(descriptor, opts) {
          if (descriptor.range.startsWith(_WorkspaceResolver.protocol))
            return true;
          const workspace = opts.project.tryWorkspaceByDescriptor(descriptor);
          if (workspace !== null)
            return true;
          return false;
        }
        supportsLocator(locator, opts) {
          if (!locator.reference.startsWith(_WorkspaceResolver.protocol))
            return false;
          return true;
        }
        shouldPersistResolution(locator, opts) {
          return false;
        }
        bindDescriptor(descriptor, fromLocator, opts) {
          return descriptor;
        }
        getResolutionDependencies(descriptor, opts) {
          return {};
        }
        async getCandidates(descriptor, dependencies, opts) {
          const workspace = opts.project.getWorkspaceByDescriptor(descriptor);
          return [workspace.anchoredLocator];
        }
        async getSatisfying(descriptor, dependencies, locators, opts) {
          const [locator] = await this.getCandidates(descriptor, dependencies, opts);
          return {
            locators: locators.filter((candidate) => candidate.locatorHash === locator.locatorHash),
            sorted: false
          };
        }
        async resolve(locator, opts) {
          const workspace = opts.project.getWorkspaceByCwd(locator.reference.slice(_WorkspaceResolver.protocol.length));
          return {
            ...locator,
            version: workspace.manifest.version || `0.0.0`,
            languageName: `unknown`,
            linkType: types_1.LinkType.SOFT,
            conditions: null,
            dependencies: opts.project.configuration.normalizeDependencyMap(new Map([...workspace.manifest.dependencies, ...workspace.manifest.devDependencies])),
            peerDependencies: new Map([...workspace.manifest.peerDependencies]),
            dependenciesMeta: workspace.manifest.dependenciesMeta,
            peerDependenciesMeta: workspace.manifest.peerDependenciesMeta,
            bin: workspace.manifest.bin
          };
        }
      };
      exports22.WorkspaceResolver = WorkspaceResolver;
      WorkspaceResolver.protocol = `workspace:`;
    }
  });
  var require_semverUtils = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/semverUtils.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.SemVer = undefined;
      exports22.satisfiesWithPrereleases = satisfiesWithPrereleases;
      exports22.validRange = validRange;
      exports22.clean = clean;
      exports22.getComparator = getComparator;
      exports22.mergeComparators = mergeComparators;
      exports22.stringifyComparator = stringifyComparator;
      exports22.simplifyRanges = simplifyRanges;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var semver_12 = tslib_12.__importDefault(require_semver2());
      var semver_2 = require_semver2();
      Object.defineProperty(exports22, "SemVer", { enumerable: true, get: function() {
        return semver_2.SemVer;
      } });
      var satisfiesWithPrereleasesCache = /* @__PURE__ */ new Map;
      function satisfiesWithPrereleases(version, range, loose = false) {
        if (!version)
          return false;
        const key = `${range}${loose}`;
        let semverRange = satisfiesWithPrereleasesCache.get(key);
        if (typeof semverRange === `undefined`) {
          try {
            semverRange = new semver_12.default.Range(range, { includePrerelease: true, loose });
          } catch {
            return false;
          } finally {
            satisfiesWithPrereleasesCache.set(key, semverRange || null);
          }
        } else if (semverRange === null) {
          return false;
        }
        let semverVersion;
        try {
          semverVersion = new semver_12.default.SemVer(version, semverRange);
        } catch (err) {
          return false;
        }
        if (semverRange.test(semverVersion))
          return true;
        if (semverVersion.prerelease)
          semverVersion.prerelease = [];
        return semverRange.set.some((comparatorSet) => {
          for (const comparator of comparatorSet)
            if (comparator.semver.prerelease)
              comparator.semver.prerelease = [];
          return comparatorSet.every((comparator) => {
            return comparator.test(semverVersion);
          });
        });
      }
      var rangesCache = /* @__PURE__ */ new Map;
      function validRange(potentialRange) {
        if (potentialRange.indexOf(`:`) !== -1)
          return null;
        let range = rangesCache.get(potentialRange);
        if (typeof range !== `undefined`)
          return range;
        try {
          range = new semver_12.default.Range(potentialRange);
        } catch {
          range = null;
        }
        rangesCache.set(potentialRange, range);
        return range;
      }
      var CLEAN_SEMVER_REGEXP = /^(?:[\sv=]*?)((0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)(?:\s*)$/;
      function clean(potentialVersion) {
        const version = CLEAN_SEMVER_REGEXP.exec(potentialVersion);
        return version ? version[1] : null;
      }
      function getComparator(comparators) {
        if (comparators.semver === semver_12.default.Comparator.ANY)
          return { gt: null, lt: null };
        switch (comparators.operator) {
          case ``:
            return { gt: [`>=`, comparators.semver], lt: [`<=`, comparators.semver] };
          case `>`:
          case `>=`:
            return { gt: [comparators.operator, comparators.semver], lt: null };
          case `<`:
          case `<=`:
            return { gt: null, lt: [comparators.operator, comparators.semver] };
          default: {
            throw new Error(`Assertion failed: Unexpected comparator operator (${comparators.operator})`);
          }
        }
      }
      function mergeComparators(comparators) {
        if (comparators.length === 0)
          return null;
        let maxGtComparator = null;
        let minLtComparator = null;
        for (const comparator of comparators) {
          if (comparator.gt) {
            const cmp = maxGtComparator !== null ? semver_12.default.compare(comparator.gt[1], maxGtComparator[1]) : null;
            if (cmp === null || cmp > 0 || cmp === 0 && comparator.gt[0] === `>`) {
              maxGtComparator = comparator.gt;
            }
          }
          if (comparator.lt) {
            const cmp = minLtComparator !== null ? semver_12.default.compare(comparator.lt[1], minLtComparator[1]) : null;
            if (cmp === null || cmp < 0 || cmp === 0 && comparator.lt[0] === `<`) {
              minLtComparator = comparator.lt;
            }
          }
        }
        if (maxGtComparator && minLtComparator) {
          const cmp = semver_12.default.compare(maxGtComparator[1], minLtComparator[1]);
          if (cmp === 0 && (maxGtComparator[0] === `>` || minLtComparator[0] === `<`))
            return null;
          if (cmp > 0) {
            return null;
          }
        }
        return {
          gt: maxGtComparator,
          lt: minLtComparator
        };
      }
      function stringifyComparator(comparator) {
        if (comparator.gt && comparator.lt) {
          if (comparator.gt[0] === `>=` && comparator.lt[0] === `<=` && comparator.gt[1].version === comparator.lt[1].version)
            return comparator.gt[1].version;
          if (comparator.gt[0] === `>=` && comparator.lt[0] === `<`) {
            if (comparator.lt[1].version === `${comparator.gt[1].major + 1}.0.0-0`)
              return `^${comparator.gt[1].version}`;
            if (comparator.lt[1].version === `${comparator.gt[1].major}.${comparator.gt[1].minor + 1}.0-0`) {
              return `~${comparator.gt[1].version}`;
            }
          }
        }
        const parts = [];
        if (comparator.gt)
          parts.push(comparator.gt[0] + comparator.gt[1].version);
        if (comparator.lt)
          parts.push(comparator.lt[0] + comparator.lt[1].version);
        if (!parts.length)
          return `*`;
        return parts.join(` `);
      }
      function simplifyRanges(ranges) {
        const parsedRanges = ranges.map(removeSubsets).map((range) => validRange(range).set.map((comparators) => comparators.map((comparator) => getComparator(comparator))));
        let alternatives = parsedRanges.shift().map((comparators) => mergeComparators(comparators)).filter((range) => range !== null);
        for (const parsedRange of parsedRanges) {
          const nextAlternatives = [];
          for (const comparator of alternatives) {
            for (const refiners of parsedRange) {
              const nextComparators = mergeComparators([
                comparator,
                ...refiners
              ]);
              if (nextComparators !== null) {
                nextAlternatives.push(nextComparators);
              }
            }
          }
          alternatives = nextAlternatives;
        }
        if (alternatives.length === 0)
          return null;
        return alternatives.map((comparator) => stringifyComparator(comparator)).join(` || `);
      }
      function removeSubsets(rangeString) {
        const parts = rangeString.split(`||`);
        if (parts.length > 1) {
          const newParts = /* @__PURE__ */ new Set;
          for (const potentialSubset of parts) {
            if (!parts.some((part) => part !== potentialSubset && semver_12.default.subset(potentialSubset, part))) {
              newParts.add(potentialSubset);
            }
          }
          if (newParts.size < parts.length) {
            const newRange = [...newParts].join(` || `);
            return newRange;
          }
        }
        return rangeString;
      }
    }
  });
  var require_Manifest = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/Manifest.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.Manifest = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var fslib_12 = require_lib();
      var parsers_1 = require_lib2();
      var semver_12 = tslib_12.__importDefault(require_semver2());
      var WorkspaceResolver_1 = require_WorkspaceResolver();
      var miscUtils = tslib_12.__importStar(require_miscUtils());
      var semverUtils = tslib_12.__importStar(require_semverUtils());
      var structUtils = tslib_12.__importStar(require_structUtils());
      var Manifest = class _Manifest {
        constructor() {
          this.indent = `  `;
          this.name = null;
          this.version = null;
          this.os = null;
          this.cpu = null;
          this.libc = null;
          this.type = null;
          this.packageManager = null;
          this["private"] = false;
          this.license = null;
          this.main = null;
          this.module = null;
          this.browser = null;
          this.languageName = null;
          this.bin = /* @__PURE__ */ new Map;
          this.scripts = /* @__PURE__ */ new Map;
          this.dependencies = /* @__PURE__ */ new Map;
          this.devDependencies = /* @__PURE__ */ new Map;
          this.peerDependencies = /* @__PURE__ */ new Map;
          this.workspaceDefinitions = [];
          this.dependenciesMeta = /* @__PURE__ */ new Map;
          this.peerDependenciesMeta = /* @__PURE__ */ new Map;
          this.resolutions = [];
          this.files = null;
          this.publishConfig = null;
          this.installConfig = null;
          this.preferUnplugged = null;
          this.raw = {};
          this.errors = [];
        }
        static async tryFind(path2, { baseFs = new fslib_12.NodeFS } = {}) {
          const manifestPath = fslib_12.ppath.join(path2, `package.json`);
          try {
            return await _Manifest.fromFile(manifestPath, { baseFs });
          } catch (err) {
            if (err.code === `ENOENT`)
              return null;
            throw err;
          }
        }
        static async find(path2, { baseFs } = {}) {
          const manifest = await _Manifest.tryFind(path2, { baseFs });
          if (manifest === null)
            throw new Error(`Manifest not found`);
          return manifest;
        }
        static async fromFile(path2, { baseFs = new fslib_12.NodeFS } = {}) {
          const manifest = new _Manifest;
          await manifest.loadFile(path2, { baseFs });
          return manifest;
        }
        static fromText(text) {
          const manifest = new _Manifest;
          manifest.loadFromText(text);
          return manifest;
        }
        loadFromText(text) {
          let data;
          try {
            data = JSON.parse(stripBOM(text) || `{}`);
          } catch (error) {
            error.message += ` (when parsing ${text})`;
            throw error;
          }
          this.load(data);
          this.indent = getIndent(text);
        }
        async loadFile(path2, { baseFs = new fslib_12.NodeFS }) {
          const content = await baseFs.readFilePromise(path2, `utf8`);
          let data;
          try {
            data = JSON.parse(stripBOM(content) || `{}`);
          } catch (error) {
            error.message += ` (when parsing ${path2})`;
            throw error;
          }
          this.load(data);
          this.indent = getIndent(content);
        }
        load(data, { yamlCompatibilityMode = false } = {}) {
          if (typeof data !== `object` || data === null)
            throw new Error(`Utterly invalid manifest data (${data})`);
          this.raw = data;
          const errors = [];
          this.name = null;
          if (typeof data.name === `string`) {
            try {
              this.name = structUtils.parseIdent(data.name);
            } catch (error) {
              errors.push(new Error(`Parsing failed for the 'name' field`));
            }
          }
          if (typeof data.version === `string`)
            this.version = data.version;
          else
            this.version = null;
          if (Array.isArray(data.os)) {
            const os = [];
            this.os = os;
            for (const item of data.os) {
              if (typeof item !== `string`) {
                errors.push(new Error(`Parsing failed for the 'os' field`));
              } else {
                os.push(item);
              }
            }
          } else {
            this.os = null;
          }
          if (Array.isArray(data.cpu)) {
            const cpu = [];
            this.cpu = cpu;
            for (const item of data.cpu) {
              if (typeof item !== `string`) {
                errors.push(new Error(`Parsing failed for the 'cpu' field`));
              } else {
                cpu.push(item);
              }
            }
          } else {
            this.cpu = null;
          }
          if (Array.isArray(data.libc)) {
            const libc = [];
            this.libc = libc;
            for (const item of data.libc) {
              if (typeof item !== `string`) {
                errors.push(new Error(`Parsing failed for the 'libc' field`));
              } else {
                libc.push(item);
              }
            }
          } else {
            this.libc = null;
          }
          if (typeof data.type === `string`)
            this.type = data.type;
          else
            this.type = null;
          if (typeof data.packageManager === `string`)
            this.packageManager = data.packageManager;
          else
            this.packageManager = null;
          if (typeof data.private === `boolean`)
            this.private = data.private;
          else
            this.private = false;
          if (typeof data.license === `string`)
            this.license = data.license;
          else
            this.license = null;
          if (typeof data.languageName === `string`)
            this.languageName = data.languageName;
          else
            this.languageName = null;
          if (typeof data.main === `string`)
            this.main = normalizeSlashes(data.main);
          else
            this.main = null;
          if (typeof data.module === `string`)
            this.module = normalizeSlashes(data.module);
          else
            this.module = null;
          if (data.browser != null) {
            if (typeof data.browser === `string`) {
              this.browser = normalizeSlashes(data.browser);
            } else {
              this.browser = /* @__PURE__ */ new Map;
              for (const [key, value] of Object.entries(data.browser)) {
                this.browser.set(normalizeSlashes(key), typeof value === `string` ? normalizeSlashes(value) : value);
              }
            }
          } else {
            this.browser = null;
          }
          this.bin = /* @__PURE__ */ new Map;
          if (typeof data.bin === `string`) {
            if (data.bin.trim() === ``) {
              errors.push(new Error(`Invalid bin field`));
            } else if (this.name !== null) {
              this.bin.set(this.name.name, normalizeSlashes(data.bin));
            } else {
              errors.push(new Error(`String bin field, but no attached package name`));
            }
          } else if (typeof data.bin === `object` && data.bin !== null) {
            for (const [key, value] of Object.entries(data.bin)) {
              if (typeof value !== `string` || value.trim() === ``) {
                errors.push(new Error(`Invalid bin definition for '${key}'`));
                continue;
              }
              const binaryIdent = structUtils.parseIdent(key);
              this.bin.set(binaryIdent.name, normalizeSlashes(value));
            }
          }
          this.scripts = /* @__PURE__ */ new Map;
          if (typeof data.scripts === `object` && data.scripts !== null) {
            for (const [key, value] of Object.entries(data.scripts)) {
              if (typeof value !== `string`) {
                errors.push(new Error(`Invalid script definition for '${key}'`));
                continue;
              }
              this.scripts.set(key, value);
            }
          }
          this.dependencies = /* @__PURE__ */ new Map;
          if (typeof data.dependencies === `object` && data.dependencies !== null) {
            for (const [name, range] of Object.entries(data.dependencies)) {
              if (typeof range !== `string`) {
                errors.push(new Error(`Invalid dependency range for '${name}'`));
                continue;
              }
              let ident;
              try {
                ident = structUtils.parseIdent(name);
              } catch (error) {
                errors.push(new Error(`Parsing failed for the dependency name '${name}'`));
                continue;
              }
              const descriptor = structUtils.makeDescriptor(ident, range);
              this.dependencies.set(descriptor.identHash, descriptor);
            }
          }
          this.devDependencies = /* @__PURE__ */ new Map;
          if (typeof data.devDependencies === `object` && data.devDependencies !== null) {
            for (const [name, range] of Object.entries(data.devDependencies)) {
              if (typeof range !== `string`) {
                errors.push(new Error(`Invalid dependency range for '${name}'`));
                continue;
              }
              let ident;
              try {
                ident = structUtils.parseIdent(name);
              } catch (error) {
                errors.push(new Error(`Parsing failed for the dependency name '${name}'`));
                continue;
              }
              const descriptor = structUtils.makeDescriptor(ident, range);
              this.devDependencies.set(descriptor.identHash, descriptor);
            }
          }
          this.peerDependencies = /* @__PURE__ */ new Map;
          if (typeof data.peerDependencies === `object` && data.peerDependencies !== null) {
            for (let [name, range] of Object.entries(data.peerDependencies)) {
              let ident;
              try {
                ident = structUtils.parseIdent(name);
              } catch (error) {
                errors.push(new Error(`Parsing failed for the dependency name '${name}'`));
                continue;
              }
              if (typeof range !== `string` || !range.startsWith(WorkspaceResolver_1.WorkspaceResolver.protocol) && !semverUtils.validRange(range)) {
                errors.push(new Error(`Invalid dependency range for '${name}'`));
                range = `*`;
              }
              const descriptor = structUtils.makeDescriptor(ident, range);
              this.peerDependencies.set(descriptor.identHash, descriptor);
            }
          }
          if (typeof data.workspaces === `object` && data.workspaces !== null && data.workspaces.nohoist)
            errors.push(new Error(`'nohoist' is deprecated, please use 'installConfig.hoistingLimits' instead`));
          const workspaces = Array.isArray(data.workspaces) ? data.workspaces : typeof data.workspaces === `object` && data.workspaces !== null && Array.isArray(data.workspaces.packages) ? data.workspaces.packages : [];
          this.workspaceDefinitions = [];
          for (const entry of workspaces) {
            if (typeof entry !== `string`) {
              errors.push(new Error(`Invalid workspace definition for '${entry}'`));
              continue;
            }
            this.workspaceDefinitions.push({
              pattern: entry
            });
          }
          this.dependenciesMeta = /* @__PURE__ */ new Map;
          if (typeof data.dependenciesMeta === `object` && data.dependenciesMeta !== null) {
            for (const [pattern, meta] of Object.entries(data.dependenciesMeta)) {
              if (typeof meta !== `object` || meta === null) {
                errors.push(new Error(`Invalid meta field for '${pattern}`));
                continue;
              }
              const descriptor = structUtils.parseDescriptor(pattern);
              const dependencyMeta = this.ensureDependencyMeta(descriptor);
              const built = tryParseOptionalBoolean2(meta.built, { yamlCompatibilityMode });
              if (built === null) {
                errors.push(new Error(`Invalid built meta field for '${pattern}'`));
                continue;
              }
              const optional = tryParseOptionalBoolean2(meta.optional, { yamlCompatibilityMode });
              if (optional === null) {
                errors.push(new Error(`Invalid optional meta field for '${pattern}'`));
                continue;
              }
              const unplugged = tryParseOptionalBoolean2(meta.unplugged, { yamlCompatibilityMode });
              if (unplugged === null) {
                errors.push(new Error(`Invalid unplugged meta field for '${pattern}'`));
                continue;
              }
              Object.assign(dependencyMeta, { built, optional, unplugged });
            }
          }
          this.peerDependenciesMeta = /* @__PURE__ */ new Map;
          if (typeof data.peerDependenciesMeta === `object` && data.peerDependenciesMeta !== null) {
            for (const [pattern, meta] of Object.entries(data.peerDependenciesMeta)) {
              if (typeof meta !== `object` || meta === null) {
                errors.push(new Error(`Invalid meta field for '${pattern}'`));
                continue;
              }
              const descriptor = structUtils.parseDescriptor(pattern);
              const peerDependencyMeta = this.ensurePeerDependencyMeta(descriptor);
              const optional = tryParseOptionalBoolean2(meta.optional, { yamlCompatibilityMode });
              if (optional === null) {
                errors.push(new Error(`Invalid optional meta field for '${pattern}'`));
                continue;
              }
              Object.assign(peerDependencyMeta, { optional });
            }
          }
          this.resolutions = [];
          if (typeof data.resolutions === `object` && data.resolutions !== null) {
            for (const [pattern, reference] of Object.entries(data.resolutions)) {
              if (typeof reference !== `string`) {
                errors.push(new Error(`Invalid resolution entry for '${pattern}'`));
                continue;
              }
              try {
                this.resolutions.push({ pattern: (0, parsers_1.parseResolution)(pattern), reference });
              } catch (error) {
                errors.push(error);
                continue;
              }
            }
          }
          if (Array.isArray(data.files)) {
            this.files = /* @__PURE__ */ new Set;
            for (const filename of data.files) {
              if (typeof filename !== `string`) {
                errors.push(new Error(`Invalid files entry for '${filename}'`));
                continue;
              }
              this.files.add(filename);
            }
          } else {
            this.files = null;
          }
          if (typeof data.publishConfig === `object` && data.publishConfig !== null) {
            this.publishConfig = {};
            if (typeof data.publishConfig.access === `string`)
              this.publishConfig.access = data.publishConfig.access;
            if (typeof data.publishConfig.main === `string`)
              this.publishConfig.main = normalizeSlashes(data.publishConfig.main);
            if (typeof data.publishConfig.module === `string`)
              this.publishConfig.module = normalizeSlashes(data.publishConfig.module);
            if (data.publishConfig.browser != null) {
              if (typeof data.publishConfig.browser === `string`) {
                this.publishConfig.browser = normalizeSlashes(data.publishConfig.browser);
              } else {
                this.publishConfig.browser = /* @__PURE__ */ new Map;
                for (const [key, value] of Object.entries(data.publishConfig.browser)) {
                  this.publishConfig.browser.set(normalizeSlashes(key), typeof value === `string` ? normalizeSlashes(value) : value);
                }
              }
            }
            if (typeof data.publishConfig.registry === `string`)
              this.publishConfig.registry = data.publishConfig.registry;
            if (typeof data.publishConfig.bin === `string`) {
              if (this.name !== null) {
                this.publishConfig.bin = /* @__PURE__ */ new Map([[this.name.name, normalizeSlashes(data.publishConfig.bin)]]);
              } else {
                errors.push(new Error(`String bin field, but no attached package name`));
              }
            } else if (typeof data.publishConfig.bin === `object` && data.publishConfig.bin !== null) {
              this.publishConfig.bin = /* @__PURE__ */ new Map;
              for (const [key, value] of Object.entries(data.publishConfig.bin)) {
                if (typeof value !== `string`) {
                  errors.push(new Error(`Invalid bin definition for '${key}'`));
                  continue;
                }
                this.publishConfig.bin.set(key, normalizeSlashes(value));
              }
            }
            if (Array.isArray(data.publishConfig.executableFiles)) {
              this.publishConfig.executableFiles = /* @__PURE__ */ new Set;
              for (const value of data.publishConfig.executableFiles) {
                if (typeof value !== `string`) {
                  errors.push(new Error(`Invalid executable file definition`));
                  continue;
                }
                this.publishConfig.executableFiles.add(normalizeSlashes(value));
              }
            }
          } else {
            this.publishConfig = null;
          }
          if (typeof data.installConfig === `object` && data.installConfig !== null) {
            this.installConfig = {};
            for (const key of Object.keys(data.installConfig)) {
              if (key === `hoistingLimits`) {
                if (typeof data.installConfig.hoistingLimits === `string`) {
                  this.installConfig.hoistingLimits = data.installConfig.hoistingLimits;
                } else {
                  errors.push(new Error(`Invalid hoisting limits definition`));
                }
              } else if (key == `selfReferences`) {
                if (typeof data.installConfig.selfReferences == `boolean`) {
                  this.installConfig.selfReferences = data.installConfig.selfReferences;
                } else {
                  errors.push(new Error(`Invalid selfReferences definition, must be a boolean value`));
                }
              } else {
                errors.push(new Error(`Unrecognized installConfig key: ${key}`));
              }
            }
          } else {
            this.installConfig = null;
          }
          if (typeof data.optionalDependencies === `object` && data.optionalDependencies !== null) {
            for (const [name, range] of Object.entries(data.optionalDependencies)) {
              if (typeof range !== `string`) {
                errors.push(new Error(`Invalid dependency range for '${name}'`));
                continue;
              }
              let ident;
              try {
                ident = structUtils.parseIdent(name);
              } catch (error) {
                errors.push(new Error(`Parsing failed for the dependency name '${name}'`));
                continue;
              }
              const realDescriptor = structUtils.makeDescriptor(ident, range);
              this.dependencies.set(realDescriptor.identHash, realDescriptor);
              const identDescriptor = structUtils.makeDescriptor(ident, `unknown`);
              const dependencyMeta = this.ensureDependencyMeta(identDescriptor);
              Object.assign(dependencyMeta, { optional: true });
            }
          }
          if (typeof data.preferUnplugged === `boolean`)
            this.preferUnplugged = data.preferUnplugged;
          else
            this.preferUnplugged = null;
          this.errors = errors;
        }
        getForScope(type) {
          switch (type) {
            case `dependencies`:
              return this.dependencies;
            case `devDependencies`:
              return this.devDependencies;
            case `peerDependencies`:
              return this.peerDependencies;
            default: {
              throw new Error(`Unsupported value ("${type}")`);
            }
          }
        }
        hasConsumerDependency(ident) {
          if (this.dependencies.has(ident.identHash))
            return true;
          if (this.peerDependencies.has(ident.identHash))
            return true;
          return false;
        }
        hasHardDependency(ident) {
          if (this.dependencies.has(ident.identHash))
            return true;
          if (this.devDependencies.has(ident.identHash))
            return true;
          return false;
        }
        hasSoftDependency(ident) {
          if (this.peerDependencies.has(ident.identHash))
            return true;
          return false;
        }
        hasDependency(ident) {
          if (this.hasHardDependency(ident))
            return true;
          if (this.hasSoftDependency(ident))
            return true;
          return false;
        }
        getConditions() {
          const fields = [];
          if (this.os && this.os.length > 0)
            fields.push(toConditionLine(`os`, this.os));
          if (this.cpu && this.cpu.length > 0)
            fields.push(toConditionLine(`cpu`, this.cpu));
          if (this.libc && this.libc.length > 0)
            fields.push(toConditionLine(`libc`, this.libc));
          return fields.length > 0 ? fields.join(` & `) : null;
        }
        ensureDependencyMeta(descriptor) {
          if (descriptor.range !== `unknown` && !semver_12.default.valid(descriptor.range))
            throw new Error(`Invalid meta field range for '${structUtils.stringifyDescriptor(descriptor)}'`);
          const identString = structUtils.stringifyIdent(descriptor);
          const range = descriptor.range !== `unknown` ? descriptor.range : null;
          let dependencyMetaSet = this.dependenciesMeta.get(identString);
          if (!dependencyMetaSet)
            this.dependenciesMeta.set(identString, dependencyMetaSet = /* @__PURE__ */ new Map);
          let dependencyMeta = dependencyMetaSet.get(range);
          if (!dependencyMeta)
            dependencyMetaSet.set(range, dependencyMeta = {});
          return dependencyMeta;
        }
        ensurePeerDependencyMeta(descriptor) {
          if (descriptor.range !== `unknown`)
            throw new Error(`Invalid meta field range for '${structUtils.stringifyDescriptor(descriptor)}'`);
          const identString = structUtils.stringifyIdent(descriptor);
          let peerDependencyMeta = this.peerDependenciesMeta.get(identString);
          if (!peerDependencyMeta)
            this.peerDependenciesMeta.set(identString, peerDependencyMeta = {});
          return peerDependencyMeta;
        }
        setRawField(name, value, { after = [] } = {}) {
          const afterSet = new Set(after.filter((key) => {
            return Object.hasOwn(this.raw, key);
          }));
          if (afterSet.size === 0 || Object.hasOwn(this.raw, name)) {
            this.raw[name] = value;
          } else {
            const oldRaw = this.raw;
            const newRaw = this.raw = {};
            let inserted = false;
            for (const key of Object.keys(oldRaw)) {
              newRaw[key] = oldRaw[key];
              if (!inserted) {
                afterSet.delete(key);
                if (afterSet.size === 0) {
                  newRaw[name] = value;
                  inserted = true;
                }
              }
            }
          }
        }
        exportTo(data, { compatibilityMode = true } = {}) {
          Object.assign(data, this.raw);
          if (this.name !== null)
            data.name = structUtils.stringifyIdent(this.name);
          else
            delete data.name;
          if (this.version !== null)
            data.version = this.version;
          else
            delete data.version;
          if (this.os !== null)
            data.os = this.os;
          else
            delete data.os;
          if (this.cpu !== null)
            data.cpu = this.cpu;
          else
            delete data.cpu;
          if (this.type !== null)
            data.type = this.type;
          else
            delete data.type;
          if (this.packageManager !== null)
            data.packageManager = this.packageManager;
          else
            delete data.packageManager;
          if (this.private)
            data.private = true;
          else
            delete data.private;
          if (this.license !== null)
            data.license = this.license;
          else
            delete data.license;
          if (this.languageName !== null)
            data.languageName = this.languageName;
          else
            delete data.languageName;
          if (this.main !== null)
            data.main = this.main;
          else
            delete data.main;
          if (this.module !== null)
            data.module = this.module;
          else
            delete data.module;
          if (this.browser !== null) {
            const browser = this.browser;
            if (typeof browser === `string`) {
              data.browser = browser;
            } else if (browser instanceof Map) {
              data.browser = Object.assign({}, ...Array.from(browser.keys()).sort().map((name) => {
                return { [name]: browser.get(name) };
              }));
            }
          } else {
            delete data.browser;
          }
          if (this.bin.size === 1 && this.name !== null && this.bin.has(this.name.name)) {
            data.bin = this.bin.get(this.name.name);
          } else if (this.bin.size > 0) {
            data.bin = Object.assign({}, ...Array.from(this.bin.keys()).sort().map((name) => {
              return { [name]: this.bin.get(name) };
            }));
          } else {
            delete data.bin;
          }
          if (this.workspaceDefinitions.length > 0) {
            if (this.raw.workspaces && !Array.isArray(this.raw.workspaces)) {
              data.workspaces = { ...this.raw.workspaces, packages: this.workspaceDefinitions.map(({ pattern }) => pattern) };
            } else {
              data.workspaces = this.workspaceDefinitions.map(({ pattern }) => pattern);
            }
          } else if (this.raw.workspaces && !Array.isArray(this.raw.workspaces) && Object.keys(this.raw.workspaces).length > 0) {
            data.workspaces = this.raw.workspaces;
          } else {
            delete data.workspaces;
          }
          const regularDependencies = [];
          const optionalDependencies = [];
          for (const dependency of this.dependencies.values()) {
            const dependencyMetaSet = this.dependenciesMeta.get(structUtils.stringifyIdent(dependency));
            let isOptionallyBuilt = false;
            if (compatibilityMode) {
              if (dependencyMetaSet) {
                const meta = dependencyMetaSet.get(null);
                if (meta && meta.optional) {
                  isOptionallyBuilt = true;
                }
              }
            }
            if (isOptionallyBuilt) {
              optionalDependencies.push(dependency);
            } else {
              regularDependencies.push(dependency);
            }
          }
          if (regularDependencies.length > 0) {
            data.dependencies = Object.assign({}, ...structUtils.sortDescriptors(regularDependencies).map((dependency) => {
              return { [structUtils.stringifyIdent(dependency)]: dependency.range };
            }));
          } else {
            delete data.dependencies;
          }
          if (optionalDependencies.length > 0) {
            data.optionalDependencies = Object.assign({}, ...structUtils.sortDescriptors(optionalDependencies).map((dependency) => {
              return { [structUtils.stringifyIdent(dependency)]: dependency.range };
            }));
          } else {
            delete data.optionalDependencies;
          }
          if (this.devDependencies.size > 0) {
            data.devDependencies = Object.assign({}, ...structUtils.sortDescriptors(this.devDependencies.values()).map((dependency) => {
              return { [structUtils.stringifyIdent(dependency)]: dependency.range };
            }));
          } else {
            delete data.devDependencies;
          }
          if (this.peerDependencies.size > 0) {
            data.peerDependencies = Object.assign({}, ...structUtils.sortDescriptors(this.peerDependencies.values()).map((dependency) => {
              return { [structUtils.stringifyIdent(dependency)]: dependency.range };
            }));
          } else {
            delete data.peerDependencies;
          }
          data.dependenciesMeta = {};
          for (const [identString, dependencyMetaSet] of miscUtils.sortMap(this.dependenciesMeta.entries(), ([identString2, dependencyMetaSet2]) => identString2)) {
            for (const [range, meta] of miscUtils.sortMap(dependencyMetaSet.entries(), ([range2, meta2]) => range2 !== null ? `0${range2}` : `1`)) {
              const key = range !== null ? structUtils.stringifyDescriptor(structUtils.makeDescriptor(structUtils.parseIdent(identString), range)) : identString;
              const metaCopy = { ...meta };
              if (compatibilityMode && range === null)
                delete metaCopy.optional;
              if (Object.keys(metaCopy).length === 0)
                continue;
              data.dependenciesMeta[key] = metaCopy;
            }
          }
          if (Object.keys(data.dependenciesMeta).length === 0)
            delete data.dependenciesMeta;
          if (this.peerDependenciesMeta.size > 0) {
            data.peerDependenciesMeta = Object.assign({}, ...miscUtils.sortMap(this.peerDependenciesMeta.entries(), ([identString, meta]) => identString).map(([identString, meta]) => {
              return { [identString]: meta };
            }));
          } else {
            delete data.peerDependenciesMeta;
          }
          if (this.resolutions.length > 0) {
            data.resolutions = Object.assign({}, ...this.resolutions.map(({ pattern, reference }) => {
              return { [(0, parsers_1.stringifyResolution)(pattern)]: reference };
            }));
          } else {
            delete data.resolutions;
          }
          if (this.files !== null)
            data.files = Array.from(this.files);
          else
            delete data.files;
          if (this.preferUnplugged !== null)
            data.preferUnplugged = this.preferUnplugged;
          else
            delete data.preferUnplugged;
          if (this.scripts !== null && this.scripts.size > 0) {
            data.scripts ??= {};
            for (const existingScriptName of Object.keys(data.scripts))
              if (!this.scripts.has(existingScriptName))
                delete data.scripts[existingScriptName];
            for (const [name, content] of this.scripts.entries()) {
              data.scripts[name] = content;
            }
          } else {
            delete data.scripts;
          }
          return data;
        }
      };
      exports22.Manifest = Manifest;
      Manifest.fileName = `package.json`;
      Manifest.allDependencies = [`dependencies`, `devDependencies`, `peerDependencies`];
      Manifest.hardDependencies = [`dependencies`, `devDependencies`];
      function getIndent(content) {
        const indentMatch = content.match(/^[ \t]+/m);
        if (indentMatch) {
          return indentMatch[0];
        } else {
          return `  `;
        }
      }
      function stripBOM(content) {
        if (content.charCodeAt(0) === 65279) {
          return content.slice(1);
        } else {
          return content;
        }
      }
      function normalizeSlashes(str) {
        return str.replace(/\\/g, `/`);
      }
      function tryParseOptionalBoolean2(value, { yamlCompatibilityMode }) {
        if (yamlCompatibilityMode)
          return miscUtils.tryParseOptionalBoolean(value);
        if (typeof value === `undefined` || typeof value === `boolean`)
          return value;
        return null;
      }
      function toConditionToken(name, raw) {
        const index = raw.search(/[^!]/);
        if (index === -1)
          return `invalid`;
        const prefix = index % 2 === 0 ? `` : `!`;
        const value = raw.slice(index);
        return `${prefix}${name}=${value}`;
      }
      function toConditionLine(name, rawTokens) {
        if (rawTokens.length === 1) {
          return toConditionToken(name, rawTokens[0]);
        } else {
          return `(${rawTokens.map((raw) => toConditionToken(name, raw)).join(` | `)})`;
        }
      }
    }
  });
  var require_now = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/now.js"(exports22, module22) {
      var root = require_root();
      var now = function() {
        return root.Date.now();
      };
      module22.exports = now;
    }
  });
  var require_trimmedEndIndex = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_trimmedEndIndex.js"(exports22, module22) {
      var reWhitespace = /\s/;
      function trimmedEndIndex(string) {
        var index = string.length;
        while (index-- && reWhitespace.test(string.charAt(index))) {
        }
        return index;
      }
      module22.exports = trimmedEndIndex;
    }
  });
  var require_baseTrim = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseTrim.js"(exports22, module22) {
      var trimmedEndIndex = require_trimmedEndIndex();
      var reTrimStart = /^\s+/;
      function baseTrim(string) {
        return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
      }
      module22.exports = baseTrim;
    }
  });
  var require_isSymbol = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isSymbol.js"(exports22, module22) {
      var baseGetTag = require_baseGetTag();
      var isObjectLike = require_isObjectLike();
      var symbolTag = "[object Symbol]";
      function isSymbol(value) {
        return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
      }
      module22.exports = isSymbol;
    }
  });
  var require_toNumber = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/toNumber.js"(exports22, module22) {
      var baseTrim = require_baseTrim();
      var isObject = require_isObject();
      var isSymbol = require_isSymbol();
      var NAN = 0 / 0;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsOctal = /^0o[0-7]+$/i;
      var freeParseInt = parseInt;
      function toNumber(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        if (isObject(value)) {
          var other = typeof value.valueOf == "function" ? value.valueOf() : value;
          value = isObject(other) ? other + "" : other;
        }
        if (typeof value != "string") {
          return value === 0 ? value : +value;
        }
        value = baseTrim(value);
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }
      module22.exports = toNumber;
    }
  });
  var require_debounce = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/debounce.js"(exports22, module22) {
      var isObject = require_isObject();
      var now = require_now();
      var toNumber = require_toNumber();
      var FUNC_ERROR_TEXT = "Expected a function";
      var nativeMax = Math.max;
      var nativeMin = Math.min;
      function debounce(func, wait, options) {
        var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        wait = toNumber(wait) || 0;
        if (isObject(options)) {
          leading = !!options.leading;
          maxing = "maxWait" in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        function invokeFunc(time) {
          var args = lastArgs, thisArg = lastThis;
          lastArgs = lastThis = undefined;
          lastInvokeTime = time;
          result2 = func.apply(thisArg, args);
          return result2;
        }
        function leadingEdge(time) {
          lastInvokeTime = time;
          timerId = setTimeout(timerExpired, wait);
          return leading ? invokeFunc(time) : result2;
        }
        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
          return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
        }
        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
          return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }
        function timerExpired() {
          var time = now();
          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }
          timerId = setTimeout(timerExpired, remainingWait(time));
        }
        function trailingEdge(time) {
          timerId = undefined;
          if (trailing && lastArgs) {
            return invokeFunc(time);
          }
          lastArgs = lastThis = undefined;
          return result2;
        }
        function cancel() {
          if (timerId !== undefined) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = undefined;
        }
        function flush() {
          return timerId === undefined ? result2 : trailingEdge(now());
        }
        function debounced() {
          var time = now(), isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;
          if (isInvoking) {
            if (timerId === undefined) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              clearTimeout(timerId);
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === undefined) {
            timerId = setTimeout(timerExpired, wait);
          }
          return result2;
        }
        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }
      module22.exports = debounce;
    }
  });
  var require_throttle = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/throttle.js"(exports22, module22) {
      var debounce = require_debounce();
      var isObject = require_isObject();
      var FUNC_ERROR_TEXT = "Expected a function";
      function throttle(func, wait, options) {
        var leading = true, trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        if (isObject(options)) {
          leading = "leading" in options ? !!options.leading : leading;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        return debounce(func, wait, {
          leading,
          maxWait: wait,
          trailing
        });
      }
      module22.exports = throttle;
    }
  });
  var require_Report = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/Report.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.Report = exports22.ReportError = undefined;
      exports22.isReportError = isReportError;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var throttle_1 = tslib_12.__importDefault(require_throttle());
      var stream_12 = __require("stream");
      var string_decoder_1 = __require("string_decoder");
      var MessageName_1 = require_MessageName();
      var TITLE_PROGRESS_FPS = 15;
      var ReportError = class extends Error {
        constructor(code, message, reportExtra) {
          super(message);
          this.reportExtra = reportExtra;
          this.reportCode = code;
        }
      };
      exports22.ReportError = ReportError;
      function isReportError(error) {
        return typeof error.reportCode !== `undefined`;
      }
      var Report = class {
        constructor() {
          this.cacheHits = /* @__PURE__ */ new Set;
          this.cacheMisses = /* @__PURE__ */ new Set;
          this.reportedInfos = /* @__PURE__ */ new Set;
          this.reportedWarnings = /* @__PURE__ */ new Set;
          this.reportedErrors = /* @__PURE__ */ new Set;
        }
        getRecommendedLength() {
          return 180;
        }
        reportCacheHit(locator) {
          this.cacheHits.add(locator.locatorHash);
        }
        reportCacheMiss(locator, message) {
          this.cacheMisses.add(locator.locatorHash);
        }
        static progressViaCounter(max) {
          let current = 0;
          let unlock;
          let lock = new Promise((resolve) => {
            unlock = resolve;
          });
          const set = (n) => {
            const thisUnlock = unlock;
            lock = new Promise((resolve) => {
              unlock = resolve;
            });
            current = n;
            thisUnlock();
          };
          const tick = (n = 0) => {
            set(current + 1);
          };
          const gen = async function* () {
            while (current < max) {
              await lock;
              yield {
                progress: current / max
              };
            }
          }();
          return {
            [Symbol.asyncIterator]() {
              return gen;
            },
            hasProgress: true,
            hasTitle: false,
            set,
            tick
          };
        }
        static progressViaTitle() {
          let currentTitle;
          let unlock;
          let lock = new Promise((resolve) => {
            unlock = resolve;
          });
          const setTitle = (0, throttle_1.default)((title) => {
            const thisUnlock = unlock;
            lock = new Promise((resolve) => {
              unlock = resolve;
            });
            currentTitle = title;
            thisUnlock();
          }, 1000 / TITLE_PROGRESS_FPS);
          const gen = async function* () {
            while (true) {
              await lock;
              yield {
                title: currentTitle
              };
            }
          }();
          return {
            [Symbol.asyncIterator]() {
              return gen;
            },
            hasProgress: false,
            hasTitle: true,
            setTitle
          };
        }
        async startProgressPromise(progressIt, cb) {
          const reportedProgress = this.reportProgress(progressIt);
          try {
            return await cb(progressIt);
          } finally {
            reportedProgress.stop();
          }
        }
        startProgressSync(progressIt, cb) {
          const reportedProgress = this.reportProgress(progressIt);
          try {
            return cb(progressIt);
          } finally {
            reportedProgress.stop();
          }
        }
        reportInfoOnce(name, text, opts) {
          const key = opts && opts.key ? opts.key : text;
          if (!this.reportedInfos.has(key)) {
            this.reportedInfos.add(key);
            this.reportInfo(name, text);
            opts?.reportExtra?.(this);
          }
        }
        reportWarningOnce(name, text, opts) {
          const key = opts && opts.key ? opts.key : text;
          if (!this.reportedWarnings.has(key)) {
            this.reportedWarnings.add(key);
            this.reportWarning(name, text);
            opts?.reportExtra?.(this);
          }
        }
        reportErrorOnce(name, text, opts) {
          const key = opts && opts.key ? opts.key : text;
          if (!this.reportedErrors.has(key)) {
            this.reportedErrors.add(key);
            this.reportError(name, text);
            opts?.reportExtra?.(this);
          }
        }
        reportExceptionOnce(error) {
          if (isReportError(error)) {
            this.reportErrorOnce(error.reportCode, error.message, { key: error, reportExtra: error.reportExtra });
          } else {
            this.reportErrorOnce(MessageName_1.MessageName.EXCEPTION, error.stack || error.message, { key: error });
          }
        }
        createStreamReporter(prefix = null) {
          const stream = new stream_12.PassThrough;
          const decoder = new string_decoder_1.StringDecoder;
          let buffer = ``;
          stream.on(`data`, (chunk) => {
            let chunkStr = decoder.write(chunk);
            let lineIndex;
            do {
              lineIndex = chunkStr.indexOf(`
`);
              if (lineIndex !== -1) {
                const line = buffer + chunkStr.substring(0, lineIndex);
                chunkStr = chunkStr.substring(lineIndex + 1);
                buffer = ``;
                if (prefix !== null) {
                  this.reportInfo(null, `${prefix} ${line}`);
                } else {
                  this.reportInfo(null, line);
                }
              }
            } while (lineIndex !== -1);
            buffer += chunkStr;
          });
          stream.on(`end`, () => {
            const last = decoder.end();
            if (last !== ``) {
              if (prefix !== null) {
                this.reportInfo(null, `${prefix} ${last}`);
              } else {
                this.reportInfo(null, last);
              }
            }
          });
          return stream;
        }
      };
      exports22.Report = Report;
    }
  });
  var require_MultiFetcher = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/MultiFetcher.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.MultiFetcher = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var MessageName_1 = require_MessageName();
      var Report_1 = require_Report();
      var structUtils = tslib_12.__importStar(require_structUtils());
      var MultiFetcher = class {
        constructor(fetchers) {
          this.fetchers = fetchers;
        }
        supports(locator, opts) {
          if (!this.tryFetcher(locator, opts))
            return false;
          return true;
        }
        getLocalPath(locator, opts) {
          const fetcher = this.getFetcher(locator, opts);
          return fetcher.getLocalPath(locator, opts);
        }
        async fetch(locator, opts) {
          const fetcher = this.getFetcher(locator, opts);
          return await fetcher.fetch(locator, opts);
        }
        tryFetcher(locator, opts) {
          const fetcher = this.fetchers.find((fetcher2) => fetcher2.supports(locator, opts));
          if (!fetcher)
            return null;
          return fetcher;
        }
        getFetcher(locator, opts) {
          const fetcher = this.fetchers.find((fetcher2) => fetcher2.supports(locator, opts));
          if (!fetcher)
            throw new Report_1.ReportError(MessageName_1.MessageName.FETCHER_NOT_FOUND, `${structUtils.prettyLocator(opts.project.configuration, locator)} isn't supported by any available fetcher`);
          return fetcher;
        }
      };
      exports22.MultiFetcher = MultiFetcher;
    }
  });
  var require_MultiResolver = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/MultiResolver.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.MultiResolver = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var structUtils = tslib_12.__importStar(require_structUtils());
      var MultiResolver = class {
        constructor(resolvers) {
          this.resolvers = resolvers.filter((resolver) => resolver);
        }
        supportsDescriptor(descriptor, opts) {
          const resolver = this.tryResolverByDescriptor(descriptor, opts);
          return !!resolver;
        }
        supportsLocator(locator, opts) {
          const resolver = this.tryResolverByLocator(locator, opts);
          return !!resolver;
        }
        shouldPersistResolution(locator, opts) {
          const resolver = this.getResolverByLocator(locator, opts);
          return resolver.shouldPersistResolution(locator, opts);
        }
        bindDescriptor(descriptor, fromLocator, opts) {
          const resolver = this.getResolverByDescriptor(descriptor, opts);
          return resolver.bindDescriptor(descriptor, fromLocator, opts);
        }
        getResolutionDependencies(descriptor, opts) {
          const resolver = this.getResolverByDescriptor(descriptor, opts);
          return resolver.getResolutionDependencies(descriptor, opts);
        }
        async getCandidates(descriptor, dependencies, opts) {
          const resolver = this.getResolverByDescriptor(descriptor, opts);
          return await resolver.getCandidates(descriptor, dependencies, opts);
        }
        async getSatisfying(descriptor, dependencies, locators, opts) {
          const resolver = this.getResolverByDescriptor(descriptor, opts);
          return resolver.getSatisfying(descriptor, dependencies, locators, opts);
        }
        async resolve(locator, opts) {
          const resolver = this.getResolverByLocator(locator, opts);
          return await resolver.resolve(locator, opts);
        }
        tryResolverByDescriptor(descriptor, opts) {
          const resolver = this.resolvers.find((resolver2) => resolver2.supportsDescriptor(descriptor, opts));
          if (!resolver)
            return null;
          return resolver;
        }
        getResolverByDescriptor(descriptor, opts) {
          const resolver = this.resolvers.find((resolver2) => resolver2.supportsDescriptor(descriptor, opts));
          if (!resolver)
            throw new Error(`${structUtils.prettyDescriptor(opts.project.configuration, descriptor)} isn't supported by any available resolver`);
          return resolver;
        }
        tryResolverByLocator(locator, opts) {
          const resolver = this.resolvers.find((resolver2) => resolver2.supportsLocator(locator, opts));
          if (!resolver)
            return null;
          return resolver;
        }
        getResolverByLocator(locator, opts) {
          const resolver = this.resolvers.find((resolver2) => resolver2.supportsLocator(locator, opts));
          if (!resolver)
            throw new Error(`${structUtils.prettyLocator(opts.project.configuration, locator)} isn't supported by any available resolver`);
          return resolver;
        }
      };
      exports22.MultiResolver = MultiResolver;
    }
  });
  var require_VirtualFetcher = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/VirtualFetcher.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.VirtualFetcher = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var fslib_12 = require_lib();
      var structUtils = tslib_12.__importStar(require_structUtils());
      var VirtualFetcher = class {
        supports(locator) {
          if (!locator.reference.startsWith(`virtual:`))
            return false;
          return true;
        }
        getLocalPath(locator, opts) {
          const splitPoint = locator.reference.indexOf(`#`);
          if (splitPoint === -1)
            throw new Error(`Invalid virtual package reference`);
          const nextReference = locator.reference.slice(splitPoint + 1);
          const nextLocator = structUtils.makeLocator(locator, nextReference);
          return opts.fetcher.getLocalPath(nextLocator, opts);
        }
        async fetch(locator, opts) {
          const splitPoint = locator.reference.indexOf(`#`);
          if (splitPoint === -1)
            throw new Error(`Invalid virtual package reference`);
          const nextReference = locator.reference.slice(splitPoint + 1);
          const nextLocator = structUtils.makeLocator(locator, nextReference);
          const parentFetch = await opts.fetcher.fetch(nextLocator, opts);
          return await this.ensureVirtualLink(locator, parentFetch, opts);
        }
        getLocatorFilename(locator) {
          return structUtils.slugifyLocator(locator);
        }
        async ensureVirtualLink(locator, sourceFetch, opts) {
          const to = sourceFetch.packageFs.getRealPath();
          const virtualFolder = opts.project.configuration.get(`virtualFolder`);
          const virtualName = this.getLocatorFilename(locator);
          const virtualPath = fslib_12.VirtualFS.makeVirtualPath(virtualFolder, virtualName, to);
          const aliasFs = new fslib_12.AliasFS(virtualPath, { baseFs: sourceFetch.packageFs, pathUtils: fslib_12.ppath });
          return { ...sourceFetch, packageFs: aliasFs };
        }
      };
      exports22.VirtualFetcher = VirtualFetcher;
    }
  });
  var require_VirtualResolver = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/VirtualResolver.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.VirtualResolver = undefined;
      var VirtualResolver = class _VirtualResolver {
        static isVirtualDescriptor(descriptor) {
          if (!descriptor.range.startsWith(_VirtualResolver.protocol))
            return false;
          return true;
        }
        static isVirtualLocator(locator) {
          if (!locator.reference.startsWith(_VirtualResolver.protocol))
            return false;
          return true;
        }
        supportsDescriptor(descriptor, opts) {
          return _VirtualResolver.isVirtualDescriptor(descriptor);
        }
        supportsLocator(locator, opts) {
          return _VirtualResolver.isVirtualLocator(locator);
        }
        shouldPersistResolution(locator, opts) {
          return false;
        }
        bindDescriptor(descriptor, locator, opts) {
          throw new Error(`Assertion failed: calling "bindDescriptor" on a virtual descriptor is unsupported`);
        }
        getResolutionDependencies(descriptor, opts) {
          throw new Error(`Assertion failed: calling "getResolutionDependencies" on a virtual descriptor is unsupported`);
        }
        async getCandidates(descriptor, dependencies, opts) {
          throw new Error(`Assertion failed: calling "getCandidates" on a virtual descriptor is unsupported`);
        }
        async getSatisfying(descriptor, dependencies, candidates, opts) {
          throw new Error(`Assertion failed: calling "getSatisfying" on a virtual descriptor is unsupported`);
        }
        async resolve(locator, opts) {
          throw new Error(`Assertion failed: calling "resolve" on a virtual locator is unsupported`);
        }
      };
      exports22.VirtualResolver = VirtualResolver;
      VirtualResolver.protocol = `virtual:`;
    }
  });
  var require_WorkspaceFetcher = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/WorkspaceFetcher.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.WorkspaceFetcher = undefined;
      var fslib_12 = require_lib();
      var WorkspaceResolver_1 = require_WorkspaceResolver();
      var WorkspaceFetcher = class {
        supports(locator) {
          if (!locator.reference.startsWith(WorkspaceResolver_1.WorkspaceResolver.protocol))
            return false;
          return true;
        }
        getLocalPath(locator, opts) {
          return this.getWorkspace(locator, opts).cwd;
        }
        async fetch(locator, opts) {
          const sourcePath = this.getWorkspace(locator, opts).cwd;
          return { packageFs: new fslib_12.CwdFS(sourcePath), prefixPath: fslib_12.PortablePath.dot, localPath: sourcePath };
        }
        getWorkspace(locator, opts) {
          return opts.project.getWorkspaceByCwd(locator.reference.slice(WorkspaceResolver_1.WorkspaceResolver.protocol.length));
        }
      };
      exports22.WorkspaceFetcher = WorkspaceFetcher;
    }
  });
  var require_configUtils = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/configUtils.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.RESOLVED_RC_FILE = undefined;
      exports22.resolveRcFiles = resolveRcFiles;
      exports22.getValue = getValue;
      exports22.getValueByTree = getValueByTree;
      exports22.getSource = getSource;
      var findLastIndex = (array, predicate, thisArg) => {
        const reversedArray = [...array];
        reversedArray.reverse();
        return reversedArray.findIndex(predicate, thisArg);
      };
      function isObject(data) {
        return typeof data === `object` && data !== null && !Array.isArray(data);
      }
      var ValueType;
      (function(ValueType2) {
        ValueType2[ValueType2["Object"] = 0] = "Object";
        ValueType2[ValueType2["Array"] = 1] = "Array";
        ValueType2[ValueType2["Literal"] = 2] = "Literal";
        ValueType2[ValueType2["Undefined"] = 3] = "Undefined";
      })(ValueType || (ValueType = {}));
      function getValueType(data) {
        if (typeof data === `undefined`)
          return ValueType.Undefined;
        if (isObject(data))
          return ValueType.Object;
        if (Array.isArray(data))
          return ValueType.Array;
        return ValueType.Literal;
      }
      function hasProperty(data, key) {
        return Object.hasOwn(data, key);
      }
      function isConflictMarker(data) {
        return isObject(data) && hasProperty(data, `onConflict`) && typeof data.onConflict === `string`;
      }
      function normalizeValue(data) {
        if (typeof data === `undefined`)
          return { onConflict: `default`, value: data };
        if (!isConflictMarker(data))
          return { onConflict: `default`, value: data };
        if (hasProperty(data, `value`))
          return data;
        const { onConflict, ...value } = data;
        return { onConflict, value };
      }
      function getNormalized(data, key) {
        const rawValue = isObject(data) && hasProperty(data, key) ? data[key] : undefined;
        return normalizeValue(rawValue);
      }
      exports22.RESOLVED_RC_FILE = Symbol();
      function resolvedRcFile(id, value) {
        return [id, value, exports22.RESOLVED_RC_FILE];
      }
      function isResolvedRcFile(value) {
        if (!Array.isArray(value))
          return false;
        return value[2] === exports22.RESOLVED_RC_FILE;
      }
      function attachIdToTree(data, id) {
        if (isObject(data)) {
          const result2 = {};
          for (const key of Object.keys(data))
            result2[key] = attachIdToTree(data[key], id);
          return resolvedRcFile(id, result2);
        }
        if (Array.isArray(data))
          return resolvedRcFile(id, data.map((item) => attachIdToTree(item, id)));
        return resolvedRcFile(id, data);
      }
      function resolveValueAt(rcFiles, path2, key, firstVisiblePosition, resolveAtPosition) {
        let expectedValueType;
        const relevantValues = [];
        let lastRelevantPosition = resolveAtPosition;
        let currentResetPosition = 0;
        for (let t = resolveAtPosition - 1;t >= firstVisiblePosition; --t) {
          const [id, data] = rcFiles[t];
          const { onConflict, value } = getNormalized(data, key);
          const valueType = getValueType(value);
          if (valueType === ValueType.Undefined)
            continue;
          expectedValueType ??= valueType;
          if (valueType !== expectedValueType || onConflict === `hardReset`) {
            currentResetPosition = lastRelevantPosition;
            break;
          }
          if (valueType === ValueType.Literal)
            return resolvedRcFile(id, value);
          relevantValues.unshift([id, value]);
          if (onConflict === `reset`) {
            currentResetPosition = t;
            break;
          }
          if (onConflict === `extend` && t === firstVisiblePosition)
            firstVisiblePosition = 0;
          lastRelevantPosition = t;
        }
        if (typeof expectedValueType === `undefined`)
          return null;
        const source = relevantValues.map(([relevantId]) => relevantId).join(`, `);
        switch (expectedValueType) {
          case ValueType.Array:
            return resolvedRcFile(source, new Array().concat(...relevantValues.map(([id, value]) => value.map((item) => attachIdToTree(item, id)))));
          case ValueType.Object: {
            const conglomerate = Object.assign({}, ...relevantValues.map(([, value]) => value));
            const keys = Object.keys(conglomerate);
            const result2 = {};
            const nextIterationValues = rcFiles.map(([id, data]) => {
              return [id, getNormalized(data, key).value];
            });
            const hardResetLocation = findLastIndex(nextIterationValues, ([_, value]) => {
              const valueType = getValueType(value);
              return valueType !== ValueType.Object && valueType !== ValueType.Undefined;
            });
            if (hardResetLocation !== -1) {
              const slice = nextIterationValues.slice(hardResetLocation + 1);
              for (const key2 of keys) {
                result2[key2] = resolveValueAt(slice, path2, key2, 0, slice.length);
              }
            } else {
              for (const key2 of keys) {
                result2[key2] = resolveValueAt(nextIterationValues, path2, key2, currentResetPosition, nextIterationValues.length);
              }
            }
            return resolvedRcFile(source, result2);
          }
          default:
            throw new Error(`Assertion failed: Non-extendable value type`);
        }
      }
      function resolveRcFiles(rcFiles) {
        return resolveValueAt(rcFiles.map(([source, data]) => [source, { [`.`]: data }]), [], `.`, 0, rcFiles.length);
      }
      function getValue(value) {
        return isResolvedRcFile(value) ? value[1] : value;
      }
      function getValueByTree(valueBase) {
        const value = isResolvedRcFile(valueBase) ? valueBase[1] : valueBase;
        if (Array.isArray(value))
          return value.map((v) => getValueByTree(v));
        if (isObject(value)) {
          const result2 = {};
          for (const [propKey, propValue] of Object.entries(value))
            result2[propKey] = getValueByTree(propValue);
          return result2;
        }
        return value;
      }
      function getSource(value) {
        return isResolvedRcFile(value) ? value[0] : null;
      }
    }
  });
  var require_folderUtils = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/folderUtils.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.getDefaultGlobalFolder = getDefaultGlobalFolder;
      exports22.getHomeFolder = getHomeFolder;
      exports22.isFolderInside = isFolderInside;
      var fslib_12 = require_lib();
      var os_1 = __require("os");
      function getDefaultGlobalFolder() {
        if (process.platform === `win32`) {
          const base = fslib_12.npath.toPortablePath(process.env.LOCALAPPDATA || fslib_12.npath.join((0, os_1.homedir)(), `AppData`, `Local`));
          return fslib_12.ppath.resolve(base, `Yarn/Berry`);
        }
        if (process.env.XDG_DATA_HOME) {
          const base = fslib_12.npath.toPortablePath(process.env.XDG_DATA_HOME);
          return fslib_12.ppath.resolve(base, `yarn/berry`);
        }
        return fslib_12.ppath.resolve(getHomeFolder(), `.yarn/berry`);
      }
      function getHomeFolder() {
        return fslib_12.npath.toPortablePath((0, os_1.homedir)() || `/usr/local/share`);
      }
      function isFolderInside(target, parent) {
        const relative = fslib_12.ppath.relative(parent, target);
        return relative && !relative.startsWith(`..`) && !fslib_12.ppath.isAbsolute(relative);
      }
    }
  });
  var require_tunnel = __commonJS2({
    "../../node_modules/.pnpm/tunnel@0.0.6/node_modules/tunnel/lib/tunnel.js"(exports22) {
      var net = __require("net");
      var tls = __require("tls");
      var http = __require("http");
      var https = __require("https");
      var events = __require("events");
      var assert = __require("assert");
      var util = __require("util");
      exports22.httpOverHttp = httpOverHttp;
      exports22.httpsOverHttp = httpsOverHttp;
      exports22.httpOverHttps = httpOverHttps;
      exports22.httpsOverHttps = httpsOverHttps;
      function httpOverHttp(options) {
        var agent = new TunnelingAgent(options);
        agent.request = http.request;
        return agent;
      }
      function httpsOverHttp(options) {
        var agent = new TunnelingAgent(options);
        agent.request = http.request;
        agent.createSocket = createSecureSocket;
        agent.defaultPort = 443;
        return agent;
      }
      function httpOverHttps(options) {
        var agent = new TunnelingAgent(options);
        agent.request = https.request;
        return agent;
      }
      function httpsOverHttps(options) {
        var agent = new TunnelingAgent(options);
        agent.request = https.request;
        agent.createSocket = createSecureSocket;
        agent.defaultPort = 443;
        return agent;
      }
      function TunnelingAgent(options) {
        var self2 = this;
        self2.options = options || {};
        self2.proxyOptions = self2.options.proxy || {};
        self2.maxSockets = self2.options.maxSockets || http.Agent.defaultMaxSockets;
        self2.requests = [];
        self2.sockets = [];
        self2.on("free", function onFree(socket, host, port, localAddress) {
          var options2 = toOptions(host, port, localAddress);
          for (var i = 0, len = self2.requests.length;i < len; ++i) {
            var pending = self2.requests[i];
            if (pending.host === options2.host && pending.port === options2.port) {
              self2.requests.splice(i, 1);
              pending.request.onSocket(socket);
              return;
            }
          }
          socket.destroy();
          self2.removeSocket(socket);
        });
      }
      util.inherits(TunnelingAgent, events.EventEmitter);
      TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
        var self2 = this;
        var options = mergeOptions({ request: req }, self2.options, toOptions(host, port, localAddress));
        if (self2.sockets.length >= this.maxSockets) {
          self2.requests.push(options);
          return;
        }
        self2.createSocket(options, function(socket) {
          socket.on("free", onFree);
          socket.on("close", onCloseOrRemove);
          socket.on("agentRemove", onCloseOrRemove);
          req.onSocket(socket);
          function onFree() {
            self2.emit("free", socket, options);
          }
          function onCloseOrRemove(err) {
            self2.removeSocket(socket);
            socket.removeListener("free", onFree);
            socket.removeListener("close", onCloseOrRemove);
            socket.removeListener("agentRemove", onCloseOrRemove);
          }
        });
      };
      TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
        var self2 = this;
        var placeholder = {};
        self2.sockets.push(placeholder);
        var connectOptions = mergeOptions({}, self2.proxyOptions, {
          method: "CONNECT",
          path: options.host + ":" + options.port,
          agent: false,
          headers: {
            host: options.host + ":" + options.port
          }
        });
        if (options.localAddress) {
          connectOptions.localAddress = options.localAddress;
        }
        if (connectOptions.proxyAuth) {
          connectOptions.headers = connectOptions.headers || {};
          connectOptions.headers["Proxy-Authorization"] = "Basic " + new Buffer(connectOptions.proxyAuth).toString("base64");
        }
        debug("making CONNECT request");
        var connectReq = self2.request(connectOptions);
        connectReq.useChunkedEncodingByDefault = false;
        connectReq.once("response", onResponse);
        connectReq.once("upgrade", onUpgrade);
        connectReq.once("connect", onConnect);
        connectReq.once("error", onError);
        connectReq.end();
        function onResponse(res) {
          res.upgrade = true;
        }
        function onUpgrade(res, socket, head) {
          process.nextTick(function() {
            onConnect(res, socket, head);
          });
        }
        function onConnect(res, socket, head) {
          connectReq.removeAllListeners();
          socket.removeAllListeners();
          if (res.statusCode !== 200) {
            debug("tunneling socket could not be established, statusCode=%d", res.statusCode);
            socket.destroy();
            var error = new Error("tunneling socket could not be established, statusCode=" + res.statusCode);
            error.code = "ECONNRESET";
            options.request.emit("error", error);
            self2.removeSocket(placeholder);
            return;
          }
          if (head.length > 0) {
            debug("got illegal response body from proxy");
            socket.destroy();
            var error = new Error("got illegal response body from proxy");
            error.code = "ECONNRESET";
            options.request.emit("error", error);
            self2.removeSocket(placeholder);
            return;
          }
          debug("tunneling connection has established");
          self2.sockets[self2.sockets.indexOf(placeholder)] = socket;
          return cb(socket);
        }
        function onError(cause) {
          connectReq.removeAllListeners();
          debug(`tunneling socket could not be established, cause=%s
`, cause.message, cause.stack);
          var error = new Error("tunneling socket could not be established, cause=" + cause.message);
          error.code = "ECONNRESET";
          options.request.emit("error", error);
          self2.removeSocket(placeholder);
        }
      };
      TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
        var pos = this.sockets.indexOf(socket);
        if (pos === -1) {
          return;
        }
        this.sockets.splice(pos, 1);
        var pending = this.requests.shift();
        if (pending) {
          this.createSocket(pending, function(socket2) {
            pending.request.onSocket(socket2);
          });
        }
      };
      function createSecureSocket(options, cb) {
        var self2 = this;
        TunnelingAgent.prototype.createSocket.call(self2, options, function(socket) {
          var hostHeader = options.request.getHeader("host");
          var tlsOptions = mergeOptions({}, self2.options, {
            socket,
            servername: hostHeader ? hostHeader.replace(/:.*$/, "") : options.host
          });
          var secureSocket = tls.connect(0, tlsOptions);
          self2.sockets[self2.sockets.indexOf(socket)] = secureSocket;
          cb(secureSocket);
        });
      }
      function toOptions(host, port, localAddress) {
        if (typeof host === "string") {
          return {
            host,
            port,
            localAddress
          };
        }
        return host;
      }
      function mergeOptions(target) {
        for (var i = 1, len = arguments.length;i < len; ++i) {
          var overrides = arguments[i];
          if (typeof overrides === "object") {
            var keys = Object.keys(overrides);
            for (var j = 0, keyLen = keys.length;j < keyLen; ++j) {
              var k = keys[j];
              if (overrides[k] !== undefined) {
                target[k] = overrides[k];
              }
            }
          }
        }
        return target;
      }
      var debug;
      if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
        debug = function() {
          var args = Array.prototype.slice.call(arguments);
          if (typeof args[0] === "string") {
            args[0] = "TUNNEL: " + args[0];
          } else {
            args.unshift("TUNNEL:");
          }
          console.error.apply(console, args);
        };
      } else {
        debug = function() {
        };
      }
      exports22.debug = debug;
    }
  });
  var require_tunnel2 = __commonJS2({
    "../../node_modules/.pnpm/tunnel@0.0.6/node_modules/tunnel/index.js"(exports22, module22) {
      module22.exports = require_tunnel();
    }
  });
  var require_dist = __commonJS2({
    "../../node_modules/.pnpm/@sindresorhus+is@4.6.0/node_modules/@sindresorhus/is/dist/index.js"(exports22, module22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var typedArrayTypeNames = [
        "Int8Array",
        "Uint8Array",
        "Uint8ClampedArray",
        "Int16Array",
        "Uint16Array",
        "Int32Array",
        "Uint32Array",
        "Float32Array",
        "Float64Array",
        "BigInt64Array",
        "BigUint64Array"
      ];
      function isTypedArrayName(name) {
        return typedArrayTypeNames.includes(name);
      }
      var objectTypeNames = [
        "Function",
        "Generator",
        "AsyncGenerator",
        "GeneratorFunction",
        "AsyncGeneratorFunction",
        "AsyncFunction",
        "Observable",
        "Array",
        "Buffer",
        "Blob",
        "Object",
        "RegExp",
        "Date",
        "Error",
        "Map",
        "Set",
        "WeakMap",
        "WeakSet",
        "ArrayBuffer",
        "SharedArrayBuffer",
        "DataView",
        "Promise",
        "URL",
        "FormData",
        "URLSearchParams",
        "HTMLElement",
        ...typedArrayTypeNames
      ];
      function isObjectTypeName(name) {
        return objectTypeNames.includes(name);
      }
      var primitiveTypeNames = [
        "null",
        "undefined",
        "string",
        "number",
        "bigint",
        "boolean",
        "symbol"
      ];
      function isPrimitiveTypeName(name) {
        return primitiveTypeNames.includes(name);
      }
      function isOfType(type) {
        return (value) => typeof value === type;
      }
      var { toString } = Object.prototype;
      var getObjectType = (value) => {
        const objectTypeName = toString.call(value).slice(8, -1);
        if (/HTML\w+Element/.test(objectTypeName) && is.domElement(value)) {
          return "HTMLElement";
        }
        if (isObjectTypeName(objectTypeName)) {
          return objectTypeName;
        }
        return;
      };
      var isObjectOfType = (type) => (value) => getObjectType(value) === type;
      function is(value) {
        if (value === null) {
          return "null";
        }
        switch (typeof value) {
          case "undefined":
            return "undefined";
          case "string":
            return "string";
          case "number":
            return "number";
          case "boolean":
            return "boolean";
          case "function":
            return "Function";
          case "bigint":
            return "bigint";
          case "symbol":
            return "symbol";
          default:
        }
        if (is.observable(value)) {
          return "Observable";
        }
        if (is.array(value)) {
          return "Array";
        }
        if (is.buffer(value)) {
          return "Buffer";
        }
        const tagType = getObjectType(value);
        if (tagType) {
          return tagType;
        }
        if (value instanceof String || value instanceof Boolean || value instanceof Number) {
          throw new TypeError("Please don't use object wrappers for primitive types");
        }
        return "Object";
      }
      is.undefined = isOfType("undefined");
      is.string = isOfType("string");
      var isNumberType = isOfType("number");
      is.number = (value) => isNumberType(value) && !is.nan(value);
      is.bigint = isOfType("bigint");
      is.function_ = isOfType("function");
      is.null_ = (value) => value === null;
      is.class_ = (value) => is.function_(value) && value.toString().startsWith("class ");
      is.boolean = (value) => value === true || value === false;
      is.symbol = isOfType("symbol");
      is.numericString = (value) => is.string(value) && !is.emptyStringOrWhitespace(value) && !Number.isNaN(Number(value));
      is.array = (value, assertion) => {
        if (!Array.isArray(value)) {
          return false;
        }
        if (!is.function_(assertion)) {
          return true;
        }
        return value.every(assertion);
      };
      is.buffer = (value) => {
        var _a, _b, _c, _d;
        return (_d = (_c = (_b = (_a = value) === null || _a === undefined ? undefined : _a.constructor) === null || _b === undefined ? undefined : _b.isBuffer) === null || _c === undefined ? undefined : _c.call(_b, value)) !== null && _d !== undefined ? _d : false;
      };
      is.blob = (value) => isObjectOfType("Blob")(value);
      is.nullOrUndefined = (value) => is.null_(value) || is.undefined(value);
      is.object = (value) => !is.null_(value) && (typeof value === "object" || is.function_(value));
      is.iterable = (value) => {
        var _a;
        return is.function_((_a = value) === null || _a === undefined ? undefined : _a[Symbol.iterator]);
      };
      is.asyncIterable = (value) => {
        var _a;
        return is.function_((_a = value) === null || _a === undefined ? undefined : _a[Symbol.asyncIterator]);
      };
      is.generator = (value) => {
        var _a, _b;
        return is.iterable(value) && is.function_((_a = value) === null || _a === undefined ? undefined : _a.next) && is.function_((_b = value) === null || _b === undefined ? undefined : _b.throw);
      };
      is.asyncGenerator = (value) => is.asyncIterable(value) && is.function_(value.next) && is.function_(value.throw);
      is.nativePromise = (value) => isObjectOfType("Promise")(value);
      var hasPromiseAPI = (value) => {
        var _a, _b;
        return is.function_((_a = value) === null || _a === undefined ? undefined : _a.then) && is.function_((_b = value) === null || _b === undefined ? undefined : _b.catch);
      };
      is.promise = (value) => is.nativePromise(value) || hasPromiseAPI(value);
      is.generatorFunction = isObjectOfType("GeneratorFunction");
      is.asyncGeneratorFunction = (value) => getObjectType(value) === "AsyncGeneratorFunction";
      is.asyncFunction = (value) => getObjectType(value) === "AsyncFunction";
      is.boundFunction = (value) => is.function_(value) && !value.hasOwnProperty("prototype");
      is.regExp = isObjectOfType("RegExp");
      is.date = isObjectOfType("Date");
      is.error = isObjectOfType("Error");
      is.map = (value) => isObjectOfType("Map")(value);
      is.set = (value) => isObjectOfType("Set")(value);
      is.weakMap = (value) => isObjectOfType("WeakMap")(value);
      is.weakSet = (value) => isObjectOfType("WeakSet")(value);
      is.int8Array = isObjectOfType("Int8Array");
      is.uint8Array = isObjectOfType("Uint8Array");
      is.uint8ClampedArray = isObjectOfType("Uint8ClampedArray");
      is.int16Array = isObjectOfType("Int16Array");
      is.uint16Array = isObjectOfType("Uint16Array");
      is.int32Array = isObjectOfType("Int32Array");
      is.uint32Array = isObjectOfType("Uint32Array");
      is.float32Array = isObjectOfType("Float32Array");
      is.float64Array = isObjectOfType("Float64Array");
      is.bigInt64Array = isObjectOfType("BigInt64Array");
      is.bigUint64Array = isObjectOfType("BigUint64Array");
      is.arrayBuffer = isObjectOfType("ArrayBuffer");
      is.sharedArrayBuffer = isObjectOfType("SharedArrayBuffer");
      is.dataView = isObjectOfType("DataView");
      is.enumCase = (value, targetEnum) => Object.values(targetEnum).includes(value);
      is.directInstanceOf = (instance, class_) => Object.getPrototypeOf(instance) === class_.prototype;
      is.urlInstance = (value) => isObjectOfType("URL")(value);
      is.urlString = (value) => {
        if (!is.string(value)) {
          return false;
        }
        try {
          new URL(value);
          return true;
        } catch (_a) {
          return false;
        }
      };
      is.truthy = (value) => Boolean(value);
      is.falsy = (value) => !value;
      is.nan = (value) => Number.isNaN(value);
      is.primitive = (value) => is.null_(value) || isPrimitiveTypeName(typeof value);
      is.integer = (value) => Number.isInteger(value);
      is.safeInteger = (value) => Number.isSafeInteger(value);
      is.plainObject = (value) => {
        if (toString.call(value) !== "[object Object]") {
          return false;
        }
        const prototype = Object.getPrototypeOf(value);
        return prototype === null || prototype === Object.getPrototypeOf({});
      };
      is.typedArray = (value) => isTypedArrayName(getObjectType(value));
      var isValidLength = (value) => is.safeInteger(value) && value >= 0;
      is.arrayLike = (value) => !is.nullOrUndefined(value) && !is.function_(value) && isValidLength(value.length);
      is.inRange = (value, range) => {
        if (is.number(range)) {
          return value >= Math.min(0, range) && value <= Math.max(range, 0);
        }
        if (is.array(range) && range.length === 2) {
          return value >= Math.min(...range) && value <= Math.max(...range);
        }
        throw new TypeError(`Invalid range: ${JSON.stringify(range)}`);
      };
      var NODE_TYPE_ELEMENT = 1;
      var DOM_PROPERTIES_TO_CHECK = [
        "innerHTML",
        "ownerDocument",
        "style",
        "attributes",
        "nodeValue"
      ];
      is.domElement = (value) => {
        return is.object(value) && value.nodeType === NODE_TYPE_ELEMENT && is.string(value.nodeName) && !is.plainObject(value) && DOM_PROPERTIES_TO_CHECK.every((property) => (property in value));
      };
      is.observable = (value) => {
        var _a, _b, _c, _d;
        if (!value) {
          return false;
        }
        if (value === ((_b = (_a = value)[Symbol.observable]) === null || _b === undefined ? undefined : _b.call(_a))) {
          return true;
        }
        if (value === ((_d = (_c = value)["@@observable"]) === null || _d === undefined ? undefined : _d.call(_c))) {
          return true;
        }
        return false;
      };
      is.nodeStream = (value) => is.object(value) && is.function_(value.pipe) && !is.observable(value);
      is.infinite = (value) => value === Infinity || value === -Infinity;
      var isAbsoluteMod2 = (remainder) => (value) => is.integer(value) && Math.abs(value % 2) === remainder;
      is.evenInteger = isAbsoluteMod2(0);
      is.oddInteger = isAbsoluteMod2(1);
      is.emptyArray = (value) => is.array(value) && value.length === 0;
      is.nonEmptyArray = (value) => is.array(value) && value.length > 0;
      is.emptyString = (value) => is.string(value) && value.length === 0;
      var isWhiteSpaceString = (value) => is.string(value) && !/\S/.test(value);
      is.emptyStringOrWhitespace = (value) => is.emptyString(value) || isWhiteSpaceString(value);
      is.nonEmptyString = (value) => is.string(value) && value.length > 0;
      is.nonEmptyStringAndNotWhitespace = (value) => is.string(value) && !is.emptyStringOrWhitespace(value);
      is.emptyObject = (value) => is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length === 0;
      is.nonEmptyObject = (value) => is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length > 0;
      is.emptySet = (value) => is.set(value) && value.size === 0;
      is.nonEmptySet = (value) => is.set(value) && value.size > 0;
      is.emptyMap = (value) => is.map(value) && value.size === 0;
      is.nonEmptyMap = (value) => is.map(value) && value.size > 0;
      is.propertyKey = (value) => is.any([is.string, is.number, is.symbol], value);
      is.formData = (value) => isObjectOfType("FormData")(value);
      is.urlSearchParams = (value) => isObjectOfType("URLSearchParams")(value);
      var predicateOnArray = (method, predicate, values) => {
        if (!is.function_(predicate)) {
          throw new TypeError(`Invalid predicate: ${JSON.stringify(predicate)}`);
        }
        if (values.length === 0) {
          throw new TypeError("Invalid number of values");
        }
        return method.call(values, predicate);
      };
      is.any = (predicate, ...values) => {
        const predicates = is.array(predicate) ? predicate : [predicate];
        return predicates.some((singlePredicate) => predicateOnArray(Array.prototype.some, singlePredicate, values));
      };
      is.all = (predicate, ...values) => predicateOnArray(Array.prototype.every, predicate, values);
      var assertType = (condition, description, value, options = {}) => {
        if (!condition) {
          const { multipleValues } = options;
          const valuesMessage = multipleValues ? `received values of types ${[
            ...new Set(value.map((singleValue) => `\`${is(singleValue)}\``))
          ].join(", ")}` : `received value of type \`${is(value)}\``;
          throw new TypeError(`Expected value which is \`${description}\`, ${valuesMessage}.`);
        }
      };
      exports22.assert = {
        undefined: (value) => assertType(is.undefined(value), "undefined", value),
        string: (value) => assertType(is.string(value), "string", value),
        number: (value) => assertType(is.number(value), "number", value),
        bigint: (value) => assertType(is.bigint(value), "bigint", value),
        function_: (value) => assertType(is.function_(value), "Function", value),
        null_: (value) => assertType(is.null_(value), "null", value),
        class_: (value) => assertType(is.class_(value), "Class", value),
        boolean: (value) => assertType(is.boolean(value), "boolean", value),
        symbol: (value) => assertType(is.symbol(value), "symbol", value),
        numericString: (value) => assertType(is.numericString(value), "string with a number", value),
        array: (value, assertion) => {
          const assert = assertType;
          assert(is.array(value), "Array", value);
          if (assertion) {
            value.forEach(assertion);
          }
        },
        buffer: (value) => assertType(is.buffer(value), "Buffer", value),
        blob: (value) => assertType(is.blob(value), "Blob", value),
        nullOrUndefined: (value) => assertType(is.nullOrUndefined(value), "null or undefined", value),
        object: (value) => assertType(is.object(value), "Object", value),
        iterable: (value) => assertType(is.iterable(value), "Iterable", value),
        asyncIterable: (value) => assertType(is.asyncIterable(value), "AsyncIterable", value),
        generator: (value) => assertType(is.generator(value), "Generator", value),
        asyncGenerator: (value) => assertType(is.asyncGenerator(value), "AsyncGenerator", value),
        nativePromise: (value) => assertType(is.nativePromise(value), "native Promise", value),
        promise: (value) => assertType(is.promise(value), "Promise", value),
        generatorFunction: (value) => assertType(is.generatorFunction(value), "GeneratorFunction", value),
        asyncGeneratorFunction: (value) => assertType(is.asyncGeneratorFunction(value), "AsyncGeneratorFunction", value),
        asyncFunction: (value) => assertType(is.asyncFunction(value), "AsyncFunction", value),
        boundFunction: (value) => assertType(is.boundFunction(value), "Function", value),
        regExp: (value) => assertType(is.regExp(value), "RegExp", value),
        date: (value) => assertType(is.date(value), "Date", value),
        error: (value) => assertType(is.error(value), "Error", value),
        map: (value) => assertType(is.map(value), "Map", value),
        set: (value) => assertType(is.set(value), "Set", value),
        weakMap: (value) => assertType(is.weakMap(value), "WeakMap", value),
        weakSet: (value) => assertType(is.weakSet(value), "WeakSet", value),
        int8Array: (value) => assertType(is.int8Array(value), "Int8Array", value),
        uint8Array: (value) => assertType(is.uint8Array(value), "Uint8Array", value),
        uint8ClampedArray: (value) => assertType(is.uint8ClampedArray(value), "Uint8ClampedArray", value),
        int16Array: (value) => assertType(is.int16Array(value), "Int16Array", value),
        uint16Array: (value) => assertType(is.uint16Array(value), "Uint16Array", value),
        int32Array: (value) => assertType(is.int32Array(value), "Int32Array", value),
        uint32Array: (value) => assertType(is.uint32Array(value), "Uint32Array", value),
        float32Array: (value) => assertType(is.float32Array(value), "Float32Array", value),
        float64Array: (value) => assertType(is.float64Array(value), "Float64Array", value),
        bigInt64Array: (value) => assertType(is.bigInt64Array(value), "BigInt64Array", value),
        bigUint64Array: (value) => assertType(is.bigUint64Array(value), "BigUint64Array", value),
        arrayBuffer: (value) => assertType(is.arrayBuffer(value), "ArrayBuffer", value),
        sharedArrayBuffer: (value) => assertType(is.sharedArrayBuffer(value), "SharedArrayBuffer", value),
        dataView: (value) => assertType(is.dataView(value), "DataView", value),
        enumCase: (value, targetEnum) => assertType(is.enumCase(value, targetEnum), "EnumCase", value),
        urlInstance: (value) => assertType(is.urlInstance(value), "URL", value),
        urlString: (value) => assertType(is.urlString(value), "string with a URL", value),
        truthy: (value) => assertType(is.truthy(value), "truthy", value),
        falsy: (value) => assertType(is.falsy(value), "falsy", value),
        nan: (value) => assertType(is.nan(value), "NaN", value),
        primitive: (value) => assertType(is.primitive(value), "primitive", value),
        integer: (value) => assertType(is.integer(value), "integer", value),
        safeInteger: (value) => assertType(is.safeInteger(value), "integer", value),
        plainObject: (value) => assertType(is.plainObject(value), "plain object", value),
        typedArray: (value) => assertType(is.typedArray(value), "TypedArray", value),
        arrayLike: (value) => assertType(is.arrayLike(value), "array-like", value),
        domElement: (value) => assertType(is.domElement(value), "HTMLElement", value),
        observable: (value) => assertType(is.observable(value), "Observable", value),
        nodeStream: (value) => assertType(is.nodeStream(value), "Node.js Stream", value),
        infinite: (value) => assertType(is.infinite(value), "infinite number", value),
        emptyArray: (value) => assertType(is.emptyArray(value), "empty array", value),
        nonEmptyArray: (value) => assertType(is.nonEmptyArray(value), "non-empty array", value),
        emptyString: (value) => assertType(is.emptyString(value), "empty string", value),
        emptyStringOrWhitespace: (value) => assertType(is.emptyStringOrWhitespace(value), "empty string or whitespace", value),
        nonEmptyString: (value) => assertType(is.nonEmptyString(value), "non-empty string", value),
        nonEmptyStringAndNotWhitespace: (value) => assertType(is.nonEmptyStringAndNotWhitespace(value), "non-empty string and not whitespace", value),
        emptyObject: (value) => assertType(is.emptyObject(value), "empty object", value),
        nonEmptyObject: (value) => assertType(is.nonEmptyObject(value), "non-empty object", value),
        emptySet: (value) => assertType(is.emptySet(value), "empty set", value),
        nonEmptySet: (value) => assertType(is.nonEmptySet(value), "non-empty set", value),
        emptyMap: (value) => assertType(is.emptyMap(value), "empty map", value),
        nonEmptyMap: (value) => assertType(is.nonEmptyMap(value), "non-empty map", value),
        propertyKey: (value) => assertType(is.propertyKey(value), "PropertyKey", value),
        formData: (value) => assertType(is.formData(value), "FormData", value),
        urlSearchParams: (value) => assertType(is.urlSearchParams(value), "URLSearchParams", value),
        evenInteger: (value) => assertType(is.evenInteger(value), "even integer", value),
        oddInteger: (value) => assertType(is.oddInteger(value), "odd integer", value),
        directInstanceOf: (instance, class_) => assertType(is.directInstanceOf(instance, class_), "T", instance),
        inRange: (value, range) => assertType(is.inRange(value, range), "in range", value),
        any: (predicate, ...values) => {
          return assertType(is.any(predicate, ...values), "predicate returns truthy for any value", values, { multipleValues: true });
        },
        all: (predicate, ...values) => assertType(is.all(predicate, ...values), "predicate returns truthy for all values", values, { multipleValues: true })
      };
      Object.defineProperties(is, {
        class: {
          value: is.class_
        },
        function: {
          value: is.function_
        },
        null: {
          value: is.null_
        }
      });
      Object.defineProperties(exports22.assert, {
        class: {
          value: exports22.assert.class_
        },
        function: {
          value: exports22.assert.function_
        },
        null: {
          value: exports22.assert.null_
        }
      });
      exports22.default = is;
      module22.exports = is;
      module22.exports.default = is;
      module22.exports.assert = exports22.assert;
    }
  });
  var require_p_cancelable = __commonJS2({
    "../../node_modules/.pnpm/p-cancelable@2.1.1/node_modules/p-cancelable/index.js"(exports22, module22) {
      var CancelError = class extends Error {
        constructor(reason) {
          super(reason || "Promise was canceled");
          this.name = "CancelError";
        }
        get isCanceled() {
          return true;
        }
      };
      var PCancelable = class _PCancelable {
        static fn(userFn) {
          return (...arguments_) => {
            return new _PCancelable((resolve, reject, onCancel) => {
              arguments_.push(onCancel);
              userFn(...arguments_).then(resolve, reject);
            });
          };
        }
        constructor(executor) {
          this._cancelHandlers = [];
          this._isPending = true;
          this._isCanceled = false;
          this._rejectOnCancel = true;
          this._promise = new Promise((resolve, reject) => {
            this._reject = reject;
            const onResolve = (value) => {
              if (!this._isCanceled || !onCancel.shouldReject) {
                this._isPending = false;
                resolve(value);
              }
            };
            const onReject = (error) => {
              this._isPending = false;
              reject(error);
            };
            const onCancel = (handler) => {
              if (!this._isPending) {
                throw new Error("The `onCancel` handler was attached after the promise settled.");
              }
              this._cancelHandlers.push(handler);
            };
            Object.defineProperties(onCancel, {
              shouldReject: {
                get: () => this._rejectOnCancel,
                set: (boolean) => {
                  this._rejectOnCancel = boolean;
                }
              }
            });
            return executor(onResolve, onReject, onCancel);
          });
        }
        then(onFulfilled, onRejected) {
          return this._promise.then(onFulfilled, onRejected);
        }
        catch(onRejected) {
          return this._promise.catch(onRejected);
        }
        finally(onFinally) {
          return this._promise.finally(onFinally);
        }
        cancel(reason) {
          if (!this._isPending || this._isCanceled) {
            return;
          }
          this._isCanceled = true;
          if (this._cancelHandlers.length > 0) {
            try {
              for (const handler of this._cancelHandlers) {
                handler();
              }
            } catch (error) {
              this._reject(error);
              return;
            }
          }
          if (this._rejectOnCancel) {
            this._reject(new CancelError(reason));
          }
        }
        get isCanceled() {
          return this._isCanceled;
        }
      };
      Object.setPrototypeOf(PCancelable.prototype, Promise.prototype);
      module22.exports = PCancelable;
      module22.exports.CancelError = CancelError;
    }
  });
  var require_source2 = __commonJS2({
    "../../node_modules/.pnpm/defer-to-connect@2.0.1/node_modules/defer-to-connect/dist/source/index.js"(exports22, module22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      function isTLSSocket(socket) {
        return socket.encrypted;
      }
      var deferToConnect = (socket, fn) => {
        let listeners;
        if (typeof fn === "function") {
          const connect = fn;
          listeners = { connect };
        } else {
          listeners = fn;
        }
        const hasConnectListener = typeof listeners.connect === "function";
        const hasSecureConnectListener = typeof listeners.secureConnect === "function";
        const hasCloseListener = typeof listeners.close === "function";
        const onConnect = () => {
          if (hasConnectListener) {
            listeners.connect();
          }
          if (isTLSSocket(socket) && hasSecureConnectListener) {
            if (socket.authorized) {
              listeners.secureConnect();
            } else if (!socket.authorizationError) {
              socket.once("secureConnect", listeners.secureConnect);
            }
          }
          if (hasCloseListener) {
            socket.once("close", listeners.close);
          }
        };
        if (socket.writable && !socket.connecting) {
          onConnect();
        } else if (socket.connecting) {
          socket.once("connect", onConnect);
        } else if (socket.destroyed && hasCloseListener) {
          listeners.close(socket._hadError);
        }
      };
      exports22.default = deferToConnect;
      module22.exports = deferToConnect;
      module22.exports.default = deferToConnect;
    }
  });
  var require_source3 = __commonJS2({
    "../../node_modules/.pnpm/@szmarczak+http-timer@4.0.6/node_modules/@szmarczak/http-timer/dist/source/index.js"(exports22, module22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var defer_to_connect_1 = require_source2();
      var util_1 = __require("util");
      var nodejsMajorVersion = Number(process.versions.node.split(".")[0]);
      var timer = (request) => {
        if (request.timings) {
          return request.timings;
        }
        const timings = {
          start: Date.now(),
          socket: undefined,
          lookup: undefined,
          connect: undefined,
          secureConnect: undefined,
          upload: undefined,
          response: undefined,
          end: undefined,
          error: undefined,
          abort: undefined,
          phases: {
            wait: undefined,
            dns: undefined,
            tcp: undefined,
            tls: undefined,
            request: undefined,
            firstByte: undefined,
            download: undefined,
            total: undefined
          }
        };
        request.timings = timings;
        const handleError = (origin) => {
          const emit = origin.emit.bind(origin);
          origin.emit = (event, ...args) => {
            if (event === "error") {
              timings.error = Date.now();
              timings.phases.total = timings.error - timings.start;
              origin.emit = emit;
            }
            return emit(event, ...args);
          };
        };
        handleError(request);
        const onAbort = () => {
          timings.abort = Date.now();
          if (!timings.response || nodejsMajorVersion >= 13) {
            timings.phases.total = Date.now() - timings.start;
          }
        };
        request.prependOnceListener("abort", onAbort);
        const onSocket = (socket) => {
          timings.socket = Date.now();
          timings.phases.wait = timings.socket - timings.start;
          if (util_1.types.isProxy(socket)) {
            return;
          }
          const lookupListener = () => {
            timings.lookup = Date.now();
            timings.phases.dns = timings.lookup - timings.socket;
          };
          socket.prependOnceListener("lookup", lookupListener);
          defer_to_connect_1.default(socket, {
            connect: () => {
              timings.connect = Date.now();
              if (timings.lookup === undefined) {
                socket.removeListener("lookup", lookupListener);
                timings.lookup = timings.connect;
                timings.phases.dns = timings.lookup - timings.socket;
              }
              timings.phases.tcp = timings.connect - timings.lookup;
            },
            secureConnect: () => {
              timings.secureConnect = Date.now();
              timings.phases.tls = timings.secureConnect - timings.connect;
            }
          });
        };
        if (request.socket) {
          onSocket(request.socket);
        } else {
          request.prependOnceListener("socket", onSocket);
        }
        const onUpload = () => {
          var _a;
          timings.upload = Date.now();
          timings.phases.request = timings.upload - ((_a = timings.secureConnect) !== null && _a !== undefined ? _a : timings.connect);
        };
        const writableFinished = () => {
          if (typeof request.writableFinished === "boolean") {
            return request.writableFinished;
          }
          return request.finished && request.outputSize === 0 && (!request.socket || request.socket.writableLength === 0);
        };
        if (writableFinished()) {
          onUpload();
        } else {
          request.prependOnceListener("finish", onUpload);
        }
        request.prependOnceListener("response", (response) => {
          timings.response = Date.now();
          timings.phases.firstByte = timings.response - timings.upload;
          response.timings = timings;
          handleError(response);
          response.prependOnceListener("end", () => {
            timings.end = Date.now();
            timings.phases.download = timings.end - timings.response;
            timings.phases.total = timings.end - timings.start;
          });
          response.prependOnceListener("aborted", onAbort);
        });
        return timings;
      };
      exports22.default = timer;
      module22.exports = timer;
      module22.exports.default = timer;
    }
  });
  var require_source4 = __commonJS2({
    "../../node_modules/.pnpm/cacheable-lookup@5.0.4/node_modules/cacheable-lookup/source/index.js"(exports22, module22) {
      var {
        V4MAPPED,
        ADDRCONFIG,
        ALL,
        promises: {
          Resolver: AsyncResolver
        },
        lookup: dnsLookup
      } = __require("dns");
      var { promisify } = __require("util");
      var os = __require("os");
      var kCacheableLookupCreateConnection = Symbol("cacheableLookupCreateConnection");
      var kCacheableLookupInstance = Symbol("cacheableLookupInstance");
      var kExpires = Symbol("expires");
      var supportsALL = typeof ALL === "number";
      var verifyAgent = (agent) => {
        if (!(agent && typeof agent.createConnection === "function")) {
          throw new Error("Expected an Agent instance as the first argument");
        }
      };
      var map4to6 = (entries) => {
        for (const entry of entries) {
          if (entry.family === 6) {
            continue;
          }
          entry.address = `::ffff:${entry.address}`;
          entry.family = 6;
        }
      };
      var getIfaceInfo = () => {
        let has4 = false;
        let has6 = false;
        for (const device of Object.values(os.networkInterfaces())) {
          for (const iface of device) {
            if (iface.internal) {
              continue;
            }
            if (iface.family === "IPv6") {
              has6 = true;
            } else {
              has4 = true;
            }
            if (has4 && has6) {
              return { has4, has6 };
            }
          }
        }
        return { has4, has6 };
      };
      var isIterable = (map) => {
        return Symbol.iterator in map;
      };
      var ttl = { ttl: true };
      var all = { all: true };
      var CacheableLookup = class {
        constructor({
          cache = /* @__PURE__ */ new Map,
          maxTtl = Infinity,
          fallbackDuration = 3600,
          errorTtl = 0.15,
          resolver = new AsyncResolver,
          lookup = dnsLookup
        } = {}) {
          this.maxTtl = maxTtl;
          this.errorTtl = errorTtl;
          this._cache = cache;
          this._resolver = resolver;
          this._dnsLookup = promisify(lookup);
          if (this._resolver instanceof AsyncResolver) {
            this._resolve4 = this._resolver.resolve4.bind(this._resolver);
            this._resolve6 = this._resolver.resolve6.bind(this._resolver);
          } else {
            this._resolve4 = promisify(this._resolver.resolve4.bind(this._resolver));
            this._resolve6 = promisify(this._resolver.resolve6.bind(this._resolver));
          }
          this._iface = getIfaceInfo();
          this._pending = {};
          this._nextRemovalTime = false;
          this._hostnamesToFallback = /* @__PURE__ */ new Set;
          if (fallbackDuration < 1) {
            this._fallback = false;
          } else {
            this._fallback = true;
            const interval = setInterval(() => {
              this._hostnamesToFallback.clear();
            }, fallbackDuration * 1000);
            if (interval.unref) {
              interval.unref();
            }
          }
          this.lookup = this.lookup.bind(this);
          this.lookupAsync = this.lookupAsync.bind(this);
        }
        set servers(servers) {
          this.clear();
          this._resolver.setServers(servers);
        }
        get servers() {
          return this._resolver.getServers();
        }
        lookup(hostname, options, callback) {
          if (typeof options === "function") {
            callback = options;
            options = {};
          } else if (typeof options === "number") {
            options = {
              family: options
            };
          }
          if (!callback) {
            throw new Error("Callback must be a function.");
          }
          this.lookupAsync(hostname, options).then((result2) => {
            if (options.all) {
              callback(null, result2);
            } else {
              callback(null, result2.address, result2.family, result2.expires, result2.ttl);
            }
          }, callback);
        }
        async lookupAsync(hostname, options = {}) {
          if (typeof options === "number") {
            options = {
              family: options
            };
          }
          let cached = await this.query(hostname);
          if (options.family === 6) {
            const filtered = cached.filter((entry) => entry.family === 6);
            if (options.hints & V4MAPPED) {
              if (supportsALL && options.hints & ALL || filtered.length === 0) {
                map4to6(cached);
              } else {
                cached = filtered;
              }
            } else {
              cached = filtered;
            }
          } else if (options.family === 4) {
            cached = cached.filter((entry) => entry.family === 4);
          }
          if (options.hints & ADDRCONFIG) {
            const { _iface } = this;
            cached = cached.filter((entry) => entry.family === 6 ? _iface.has6 : _iface.has4);
          }
          if (cached.length === 0) {
            const error = new Error(`cacheableLookup ENOTFOUND ${hostname}`);
            error.code = "ENOTFOUND";
            error.hostname = hostname;
            throw error;
          }
          if (options.all) {
            return cached;
          }
          return cached[0];
        }
        async query(hostname) {
          let cached = await this._cache.get(hostname);
          if (!cached) {
            const pending = this._pending[hostname];
            if (pending) {
              cached = await pending;
            } else {
              const newPromise = this.queryAndCache(hostname);
              this._pending[hostname] = newPromise;
              try {
                cached = await newPromise;
              } finally {
                delete this._pending[hostname];
              }
            }
          }
          cached = cached.map((entry) => {
            return { ...entry };
          });
          return cached;
        }
        async _resolve(hostname) {
          const wrap = async (promise) => {
            try {
              return await promise;
            } catch (error) {
              if (error.code === "ENODATA" || error.code === "ENOTFOUND") {
                return [];
              }
              throw error;
            }
          };
          const [A, AAAA] = await Promise.all([
            this._resolve4(hostname, ttl),
            this._resolve6(hostname, ttl)
          ].map((promise) => wrap(promise)));
          let aTtl = 0;
          let aaaaTtl = 0;
          let cacheTtl = 0;
          const now = Date.now();
          for (const entry of A) {
            entry.family = 4;
            entry.expires = now + entry.ttl * 1000;
            aTtl = Math.max(aTtl, entry.ttl);
          }
          for (const entry of AAAA) {
            entry.family = 6;
            entry.expires = now + entry.ttl * 1000;
            aaaaTtl = Math.max(aaaaTtl, entry.ttl);
          }
          if (A.length > 0) {
            if (AAAA.length > 0) {
              cacheTtl = Math.min(aTtl, aaaaTtl);
            } else {
              cacheTtl = aTtl;
            }
          } else {
            cacheTtl = aaaaTtl;
          }
          return {
            entries: [
              ...A,
              ...AAAA
            ],
            cacheTtl
          };
        }
        async _lookup(hostname) {
          try {
            const entries = await this._dnsLookup(hostname, {
              all: true
            });
            return {
              entries,
              cacheTtl: 0
            };
          } catch (_) {
            return {
              entries: [],
              cacheTtl: 0
            };
          }
        }
        async _set(hostname, data, cacheTtl) {
          if (this.maxTtl > 0 && cacheTtl > 0) {
            cacheTtl = Math.min(cacheTtl, this.maxTtl) * 1000;
            data[kExpires] = Date.now() + cacheTtl;
            try {
              await this._cache.set(hostname, data, cacheTtl);
            } catch (error) {
              this.lookupAsync = async () => {
                const cacheError = new Error("Cache Error. Please recreate the CacheableLookup instance.");
                cacheError.cause = error;
                throw cacheError;
              };
            }
            if (isIterable(this._cache)) {
              this._tick(cacheTtl);
            }
          }
        }
        async queryAndCache(hostname) {
          if (this._hostnamesToFallback.has(hostname)) {
            return this._dnsLookup(hostname, all);
          }
          let query = await this._resolve(hostname);
          if (query.entries.length === 0 && this._fallback) {
            query = await this._lookup(hostname);
            if (query.entries.length !== 0) {
              this._hostnamesToFallback.add(hostname);
            }
          }
          const cacheTtl = query.entries.length === 0 ? this.errorTtl : query.cacheTtl;
          await this._set(hostname, query.entries, cacheTtl);
          return query.entries;
        }
        _tick(ms) {
          const nextRemovalTime = this._nextRemovalTime;
          if (!nextRemovalTime || ms < nextRemovalTime) {
            clearTimeout(this._removalTimeout);
            this._nextRemovalTime = ms;
            this._removalTimeout = setTimeout(() => {
              this._nextRemovalTime = false;
              let nextExpiry = Infinity;
              const now = Date.now();
              for (const [hostname, entries] of this._cache) {
                const expires = entries[kExpires];
                if (now >= expires) {
                  this._cache.delete(hostname);
                } else if (expires < nextExpiry) {
                  nextExpiry = expires;
                }
              }
              if (nextExpiry !== Infinity) {
                this._tick(nextExpiry - now);
              }
            }, ms);
            if (this._removalTimeout.unref) {
              this._removalTimeout.unref();
            }
          }
        }
        install(agent) {
          verifyAgent(agent);
          if (kCacheableLookupCreateConnection in agent) {
            throw new Error("CacheableLookup has been already installed");
          }
          agent[kCacheableLookupCreateConnection] = agent.createConnection;
          agent[kCacheableLookupInstance] = this;
          agent.createConnection = (options, callback) => {
            if (!("lookup" in options)) {
              options.lookup = this.lookup;
            }
            return agent[kCacheableLookupCreateConnection](options, callback);
          };
        }
        uninstall(agent) {
          verifyAgent(agent);
          if (agent[kCacheableLookupCreateConnection]) {
            if (agent[kCacheableLookupInstance] !== this) {
              throw new Error("The agent is not owned by this CacheableLookup instance");
            }
            agent.createConnection = agent[kCacheableLookupCreateConnection];
            delete agent[kCacheableLookupCreateConnection];
            delete agent[kCacheableLookupInstance];
          }
        }
        updateInterfaceInfo() {
          const { _iface } = this;
          this._iface = getIfaceInfo();
          if (_iface.has4 && !this._iface.has4 || _iface.has6 && !this._iface.has6) {
            this._cache.clear();
          }
        }
        clear(hostname) {
          if (hostname) {
            this._cache.delete(hostname);
            return;
          }
          this._cache.clear();
        }
      };
      module22.exports = CacheableLookup;
      module22.exports.default = CacheableLookup;
    }
  });
  var require_normalize_url = __commonJS2({
    "../../node_modules/.pnpm/normalize-url@6.1.0/node_modules/normalize-url/index.js"(exports22, module22) {
      var DATA_URL_DEFAULT_MIME_TYPE = "text/plain";
      var DATA_URL_DEFAULT_CHARSET = "us-ascii";
      var testParameter = (name, filters) => {
        return filters.some((filter) => filter instanceof RegExp ? filter.test(name) : filter === name);
      };
      var normalizeDataURL = (urlString, { stripHash }) => {
        const match = /^data:(?<type>[^,]*?),(?<data>[^#]*?)(?:#(?<hash>.*))?$/.exec(urlString);
        if (!match) {
          throw new Error(`Invalid URL: ${urlString}`);
        }
        let { type, data, hash } = match.groups;
        const mediaType = type.split(";");
        hash = stripHash ? "" : hash;
        let isBase64 = false;
        if (mediaType[mediaType.length - 1] === "base64") {
          mediaType.pop();
          isBase64 = true;
        }
        const mimeType = (mediaType.shift() || "").toLowerCase();
        const attributes = mediaType.map((attribute) => {
          let [key, value = ""] = attribute.split("=").map((string) => string.trim());
          if (key === "charset") {
            value = value.toLowerCase();
            if (value === DATA_URL_DEFAULT_CHARSET) {
              return "";
            }
          }
          return `${key}${value ? `=${value}` : ""}`;
        }).filter(Boolean);
        const normalizedMediaType = [
          ...attributes
        ];
        if (isBase64) {
          normalizedMediaType.push("base64");
        }
        if (normalizedMediaType.length !== 0 || mimeType && mimeType !== DATA_URL_DEFAULT_MIME_TYPE) {
          normalizedMediaType.unshift(mimeType);
        }
        return `data:${normalizedMediaType.join(";")},${isBase64 ? data.trim() : data}${hash ? `#${hash}` : ""}`;
      };
      var normalizeUrl = (urlString, options) => {
        options = {
          defaultProtocol: "http:",
          normalizeProtocol: true,
          forceHttp: false,
          forceHttps: false,
          stripAuthentication: true,
          stripHash: false,
          stripTextFragment: true,
          stripWWW: true,
          removeQueryParameters: [/^utm_\w+/i],
          removeTrailingSlash: true,
          removeSingleSlash: true,
          removeDirectoryIndex: false,
          sortQueryParameters: true,
          ...options
        };
        urlString = urlString.trim();
        if (/^data:/i.test(urlString)) {
          return normalizeDataURL(urlString, options);
        }
        if (/^view-source:/i.test(urlString)) {
          throw new Error("`view-source:` is not supported as it is a non-standard protocol");
        }
        const hasRelativeProtocol = urlString.startsWith("//");
        const isRelativeUrl = !hasRelativeProtocol && /^\.*\//.test(urlString);
        if (!isRelativeUrl) {
          urlString = urlString.replace(/^(?!(?:\w+:)?\/\/)|^\/\//, options.defaultProtocol);
        }
        const urlObj = new URL(urlString);
        if (options.forceHttp && options.forceHttps) {
          throw new Error("The `forceHttp` and `forceHttps` options cannot be used together");
        }
        if (options.forceHttp && urlObj.protocol === "https:") {
          urlObj.protocol = "http:";
        }
        if (options.forceHttps && urlObj.protocol === "http:") {
          urlObj.protocol = "https:";
        }
        if (options.stripAuthentication) {
          urlObj.username = "";
          urlObj.password = "";
        }
        if (options.stripHash) {
          urlObj.hash = "";
        } else if (options.stripTextFragment) {
          urlObj.hash = urlObj.hash.replace(/#?:~:text.*?$/i, "");
        }
        if (urlObj.pathname) {
          urlObj.pathname = urlObj.pathname.replace(/(?<!\b(?:[a-z][a-z\d+\-.]{1,50}:))\/{2,}/g, "/");
        }
        if (urlObj.pathname) {
          try {
            urlObj.pathname = decodeURI(urlObj.pathname);
          } catch (_) {
          }
        }
        if (options.removeDirectoryIndex === true) {
          options.removeDirectoryIndex = [/^index\.[a-z]+$/];
        }
        if (Array.isArray(options.removeDirectoryIndex) && options.removeDirectoryIndex.length > 0) {
          let pathComponents = urlObj.pathname.split("/");
          const lastComponent = pathComponents[pathComponents.length - 1];
          if (testParameter(lastComponent, options.removeDirectoryIndex)) {
            pathComponents = pathComponents.slice(0, pathComponents.length - 1);
            urlObj.pathname = pathComponents.slice(1).join("/") + "/";
          }
        }
        if (urlObj.hostname) {
          urlObj.hostname = urlObj.hostname.replace(/\.$/, "");
          if (options.stripWWW && /^www\.(?!www\.)(?:[a-z\-\d]{1,63})\.(?:[a-z.\-\d]{2,63})$/.test(urlObj.hostname)) {
            urlObj.hostname = urlObj.hostname.replace(/^www\./, "");
          }
        }
        if (Array.isArray(options.removeQueryParameters)) {
          for (const key of [...urlObj.searchParams.keys()]) {
            if (testParameter(key, options.removeQueryParameters)) {
              urlObj.searchParams.delete(key);
            }
          }
        }
        if (options.removeQueryParameters === true) {
          urlObj.search = "";
        }
        if (options.sortQueryParameters) {
          urlObj.searchParams.sort();
        }
        if (options.removeTrailingSlash) {
          urlObj.pathname = urlObj.pathname.replace(/\/$/, "");
        }
        const oldUrlString = urlString;
        urlString = urlObj.toString();
        if (!options.removeSingleSlash && urlObj.pathname === "/" && !oldUrlString.endsWith("/") && urlObj.hash === "") {
          urlString = urlString.replace(/\/$/, "");
        }
        if ((options.removeTrailingSlash || urlObj.pathname === "/") && urlObj.hash === "" && options.removeSingleSlash) {
          urlString = urlString.replace(/\/$/, "");
        }
        if (hasRelativeProtocol && !options.normalizeProtocol) {
          urlString = urlString.replace(/^http:\/\//, "//");
        }
        if (options.stripProtocol) {
          urlString = urlString.replace(/^(?:https?:)?\/\//, "");
        }
        return urlString;
      };
      module22.exports = normalizeUrl;
    }
  });
  var require_wrappy = __commonJS2({
    "../../node_modules/.pnpm/wrappy@1.0.2/node_modules/wrappy/wrappy.js"(exports22, module22) {
      module22.exports = wrappy;
      function wrappy(fn, cb) {
        if (fn && cb)
          return wrappy(fn)(cb);
        if (typeof fn !== "function")
          throw new TypeError("need wrapper function");
        Object.keys(fn).forEach(function(k) {
          wrapper[k] = fn[k];
        });
        return wrapper;
        function wrapper() {
          var args = new Array(arguments.length);
          for (var i = 0;i < args.length; i++) {
            args[i] = arguments[i];
          }
          var ret = fn.apply(this, args);
          var cb2 = args[args.length - 1];
          if (typeof ret === "function" && ret !== cb2) {
            Object.keys(cb2).forEach(function(k) {
              ret[k] = cb2[k];
            });
          }
          return ret;
        }
      }
    }
  });
  var require_once = __commonJS2({
    "../../node_modules/.pnpm/once@1.4.0/node_modules/once/once.js"(exports22, module22) {
      var wrappy = require_wrappy();
      module22.exports = wrappy(once);
      module22.exports.strict = wrappy(onceStrict);
      once.proto = once(function() {
        Object.defineProperty(Function.prototype, "once", {
          value: function() {
            return once(this);
          },
          configurable: true
        });
        Object.defineProperty(Function.prototype, "onceStrict", {
          value: function() {
            return onceStrict(this);
          },
          configurable: true
        });
      });
      function once(fn) {
        var f = function() {
          if (f.called)
            return f.value;
          f.called = true;
          return f.value = fn.apply(this, arguments);
        };
        f.called = false;
        return f;
      }
      function onceStrict(fn) {
        var f = function() {
          if (f.called)
            throw new Error(f.onceError);
          f.called = true;
          return f.value = fn.apply(this, arguments);
        };
        var name = fn.name || "Function wrapped with `once`";
        f.onceError = name + " shouldn't be called more than once";
        f.called = false;
        return f;
      }
    }
  });
  var require_end_of_stream = __commonJS2({
    "../../node_modules/.pnpm/end-of-stream@1.4.4/node_modules/end-of-stream/index.js"(exports22, module22) {
      var once = require_once();
      var noop = function() {
      };
      var isRequest = function(stream) {
        return stream.setHeader && typeof stream.abort === "function";
      };
      var isChildProcess = function(stream) {
        return stream.stdio && Array.isArray(stream.stdio) && stream.stdio.length === 3;
      };
      var eos = function(stream, opts, callback) {
        if (typeof opts === "function")
          return eos(stream, null, opts);
        if (!opts)
          opts = {};
        callback = once(callback || noop);
        var ws = stream._writableState;
        var rs = stream._readableState;
        var readable = opts.readable || opts.readable !== false && stream.readable;
        var writable = opts.writable || opts.writable !== false && stream.writable;
        var cancelled = false;
        var onlegacyfinish = function() {
          if (!stream.writable)
            onfinish();
        };
        var onfinish = function() {
          writable = false;
          if (!readable)
            callback.call(stream);
        };
        var onend = function() {
          readable = false;
          if (!writable)
            callback.call(stream);
        };
        var onexit = function(exitCode) {
          callback.call(stream, exitCode ? new Error("exited with error code: " + exitCode) : null);
        };
        var onerror = function(err) {
          callback.call(stream, err);
        };
        var onclose = function() {
          process.nextTick(onclosenexttick);
        };
        var onclosenexttick = function() {
          if (cancelled)
            return;
          if (readable && !(rs && (rs.ended && !rs.destroyed)))
            return callback.call(stream, new Error("premature close"));
          if (writable && !(ws && (ws.ended && !ws.destroyed)))
            return callback.call(stream, new Error("premature close"));
        };
        var onrequest = function() {
          stream.req.on("finish", onfinish);
        };
        if (isRequest(stream)) {
          stream.on("complete", onfinish);
          stream.on("abort", onclose);
          if (stream.req)
            onrequest();
          else
            stream.on("request", onrequest);
        } else if (writable && !ws) {
          stream.on("end", onlegacyfinish);
          stream.on("close", onlegacyfinish);
        }
        if (isChildProcess(stream))
          stream.on("exit", onexit);
        stream.on("end", onend);
        stream.on("finish", onfinish);
        if (opts.error !== false)
          stream.on("error", onerror);
        stream.on("close", onclose);
        return function() {
          cancelled = true;
          stream.removeListener("complete", onfinish);
          stream.removeListener("abort", onclose);
          stream.removeListener("request", onrequest);
          if (stream.req)
            stream.req.removeListener("finish", onfinish);
          stream.removeListener("end", onlegacyfinish);
          stream.removeListener("close", onlegacyfinish);
          stream.removeListener("finish", onfinish);
          stream.removeListener("exit", onexit);
          stream.removeListener("end", onend);
          stream.removeListener("error", onerror);
          stream.removeListener("close", onclose);
        };
      };
      module22.exports = eos;
    }
  });
  var require_pump = __commonJS2({
    "../../node_modules/.pnpm/pump@3.0.2/node_modules/pump/index.js"(exports22, module22) {
      var once = require_once();
      var eos = require_end_of_stream();
      var fs;
      try {
        fs = __require("fs");
      } catch (e) {
      }
      var noop = function() {
      };
      var ancient = /^v?\.0/.test(process.version);
      var isFn = function(fn) {
        return typeof fn === "function";
      };
      var isFS = function(stream) {
        if (!ancient)
          return false;
        if (!fs)
          return false;
        return (stream instanceof (fs.ReadStream || noop) || stream instanceof (fs.WriteStream || noop)) && isFn(stream.close);
      };
      var isRequest = function(stream) {
        return stream.setHeader && isFn(stream.abort);
      };
      var destroyer = function(stream, reading, writing, callback) {
        callback = once(callback);
        var closed = false;
        stream.on("close", function() {
          closed = true;
        });
        eos(stream, { readable: reading, writable: writing }, function(err) {
          if (err)
            return callback(err);
          closed = true;
          callback();
        });
        var destroyed = false;
        return function(err) {
          if (closed)
            return;
          if (destroyed)
            return;
          destroyed = true;
          if (isFS(stream))
            return stream.close(noop);
          if (isRequest(stream))
            return stream.abort();
          if (isFn(stream.destroy))
            return stream.destroy();
          callback(err || new Error("stream was destroyed"));
        };
      };
      var call = function(fn) {
        fn();
      };
      var pipe = function(from, to) {
        return from.pipe(to);
      };
      var pump = function() {
        var streams = Array.prototype.slice.call(arguments);
        var callback = isFn(streams[streams.length - 1] || noop) && streams.pop() || noop;
        if (Array.isArray(streams[0]))
          streams = streams[0];
        if (streams.length < 2)
          throw new Error("pump requires two streams per minimum");
        var error;
        var destroys = streams.map(function(stream, i) {
          var reading = i < streams.length - 1;
          var writing = i > 0;
          return destroyer(stream, reading, writing, function(err) {
            if (!error)
              error = err;
            if (err)
              destroys.forEach(call);
            if (reading)
              return;
            destroys.forEach(call);
            callback(error);
          });
        });
        return streams.reduce(pipe);
      };
      module22.exports = pump;
    }
  });
  var require_buffer_stream = __commonJS2({
    "../../node_modules/.pnpm/get-stream@5.2.0/node_modules/get-stream/buffer-stream.js"(exports22, module22) {
      var { PassThrough: PassThroughStream } = __require("stream");
      module22.exports = (options) => {
        options = { ...options };
        const { array } = options;
        let { encoding } = options;
        const isBuffer = encoding === "buffer";
        let objectMode = false;
        if (array) {
          objectMode = !(encoding || isBuffer);
        } else {
          encoding = encoding || "utf8";
        }
        if (isBuffer) {
          encoding = null;
        }
        const stream = new PassThroughStream({ objectMode });
        if (encoding) {
          stream.setEncoding(encoding);
        }
        let length = 0;
        const chunks = [];
        stream.on("data", (chunk) => {
          chunks.push(chunk);
          if (objectMode) {
            length = chunks.length;
          } else {
            length += chunk.length;
          }
        });
        stream.getBufferedValue = () => {
          if (array) {
            return chunks;
          }
          return isBuffer ? Buffer.concat(chunks, length) : chunks.join("");
        };
        stream.getBufferedLength = () => length;
        return stream;
      };
    }
  });
  var require_get_stream = __commonJS2({
    "../../node_modules/.pnpm/get-stream@5.2.0/node_modules/get-stream/index.js"(exports22, module22) {
      var { constants: BufferConstants } = __require("buffer");
      var pump = require_pump();
      var bufferStream2 = require_buffer_stream();
      var MaxBufferError = class extends Error {
        constructor() {
          super("maxBuffer exceeded");
          this.name = "MaxBufferError";
        }
      };
      async function getStream(inputStream, options) {
        if (!inputStream) {
          return Promise.reject(new Error("Expected a stream"));
        }
        options = {
          maxBuffer: Infinity,
          ...options
        };
        const { maxBuffer } = options;
        let stream;
        await new Promise((resolve, reject) => {
          const rejectPromise = (error) => {
            if (error && stream.getBufferedLength() <= BufferConstants.MAX_LENGTH) {
              error.bufferedData = stream.getBufferedValue();
            }
            reject(error);
          };
          stream = pump(inputStream, bufferStream2(options), (error) => {
            if (error) {
              rejectPromise(error);
              return;
            }
            resolve();
          });
          stream.on("data", () => {
            if (stream.getBufferedLength() > maxBuffer) {
              rejectPromise(new MaxBufferError);
            }
          });
        });
        return stream.getBufferedValue();
      }
      module22.exports = getStream;
      module22.exports.default = getStream;
      module22.exports.buffer = (stream, options) => getStream(stream, { ...options, encoding: "buffer" });
      module22.exports.array = (stream, options) => getStream(stream, { ...options, array: true });
      module22.exports.MaxBufferError = MaxBufferError;
    }
  });
  var require_http_cache_semantics = __commonJS2({
    "../../node_modules/.pnpm/http-cache-semantics@4.1.1/node_modules/http-cache-semantics/index.js"(exports22, module22) {
      var statusCodeCacheableByDefault = /* @__PURE__ */ new Set([
        200,
        203,
        204,
        206,
        300,
        301,
        308,
        404,
        405,
        410,
        414,
        501
      ]);
      var understoodStatuses = /* @__PURE__ */ new Set([
        200,
        203,
        204,
        300,
        301,
        302,
        303,
        307,
        308,
        404,
        405,
        410,
        414,
        501
      ]);
      var errorStatusCodes = /* @__PURE__ */ new Set([
        500,
        502,
        503,
        504
      ]);
      var hopByHopHeaders = {
        date: true,
        connection: true,
        "keep-alive": true,
        "proxy-authenticate": true,
        "proxy-authorization": true,
        te: true,
        trailer: true,
        "transfer-encoding": true,
        upgrade: true
      };
      var excludedFromRevalidationUpdate = {
        "content-length": true,
        "content-encoding": true,
        "transfer-encoding": true,
        "content-range": true
      };
      function toNumberOrZero(s) {
        const n = parseInt(s, 10);
        return isFinite(n) ? n : 0;
      }
      function isErrorResponse(response) {
        if (!response) {
          return true;
        }
        return errorStatusCodes.has(response.status);
      }
      function parseCacheControl(header) {
        const cc = {};
        if (!header)
          return cc;
        const parts = header.trim().split(/,/);
        for (const part of parts) {
          const [k, v] = part.split(/=/, 2);
          cc[k.trim()] = v === undefined ? true : v.trim().replace(/^"|"$/g, "");
        }
        return cc;
      }
      function formatCacheControl(cc) {
        let parts = [];
        for (const k in cc) {
          const v = cc[k];
          parts.push(v === true ? k : k + "=" + v);
        }
        if (!parts.length) {
          return;
        }
        return parts.join(", ");
      }
      module22.exports = class CachePolicy {
        constructor(req, res, {
          shared,
          cacheHeuristic,
          immutableMinTimeToLive,
          ignoreCargoCult,
          _fromObject
        } = {}) {
          if (_fromObject) {
            this._fromObject(_fromObject);
            return;
          }
          if (!res || !res.headers) {
            throw Error("Response headers missing");
          }
          this._assertRequestHasHeaders(req);
          this._responseTime = this.now();
          this._isShared = shared !== false;
          this._cacheHeuristic = cacheHeuristic !== undefined ? cacheHeuristic : 0.1;
          this._immutableMinTtl = immutableMinTimeToLive !== undefined ? immutableMinTimeToLive : 24 * 3600 * 1000;
          this._status = "status" in res ? res.status : 200;
          this._resHeaders = res.headers;
          this._rescc = parseCacheControl(res.headers["cache-control"]);
          this._method = "method" in req ? req.method : "GET";
          this._url = req.url;
          this._host = req.headers.host;
          this._noAuthorization = !req.headers.authorization;
          this._reqHeaders = res.headers.vary ? req.headers : null;
          this._reqcc = parseCacheControl(req.headers["cache-control"]);
          if (ignoreCargoCult && "pre-check" in this._rescc && "post-check" in this._rescc) {
            delete this._rescc["pre-check"];
            delete this._rescc["post-check"];
            delete this._rescc["no-cache"];
            delete this._rescc["no-store"];
            delete this._rescc["must-revalidate"];
            this._resHeaders = Object.assign({}, this._resHeaders, {
              "cache-control": formatCacheControl(this._rescc)
            });
            delete this._resHeaders.expires;
            delete this._resHeaders.pragma;
          }
          if (res.headers["cache-control"] == null && /no-cache/.test(res.headers.pragma)) {
            this._rescc["no-cache"] = true;
          }
        }
        now() {
          return Date.now();
        }
        storable() {
          return !!(!this._reqcc["no-store"] && (this._method === "GET" || this._method === "HEAD" || this._method === "POST" && this._hasExplicitExpiration()) && understoodStatuses.has(this._status) && !this._rescc["no-store"] && (!this._isShared || !this._rescc.private) && (!this._isShared || this._noAuthorization || this._allowsStoringAuthenticated()) && (this._resHeaders.expires || this._rescc["max-age"] || this._isShared && this._rescc["s-maxage"] || this._rescc.public || statusCodeCacheableByDefault.has(this._status)));
        }
        _hasExplicitExpiration() {
          return this._isShared && this._rescc["s-maxage"] || this._rescc["max-age"] || this._resHeaders.expires;
        }
        _assertRequestHasHeaders(req) {
          if (!req || !req.headers) {
            throw Error("Request headers missing");
          }
        }
        satisfiesWithoutRevalidation(req) {
          this._assertRequestHasHeaders(req);
          const requestCC = parseCacheControl(req.headers["cache-control"]);
          if (requestCC["no-cache"] || /no-cache/.test(req.headers.pragma)) {
            return false;
          }
          if (requestCC["max-age"] && this.age() > requestCC["max-age"]) {
            return false;
          }
          if (requestCC["min-fresh"] && this.timeToLive() < 1000 * requestCC["min-fresh"]) {
            return false;
          }
          if (this.stale()) {
            const allowsStale = requestCC["max-stale"] && !this._rescc["must-revalidate"] && (requestCC["max-stale"] === true || requestCC["max-stale"] > this.age() - this.maxAge());
            if (!allowsStale) {
              return false;
            }
          }
          return this._requestMatches(req, false);
        }
        _requestMatches(req, allowHeadMethod) {
          return (!this._url || this._url === req.url) && this._host === req.headers.host && (!req.method || this._method === req.method || allowHeadMethod && req.method === "HEAD") && this._varyMatches(req);
        }
        _allowsStoringAuthenticated() {
          return this._rescc["must-revalidate"] || this._rescc.public || this._rescc["s-maxage"];
        }
        _varyMatches(req) {
          if (!this._resHeaders.vary) {
            return true;
          }
          if (this._resHeaders.vary === "*") {
            return false;
          }
          const fields = this._resHeaders.vary.trim().toLowerCase().split(/\s*,\s*/);
          for (const name of fields) {
            if (req.headers[name] !== this._reqHeaders[name])
              return false;
          }
          return true;
        }
        _copyWithoutHopByHopHeaders(inHeaders) {
          const headers = {};
          for (const name in inHeaders) {
            if (hopByHopHeaders[name])
              continue;
            headers[name] = inHeaders[name];
          }
          if (inHeaders.connection) {
            const tokens = inHeaders.connection.trim().split(/\s*,\s*/);
            for (const name of tokens) {
              delete headers[name];
            }
          }
          if (headers.warning) {
            const warnings = headers.warning.split(/,/).filter((warning) => {
              return !/^\s*1[0-9][0-9]/.test(warning);
            });
            if (!warnings.length) {
              delete headers.warning;
            } else {
              headers.warning = warnings.join(",").trim();
            }
          }
          return headers;
        }
        responseHeaders() {
          const headers = this._copyWithoutHopByHopHeaders(this._resHeaders);
          const age = this.age();
          if (age > 3600 * 24 && !this._hasExplicitExpiration() && this.maxAge() > 3600 * 24) {
            headers.warning = (headers.warning ? `${headers.warning}, ` : "") + '113 - "rfc7234 5.5.4"';
          }
          headers.age = `${Math.round(age)}`;
          headers.date = new Date(this.now()).toUTCString();
          return headers;
        }
        date() {
          const serverDate = Date.parse(this._resHeaders.date);
          if (isFinite(serverDate)) {
            return serverDate;
          }
          return this._responseTime;
        }
        age() {
          let age = this._ageValue();
          const residentTime = (this.now() - this._responseTime) / 1000;
          return age + residentTime;
        }
        _ageValue() {
          return toNumberOrZero(this._resHeaders.age);
        }
        maxAge() {
          if (!this.storable() || this._rescc["no-cache"]) {
            return 0;
          }
          if (this._isShared && (this._resHeaders["set-cookie"] && !this._rescc.public && !this._rescc.immutable)) {
            return 0;
          }
          if (this._resHeaders.vary === "*") {
            return 0;
          }
          if (this._isShared) {
            if (this._rescc["proxy-revalidate"]) {
              return 0;
            }
            if (this._rescc["s-maxage"]) {
              return toNumberOrZero(this._rescc["s-maxage"]);
            }
          }
          if (this._rescc["max-age"]) {
            return toNumberOrZero(this._rescc["max-age"]);
          }
          const defaultMinTtl = this._rescc.immutable ? this._immutableMinTtl : 0;
          const serverDate = this.date();
          if (this._resHeaders.expires) {
            const expires = Date.parse(this._resHeaders.expires);
            if (Number.isNaN(expires) || expires < serverDate) {
              return 0;
            }
            return Math.max(defaultMinTtl, (expires - serverDate) / 1000);
          }
          if (this._resHeaders["last-modified"]) {
            const lastModified = Date.parse(this._resHeaders["last-modified"]);
            if (isFinite(lastModified) && serverDate > lastModified) {
              return Math.max(defaultMinTtl, (serverDate - lastModified) / 1000 * this._cacheHeuristic);
            }
          }
          return defaultMinTtl;
        }
        timeToLive() {
          const age = this.maxAge() - this.age();
          const staleIfErrorAge = age + toNumberOrZero(this._rescc["stale-if-error"]);
          const staleWhileRevalidateAge = age + toNumberOrZero(this._rescc["stale-while-revalidate"]);
          return Math.max(0, age, staleIfErrorAge, staleWhileRevalidateAge) * 1000;
        }
        stale() {
          return this.maxAge() <= this.age();
        }
        _useStaleIfError() {
          return this.maxAge() + toNumberOrZero(this._rescc["stale-if-error"]) > this.age();
        }
        useStaleWhileRevalidate() {
          return this.maxAge() + toNumberOrZero(this._rescc["stale-while-revalidate"]) > this.age();
        }
        static fromObject(obj) {
          return new this(undefined, undefined, { _fromObject: obj });
        }
        _fromObject(obj) {
          if (this._responseTime)
            throw Error("Reinitialized");
          if (!obj || obj.v !== 1)
            throw Error("Invalid serialization");
          this._responseTime = obj.t;
          this._isShared = obj.sh;
          this._cacheHeuristic = obj.ch;
          this._immutableMinTtl = obj.imm !== undefined ? obj.imm : 24 * 3600 * 1000;
          this._status = obj.st;
          this._resHeaders = obj.resh;
          this._rescc = obj.rescc;
          this._method = obj.m;
          this._url = obj.u;
          this._host = obj.h;
          this._noAuthorization = obj.a;
          this._reqHeaders = obj.reqh;
          this._reqcc = obj.reqcc;
        }
        toObject() {
          return {
            v: 1,
            t: this._responseTime,
            sh: this._isShared,
            ch: this._cacheHeuristic,
            imm: this._immutableMinTtl,
            st: this._status,
            resh: this._resHeaders,
            rescc: this._rescc,
            m: this._method,
            u: this._url,
            h: this._host,
            a: this._noAuthorization,
            reqh: this._reqHeaders,
            reqcc: this._reqcc
          };
        }
        revalidationHeaders(incomingReq) {
          this._assertRequestHasHeaders(incomingReq);
          const headers = this._copyWithoutHopByHopHeaders(incomingReq.headers);
          delete headers["if-range"];
          if (!this._requestMatches(incomingReq, true) || !this.storable()) {
            delete headers["if-none-match"];
            delete headers["if-modified-since"];
            return headers;
          }
          if (this._resHeaders.etag) {
            headers["if-none-match"] = headers["if-none-match"] ? `${headers["if-none-match"]}, ${this._resHeaders.etag}` : this._resHeaders.etag;
          }
          const forbidsWeakValidators = headers["accept-ranges"] || headers["if-match"] || headers["if-unmodified-since"] || this._method && this._method != "GET";
          if (forbidsWeakValidators) {
            delete headers["if-modified-since"];
            if (headers["if-none-match"]) {
              const etags = headers["if-none-match"].split(/,/).filter((etag) => {
                return !/^\s*W\//.test(etag);
              });
              if (!etags.length) {
                delete headers["if-none-match"];
              } else {
                headers["if-none-match"] = etags.join(",").trim();
              }
            }
          } else if (this._resHeaders["last-modified"] && !headers["if-modified-since"]) {
            headers["if-modified-since"] = this._resHeaders["last-modified"];
          }
          return headers;
        }
        revalidatedPolicy(request, response) {
          this._assertRequestHasHeaders(request);
          if (this._useStaleIfError() && isErrorResponse(response)) {
            return {
              modified: false,
              matches: false,
              policy: this
            };
          }
          if (!response || !response.headers) {
            throw Error("Response headers missing");
          }
          let matches = false;
          if (response.status !== undefined && response.status != 304) {
            matches = false;
          } else if (response.headers.etag && !/^\s*W\//.test(response.headers.etag)) {
            matches = this._resHeaders.etag && this._resHeaders.etag.replace(/^\s*W\//, "") === response.headers.etag;
          } else if (this._resHeaders.etag && response.headers.etag) {
            matches = this._resHeaders.etag.replace(/^\s*W\//, "") === response.headers.etag.replace(/^\s*W\//, "");
          } else if (this._resHeaders["last-modified"]) {
            matches = this._resHeaders["last-modified"] === response.headers["last-modified"];
          } else {
            if (!this._resHeaders.etag && !this._resHeaders["last-modified"] && !response.headers.etag && !response.headers["last-modified"]) {
              matches = true;
            }
          }
          if (!matches) {
            return {
              policy: new this.constructor(request, response),
              modified: response.status != 304,
              matches: false
            };
          }
          const headers = {};
          for (const k in this._resHeaders) {
            headers[k] = k in response.headers && !excludedFromRevalidationUpdate[k] ? response.headers[k] : this._resHeaders[k];
          }
          const newResponse = Object.assign({}, response, {
            status: this._status,
            method: this._method,
            headers
          });
          return {
            policy: new this.constructor(request, newResponse, {
              shared: this._isShared,
              cacheHeuristic: this._cacheHeuristic,
              immutableMinTimeToLive: this._immutableMinTtl
            }),
            modified: false,
            matches: true
          };
        }
      };
    }
  });
  var require_lowercase_keys = __commonJS2({
    "../../node_modules/.pnpm/lowercase-keys@2.0.0/node_modules/lowercase-keys/index.js"(exports22, module22) {
      module22.exports = (object) => {
        const result2 = {};
        for (const [key, value] of Object.entries(object)) {
          result2[key.toLowerCase()] = value;
        }
        return result2;
      };
    }
  });
  var require_src = __commonJS2({
    "../../node_modules/.pnpm/responselike@2.0.1/node_modules/responselike/src/index.js"(exports22, module22) {
      var Readable = __require("stream").Readable;
      var lowercaseKeys = require_lowercase_keys();
      var Response = class extends Readable {
        constructor(statusCode, headers, body, url) {
          if (typeof statusCode !== "number") {
            throw new TypeError("Argument `statusCode` should be a number");
          }
          if (typeof headers !== "object") {
            throw new TypeError("Argument `headers` should be an object");
          }
          if (!(body instanceof Buffer)) {
            throw new TypeError("Argument `body` should be a buffer");
          }
          if (typeof url !== "string") {
            throw new TypeError("Argument `url` should be a string");
          }
          super();
          this.statusCode = statusCode;
          this.headers = lowercaseKeys(headers);
          this.body = body;
          this.url = url;
        }
        _read() {
          this.push(this.body);
          this.push(null);
        }
      };
      module22.exports = Response;
    }
  });
  var require_mimic_response = __commonJS2({
    "../../node_modules/.pnpm/mimic-response@1.0.1/node_modules/mimic-response/index.js"(exports22, module22) {
      var knownProps = [
        "destroy",
        "setTimeout",
        "socket",
        "headers",
        "trailers",
        "rawHeaders",
        "statusCode",
        "httpVersion",
        "httpVersionMinor",
        "httpVersionMajor",
        "rawTrailers",
        "statusMessage"
      ];
      module22.exports = (fromStream, toStream) => {
        const fromProps = new Set(Object.keys(fromStream).concat(knownProps));
        for (const prop of fromProps) {
          if (prop in toStream) {
            continue;
          }
          toStream[prop] = typeof fromStream[prop] === "function" ? fromStream[prop].bind(fromStream) : fromStream[prop];
        }
      };
    }
  });
  var require_src2 = __commonJS2({
    "../../node_modules/.pnpm/clone-response@1.0.3/node_modules/clone-response/src/index.js"(exports22, module22) {
      var PassThrough = __require("stream").PassThrough;
      var mimicResponse = require_mimic_response();
      var cloneResponse = (response) => {
        if (!(response && response.pipe)) {
          throw new TypeError("Parameter `response` must be a response stream.");
        }
        const clone = new PassThrough;
        mimicResponse(response, clone);
        return response.pipe(clone);
      };
      module22.exports = cloneResponse;
    }
  });
  var require_json_buffer = __commonJS2({
    "../../node_modules/.pnpm/json-buffer@3.0.1/node_modules/json-buffer/index.js"(exports22) {
      exports22.stringify = function stringify(o) {
        if (typeof o == "undefined")
          return o;
        if (o && Buffer.isBuffer(o))
          return JSON.stringify(":base64:" + o.toString("base64"));
        if (o && o.toJSON)
          o = o.toJSON();
        if (o && typeof o === "object") {
          var s = "";
          var array = Array.isArray(o);
          s = array ? "[" : "{";
          var first = true;
          for (var k in o) {
            var ignore = typeof o[k] == "function" || !array && typeof o[k] === "undefined";
            if (Object.hasOwnProperty.call(o, k) && !ignore) {
              if (!first)
                s += ",";
              first = false;
              if (array) {
                if (o[k] == undefined)
                  s += "null";
                else
                  s += stringify(o[k]);
              } else if (o[k] !== undefined) {
                s += stringify(k) + ":" + stringify(o[k]);
              }
            }
          }
          s += array ? "]" : "}";
          return s;
        } else if (typeof o === "string") {
          return JSON.stringify(/^:/.test(o) ? ":" + o : o);
        } else if (typeof o === "undefined") {
          return "null";
        } else
          return JSON.stringify(o);
      };
      exports22.parse = function(s) {
        return JSON.parse(s, function(key, value) {
          if (typeof value === "string") {
            if (/^:base64:/.test(value))
              return Buffer.from(value.substring(8), "base64");
            else
              return /^:/.test(value) ? value.substring(1) : value;
          }
          return value;
        });
      };
    }
  });
  var require_src3 = __commonJS2({
    "../../node_modules/.pnpm/keyv@4.5.4/node_modules/keyv/src/index.js"(exports22, module22) {
      var EventEmitter = __require("events");
      var JSONB = require_json_buffer();
      var loadStore = (options) => {
        const adapters = {
          redis: "@keyv/redis",
          rediss: "@keyv/redis",
          mongodb: "@keyv/mongo",
          mongo: "@keyv/mongo",
          sqlite: "@keyv/sqlite",
          postgresql: "@keyv/postgres",
          postgres: "@keyv/postgres",
          mysql: "@keyv/mysql",
          etcd: "@keyv/etcd",
          offline: "@keyv/offline",
          tiered: "@keyv/tiered"
        };
        if (options.adapter || options.uri) {
          const adapter = options.adapter || /^[^:+]*/.exec(options.uri)[0];
          return new (__require(adapters[adapter]))(options);
        }
        return /* @__PURE__ */ new Map;
      };
      var iterableAdapters = [
        "sqlite",
        "postgres",
        "mysql",
        "mongo",
        "redis",
        "tiered"
      ];
      var Keyv = class extends EventEmitter {
        constructor(uri, { emitErrors = true, ...options } = {}) {
          super();
          this.opts = {
            namespace: "keyv",
            serialize: JSONB.stringify,
            deserialize: JSONB.parse,
            ...typeof uri === "string" ? { uri } : uri,
            ...options
          };
          if (!this.opts.store) {
            const adapterOptions = { ...this.opts };
            this.opts.store = loadStore(adapterOptions);
          }
          if (this.opts.compression) {
            const compression = this.opts.compression;
            this.opts.serialize = compression.serialize.bind(compression);
            this.opts.deserialize = compression.deserialize.bind(compression);
          }
          if (typeof this.opts.store.on === "function" && emitErrors) {
            this.opts.store.on("error", (error) => this.emit("error", error));
          }
          this.opts.store.namespace = this.opts.namespace;
          const generateIterator = (iterator) => async function* () {
            for await (const [key, raw] of typeof iterator === "function" ? iterator(this.opts.store.namespace) : iterator) {
              const data = await this.opts.deserialize(raw);
              if (this.opts.store.namespace && !key.includes(this.opts.store.namespace)) {
                continue;
              }
              if (typeof data.expires === "number" && Date.now() > data.expires) {
                this.delete(key);
                continue;
              }
              yield [this._getKeyUnprefix(key), data.value];
            }
          };
          if (typeof this.opts.store[Symbol.iterator] === "function" && this.opts.store instanceof Map) {
            this.iterator = generateIterator(this.opts.store);
          } else if (typeof this.opts.store.iterator === "function" && this.opts.store.opts && this._checkIterableAdaptar()) {
            this.iterator = generateIterator(this.opts.store.iterator.bind(this.opts.store));
          }
        }
        _checkIterableAdaptar() {
          return iterableAdapters.includes(this.opts.store.opts.dialect) || iterableAdapters.findIndex((element) => this.opts.store.opts.url.includes(element)) >= 0;
        }
        _getKeyPrefix(key) {
          return `${this.opts.namespace}:${key}`;
        }
        _getKeyPrefixArray(keys) {
          return keys.map((key) => `${this.opts.namespace}:${key}`);
        }
        _getKeyUnprefix(key) {
          return key.split(":").splice(1).join(":");
        }
        get(key, options) {
          const { store } = this.opts;
          const isArray = Array.isArray(key);
          const keyPrefixed = isArray ? this._getKeyPrefixArray(key) : this._getKeyPrefix(key);
          if (isArray && store.getMany === undefined) {
            const promises = [];
            for (const key2 of keyPrefixed) {
              promises.push(Promise.resolve().then(() => store.get(key2)).then((data) => typeof data === "string" ? this.opts.deserialize(data) : this.opts.compression ? this.opts.deserialize(data) : data).then((data) => {
                if (data === undefined || data === null) {
                  return;
                }
                if (typeof data.expires === "number" && Date.now() > data.expires) {
                  return this.delete(key2).then(() => {
                    return;
                  });
                }
                return options && options.raw ? data : data.value;
              }));
            }
            return Promise.allSettled(promises).then((values) => {
              const data = [];
              for (const value of values) {
                data.push(value.value);
              }
              return data;
            });
          }
          return Promise.resolve().then(() => isArray ? store.getMany(keyPrefixed) : store.get(keyPrefixed)).then((data) => typeof data === "string" ? this.opts.deserialize(data) : this.opts.compression ? this.opts.deserialize(data) : data).then((data) => {
            if (data === undefined || data === null) {
              return;
            }
            if (isArray) {
              return data.map((row, index) => {
                if (typeof row === "string") {
                  row = this.opts.deserialize(row);
                }
                if (row === undefined || row === null) {
                  return;
                }
                if (typeof row.expires === "number" && Date.now() > row.expires) {
                  this.delete(key[index]).then(() => {
                    return;
                  });
                  return;
                }
                return options && options.raw ? row : row.value;
              });
            }
            if (typeof data.expires === "number" && Date.now() > data.expires) {
              return this.delete(key).then(() => {
                return;
              });
            }
            return options && options.raw ? data : data.value;
          });
        }
        set(key, value, ttl) {
          const keyPrefixed = this._getKeyPrefix(key);
          if (typeof ttl === "undefined") {
            ttl = this.opts.ttl;
          }
          if (ttl === 0) {
            ttl = undefined;
          }
          const { store } = this.opts;
          return Promise.resolve().then(() => {
            const expires = typeof ttl === "number" ? Date.now() + ttl : null;
            if (typeof value === "symbol") {
              this.emit("error", "symbol cannot be serialized");
            }
            value = { value, expires };
            return this.opts.serialize(value);
          }).then((value2) => store.set(keyPrefixed, value2, ttl)).then(() => true);
        }
        delete(key) {
          const { store } = this.opts;
          if (Array.isArray(key)) {
            const keyPrefixed2 = this._getKeyPrefixArray(key);
            if (store.deleteMany === undefined) {
              const promises = [];
              for (const key2 of keyPrefixed2) {
                promises.push(store.delete(key2));
              }
              return Promise.allSettled(promises).then((values) => values.every((x) => x.value === true));
            }
            return Promise.resolve().then(() => store.deleteMany(keyPrefixed2));
          }
          const keyPrefixed = this._getKeyPrefix(key);
          return Promise.resolve().then(() => store.delete(keyPrefixed));
        }
        clear() {
          const { store } = this.opts;
          return Promise.resolve().then(() => store.clear());
        }
        has(key) {
          const keyPrefixed = this._getKeyPrefix(key);
          const { store } = this.opts;
          return Promise.resolve().then(async () => {
            if (typeof store.has === "function") {
              return store.has(keyPrefixed);
            }
            const value = await store.get(keyPrefixed);
            return value !== undefined;
          });
        }
        disconnect() {
          const { store } = this.opts;
          if (typeof store.disconnect === "function") {
            return store.disconnect();
          }
        }
      };
      module22.exports = Keyv;
    }
  });
  var require_src4 = __commonJS2({
    "../../node_modules/.pnpm/cacheable-request@7.0.4/node_modules/cacheable-request/src/index.js"(exports22, module22) {
      var EventEmitter = __require("events");
      var urlLib = __require("url");
      var normalizeUrl = require_normalize_url();
      var getStream = require_get_stream();
      var CachePolicy = require_http_cache_semantics();
      var Response = require_src();
      var lowercaseKeys = require_lowercase_keys();
      var cloneResponse = require_src2();
      var Keyv = require_src3();
      var CacheableRequest = class _CacheableRequest {
        constructor(request, cacheAdapter) {
          if (typeof request !== "function") {
            throw new TypeError("Parameter `request` must be a function");
          }
          this.cache = new Keyv({
            uri: typeof cacheAdapter === "string" && cacheAdapter,
            store: typeof cacheAdapter !== "string" && cacheAdapter,
            namespace: "cacheable-request"
          });
          return this.createCacheableRequest(request);
        }
        createCacheableRequest(request) {
          return (opts, cb) => {
            let url;
            if (typeof opts === "string") {
              url = normalizeUrlObject(urlLib.parse(opts));
              opts = {};
            } else if (opts instanceof urlLib.URL) {
              url = normalizeUrlObject(urlLib.parse(opts.toString()));
              opts = {};
            } else {
              const [pathname, ...searchParts] = (opts.path || "").split("?");
              const search = searchParts.length > 0 ? `?${searchParts.join("?")}` : "";
              url = normalizeUrlObject({ ...opts, pathname, search });
            }
            opts = {
              headers: {},
              method: "GET",
              cache: true,
              strictTtl: false,
              automaticFailover: false,
              ...opts,
              ...urlObjectToRequestOptions(url)
            };
            opts.headers = lowercaseKeys(opts.headers);
            const ee = new EventEmitter;
            const normalizedUrlString = normalizeUrl(urlLib.format(url), {
              stripWWW: false,
              removeTrailingSlash: false,
              stripAuthentication: false
            });
            const key = `${opts.method}:${normalizedUrlString}`;
            let revalidate = false;
            let madeRequest = false;
            const makeRequest = (opts2) => {
              madeRequest = true;
              let requestErrored = false;
              let requestErrorCallback;
              const requestErrorPromise = new Promise((resolve) => {
                requestErrorCallback = () => {
                  if (!requestErrored) {
                    requestErrored = true;
                    resolve();
                  }
                };
              });
              const handler = (response) => {
                if (revalidate && !opts2.forceRefresh) {
                  response.status = response.statusCode;
                  const revalidatedPolicy = CachePolicy.fromObject(revalidate.cachePolicy).revalidatedPolicy(opts2, response);
                  if (!revalidatedPolicy.modified) {
                    const headers = revalidatedPolicy.policy.responseHeaders();
                    response = new Response(revalidate.statusCode, headers, revalidate.body, revalidate.url);
                    response.cachePolicy = revalidatedPolicy.policy;
                    response.fromCache = true;
                  }
                }
                if (!response.fromCache) {
                  response.cachePolicy = new CachePolicy(opts2, response, opts2);
                  response.fromCache = false;
                }
                let clonedResponse;
                if (opts2.cache && response.cachePolicy.storable()) {
                  clonedResponse = cloneResponse(response);
                  (async () => {
                    try {
                      const bodyPromise = getStream.buffer(response);
                      await Promise.race([
                        requestErrorPromise,
                        new Promise((resolve) => response.once("end", resolve))
                      ]);
                      if (requestErrored) {
                        return;
                      }
                      const body = await bodyPromise;
                      const value = {
                        cachePolicy: response.cachePolicy.toObject(),
                        url: response.url,
                        statusCode: response.fromCache ? revalidate.statusCode : response.statusCode,
                        body
                      };
                      let ttl = opts2.strictTtl ? response.cachePolicy.timeToLive() : undefined;
                      if (opts2.maxTtl) {
                        ttl = ttl ? Math.min(ttl, opts2.maxTtl) : opts2.maxTtl;
                      }
                      await this.cache.set(key, value, ttl);
                    } catch (error) {
                      ee.emit("error", new _CacheableRequest.CacheError(error));
                    }
                  })();
                } else if (opts2.cache && revalidate) {
                  (async () => {
                    try {
                      await this.cache.delete(key);
                    } catch (error) {
                      ee.emit("error", new _CacheableRequest.CacheError(error));
                    }
                  })();
                }
                ee.emit("response", clonedResponse || response);
                if (typeof cb === "function") {
                  cb(clonedResponse || response);
                }
              };
              try {
                const req = request(opts2, handler);
                req.once("error", requestErrorCallback);
                req.once("abort", requestErrorCallback);
                ee.emit("request", req);
              } catch (error) {
                ee.emit("error", new _CacheableRequest.RequestError(error));
              }
            };
            (async () => {
              const get = async (opts2) => {
                await Promise.resolve();
                const cacheEntry = opts2.cache ? await this.cache.get(key) : undefined;
                if (typeof cacheEntry === "undefined") {
                  return makeRequest(opts2);
                }
                const policy = CachePolicy.fromObject(cacheEntry.cachePolicy);
                if (policy.satisfiesWithoutRevalidation(opts2) && !opts2.forceRefresh) {
                  const headers = policy.responseHeaders();
                  const response = new Response(cacheEntry.statusCode, headers, cacheEntry.body, cacheEntry.url);
                  response.cachePolicy = policy;
                  response.fromCache = true;
                  ee.emit("response", response);
                  if (typeof cb === "function") {
                    cb(response);
                  }
                } else {
                  revalidate = cacheEntry;
                  opts2.headers = policy.revalidationHeaders(opts2);
                  makeRequest(opts2);
                }
              };
              const errorHandler = (error) => ee.emit("error", new _CacheableRequest.CacheError(error));
              this.cache.once("error", errorHandler);
              ee.on("response", () => this.cache.removeListener("error", errorHandler));
              try {
                await get(opts);
              } catch (error) {
                if (opts.automaticFailover && !madeRequest) {
                  makeRequest(opts);
                }
                ee.emit("error", new _CacheableRequest.CacheError(error));
              }
            })();
            return ee;
          };
        }
      };
      function urlObjectToRequestOptions(url) {
        const options = { ...url };
        options.path = `${url.pathname || "/"}${url.search || ""}`;
        delete options.pathname;
        delete options.search;
        return options;
      }
      function normalizeUrlObject(url) {
        return {
          protocol: url.protocol,
          auth: url.auth,
          hostname: url.hostname || url.host || "localhost",
          port: url.port,
          pathname: url.pathname,
          search: url.search
        };
      }
      CacheableRequest.RequestError = class extends Error {
        constructor(error) {
          super(error.message);
          this.name = "RequestError";
          Object.assign(this, error);
        }
      };
      CacheableRequest.CacheError = class extends Error {
        constructor(error) {
          super(error.message);
          this.name = "CacheError";
          Object.assign(this, error);
        }
      };
      module22.exports = CacheableRequest;
    }
  });
  var require_mimic_response2 = __commonJS2({
    "../../node_modules/.pnpm/mimic-response@3.1.0/node_modules/mimic-response/index.js"(exports22, module22) {
      var knownProperties = [
        "aborted",
        "complete",
        "headers",
        "httpVersion",
        "httpVersionMinor",
        "httpVersionMajor",
        "method",
        "rawHeaders",
        "rawTrailers",
        "setTimeout",
        "socket",
        "statusCode",
        "statusMessage",
        "trailers",
        "url"
      ];
      module22.exports = (fromStream, toStream) => {
        if (toStream._readableState.autoDestroy) {
          throw new Error("The second stream must have the `autoDestroy` option set to `false`");
        }
        const fromProperties = new Set(Object.keys(fromStream).concat(knownProperties));
        const properties = {};
        for (const property of fromProperties) {
          if (property in toStream) {
            continue;
          }
          properties[property] = {
            get() {
              const value = fromStream[property];
              const isFunction = typeof value === "function";
              return isFunction ? value.bind(fromStream) : value;
            },
            set(value) {
              fromStream[property] = value;
            },
            enumerable: true,
            configurable: false
          };
        }
        Object.defineProperties(toStream, properties);
        fromStream.once("aborted", () => {
          toStream.destroy();
          toStream.emit("aborted");
        });
        fromStream.once("close", () => {
          if (fromStream.complete) {
            if (toStream.readable) {
              toStream.once("end", () => {
                toStream.emit("close");
              });
            } else {
              toStream.emit("close");
            }
          } else {
            toStream.emit("close");
          }
        });
        return toStream;
      };
    }
  });
  var require_decompress_response = __commonJS2({
    "../../node_modules/.pnpm/decompress-response@6.0.0/node_modules/decompress-response/index.js"(exports22, module22) {
      var { Transform, PassThrough } = __require("stream");
      var zlib = __require("zlib");
      var mimicResponse = require_mimic_response2();
      module22.exports = (response) => {
        const contentEncoding = (response.headers["content-encoding"] || "").toLowerCase();
        if (!["gzip", "deflate", "br"].includes(contentEncoding)) {
          return response;
        }
        const isBrotli = contentEncoding === "br";
        if (isBrotli && typeof zlib.createBrotliDecompress !== "function") {
          response.destroy(new Error("Brotli is not supported on Node.js < 12"));
          return response;
        }
        let isEmpty = true;
        const checker = new Transform({
          transform(data, _encoding, callback) {
            isEmpty = false;
            callback(null, data);
          },
          flush(callback) {
            callback();
          }
        });
        const finalStream = new PassThrough({
          autoDestroy: false,
          destroy(error, callback) {
            response.destroy();
            callback(error);
          }
        });
        const decompressStream = isBrotli ? zlib.createBrotliDecompress() : zlib.createUnzip();
        decompressStream.once("error", (error) => {
          if (isEmpty && !response.readable) {
            finalStream.end();
            return;
          }
          finalStream.destroy(error);
        });
        mimicResponse(response, finalStream);
        response.pipe(checker).pipe(decompressStream).pipe(finalStream);
        return finalStream;
      };
    }
  });
  var require_quick_lru = __commonJS2({
    "../../node_modules/.pnpm/quick-lru@5.1.1/node_modules/quick-lru/index.js"(exports22, module22) {
      var QuickLRU = class {
        constructor(options = {}) {
          if (!(options.maxSize && options.maxSize > 0)) {
            throw new TypeError("`maxSize` must be a number greater than 0");
          }
          this.maxSize = options.maxSize;
          this.onEviction = options.onEviction;
          this.cache = /* @__PURE__ */ new Map;
          this.oldCache = /* @__PURE__ */ new Map;
          this._size = 0;
        }
        _set(key, value) {
          this.cache.set(key, value);
          this._size++;
          if (this._size >= this.maxSize) {
            this._size = 0;
            if (typeof this.onEviction === "function") {
              for (const [key2, value2] of this.oldCache.entries()) {
                this.onEviction(key2, value2);
              }
            }
            this.oldCache = this.cache;
            this.cache = /* @__PURE__ */ new Map;
          }
        }
        get(key) {
          if (this.cache.has(key)) {
            return this.cache.get(key);
          }
          if (this.oldCache.has(key)) {
            const value = this.oldCache.get(key);
            this.oldCache.delete(key);
            this._set(key, value);
            return value;
          }
        }
        set(key, value) {
          if (this.cache.has(key)) {
            this.cache.set(key, value);
          } else {
            this._set(key, value);
          }
          return this;
        }
        has(key) {
          return this.cache.has(key) || this.oldCache.has(key);
        }
        peek(key) {
          if (this.cache.has(key)) {
            return this.cache.get(key);
          }
          if (this.oldCache.has(key)) {
            return this.oldCache.get(key);
          }
        }
        delete(key) {
          const deleted = this.cache.delete(key);
          if (deleted) {
            this._size--;
          }
          return this.oldCache.delete(key) || deleted;
        }
        clear() {
          this.cache.clear();
          this.oldCache.clear();
          this._size = 0;
        }
        *keys() {
          for (const [key] of this) {
            yield key;
          }
        }
        *values() {
          for (const [, value] of this) {
            yield value;
          }
        }
        *[Symbol.iterator]() {
          for (const item of this.cache) {
            yield item;
          }
          for (const item of this.oldCache) {
            const [key] = item;
            if (!this.cache.has(key)) {
              yield item;
            }
          }
        }
        get size() {
          let oldCacheSize = 0;
          for (const key of this.oldCache.keys()) {
            if (!this.cache.has(key)) {
              oldCacheSize++;
            }
          }
          return Math.min(this._size + oldCacheSize, this.maxSize);
        }
      };
      module22.exports = QuickLRU;
    }
  });
  var require_agent = __commonJS2({
    "../../node_modules/.pnpm/http2-wrapper@1.0.3/node_modules/http2-wrapper/source/agent.js"(exports22, module22) {
      var EventEmitter = __require("events");
      var tls = __require("tls");
      var http2 = __require("http2");
      var QuickLRU = require_quick_lru();
      var kCurrentStreamsCount = Symbol("currentStreamsCount");
      var kRequest = Symbol("request");
      var kOriginSet = Symbol("cachedOriginSet");
      var kGracefullyClosing = Symbol("gracefullyClosing");
      var nameKeys = [
        "maxDeflateDynamicTableSize",
        "maxSessionMemory",
        "maxHeaderListPairs",
        "maxOutstandingPings",
        "maxReservedRemoteStreams",
        "maxSendHeaderBlockLength",
        "paddingStrategy",
        "localAddress",
        "path",
        "rejectUnauthorized",
        "minDHSize",
        "ca",
        "cert",
        "clientCertEngine",
        "ciphers",
        "key",
        "pfx",
        "servername",
        "minVersion",
        "maxVersion",
        "secureProtocol",
        "crl",
        "honorCipherOrder",
        "ecdhCurve",
        "dhparam",
        "secureOptions",
        "sessionIdContext"
      ];
      var getSortedIndex = (array, value, compare) => {
        let low = 0;
        let high = array.length;
        while (low < high) {
          const mid = low + high >>> 1;
          if (compare(array[mid], value)) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return low;
      };
      var compareSessions = (a, b) => {
        return a.remoteSettings.maxConcurrentStreams > b.remoteSettings.maxConcurrentStreams;
      };
      var closeCoveredSessions = (where, session) => {
        for (const coveredSession of where) {
          if (coveredSession[kOriginSet].length < session[kOriginSet].length && coveredSession[kOriginSet].every((origin) => session[kOriginSet].includes(origin)) && coveredSession[kCurrentStreamsCount] + session[kCurrentStreamsCount] <= session.remoteSettings.maxConcurrentStreams) {
            gracefullyClose(coveredSession);
          }
        }
      };
      var closeSessionIfCovered = (where, coveredSession) => {
        for (const session of where) {
          if (coveredSession[kOriginSet].length < session[kOriginSet].length && coveredSession[kOriginSet].every((origin) => session[kOriginSet].includes(origin)) && coveredSession[kCurrentStreamsCount] + session[kCurrentStreamsCount] <= session.remoteSettings.maxConcurrentStreams) {
            gracefullyClose(coveredSession);
          }
        }
      };
      var getSessions = ({ agent, isFree }) => {
        const result2 = {};
        for (const normalizedOptions in agent.sessions) {
          const sessions = agent.sessions[normalizedOptions];
          const filtered = sessions.filter((session) => {
            const result3 = session[Agent.kCurrentStreamsCount] < session.remoteSettings.maxConcurrentStreams;
            return isFree ? result3 : !result3;
          });
          if (filtered.length !== 0) {
            result2[normalizedOptions] = filtered;
          }
        }
        return result2;
      };
      var gracefullyClose = (session) => {
        session[kGracefullyClosing] = true;
        if (session[kCurrentStreamsCount] === 0) {
          session.close();
        }
      };
      var Agent = class _Agent extends EventEmitter {
        constructor({ timeout = 60000, maxSessions = Infinity, maxFreeSessions = 10, maxCachedTlsSessions = 100 } = {}) {
          super();
          this.sessions = {};
          this.queue = {};
          this.timeout = timeout;
          this.maxSessions = maxSessions;
          this.maxFreeSessions = maxFreeSessions;
          this._freeSessionsCount = 0;
          this._sessionsCount = 0;
          this.settings = {
            enablePush: false
          };
          this.tlsSessionCache = new QuickLRU({ maxSize: maxCachedTlsSessions });
        }
        static normalizeOrigin(url, servername) {
          if (typeof url === "string") {
            url = new URL(url);
          }
          if (servername && url.hostname !== servername) {
            url.hostname = servername;
          }
          return url.origin;
        }
        normalizeOptions(options) {
          let normalized = "";
          if (options) {
            for (const key of nameKeys) {
              if (options[key]) {
                normalized += `:${options[key]}`;
              }
            }
          }
          return normalized;
        }
        _tryToCreateNewSession(normalizedOptions, normalizedOrigin) {
          if (!(normalizedOptions in this.queue) || !(normalizedOrigin in this.queue[normalizedOptions])) {
            return;
          }
          const item = this.queue[normalizedOptions][normalizedOrigin];
          if (this._sessionsCount < this.maxSessions && !item.completed) {
            item.completed = true;
            item();
          }
        }
        getSession(origin, options, listeners) {
          return new Promise((resolve, reject) => {
            if (Array.isArray(listeners)) {
              listeners = [...listeners];
              resolve();
            } else {
              listeners = [{ resolve, reject }];
            }
            const normalizedOptions = this.normalizeOptions(options);
            const normalizedOrigin = _Agent.normalizeOrigin(origin, options && options.servername);
            if (normalizedOrigin === undefined) {
              for (const { reject: reject2 } of listeners) {
                reject2(new TypeError("The `origin` argument needs to be a string or an URL object"));
              }
              return;
            }
            if (normalizedOptions in this.sessions) {
              const sessions = this.sessions[normalizedOptions];
              let maxConcurrentStreams = -1;
              let currentStreamsCount = -1;
              let optimalSession;
              for (const session of sessions) {
                const sessionMaxConcurrentStreams = session.remoteSettings.maxConcurrentStreams;
                if (sessionMaxConcurrentStreams < maxConcurrentStreams) {
                  break;
                }
                if (session[kOriginSet].includes(normalizedOrigin)) {
                  const sessionCurrentStreamsCount = session[kCurrentStreamsCount];
                  if (sessionCurrentStreamsCount >= sessionMaxConcurrentStreams || session[kGracefullyClosing] || session.destroyed) {
                    continue;
                  }
                  if (!optimalSession) {
                    maxConcurrentStreams = sessionMaxConcurrentStreams;
                  }
                  if (sessionCurrentStreamsCount > currentStreamsCount) {
                    optimalSession = session;
                    currentStreamsCount = sessionCurrentStreamsCount;
                  }
                }
              }
              if (optimalSession) {
                if (listeners.length !== 1) {
                  for (const { reject: reject2 } of listeners) {
                    const error = new Error(`Expected the length of listeners to be 1, got ${listeners.length}.
Please report this to https://github.com/szmarczak/http2-wrapper/`);
                    reject2(error);
                  }
                  return;
                }
                listeners[0].resolve(optimalSession);
                return;
              }
            }
            if (normalizedOptions in this.queue) {
              if (normalizedOrigin in this.queue[normalizedOptions]) {
                this.queue[normalizedOptions][normalizedOrigin].listeners.push(...listeners);
                this._tryToCreateNewSession(normalizedOptions, normalizedOrigin);
                return;
              }
            } else {
              this.queue[normalizedOptions] = {};
            }
            const removeFromQueue = () => {
              if (normalizedOptions in this.queue && this.queue[normalizedOptions][normalizedOrigin] === entry) {
                delete this.queue[normalizedOptions][normalizedOrigin];
                if (Object.keys(this.queue[normalizedOptions]).length === 0) {
                  delete this.queue[normalizedOptions];
                }
              }
            };
            const entry = () => {
              const name = `${normalizedOrigin}:${normalizedOptions}`;
              let receivedSettings = false;
              try {
                const session = http2.connect(origin, {
                  createConnection: this.createConnection,
                  settings: this.settings,
                  session: this.tlsSessionCache.get(name),
                  ...options
                });
                session[kCurrentStreamsCount] = 0;
                session[kGracefullyClosing] = false;
                const isFree = () => session[kCurrentStreamsCount] < session.remoteSettings.maxConcurrentStreams;
                let wasFree = true;
                session.socket.once("session", (tlsSession) => {
                  this.tlsSessionCache.set(name, tlsSession);
                });
                session.once("error", (error) => {
                  for (const { reject: reject2 } of listeners) {
                    reject2(error);
                  }
                  this.tlsSessionCache.delete(name);
                });
                session.setTimeout(this.timeout, () => {
                  session.destroy();
                });
                session.once("close", () => {
                  if (receivedSettings) {
                    if (wasFree) {
                      this._freeSessionsCount--;
                    }
                    this._sessionsCount--;
                    const where = this.sessions[normalizedOptions];
                    where.splice(where.indexOf(session), 1);
                    if (where.length === 0) {
                      delete this.sessions[normalizedOptions];
                    }
                  } else {
                    const error = new Error("Session closed without receiving a SETTINGS frame");
                    error.code = "HTTP2WRAPPER_NOSETTINGS";
                    for (const { reject: reject2 } of listeners) {
                      reject2(error);
                    }
                    removeFromQueue();
                  }
                  this._tryToCreateNewSession(normalizedOptions, normalizedOrigin);
                });
                const processListeners = () => {
                  if (!(normalizedOptions in this.queue) || !isFree()) {
                    return;
                  }
                  for (const origin2 of session[kOriginSet]) {
                    if (origin2 in this.queue[normalizedOptions]) {
                      const { listeners: listeners2 } = this.queue[normalizedOptions][origin2];
                      while (listeners2.length !== 0 && isFree()) {
                        listeners2.shift().resolve(session);
                      }
                      const where = this.queue[normalizedOptions];
                      if (where[origin2].listeners.length === 0) {
                        delete where[origin2];
                        if (Object.keys(where).length === 0) {
                          delete this.queue[normalizedOptions];
                          break;
                        }
                      }
                      if (!isFree()) {
                        break;
                      }
                    }
                  }
                };
                session.on("origin", () => {
                  session[kOriginSet] = session.originSet;
                  if (!isFree()) {
                    return;
                  }
                  processListeners();
                  closeCoveredSessions(this.sessions[normalizedOptions], session);
                });
                session.once("remoteSettings", () => {
                  session.ref();
                  session.unref();
                  this._sessionsCount++;
                  if (entry.destroyed) {
                    const error = new Error("Agent has been destroyed");
                    for (const listener of listeners) {
                      listener.reject(error);
                    }
                    session.destroy();
                    return;
                  }
                  session[kOriginSet] = session.originSet;
                  {
                    const where = this.sessions;
                    if (normalizedOptions in where) {
                      const sessions = where[normalizedOptions];
                      sessions.splice(getSortedIndex(sessions, session, compareSessions), 0, session);
                    } else {
                      where[normalizedOptions] = [session];
                    }
                  }
                  this._freeSessionsCount += 1;
                  receivedSettings = true;
                  this.emit("session", session);
                  processListeners();
                  removeFromQueue();
                  if (session[kCurrentStreamsCount] === 0 && this._freeSessionsCount > this.maxFreeSessions) {
                    session.close();
                  }
                  if (listeners.length !== 0) {
                    this.getSession(normalizedOrigin, options, listeners);
                    listeners.length = 0;
                  }
                  session.on("remoteSettings", () => {
                    processListeners();
                    closeCoveredSessions(this.sessions[normalizedOptions], session);
                  });
                });
                session[kRequest] = session.request;
                session.request = (headers, streamOptions) => {
                  if (session[kGracefullyClosing]) {
                    throw new Error("The session is gracefully closing. No new streams are allowed.");
                  }
                  const stream = session[kRequest](headers, streamOptions);
                  session.ref();
                  ++session[kCurrentStreamsCount];
                  if (session[kCurrentStreamsCount] === session.remoteSettings.maxConcurrentStreams) {
                    this._freeSessionsCount--;
                  }
                  stream.once("close", () => {
                    wasFree = isFree();
                    --session[kCurrentStreamsCount];
                    if (!session.destroyed && !session.closed) {
                      closeSessionIfCovered(this.sessions[normalizedOptions], session);
                      if (isFree() && !session.closed) {
                        if (!wasFree) {
                          this._freeSessionsCount++;
                          wasFree = true;
                        }
                        const isEmpty = session[kCurrentStreamsCount] === 0;
                        if (isEmpty) {
                          session.unref();
                        }
                        if (isEmpty && (this._freeSessionsCount > this.maxFreeSessions || session[kGracefullyClosing])) {
                          session.close();
                        } else {
                          closeCoveredSessions(this.sessions[normalizedOptions], session);
                          processListeners();
                        }
                      }
                    }
                  });
                  return stream;
                };
              } catch (error) {
                for (const listener of listeners) {
                  listener.reject(error);
                }
                removeFromQueue();
              }
            };
            entry.listeners = listeners;
            entry.completed = false;
            entry.destroyed = false;
            this.queue[normalizedOptions][normalizedOrigin] = entry;
            this._tryToCreateNewSession(normalizedOptions, normalizedOrigin);
          });
        }
        request(origin, options, headers, streamOptions) {
          return new Promise((resolve, reject) => {
            this.getSession(origin, options, [{
              reject,
              resolve: (session) => {
                try {
                  resolve(session.request(headers, streamOptions));
                } catch (error) {
                  reject(error);
                }
              }
            }]);
          });
        }
        createConnection(origin, options) {
          return _Agent.connect(origin, options);
        }
        static connect(origin, options) {
          options.ALPNProtocols = ["h2"];
          const port = origin.port || 443;
          const host = origin.hostname || origin.host;
          if (typeof options.servername === "undefined") {
            options.servername = host;
          }
          return tls.connect(port, host, options);
        }
        closeFreeSessions() {
          for (const sessions of Object.values(this.sessions)) {
            for (const session of sessions) {
              if (session[kCurrentStreamsCount] === 0) {
                session.close();
              }
            }
          }
        }
        destroy(reason) {
          for (const sessions of Object.values(this.sessions)) {
            for (const session of sessions) {
              session.destroy(reason);
            }
          }
          for (const entriesOfAuthority of Object.values(this.queue)) {
            for (const entry of Object.values(entriesOfAuthority)) {
              entry.destroyed = true;
            }
          }
          this.queue = {};
        }
        get freeSessions() {
          return getSessions({ agent: this, isFree: true });
        }
        get busySessions() {
          return getSessions({ agent: this, isFree: false });
        }
      };
      Agent.kCurrentStreamsCount = kCurrentStreamsCount;
      Agent.kGracefullyClosing = kGracefullyClosing;
      module22.exports = {
        Agent,
        globalAgent: new Agent
      };
    }
  });
  var require_incoming_message = __commonJS2({
    "../../node_modules/.pnpm/http2-wrapper@1.0.3/node_modules/http2-wrapper/source/incoming-message.js"(exports22, module22) {
      var { Readable } = __require("stream");
      var IncomingMessage = class extends Readable {
        constructor(socket, highWaterMark) {
          super({
            highWaterMark,
            autoDestroy: false
          });
          this.statusCode = null;
          this.statusMessage = "";
          this.httpVersion = "2.0";
          this.httpVersionMajor = 2;
          this.httpVersionMinor = 0;
          this.headers = {};
          this.trailers = {};
          this.req = null;
          this.aborted = false;
          this.complete = false;
          this.upgrade = null;
          this.rawHeaders = [];
          this.rawTrailers = [];
          this.socket = socket;
          this.connection = socket;
          this._dumped = false;
        }
        _destroy(error) {
          this.req._request.destroy(error);
        }
        setTimeout(ms, callback) {
          this.req.setTimeout(ms, callback);
          return this;
        }
        _dump() {
          if (!this._dumped) {
            this._dumped = true;
            this.removeAllListeners("data");
            this.resume();
          }
        }
        _read() {
          if (this.req) {
            this.req._request.resume();
          }
        }
      };
      module22.exports = IncomingMessage;
    }
  });
  var require_url_to_options = __commonJS2({
    "../../node_modules/.pnpm/http2-wrapper@1.0.3/node_modules/http2-wrapper/source/utils/url-to-options.js"(exports22, module22) {
      module22.exports = (url) => {
        const options = {
          protocol: url.protocol,
          hostname: typeof url.hostname === "string" && url.hostname.startsWith("[") ? url.hostname.slice(1, -1) : url.hostname,
          host: url.host,
          hash: url.hash,
          search: url.search,
          pathname: url.pathname,
          href: url.href,
          path: `${url.pathname || ""}${url.search || ""}`
        };
        if (typeof url.port === "string" && url.port.length !== 0) {
          options.port = Number(url.port);
        }
        if (url.username || url.password) {
          options.auth = `${url.username || ""}:${url.password || ""}`;
        }
        return options;
      };
    }
  });
  var require_proxy_events = __commonJS2({
    "../../node_modules/.pnpm/http2-wrapper@1.0.3/node_modules/http2-wrapper/source/utils/proxy-events.js"(exports22, module22) {
      module22.exports = (from, to, events) => {
        for (const event of events) {
          from.on(event, (...args) => to.emit(event, ...args));
        }
      };
    }
  });
  var require_is_request_pseudo_header = __commonJS2({
    "../../node_modules/.pnpm/http2-wrapper@1.0.3/node_modules/http2-wrapper/source/utils/is-request-pseudo-header.js"(exports22, module22) {
      module22.exports = (header) => {
        switch (header) {
          case ":method":
          case ":scheme":
          case ":authority":
          case ":path":
            return true;
          default:
            return false;
        }
      };
    }
  });
  var require_errors3 = __commonJS2({
    "../../node_modules/.pnpm/http2-wrapper@1.0.3/node_modules/http2-wrapper/source/utils/errors.js"(exports22, module22) {
      var makeError = (Base, key, getMessage) => {
        module22.exports[key] = class NodeError extends Base {
          constructor(...args) {
            super(typeof getMessage === "string" ? getMessage : getMessage(args));
            this.name = `${super.name} [${key}]`;
            this.code = key;
          }
        };
      };
      makeError(TypeError, "ERR_INVALID_ARG_TYPE", (args) => {
        const type = args[0].includes(".") ? "property" : "argument";
        let valid = args[1];
        const isManyTypes = Array.isArray(valid);
        if (isManyTypes) {
          valid = `${valid.slice(0, -1).join(", ")} or ${valid.slice(-1)}`;
        }
        return `The "${args[0]}" ${type} must be ${isManyTypes ? "one of" : "of"} type ${valid}. Received ${typeof args[2]}`;
      });
      makeError(TypeError, "ERR_INVALID_PROTOCOL", (args) => {
        return `Protocol "${args[0]}" not supported. Expected "${args[1]}"`;
      });
      makeError(Error, "ERR_HTTP_HEADERS_SENT", (args) => {
        return `Cannot ${args[0]} headers after they are sent to the client`;
      });
      makeError(TypeError, "ERR_INVALID_HTTP_TOKEN", (args) => {
        return `${args[0]} must be a valid HTTP token [${args[1]}]`;
      });
      makeError(TypeError, "ERR_HTTP_INVALID_HEADER_VALUE", (args) => {
        return `Invalid value "${args[0]} for header "${args[1]}"`;
      });
      makeError(TypeError, "ERR_INVALID_CHAR", (args) => {
        return `Invalid character in ${args[0]} [${args[1]}]`;
      });
    }
  });
  var require_client_request = __commonJS2({
    "../../node_modules/.pnpm/http2-wrapper@1.0.3/node_modules/http2-wrapper/source/client-request.js"(exports22, module22) {
      var http2 = __require("http2");
      var { Writable } = __require("stream");
      var { Agent, globalAgent } = require_agent();
      var IncomingMessage = require_incoming_message();
      var urlToOptions = require_url_to_options();
      var proxyEvents = require_proxy_events();
      var isRequestPseudoHeader = require_is_request_pseudo_header();
      var {
        ERR_INVALID_ARG_TYPE,
        ERR_INVALID_PROTOCOL,
        ERR_HTTP_HEADERS_SENT,
        ERR_INVALID_HTTP_TOKEN,
        ERR_HTTP_INVALID_HEADER_VALUE,
        ERR_INVALID_CHAR
      } = require_errors3();
      var {
        HTTP2_HEADER_STATUS,
        HTTP2_HEADER_METHOD,
        HTTP2_HEADER_PATH,
        HTTP2_METHOD_CONNECT
      } = http2.constants;
      var kHeaders = Symbol("headers");
      var kOrigin = Symbol("origin");
      var kSession = Symbol("session");
      var kOptions = Symbol("options");
      var kFlushedHeaders = Symbol("flushedHeaders");
      var kJobs = Symbol("jobs");
      var isValidHttpToken = /^[\^`\-\w!#$%&*+.|~]+$/;
      var isInvalidHeaderValue = /[^\t\u0020-\u007E\u0080-\u00FF]/;
      var ClientRequest = class extends Writable {
        constructor(input, options, callback) {
          super({
            autoDestroy: false
          });
          const hasInput = typeof input === "string" || input instanceof URL;
          if (hasInput) {
            input = urlToOptions(input instanceof URL ? input : new URL(input));
          }
          if (typeof options === "function" || options === undefined) {
            callback = options;
            options = hasInput ? input : { ...input };
          } else {
            options = { ...input, ...options };
          }
          if (options.h2session) {
            this[kSession] = options.h2session;
          } else if (options.agent === false) {
            this.agent = new Agent({ maxFreeSessions: 0 });
          } else if (typeof options.agent === "undefined" || options.agent === null) {
            if (typeof options.createConnection === "function") {
              this.agent = new Agent({ maxFreeSessions: 0 });
              this.agent.createConnection = options.createConnection;
            } else {
              this.agent = globalAgent;
            }
          } else if (typeof options.agent.request === "function") {
            this.agent = options.agent;
          } else {
            throw new ERR_INVALID_ARG_TYPE("options.agent", ["Agent-like Object", "undefined", "false"], options.agent);
          }
          if (options.protocol && options.protocol !== "https:") {
            throw new ERR_INVALID_PROTOCOL(options.protocol, "https:");
          }
          const port = options.port || options.defaultPort || this.agent && this.agent.defaultPort || 443;
          const host = options.hostname || options.host || "localhost";
          delete options.hostname;
          delete options.host;
          delete options.port;
          const { timeout } = options;
          options.timeout = undefined;
          this[kHeaders] = /* @__PURE__ */ Object.create(null);
          this[kJobs] = [];
          this.socket = null;
          this.connection = null;
          this.method = options.method || "GET";
          this.path = options.path;
          this.res = null;
          this.aborted = false;
          this.reusedSocket = false;
          if (options.headers) {
            for (const [header, value] of Object.entries(options.headers)) {
              this.setHeader(header, value);
            }
          }
          if (options.auth && !("authorization" in this[kHeaders])) {
            this[kHeaders].authorization = "Basic " + Buffer.from(options.auth).toString("base64");
          }
          options.session = options.tlsSession;
          options.path = options.socketPath;
          this[kOptions] = options;
          if (port === 443) {
            this[kOrigin] = `https://${host}`;
            if (!(":authority" in this[kHeaders])) {
              this[kHeaders][":authority"] = host;
            }
          } else {
            this[kOrigin] = `https://${host}:${port}`;
            if (!(":authority" in this[kHeaders])) {
              this[kHeaders][":authority"] = `${host}:${port}`;
            }
          }
          if (timeout) {
            this.setTimeout(timeout);
          }
          if (callback) {
            this.once("response", callback);
          }
          this[kFlushedHeaders] = false;
        }
        get method() {
          return this[kHeaders][HTTP2_HEADER_METHOD];
        }
        set method(value) {
          if (value) {
            this[kHeaders][HTTP2_HEADER_METHOD] = value.toUpperCase();
          }
        }
        get path() {
          return this[kHeaders][HTTP2_HEADER_PATH];
        }
        set path(value) {
          if (value) {
            this[kHeaders][HTTP2_HEADER_PATH] = value;
          }
        }
        get _mustNotHaveABody() {
          return this.method === "GET" || this.method === "HEAD" || this.method === "DELETE";
        }
        _write(chunk, encoding, callback) {
          if (this._mustNotHaveABody) {
            callback(new Error("The GET, HEAD and DELETE methods must NOT have a body"));
            return;
          }
          this.flushHeaders();
          const callWrite = () => this._request.write(chunk, encoding, callback);
          if (this._request) {
            callWrite();
          } else {
            this[kJobs].push(callWrite);
          }
        }
        _final(callback) {
          if (this.destroyed) {
            return;
          }
          this.flushHeaders();
          const callEnd = () => {
            if (this._mustNotHaveABody) {
              callback();
              return;
            }
            this._request.end(callback);
          };
          if (this._request) {
            callEnd();
          } else {
            this[kJobs].push(callEnd);
          }
        }
        abort() {
          if (this.res && this.res.complete) {
            return;
          }
          if (!this.aborted) {
            process.nextTick(() => this.emit("abort"));
          }
          this.aborted = true;
          this.destroy();
        }
        _destroy(error, callback) {
          if (this.res) {
            this.res._dump();
          }
          if (this._request) {
            this._request.destroy();
          }
          callback(error);
        }
        async flushHeaders() {
          if (this[kFlushedHeaders] || this.destroyed) {
            return;
          }
          this[kFlushedHeaders] = true;
          const isConnectMethod = this.method === HTTP2_METHOD_CONNECT;
          const onStream = (stream) => {
            this._request = stream;
            if (this.destroyed) {
              stream.destroy();
              return;
            }
            if (!isConnectMethod) {
              proxyEvents(stream, this, ["timeout", "continue", "close", "error"]);
            }
            const waitForEnd = (fn) => {
              return (...args) => {
                if (!this.writable && !this.destroyed) {
                  fn(...args);
                } else {
                  this.once("finish", () => {
                    fn(...args);
                  });
                }
              };
            };
            stream.once("response", waitForEnd((headers, flags, rawHeaders) => {
              const response = new IncomingMessage(this.socket, stream.readableHighWaterMark);
              this.res = response;
              response.req = this;
              response.statusCode = headers[HTTP2_HEADER_STATUS];
              response.headers = headers;
              response.rawHeaders = rawHeaders;
              response.once("end", () => {
                if (this.aborted) {
                  response.aborted = true;
                  response.emit("aborted");
                } else {
                  response.complete = true;
                  response.socket = null;
                  response.connection = null;
                }
              });
              if (isConnectMethod) {
                response.upgrade = true;
                if (this.emit("connect", response, stream, Buffer.alloc(0))) {
                  this.emit("close");
                } else {
                  stream.destroy();
                }
              } else {
                stream.on("data", (chunk) => {
                  if (!response._dumped && !response.push(chunk)) {
                    stream.pause();
                  }
                });
                stream.once("end", () => {
                  response.push(null);
                });
                if (!this.emit("response", response)) {
                  response._dump();
                }
              }
            }));
            stream.once("headers", waitForEnd((headers) => this.emit("information", { statusCode: headers[HTTP2_HEADER_STATUS] })));
            stream.once("trailers", waitForEnd((trailers, flags, rawTrailers) => {
              const { res } = this;
              res.trailers = trailers;
              res.rawTrailers = rawTrailers;
            }));
            const { socket } = stream.session;
            this.socket = socket;
            this.connection = socket;
            for (const job of this[kJobs]) {
              job();
            }
            this.emit("socket", this.socket);
          };
          if (this[kSession]) {
            try {
              onStream(this[kSession].request(this[kHeaders]));
            } catch (error) {
              this.emit("error", error);
            }
          } else {
            this.reusedSocket = true;
            try {
              onStream(await this.agent.request(this[kOrigin], this[kOptions], this[kHeaders]));
            } catch (error) {
              this.emit("error", error);
            }
          }
        }
        getHeader(name) {
          if (typeof name !== "string") {
            throw new ERR_INVALID_ARG_TYPE("name", "string", name);
          }
          return this[kHeaders][name.toLowerCase()];
        }
        get headersSent() {
          return this[kFlushedHeaders];
        }
        removeHeader(name) {
          if (typeof name !== "string") {
            throw new ERR_INVALID_ARG_TYPE("name", "string", name);
          }
          if (this.headersSent) {
            throw new ERR_HTTP_HEADERS_SENT("remove");
          }
          delete this[kHeaders][name.toLowerCase()];
        }
        setHeader(name, value) {
          if (this.headersSent) {
            throw new ERR_HTTP_HEADERS_SENT("set");
          }
          if (typeof name !== "string" || !isValidHttpToken.test(name) && !isRequestPseudoHeader(name)) {
            throw new ERR_INVALID_HTTP_TOKEN("Header name", name);
          }
          if (typeof value === "undefined") {
            throw new ERR_HTTP_INVALID_HEADER_VALUE(value, name);
          }
          if (isInvalidHeaderValue.test(value)) {
            throw new ERR_INVALID_CHAR("header content", name);
          }
          this[kHeaders][name.toLowerCase()] = value;
        }
        setNoDelay() {
        }
        setSocketKeepAlive() {
        }
        setTimeout(ms, callback) {
          const applyTimeout = () => this._request.setTimeout(ms, callback);
          if (this._request) {
            applyTimeout();
          } else {
            this[kJobs].push(applyTimeout);
          }
          return this;
        }
        get maxHeadersCount() {
          if (!this.destroyed && this._request) {
            return this._request.session.localSettings.maxHeaderListSize;
          }
          return;
        }
        set maxHeadersCount(_value) {
        }
      };
      module22.exports = ClientRequest;
    }
  });
  var require_resolve_alpn = __commonJS2({
    "../../node_modules/.pnpm/resolve-alpn@1.2.1/node_modules/resolve-alpn/index.js"(exports22, module22) {
      var tls = __require("tls");
      module22.exports = (options = {}, connect = tls.connect) => new Promise((resolve, reject) => {
        let timeout = false;
        let socket;
        const callback = async () => {
          await socketPromise;
          socket.off("timeout", onTimeout);
          socket.off("error", reject);
          if (options.resolveSocket) {
            resolve({ alpnProtocol: socket.alpnProtocol, socket, timeout });
            if (timeout) {
              await Promise.resolve();
              socket.emit("timeout");
            }
          } else {
            socket.destroy();
            resolve({ alpnProtocol: socket.alpnProtocol, timeout });
          }
        };
        const onTimeout = async () => {
          timeout = true;
          callback();
        };
        const socketPromise = (async () => {
          try {
            socket = await connect(options, callback);
            socket.on("error", reject);
            socket.once("timeout", onTimeout);
          } catch (error) {
            reject(error);
          }
        })();
      });
    }
  });
  var require_calculate_server_name = __commonJS2({
    "../../node_modules/.pnpm/http2-wrapper@1.0.3/node_modules/http2-wrapper/source/utils/calculate-server-name.js"(exports22, module22) {
      var net = __require("net");
      module22.exports = (options) => {
        let servername = options.host;
        const hostHeader = options.headers && options.headers.host;
        if (hostHeader) {
          if (hostHeader.startsWith("[")) {
            const index = hostHeader.indexOf("]");
            if (index === -1) {
              servername = hostHeader;
            } else {
              servername = hostHeader.slice(1, -1);
            }
          } else {
            servername = hostHeader.split(":", 1)[0];
          }
        }
        if (net.isIP(servername)) {
          return "";
        }
        return servername;
      };
    }
  });
  var require_auto = __commonJS2({
    "../../node_modules/.pnpm/http2-wrapper@1.0.3/node_modules/http2-wrapper/source/auto.js"(exports22, module22) {
      var http = __require("http");
      var https = __require("https");
      var resolveALPN = require_resolve_alpn();
      var QuickLRU = require_quick_lru();
      var Http2ClientRequest = require_client_request();
      var calculateServerName = require_calculate_server_name();
      var urlToOptions = require_url_to_options();
      var cache = new QuickLRU({ maxSize: 100 });
      var queue = /* @__PURE__ */ new Map;
      var installSocket = (agent, socket, options) => {
        socket._httpMessage = { shouldKeepAlive: true };
        const onFree = () => {
          agent.emit("free", socket, options);
        };
        socket.on("free", onFree);
        const onClose = () => {
          agent.removeSocket(socket, options);
        };
        socket.on("close", onClose);
        const onRemove = () => {
          agent.removeSocket(socket, options);
          socket.off("close", onClose);
          socket.off("free", onFree);
          socket.off("agentRemove", onRemove);
        };
        socket.on("agentRemove", onRemove);
        agent.emit("free", socket, options);
      };
      var resolveProtocol = async (options) => {
        const name = `${options.host}:${options.port}:${options.ALPNProtocols.sort()}`;
        if (!cache.has(name)) {
          if (queue.has(name)) {
            const result2 = await queue.get(name);
            return result2.alpnProtocol;
          }
          const { path: path2, agent } = options;
          options.path = options.socketPath;
          const resultPromise = resolveALPN(options);
          queue.set(name, resultPromise);
          try {
            const { socket, alpnProtocol } = await resultPromise;
            cache.set(name, alpnProtocol);
            options.path = path2;
            if (alpnProtocol === "h2") {
              socket.destroy();
            } else {
              const { globalAgent } = https;
              const defaultCreateConnection = https.Agent.prototype.createConnection;
              if (agent) {
                if (agent.createConnection === defaultCreateConnection) {
                  installSocket(agent, socket, options);
                } else {
                  socket.destroy();
                }
              } else if (globalAgent.createConnection === defaultCreateConnection) {
                installSocket(globalAgent, socket, options);
              } else {
                socket.destroy();
              }
            }
            queue.delete(name);
            return alpnProtocol;
          } catch (error) {
            queue.delete(name);
            throw error;
          }
        }
        return cache.get(name);
      };
      module22.exports = async (input, options, callback) => {
        if (typeof input === "string" || input instanceof URL) {
          input = urlToOptions(new URL(input));
        }
        if (typeof options === "function") {
          callback = options;
          options = undefined;
        }
        options = {
          ALPNProtocols: ["h2", "http/1.1"],
          ...input,
          ...options,
          resolveSocket: true
        };
        if (!Array.isArray(options.ALPNProtocols) || options.ALPNProtocols.length === 0) {
          throw new Error("The `ALPNProtocols` option must be an Array with at least one entry");
        }
        options.protocol = options.protocol || "https:";
        const isHttps = options.protocol === "https:";
        options.host = options.hostname || options.host || "localhost";
        options.session = options.tlsSession;
        options.servername = options.servername || calculateServerName(options);
        options.port = options.port || (isHttps ? 443 : 80);
        options._defaultAgent = isHttps ? https.globalAgent : http.globalAgent;
        const agents = options.agent;
        if (agents) {
          if (agents.addRequest) {
            throw new Error("The `options.agent` object can contain only `http`, `https` or `http2` properties");
          }
          options.agent = agents[isHttps ? "https" : "http"];
        }
        if (isHttps) {
          const protocol = await resolveProtocol(options);
          if (protocol === "h2") {
            if (agents) {
              options.agent = agents.http2;
            }
            return new Http2ClientRequest(options, callback);
          }
        }
        return http.request(options, callback);
      };
      module22.exports.protocolCache = cache;
    }
  });
  var require_source5 = __commonJS2({
    "../../node_modules/.pnpm/http2-wrapper@1.0.3/node_modules/http2-wrapper/source/index.js"(exports22, module22) {
      var http2 = __require("http2");
      var agent = require_agent();
      var ClientRequest = require_client_request();
      var IncomingMessage = require_incoming_message();
      var auto = require_auto();
      var request = (url, options, callback) => {
        return new ClientRequest(url, options, callback);
      };
      var get = (url, options, callback) => {
        const req = new ClientRequest(url, options, callback);
        req.end();
        return req;
      };
      module22.exports = {
        ...http2,
        ClientRequest,
        IncomingMessage,
        ...agent,
        request,
        get,
        auto
      };
    }
  });
  var require_is_form_data = __commonJS2({
    "../../node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/is-form-data.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var is_1 = require_dist();
      exports22.default = (body) => is_1.default.nodeStream(body) && is_1.default.function_(body.getBoundary);
    }
  });
  var require_get_body_size = __commonJS2({
    "../../node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/get-body-size.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var fs_1 = __require("fs");
      var util_1 = __require("util");
      var is_1 = require_dist();
      var is_form_data_1 = require_is_form_data();
      var statAsync = util_1.promisify(fs_1.stat);
      exports22.default = async (body, headers) => {
        if (headers && "content-length" in headers) {
          return Number(headers["content-length"]);
        }
        if (!body) {
          return 0;
        }
        if (is_1.default.string(body)) {
          return Buffer.byteLength(body);
        }
        if (is_1.default.buffer(body)) {
          return body.length;
        }
        if (is_form_data_1.default(body)) {
          return util_1.promisify(body.getLength.bind(body))();
        }
        if (body instanceof fs_1.ReadStream) {
          const { size } = await statAsync(body.path);
          if (size === 0) {
            return;
          }
          return size;
        }
        return;
      };
    }
  });
  var require_proxy_events2 = __commonJS2({
    "../../node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/proxy-events.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      function default_1(from, to, events) {
        const fns = {};
        for (const event of events) {
          fns[event] = (...args) => {
            to.emit(event, ...args);
          };
          from.on(event, fns[event]);
        }
        return () => {
          for (const event of events) {
            from.off(event, fns[event]);
          }
        };
      }
      exports22.default = default_1;
    }
  });
  var require_unhandle = __commonJS2({
    "../../node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/unhandle.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.default = () => {
        const handlers = [];
        return {
          once(origin, event, fn) {
            origin.once(event, fn);
            handlers.push({ origin, event, fn });
          },
          unhandleAll() {
            for (const handler of handlers) {
              const { origin, event, fn } = handler;
              origin.removeListener(event, fn);
            }
            handlers.length = 0;
          }
        };
      };
    }
  });
  var require_timed_out = __commonJS2({
    "../../node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/timed-out.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.TimeoutError = undefined;
      var net = __require("net");
      var unhandle_1 = require_unhandle();
      var reentry = Symbol("reentry");
      var noop = () => {
      };
      var TimeoutError = class extends Error {
        constructor(threshold, event) {
          super(`Timeout awaiting '${event}' for ${threshold}ms`);
          this.event = event;
          this.name = "TimeoutError";
          this.code = "ETIMEDOUT";
        }
      };
      exports22.TimeoutError = TimeoutError;
      exports22.default = (request, delays, options) => {
        if (reentry in request) {
          return noop;
        }
        request[reentry] = true;
        const cancelers = [];
        const { once, unhandleAll } = unhandle_1.default();
        const addTimeout = (delay, callback, event) => {
          var _a;
          const timeout = setTimeout(callback, delay, delay, event);
          (_a = timeout.unref) === null || _a === undefined || _a.call(timeout);
          const cancel = () => {
            clearTimeout(timeout);
          };
          cancelers.push(cancel);
          return cancel;
        };
        const { host, hostname } = options;
        const timeoutHandler = (delay, event) => {
          request.destroy(new TimeoutError(delay, event));
        };
        const cancelTimeouts = () => {
          for (const cancel of cancelers) {
            cancel();
          }
          unhandleAll();
        };
        request.once("error", (error) => {
          cancelTimeouts();
          if (request.listenerCount("error") === 0) {
            throw error;
          }
        });
        request.once("close", cancelTimeouts);
        once(request, "response", (response) => {
          once(response, "end", cancelTimeouts);
        });
        if (typeof delays.request !== "undefined") {
          addTimeout(delays.request, timeoutHandler, "request");
        }
        if (typeof delays.socket !== "undefined") {
          const socketTimeoutHandler = () => {
            timeoutHandler(delays.socket, "socket");
          };
          request.setTimeout(delays.socket, socketTimeoutHandler);
          cancelers.push(() => {
            request.removeListener("timeout", socketTimeoutHandler);
          });
        }
        once(request, "socket", (socket) => {
          var _a;
          const { socketPath } = request;
          if (socket.connecting) {
            const hasPath = Boolean(socketPath !== null && socketPath !== undefined ? socketPath : net.isIP((_a = hostname !== null && hostname !== undefined ? hostname : host) !== null && _a !== undefined ? _a : "") !== 0);
            if (typeof delays.lookup !== "undefined" && !hasPath && typeof socket.address().address === "undefined") {
              const cancelTimeout = addTimeout(delays.lookup, timeoutHandler, "lookup");
              once(socket, "lookup", cancelTimeout);
            }
            if (typeof delays.connect !== "undefined") {
              const timeConnect = () => addTimeout(delays.connect, timeoutHandler, "connect");
              if (hasPath) {
                once(socket, "connect", timeConnect());
              } else {
                once(socket, "lookup", (error) => {
                  if (error === null) {
                    once(socket, "connect", timeConnect());
                  }
                });
              }
            }
            if (typeof delays.secureConnect !== "undefined" && options.protocol === "https:") {
              once(socket, "connect", () => {
                const cancelTimeout = addTimeout(delays.secureConnect, timeoutHandler, "secureConnect");
                once(socket, "secureConnect", cancelTimeout);
              });
            }
          }
          if (typeof delays.send !== "undefined") {
            const timeRequest = () => addTimeout(delays.send, timeoutHandler, "send");
            if (socket.connecting) {
              once(socket, "connect", () => {
                once(request, "upload-complete", timeRequest());
              });
            } else {
              once(request, "upload-complete", timeRequest());
            }
          }
        });
        if (typeof delays.response !== "undefined") {
          once(request, "upload-complete", () => {
            const cancelTimeout = addTimeout(delays.response, timeoutHandler, "response");
            once(request, "response", cancelTimeout);
          });
        }
        return cancelTimeouts;
      };
    }
  });
  var require_url_to_options2 = __commonJS2({
    "../../node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/url-to-options.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var is_1 = require_dist();
      exports22.default = (url) => {
        url = url;
        const options = {
          protocol: url.protocol,
          hostname: is_1.default.string(url.hostname) && url.hostname.startsWith("[") ? url.hostname.slice(1, -1) : url.hostname,
          host: url.host,
          hash: url.hash,
          search: url.search,
          pathname: url.pathname,
          href: url.href,
          path: `${url.pathname || ""}${url.search || ""}`
        };
        if (is_1.default.string(url.port) && url.port.length > 0) {
          options.port = Number(url.port);
        }
        if (url.username || url.password) {
          options.auth = `${url.username || ""}:${url.password || ""}`;
        }
        return options;
      };
    }
  });
  var require_options_to_url = __commonJS2({
    "../../node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/options-to-url.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var url_1 = __require("url");
      var keys = [
        "protocol",
        "host",
        "hostname",
        "port",
        "pathname",
        "search"
      ];
      exports22.default = (origin, options) => {
        var _a, _b;
        if (options.path) {
          if (options.pathname) {
            throw new TypeError("Parameters `path` and `pathname` are mutually exclusive.");
          }
          if (options.search) {
            throw new TypeError("Parameters `path` and `search` are mutually exclusive.");
          }
          if (options.searchParams) {
            throw new TypeError("Parameters `path` and `searchParams` are mutually exclusive.");
          }
        }
        if (options.search && options.searchParams) {
          throw new TypeError("Parameters `search` and `searchParams` are mutually exclusive.");
        }
        if (!origin) {
          if (!options.protocol) {
            throw new TypeError("No URL protocol specified");
          }
          origin = `${options.protocol}//${(_b = (_a = options.hostname) !== null && _a !== undefined ? _a : options.host) !== null && _b !== undefined ? _b : ""}`;
        }
        const url = new url_1.URL(origin);
        if (options.path) {
          const searchIndex = options.path.indexOf("?");
          if (searchIndex === -1) {
            options.pathname = options.path;
          } else {
            options.pathname = options.path.slice(0, searchIndex);
            options.search = options.path.slice(searchIndex + 1);
          }
          delete options.path;
        }
        for (const key of keys) {
          if (options[key]) {
            url[key] = options[key].toString();
          }
        }
        return url;
      };
    }
  });
  var require_weakable_map = __commonJS2({
    "../../node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/weakable-map.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var WeakableMap = class {
        constructor() {
          this.weakMap = /* @__PURE__ */ new WeakMap;
          this.map = /* @__PURE__ */ new Map;
        }
        set(key, value) {
          if (typeof key === "object") {
            this.weakMap.set(key, value);
          } else {
            this.map.set(key, value);
          }
        }
        get(key) {
          if (typeof key === "object") {
            return this.weakMap.get(key);
          }
          return this.map.get(key);
        }
        has(key) {
          if (typeof key === "object") {
            return this.weakMap.has(key);
          }
          return this.map.has(key);
        }
      };
      exports22.default = WeakableMap;
    }
  });
  var require_get_buffer = __commonJS2({
    "../../node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/get-buffer.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var getBuffer = async (stream) => {
        const chunks = [];
        let length = 0;
        for await (const chunk of stream) {
          chunks.push(chunk);
          length += Buffer.byteLength(chunk);
        }
        if (Buffer.isBuffer(chunks[0])) {
          return Buffer.concat(chunks, length);
        }
        return Buffer.from(chunks.join(""));
      };
      exports22.default = getBuffer;
    }
  });
  var require_dns_ip_version = __commonJS2({
    "../../node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/dns-ip-version.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.dnsLookupIpVersionToFamily = exports22.isDnsLookupIpVersion = undefined;
      var conversionTable = {
        auto: 0,
        ipv4: 4,
        ipv6: 6
      };
      exports22.isDnsLookupIpVersion = (value) => {
        return value in conversionTable;
      };
      exports22.dnsLookupIpVersionToFamily = (dnsLookupIpVersion) => {
        if (exports22.isDnsLookupIpVersion(dnsLookupIpVersion)) {
          return conversionTable[dnsLookupIpVersion];
        }
        throw new Error("Invalid DNS lookup IP version");
      };
    }
  });
  var require_is_response_ok = __commonJS2({
    "../../node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/is-response-ok.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.isResponseOk = undefined;
      exports22.isResponseOk = (response) => {
        const { statusCode } = response;
        const limitStatusCode = response.request.options.followRedirect ? 299 : 399;
        return statusCode >= 200 && statusCode <= limitStatusCode || statusCode === 304;
      };
    }
  });
  var require_deprecation_warning = __commonJS2({
    "../../node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/utils/deprecation-warning.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var alreadyWarned = /* @__PURE__ */ new Set;
      exports22.default = (message) => {
        if (alreadyWarned.has(message)) {
          return;
        }
        alreadyWarned.add(message);
        process.emitWarning(`Got: ${message}`, {
          type: "DeprecationWarning"
        });
      };
    }
  });
  var require_normalize_arguments = __commonJS2({
    "../../node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/as-promise/normalize-arguments.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var is_1 = require_dist();
      var normalizeArguments = (options, defaults) => {
        if (is_1.default.null_(options.encoding)) {
          throw new TypeError("To get a Buffer, set `options.responseType` to `buffer` instead");
        }
        is_1.assert.any([is_1.default.string, is_1.default.undefined], options.encoding);
        is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.resolveBodyOnly);
        is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.methodRewriting);
        is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.isStream);
        is_1.assert.any([is_1.default.string, is_1.default.undefined], options.responseType);
        if (options.responseType === undefined) {
          options.responseType = "text";
        }
        const { retry } = options;
        if (defaults) {
          options.retry = { ...defaults.retry };
        } else {
          options.retry = {
            calculateDelay: (retryObject) => retryObject.computedValue,
            limit: 0,
            methods: [],
            statusCodes: [],
            errorCodes: [],
            maxRetryAfter: undefined
          };
        }
        if (is_1.default.object(retry)) {
          options.retry = {
            ...options.retry,
            ...retry
          };
          options.retry.methods = [...new Set(options.retry.methods.map((method) => method.toUpperCase()))];
          options.retry.statusCodes = [...new Set(options.retry.statusCodes)];
          options.retry.errorCodes = [...new Set(options.retry.errorCodes)];
        } else if (is_1.default.number(retry)) {
          options.retry.limit = retry;
        }
        if (is_1.default.undefined(options.retry.maxRetryAfter)) {
          options.retry.maxRetryAfter = Math.min(...[options.timeout.request, options.timeout.connect].filter(is_1.default.number));
        }
        if (is_1.default.object(options.pagination)) {
          if (defaults) {
            options.pagination = {
              ...defaults.pagination,
              ...options.pagination
            };
          }
          const { pagination } = options;
          if (!is_1.default.function_(pagination.transform)) {
            throw new Error("`options.pagination.transform` must be implemented");
          }
          if (!is_1.default.function_(pagination.shouldContinue)) {
            throw new Error("`options.pagination.shouldContinue` must be implemented");
          }
          if (!is_1.default.function_(pagination.filter)) {
            throw new TypeError("`options.pagination.filter` must be implemented");
          }
          if (!is_1.default.function_(pagination.paginate)) {
            throw new Error("`options.pagination.paginate` must be implemented");
          }
        }
        if (options.responseType === "json" && options.headers.accept === undefined) {
          options.headers.accept = "application/json";
        }
        return options;
      };
      exports22.default = normalizeArguments;
    }
  });
  var require_calculate_retry_delay = __commonJS2({
    "../../node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/calculate-retry-delay.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.retryAfterStatusCodes = undefined;
      exports22.retryAfterStatusCodes = /* @__PURE__ */ new Set([413, 429, 503]);
      var calculateRetryDelay = ({ attemptCount, retryOptions, error, retryAfter }) => {
        if (attemptCount > retryOptions.limit) {
          return 0;
        }
        const hasMethod = retryOptions.methods.includes(error.options.method);
        const hasErrorCode = retryOptions.errorCodes.includes(error.code);
        const hasStatusCode = error.response && retryOptions.statusCodes.includes(error.response.statusCode);
        if (!hasMethod || !hasErrorCode && !hasStatusCode) {
          return 0;
        }
        if (error.response) {
          if (retryAfter) {
            if (retryOptions.maxRetryAfter === undefined || retryAfter > retryOptions.maxRetryAfter) {
              return 0;
            }
            return retryAfter;
          }
          if (error.response.statusCode === 413) {
            return 0;
          }
        }
        const noise = Math.random() * 100;
        return 2 ** (attemptCount - 1) * 1000 + noise;
      };
      exports22.default = calculateRetryDelay;
    }
  });
  var require_core3 = __commonJS2({
    "../../node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/index.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.UnsupportedProtocolError = exports22.ReadError = exports22.TimeoutError = exports22.UploadError = exports22.CacheError = exports22.HTTPError = exports22.MaxRedirectsError = exports22.RequestError = exports22.setNonEnumerableProperties = exports22.knownHookEvents = exports22.withoutBody = exports22.kIsNormalizedAlready = undefined;
      var util_1 = __require("util");
      var stream_12 = __require("stream");
      var fs_1 = __require("fs");
      var url_1 = __require("url");
      var http = __require("http");
      var http_1 = __require("http");
      var https = __require("https");
      var http_timer_1 = require_source3();
      var cacheable_lookup_1 = require_source4();
      var CacheableRequest = require_src4();
      var decompressResponse = require_decompress_response();
      var http2wrapper = require_source5();
      var lowercaseKeys = require_lowercase_keys();
      var is_1 = require_dist();
      var get_body_size_1 = require_get_body_size();
      var is_form_data_1 = require_is_form_data();
      var proxy_events_1 = require_proxy_events2();
      var timed_out_1 = require_timed_out();
      var url_to_options_1 = require_url_to_options2();
      var options_to_url_1 = require_options_to_url();
      var weakable_map_1 = require_weakable_map();
      var get_buffer_1 = require_get_buffer();
      var dns_ip_version_1 = require_dns_ip_version();
      var is_response_ok_1 = require_is_response_ok();
      var deprecation_warning_1 = require_deprecation_warning();
      var normalize_arguments_1 = require_normalize_arguments();
      var calculate_retry_delay_1 = require_calculate_retry_delay();
      var globalDnsCache;
      var kRequest = Symbol("request");
      var kResponse = Symbol("response");
      var kResponseSize = Symbol("responseSize");
      var kDownloadedSize = Symbol("downloadedSize");
      var kBodySize = Symbol("bodySize");
      var kUploadedSize = Symbol("uploadedSize");
      var kServerResponsesPiped = Symbol("serverResponsesPiped");
      var kUnproxyEvents = Symbol("unproxyEvents");
      var kIsFromCache = Symbol("isFromCache");
      var kCancelTimeouts = Symbol("cancelTimeouts");
      var kStartedReading = Symbol("startedReading");
      var kStopReading = Symbol("stopReading");
      var kTriggerRead = Symbol("triggerRead");
      var kBody = Symbol("body");
      var kJobs = Symbol("jobs");
      var kOriginalResponse = Symbol("originalResponse");
      var kRetryTimeout = Symbol("retryTimeout");
      exports22.kIsNormalizedAlready = Symbol("isNormalizedAlready");
      var supportsBrotli = is_1.default.string(process.versions.brotli);
      exports22.withoutBody = /* @__PURE__ */ new Set(["GET", "HEAD"]);
      exports22.knownHookEvents = [
        "init",
        "beforeRequest",
        "beforeRedirect",
        "beforeError",
        "beforeRetry",
        "afterResponse"
      ];
      function validateSearchParameters(searchParameters) {
        for (const key in searchParameters) {
          const value = searchParameters[key];
          if (!is_1.default.string(value) && !is_1.default.number(value) && !is_1.default.boolean(value) && !is_1.default.null_(value) && !is_1.default.undefined(value)) {
            throw new TypeError(`The \`searchParams\` value '${String(value)}' must be a string, number, boolean or null`);
          }
        }
      }
      function isClientRequest(clientRequest) {
        return is_1.default.object(clientRequest) && !("statusCode" in clientRequest);
      }
      var cacheableStore = new weakable_map_1.default;
      var waitForOpenFile = async (file) => new Promise((resolve, reject) => {
        const onError = (error) => {
          reject(error);
        };
        if (!file.pending) {
          resolve();
        }
        file.once("error", onError);
        file.once("ready", () => {
          file.off("error", onError);
          resolve();
        });
      });
      var redirectCodes = /* @__PURE__ */ new Set([300, 301, 302, 303, 304, 307, 308]);
      var nonEnumerableProperties = [
        "context",
        "body",
        "json",
        "form"
      ];
      exports22.setNonEnumerableProperties = (sources, to) => {
        const properties = {};
        for (const source of sources) {
          if (!source) {
            continue;
          }
          for (const name of nonEnumerableProperties) {
            if (!(name in source)) {
              continue;
            }
            properties[name] = {
              writable: true,
              configurable: true,
              enumerable: false,
              value: source[name]
            };
          }
        }
        Object.defineProperties(to, properties);
      };
      var RequestError = class extends Error {
        constructor(message, error, self2) {
          var _a, _b;
          super(message);
          Error.captureStackTrace(this, this.constructor);
          this.name = "RequestError";
          this.code = (_a = error.code) !== null && _a !== undefined ? _a : "ERR_GOT_REQUEST_ERROR";
          if (self2 instanceof Request) {
            Object.defineProperty(this, "request", {
              enumerable: false,
              value: self2
            });
            Object.defineProperty(this, "response", {
              enumerable: false,
              value: self2[kResponse]
            });
            Object.defineProperty(this, "options", {
              enumerable: false,
              value: self2.options
            });
          } else {
            Object.defineProperty(this, "options", {
              enumerable: false,
              value: self2
            });
          }
          this.timings = (_b = this.request) === null || _b === undefined ? undefined : _b.timings;
          if (is_1.default.string(error.stack) && is_1.default.string(this.stack)) {
            const indexOfMessage = this.stack.indexOf(this.message) + this.message.length;
            const thisStackTrace = this.stack.slice(indexOfMessage).split(`
`).reverse();
            const errorStackTrace = error.stack.slice(error.stack.indexOf(error.message) + error.message.length).split(`
`).reverse();
            while (errorStackTrace.length !== 0 && errorStackTrace[0] === thisStackTrace[0]) {
              thisStackTrace.shift();
            }
            this.stack = `${this.stack.slice(0, indexOfMessage)}${thisStackTrace.reverse().join(`
`)}${errorStackTrace.reverse().join(`
`)}`;
          }
        }
      };
      exports22.RequestError = RequestError;
      var MaxRedirectsError = class extends RequestError {
        constructor(request) {
          super(`Redirected ${request.options.maxRedirects} times. Aborting.`, {}, request);
          this.name = "MaxRedirectsError";
          this.code = "ERR_TOO_MANY_REDIRECTS";
        }
      };
      exports22.MaxRedirectsError = MaxRedirectsError;
      var HTTPError = class extends RequestError {
        constructor(response) {
          super(`Response code ${response.statusCode} (${response.statusMessage})`, {}, response.request);
          this.name = "HTTPError";
          this.code = "ERR_NON_2XX_3XX_RESPONSE";
        }
      };
      exports22.HTTPError = HTTPError;
      var CacheError = class extends RequestError {
        constructor(error, request) {
          super(error.message, error, request);
          this.name = "CacheError";
          this.code = this.code === "ERR_GOT_REQUEST_ERROR" ? "ERR_CACHE_ACCESS" : this.code;
        }
      };
      exports22.CacheError = CacheError;
      var UploadError = class extends RequestError {
        constructor(error, request) {
          super(error.message, error, request);
          this.name = "UploadError";
          this.code = this.code === "ERR_GOT_REQUEST_ERROR" ? "ERR_UPLOAD" : this.code;
        }
      };
      exports22.UploadError = UploadError;
      var TimeoutError = class extends RequestError {
        constructor(error, timings, request) {
          super(error.message, error, request);
          this.name = "TimeoutError";
          this.event = error.event;
          this.timings = timings;
        }
      };
      exports22.TimeoutError = TimeoutError;
      var ReadError = class extends RequestError {
        constructor(error, request) {
          super(error.message, error, request);
          this.name = "ReadError";
          this.code = this.code === "ERR_GOT_REQUEST_ERROR" ? "ERR_READING_RESPONSE_STREAM" : this.code;
        }
      };
      exports22.ReadError = ReadError;
      var UnsupportedProtocolError = class extends RequestError {
        constructor(options) {
          super(`Unsupported protocol "${options.url.protocol}"`, {}, options);
          this.name = "UnsupportedProtocolError";
          this.code = "ERR_UNSUPPORTED_PROTOCOL";
        }
      };
      exports22.UnsupportedProtocolError = UnsupportedProtocolError;
      var proxiedRequestEvents = [
        "socket",
        "connect",
        "continue",
        "information",
        "upgrade",
        "timeout"
      ];
      var Request = class extends stream_12.Duplex {
        constructor(url, options = {}, defaults) {
          super({
            autoDestroy: false,
            highWaterMark: 0
          });
          this[kDownloadedSize] = 0;
          this[kUploadedSize] = 0;
          this.requestInitialized = false;
          this[kServerResponsesPiped] = /* @__PURE__ */ new Set;
          this.redirects = [];
          this[kStopReading] = false;
          this[kTriggerRead] = false;
          this[kJobs] = [];
          this.retryCount = 0;
          this._progressCallbacks = [];
          const unlockWrite = () => this._unlockWrite();
          const lockWrite = () => this._lockWrite();
          this.on("pipe", (source) => {
            source.prependListener("data", unlockWrite);
            source.on("data", lockWrite);
            source.prependListener("end", unlockWrite);
            source.on("end", lockWrite);
          });
          this.on("unpipe", (source) => {
            source.off("data", unlockWrite);
            source.off("data", lockWrite);
            source.off("end", unlockWrite);
            source.off("end", lockWrite);
          });
          this.on("pipe", (source) => {
            if (source instanceof http_1.IncomingMessage) {
              this.options.headers = {
                ...source.headers,
                ...this.options.headers
              };
            }
          });
          const { json, body, form } = options;
          if (json || body || form) {
            this._lockWrite();
          }
          if (exports22.kIsNormalizedAlready in options) {
            this.options = options;
          } else {
            try {
              this.options = this.constructor.normalizeArguments(url, options, defaults);
            } catch (error) {
              if (is_1.default.nodeStream(options.body)) {
                options.body.destroy();
              }
              this.destroy(error);
              return;
            }
          }
          (async () => {
            var _a;
            try {
              if (this.options.body instanceof fs_1.ReadStream) {
                await waitForOpenFile(this.options.body);
              }
              const { url: normalizedURL } = this.options;
              if (!normalizedURL) {
                throw new TypeError("Missing `url` property");
              }
              this.requestUrl = normalizedURL.toString();
              decodeURI(this.requestUrl);
              await this._finalizeBody();
              await this._makeRequest();
              if (this.destroyed) {
                (_a = this[kRequest]) === null || _a === undefined || _a.destroy();
                return;
              }
              for (const job of this[kJobs]) {
                job();
              }
              this[kJobs].length = 0;
              this.requestInitialized = true;
            } catch (error) {
              if (error instanceof RequestError) {
                this._beforeError(error);
                return;
              }
              if (!this.destroyed) {
                this.destroy(error);
              }
            }
          })();
        }
        static normalizeArguments(url, options, defaults) {
          var _a, _b, _c, _d, _e;
          const rawOptions = options;
          if (is_1.default.object(url) && !is_1.default.urlInstance(url)) {
            options = { ...defaults, ...url, ...options };
          } else {
            if (url && options && options.url !== undefined) {
              throw new TypeError("The `url` option is mutually exclusive with the `input` argument");
            }
            options = { ...defaults, ...options };
            if (url !== undefined) {
              options.url = url;
            }
            if (is_1.default.urlInstance(options.url)) {
              options.url = new url_1.URL(options.url.toString());
            }
          }
          if (options.cache === false) {
            options.cache = undefined;
          }
          if (options.dnsCache === false) {
            options.dnsCache = undefined;
          }
          is_1.assert.any([is_1.default.string, is_1.default.undefined], options.method);
          is_1.assert.any([is_1.default.object, is_1.default.undefined], options.headers);
          is_1.assert.any([is_1.default.string, is_1.default.urlInstance, is_1.default.undefined], options.prefixUrl);
          is_1.assert.any([is_1.default.object, is_1.default.undefined], options.cookieJar);
          is_1.assert.any([is_1.default.object, is_1.default.string, is_1.default.undefined], options.searchParams);
          is_1.assert.any([is_1.default.object, is_1.default.string, is_1.default.undefined], options.cache);
          is_1.assert.any([is_1.default.object, is_1.default.number, is_1.default.undefined], options.timeout);
          is_1.assert.any([is_1.default.object, is_1.default.undefined], options.context);
          is_1.assert.any([is_1.default.object, is_1.default.undefined], options.hooks);
          is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.decompress);
          is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.ignoreInvalidCookies);
          is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.followRedirect);
          is_1.assert.any([is_1.default.number, is_1.default.undefined], options.maxRedirects);
          is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.throwHttpErrors);
          is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.http2);
          is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.allowGetBody);
          is_1.assert.any([is_1.default.string, is_1.default.undefined], options.localAddress);
          is_1.assert.any([dns_ip_version_1.isDnsLookupIpVersion, is_1.default.undefined], options.dnsLookupIpVersion);
          is_1.assert.any([is_1.default.object, is_1.default.undefined], options.https);
          is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.rejectUnauthorized);
          if (options.https) {
            is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.https.rejectUnauthorized);
            is_1.assert.any([is_1.default.function_, is_1.default.undefined], options.https.checkServerIdentity);
            is_1.assert.any([is_1.default.string, is_1.default.object, is_1.default.array, is_1.default.undefined], options.https.certificateAuthority);
            is_1.assert.any([is_1.default.string, is_1.default.object, is_1.default.array, is_1.default.undefined], options.https.key);
            is_1.assert.any([is_1.default.string, is_1.default.object, is_1.default.array, is_1.default.undefined], options.https.certificate);
            is_1.assert.any([is_1.default.string, is_1.default.undefined], options.https.passphrase);
            is_1.assert.any([is_1.default.string, is_1.default.buffer, is_1.default.array, is_1.default.undefined], options.https.pfx);
          }
          is_1.assert.any([is_1.default.object, is_1.default.undefined], options.cacheOptions);
          if (is_1.default.string(options.method)) {
            options.method = options.method.toUpperCase();
          } else {
            options.method = "GET";
          }
          if (options.headers === (defaults === null || defaults === undefined ? undefined : defaults.headers)) {
            options.headers = { ...options.headers };
          } else {
            options.headers = lowercaseKeys({ ...defaults === null || defaults === undefined ? undefined : defaults.headers, ...options.headers });
          }
          if ("slashes" in options) {
            throw new TypeError("The legacy `url.Url` has been deprecated. Use `URL` instead.");
          }
          if ("auth" in options) {
            throw new TypeError("Parameter `auth` is deprecated. Use `username` / `password` instead.");
          }
          if ("searchParams" in options) {
            if (options.searchParams && options.searchParams !== (defaults === null || defaults === undefined ? undefined : defaults.searchParams)) {
              let searchParameters;
              if (is_1.default.string(options.searchParams) || options.searchParams instanceof url_1.URLSearchParams) {
                searchParameters = new url_1.URLSearchParams(options.searchParams);
              } else {
                validateSearchParameters(options.searchParams);
                searchParameters = new url_1.URLSearchParams;
                for (const key in options.searchParams) {
                  const value = options.searchParams[key];
                  if (value === null) {
                    searchParameters.append(key, "");
                  } else if (value !== undefined) {
                    searchParameters.append(key, value);
                  }
                }
              }
              (_a = defaults === null || defaults === undefined ? undefined : defaults.searchParams) === null || _a === undefined || _a.forEach((value, key) => {
                if (!searchParameters.has(key)) {
                  searchParameters.append(key, value);
                }
              });
              options.searchParams = searchParameters;
            }
          }
          options.username = (_b = options.username) !== null && _b !== undefined ? _b : "";
          options.password = (_c = options.password) !== null && _c !== undefined ? _c : "";
          if (is_1.default.undefined(options.prefixUrl)) {
            options.prefixUrl = (_d = defaults === null || defaults === undefined ? undefined : defaults.prefixUrl) !== null && _d !== undefined ? _d : "";
          } else {
            options.prefixUrl = options.prefixUrl.toString();
            if (options.prefixUrl !== "" && !options.prefixUrl.endsWith("/")) {
              options.prefixUrl += "/";
            }
          }
          if (is_1.default.string(options.url)) {
            if (options.url.startsWith("/")) {
              throw new Error("`input` must not start with a slash when using `prefixUrl`");
            }
            options.url = options_to_url_1.default(options.prefixUrl + options.url, options);
          } else if (is_1.default.undefined(options.url) && options.prefixUrl !== "" || options.protocol) {
            options.url = options_to_url_1.default(options.prefixUrl, options);
          }
          if (options.url) {
            if ("port" in options) {
              delete options.port;
            }
            let { prefixUrl } = options;
            Object.defineProperty(options, "prefixUrl", {
              set: (value) => {
                const url2 = options.url;
                if (!url2.href.startsWith(value)) {
                  throw new Error(`Cannot change \`prefixUrl\` from ${prefixUrl} to ${value}: ${url2.href}`);
                }
                options.url = new url_1.URL(value + url2.href.slice(prefixUrl.length));
                prefixUrl = value;
              },
              get: () => prefixUrl
            });
            let { protocol } = options.url;
            if (protocol === "unix:") {
              protocol = "http:";
              options.url = new url_1.URL(`http://unix${options.url.pathname}${options.url.search}`);
            }
            if (options.searchParams) {
              options.url.search = options.searchParams.toString();
            }
            if (protocol !== "http:" && protocol !== "https:") {
              throw new UnsupportedProtocolError(options);
            }
            if (options.username === "") {
              options.username = options.url.username;
            } else {
              options.url.username = options.username;
            }
            if (options.password === "") {
              options.password = options.url.password;
            } else {
              options.url.password = options.password;
            }
          }
          const { cookieJar } = options;
          if (cookieJar) {
            let { setCookie, getCookieString } = cookieJar;
            is_1.assert.function_(setCookie);
            is_1.assert.function_(getCookieString);
            if (setCookie.length === 4 && getCookieString.length === 0) {
              setCookie = util_1.promisify(setCookie.bind(options.cookieJar));
              getCookieString = util_1.promisify(getCookieString.bind(options.cookieJar));
              options.cookieJar = {
                setCookie,
                getCookieString
              };
            }
          }
          const { cache } = options;
          if (cache) {
            if (!cacheableStore.has(cache)) {
              cacheableStore.set(cache, new CacheableRequest((requestOptions, handler) => {
                const result2 = requestOptions[kRequest](requestOptions, handler);
                if (is_1.default.promise(result2)) {
                  result2.once = (event, handler2) => {
                    if (event === "error") {
                      result2.catch(handler2);
                    } else if (event === "abort") {
                      (async () => {
                        try {
                          const request = await result2;
                          request.once("abort", handler2);
                        } catch (_a2) {
                        }
                      })();
                    } else {
                      throw new Error(`Unknown HTTP2 promise event: ${event}`);
                    }
                    return result2;
                  };
                }
                return result2;
              }, cache));
            }
          }
          options.cacheOptions = { ...options.cacheOptions };
          if (options.dnsCache === true) {
            if (!globalDnsCache) {
              globalDnsCache = new cacheable_lookup_1.default;
            }
            options.dnsCache = globalDnsCache;
          } else if (!is_1.default.undefined(options.dnsCache) && !options.dnsCache.lookup) {
            throw new TypeError(`Parameter \`dnsCache\` must be a CacheableLookup instance or a boolean, got ${is_1.default(options.dnsCache)}`);
          }
          if (is_1.default.number(options.timeout)) {
            options.timeout = { request: options.timeout };
          } else if (defaults && options.timeout !== defaults.timeout) {
            options.timeout = {
              ...defaults.timeout,
              ...options.timeout
            };
          } else {
            options.timeout = { ...options.timeout };
          }
          if (!options.context) {
            options.context = {};
          }
          const areHooksDefault = options.hooks === (defaults === null || defaults === undefined ? undefined : defaults.hooks);
          options.hooks = { ...options.hooks };
          for (const event of exports22.knownHookEvents) {
            if (event in options.hooks) {
              if (is_1.default.array(options.hooks[event])) {
                options.hooks[event] = [...options.hooks[event]];
              } else {
                throw new TypeError(`Parameter \`${event}\` must be an Array, got ${is_1.default(options.hooks[event])}`);
              }
            } else {
              options.hooks[event] = [];
            }
          }
          if (defaults && !areHooksDefault) {
            for (const event of exports22.knownHookEvents) {
              const defaultHooks = defaults.hooks[event];
              if (defaultHooks.length > 0) {
                options.hooks[event] = [
                  ...defaults.hooks[event],
                  ...options.hooks[event]
                ];
              }
            }
          }
          if ("family" in options) {
            deprecation_warning_1.default('"options.family" was never documented, please use "options.dnsLookupIpVersion"');
          }
          if (defaults === null || defaults === undefined ? undefined : defaults.https) {
            options.https = { ...defaults.https, ...options.https };
          }
          if ("rejectUnauthorized" in options) {
            deprecation_warning_1.default('"options.rejectUnauthorized" is now deprecated, please use "options.https.rejectUnauthorized"');
          }
          if ("checkServerIdentity" in options) {
            deprecation_warning_1.default('"options.checkServerIdentity" was never documented, please use "options.https.checkServerIdentity"');
          }
          if ("ca" in options) {
            deprecation_warning_1.default('"options.ca" was never documented, please use "options.https.certificateAuthority"');
          }
          if ("key" in options) {
            deprecation_warning_1.default('"options.key" was never documented, please use "options.https.key"');
          }
          if ("cert" in options) {
            deprecation_warning_1.default('"options.cert" was never documented, please use "options.https.certificate"');
          }
          if ("passphrase" in options) {
            deprecation_warning_1.default('"options.passphrase" was never documented, please use "options.https.passphrase"');
          }
          if ("pfx" in options) {
            deprecation_warning_1.default('"options.pfx" was never documented, please use "options.https.pfx"');
          }
          if ("followRedirects" in options) {
            throw new TypeError("The `followRedirects` option does not exist. Use `followRedirect` instead.");
          }
          if (options.agent) {
            for (const key in options.agent) {
              if (key !== "http" && key !== "https" && key !== "http2") {
                throw new TypeError(`Expected the \`options.agent\` properties to be \`http\`, \`https\` or \`http2\`, got \`${key}\``);
              }
            }
          }
          options.maxRedirects = (_e = options.maxRedirects) !== null && _e !== undefined ? _e : 0;
          exports22.setNonEnumerableProperties([defaults, rawOptions], options);
          return normalize_arguments_1.default(options, defaults);
        }
        _lockWrite() {
          const onLockedWrite = () => {
            throw new TypeError("The payload has been already provided");
          };
          this.write = onLockedWrite;
          this.end = onLockedWrite;
        }
        _unlockWrite() {
          this.write = super.write;
          this.end = super.end;
        }
        async _finalizeBody() {
          const { options } = this;
          const { headers } = options;
          const isForm = !is_1.default.undefined(options.form);
          const isJSON = !is_1.default.undefined(options.json);
          const isBody = !is_1.default.undefined(options.body);
          const hasPayload = isForm || isJSON || isBody;
          const cannotHaveBody = exports22.withoutBody.has(options.method) && !(options.method === "GET" && options.allowGetBody);
          this._cannotHaveBody = cannotHaveBody;
          if (hasPayload) {
            if (cannotHaveBody) {
              throw new TypeError(`The \`${options.method}\` method cannot be used with a body`);
            }
            if ([isBody, isForm, isJSON].filter((isTrue) => isTrue).length > 1) {
              throw new TypeError("The `body`, `json` and `form` options are mutually exclusive");
            }
            if (isBody && !(options.body instanceof stream_12.Readable) && !is_1.default.string(options.body) && !is_1.default.buffer(options.body) && !is_form_data_1.default(options.body)) {
              throw new TypeError("The `body` option must be a stream.Readable, string or Buffer");
            }
            if (isForm && !is_1.default.object(options.form)) {
              throw new TypeError("The `form` option must be an Object");
            }
            {
              const noContentType = !is_1.default.string(headers["content-type"]);
              if (isBody) {
                if (is_form_data_1.default(options.body) && noContentType) {
                  headers["content-type"] = `multipart/form-data; boundary=${options.body.getBoundary()}`;
                }
                this[kBody] = options.body;
              } else if (isForm) {
                if (noContentType) {
                  headers["content-type"] = "application/x-www-form-urlencoded";
                }
                this[kBody] = new url_1.URLSearchParams(options.form).toString();
              } else {
                if (noContentType) {
                  headers["content-type"] = "application/json";
                }
                this[kBody] = options.stringifyJson(options.json);
              }
              const uploadBodySize = await get_body_size_1.default(this[kBody], options.headers);
              if (is_1.default.undefined(headers["content-length"]) && is_1.default.undefined(headers["transfer-encoding"])) {
                if (!cannotHaveBody && !is_1.default.undefined(uploadBodySize)) {
                  headers["content-length"] = String(uploadBodySize);
                }
              }
            }
          } else if (cannotHaveBody) {
            this._lockWrite();
          } else {
            this._unlockWrite();
          }
          this[kBodySize] = Number(headers["content-length"]) || undefined;
        }
        async _onResponseBase(response) {
          const { options } = this;
          const { url } = options;
          this[kOriginalResponse] = response;
          if (options.decompress) {
            response = decompressResponse(response);
          }
          const statusCode = response.statusCode;
          const typedResponse = response;
          typedResponse.statusMessage = typedResponse.statusMessage ? typedResponse.statusMessage : http.STATUS_CODES[statusCode];
          typedResponse.url = options.url.toString();
          typedResponse.requestUrl = this.requestUrl;
          typedResponse.redirectUrls = this.redirects;
          typedResponse.request = this;
          typedResponse.isFromCache = response.fromCache || false;
          typedResponse.ip = this.ip;
          typedResponse.retryCount = this.retryCount;
          this[kIsFromCache] = typedResponse.isFromCache;
          this[kResponseSize] = Number(response.headers["content-length"]) || undefined;
          this[kResponse] = response;
          response.once("end", () => {
            this[kResponseSize] = this[kDownloadedSize];
            this.emit("downloadProgress", this.downloadProgress);
          });
          response.once("error", (error) => {
            response.destroy();
            this._beforeError(new ReadError(error, this));
          });
          response.once("aborted", () => {
            this._beforeError(new ReadError({
              name: "Error",
              message: "The server aborted pending request",
              code: "ECONNRESET"
            }, this));
          });
          this.emit("downloadProgress", this.downloadProgress);
          const rawCookies = response.headers["set-cookie"];
          if (is_1.default.object(options.cookieJar) && rawCookies) {
            let promises = rawCookies.map(async (rawCookie) => options.cookieJar.setCookie(rawCookie, url.toString()));
            if (options.ignoreInvalidCookies) {
              promises = promises.map(async (p) => p.catch(() => {
              }));
            }
            try {
              await Promise.all(promises);
            } catch (error) {
              this._beforeError(error);
              return;
            }
          }
          if (options.followRedirect && response.headers.location && redirectCodes.has(statusCode)) {
            response.resume();
            if (this[kRequest]) {
              this[kCancelTimeouts]();
              delete this[kRequest];
              this[kUnproxyEvents]();
            }
            const shouldBeGet = statusCode === 303 && options.method !== "GET" && options.method !== "HEAD";
            if (shouldBeGet || !options.methodRewriting) {
              options.method = "GET";
              if ("body" in options) {
                delete options.body;
              }
              if ("json" in options) {
                delete options.json;
              }
              if ("form" in options) {
                delete options.form;
              }
              this[kBody] = undefined;
              delete options.headers["content-length"];
            }
            if (this.redirects.length >= options.maxRedirects) {
              this._beforeError(new MaxRedirectsError(this));
              return;
            }
            try {
              let isUnixSocketURL = function(url2) {
                return url2.protocol === "unix:" || url2.hostname === "unix";
              };
              const redirectBuffer = Buffer.from(response.headers.location, "binary").toString();
              const redirectUrl = new url_1.URL(redirectBuffer, url);
              const redirectString = redirectUrl.toString();
              decodeURI(redirectString);
              if (!isUnixSocketURL(url) && isUnixSocketURL(redirectUrl)) {
                this._beforeError(new RequestError("Cannot redirect to UNIX socket", {}, this));
                return;
              }
              if (redirectUrl.hostname !== url.hostname || redirectUrl.port !== url.port) {
                if ("host" in options.headers) {
                  delete options.headers.host;
                }
                if ("cookie" in options.headers) {
                  delete options.headers.cookie;
                }
                if ("authorization" in options.headers) {
                  delete options.headers.authorization;
                }
                if (options.username || options.password) {
                  options.username = "";
                  options.password = "";
                }
              } else {
                redirectUrl.username = options.username;
                redirectUrl.password = options.password;
              }
              this.redirects.push(redirectString);
              options.url = redirectUrl;
              for (const hook of options.hooks.beforeRedirect) {
                await hook(options, typedResponse);
              }
              this.emit("redirect", typedResponse, options);
              await this._makeRequest();
            } catch (error) {
              this._beforeError(error);
              return;
            }
            return;
          }
          if (options.isStream && options.throwHttpErrors && !is_response_ok_1.isResponseOk(typedResponse)) {
            this._beforeError(new HTTPError(typedResponse));
            return;
          }
          response.on("readable", () => {
            if (this[kTriggerRead]) {
              this._read();
            }
          });
          this.on("resume", () => {
            response.resume();
          });
          this.on("pause", () => {
            response.pause();
          });
          response.once("end", () => {
            this.push(null);
          });
          this.emit("response", response);
          for (const destination of this[kServerResponsesPiped]) {
            if (destination.headersSent) {
              continue;
            }
            for (const key in response.headers) {
              const isAllowed = options.decompress ? key !== "content-encoding" : true;
              const value = response.headers[key];
              if (isAllowed) {
                destination.setHeader(key, value);
              }
            }
            destination.statusCode = statusCode;
          }
        }
        async _onResponse(response) {
          try {
            await this._onResponseBase(response);
          } catch (error) {
            this._beforeError(error);
          }
        }
        _onRequest(request) {
          const { options } = this;
          const { timeout, url } = options;
          http_timer_1.default(request);
          this[kCancelTimeouts] = timed_out_1.default(request, timeout, url);
          const responseEventName = options.cache ? "cacheableResponse" : "response";
          request.once(responseEventName, (response) => {
            this._onResponse(response);
          });
          request.once("error", (error) => {
            var _a;
            request.destroy();
            (_a = request.res) === null || _a === undefined || _a.removeAllListeners("end");
            error = error instanceof timed_out_1.TimeoutError ? new TimeoutError(error, this.timings, this) : new RequestError(error.message, error, this);
            this._beforeError(error);
          });
          this[kUnproxyEvents] = proxy_events_1.default(request, this, proxiedRequestEvents);
          this[kRequest] = request;
          this.emit("uploadProgress", this.uploadProgress);
          const body = this[kBody];
          const currentRequest = this.redirects.length === 0 ? this : request;
          if (is_1.default.nodeStream(body)) {
            body.pipe(currentRequest);
            body.once("error", (error) => {
              this._beforeError(new UploadError(error, this));
            });
          } else {
            this._unlockWrite();
            if (!is_1.default.undefined(body)) {
              this._writeRequest(body, undefined, () => {
              });
              currentRequest.end();
              this._lockWrite();
            } else if (this._cannotHaveBody || this._noPipe) {
              currentRequest.end();
              this._lockWrite();
            }
          }
          this.emit("request", request);
        }
        async _createCacheableRequest(url, options) {
          return new Promise((resolve, reject) => {
            Object.assign(options, url_to_options_1.default(url));
            delete options.url;
            let request;
            const cacheRequest = cacheableStore.get(options.cache)(options, async (response) => {
              response._readableState.autoDestroy = false;
              if (request) {
                (await request).emit("cacheableResponse", response);
              }
              resolve(response);
            });
            options.url = url;
            cacheRequest.once("error", reject);
            cacheRequest.once("request", async (requestOrPromise) => {
              request = requestOrPromise;
              resolve(request);
            });
          });
        }
        async _makeRequest() {
          var _a, _b, _c, _d, _e;
          const { options } = this;
          const { headers } = options;
          for (const key in headers) {
            if (is_1.default.undefined(headers[key])) {
              delete headers[key];
            } else if (is_1.default.null_(headers[key])) {
              throw new TypeError(`Use \`undefined\` instead of \`null\` to delete the \`${key}\` header`);
            }
          }
          if (options.decompress && is_1.default.undefined(headers["accept-encoding"])) {
            headers["accept-encoding"] = supportsBrotli ? "gzip, deflate, br" : "gzip, deflate";
          }
          if (options.cookieJar) {
            const cookieString = await options.cookieJar.getCookieString(options.url.toString());
            if (is_1.default.nonEmptyString(cookieString)) {
              options.headers.cookie = cookieString;
            }
          }
          for (const hook of options.hooks.beforeRequest) {
            const result2 = await hook(options);
            if (!is_1.default.undefined(result2)) {
              options.request = () => result2;
              break;
            }
          }
          if (options.body && this[kBody] !== options.body) {
            this[kBody] = options.body;
          }
          const { agent, request, timeout, url } = options;
          if (options.dnsCache && !("lookup" in options)) {
            options.lookup = options.dnsCache.lookup;
          }
          if (url.hostname === "unix") {
            const matches = /(?<socketPath>.+?):(?<path>.+)/.exec(`${url.pathname}${url.search}`);
            if (matches === null || matches === undefined ? undefined : matches.groups) {
              const { socketPath, path: path2 } = matches.groups;
              Object.assign(options, {
                socketPath,
                path: path2,
                host: ""
              });
            }
          }
          const isHttps = url.protocol === "https:";
          let fallbackFn;
          if (options.http2) {
            fallbackFn = http2wrapper.auto;
          } else {
            fallbackFn = isHttps ? https.request : http.request;
          }
          const realFn = (_a = options.request) !== null && _a !== undefined ? _a : fallbackFn;
          const fn = options.cache ? this._createCacheableRequest : realFn;
          if (agent && !options.http2) {
            options.agent = agent[isHttps ? "https" : "http"];
          }
          options[kRequest] = realFn;
          delete options.request;
          delete options.timeout;
          const requestOptions = options;
          requestOptions.shared = (_b = options.cacheOptions) === null || _b === undefined ? undefined : _b.shared;
          requestOptions.cacheHeuristic = (_c = options.cacheOptions) === null || _c === undefined ? undefined : _c.cacheHeuristic;
          requestOptions.immutableMinTimeToLive = (_d = options.cacheOptions) === null || _d === undefined ? undefined : _d.immutableMinTimeToLive;
          requestOptions.ignoreCargoCult = (_e = options.cacheOptions) === null || _e === undefined ? undefined : _e.ignoreCargoCult;
          if (options.dnsLookupIpVersion !== undefined) {
            try {
              requestOptions.family = dns_ip_version_1.dnsLookupIpVersionToFamily(options.dnsLookupIpVersion);
            } catch (_f) {
              throw new Error("Invalid `dnsLookupIpVersion` option value");
            }
          }
          if (options.https) {
            if ("rejectUnauthorized" in options.https) {
              requestOptions.rejectUnauthorized = options.https.rejectUnauthorized;
            }
            if (options.https.checkServerIdentity) {
              requestOptions.checkServerIdentity = options.https.checkServerIdentity;
            }
            if (options.https.certificateAuthority) {
              requestOptions.ca = options.https.certificateAuthority;
            }
            if (options.https.certificate) {
              requestOptions.cert = options.https.certificate;
            }
            if (options.https.key) {
              requestOptions.key = options.https.key;
            }
            if (options.https.passphrase) {
              requestOptions.passphrase = options.https.passphrase;
            }
            if (options.https.pfx) {
              requestOptions.pfx = options.https.pfx;
            }
          }
          try {
            let requestOrResponse = await fn(url, requestOptions);
            if (is_1.default.undefined(requestOrResponse)) {
              requestOrResponse = fallbackFn(url, requestOptions);
            }
            options.request = request;
            options.timeout = timeout;
            options.agent = agent;
            if (options.https) {
              if ("rejectUnauthorized" in options.https) {
                delete requestOptions.rejectUnauthorized;
              }
              if (options.https.checkServerIdentity) {
                delete requestOptions.checkServerIdentity;
              }
              if (options.https.certificateAuthority) {
                delete requestOptions.ca;
              }
              if (options.https.certificate) {
                delete requestOptions.cert;
              }
              if (options.https.key) {
                delete requestOptions.key;
              }
              if (options.https.passphrase) {
                delete requestOptions.passphrase;
              }
              if (options.https.pfx) {
                delete requestOptions.pfx;
              }
            }
            if (isClientRequest(requestOrResponse)) {
              this._onRequest(requestOrResponse);
            } else if (this.writable) {
              this.once("finish", () => {
                this._onResponse(requestOrResponse);
              });
              this._unlockWrite();
              this.end();
              this._lockWrite();
            } else {
              this._onResponse(requestOrResponse);
            }
          } catch (error) {
            if (error instanceof CacheableRequest.CacheError) {
              throw new CacheError(error, this);
            }
            throw new RequestError(error.message, error, this);
          }
        }
        async _error(error) {
          try {
            for (const hook of this.options.hooks.beforeError) {
              error = await hook(error);
            }
          } catch (error_) {
            error = new RequestError(error_.message, error_, this);
          }
          this.destroy(error);
        }
        _beforeError(error) {
          if (this[kStopReading]) {
            return;
          }
          const { options } = this;
          const retryCount = this.retryCount + 1;
          this[kStopReading] = true;
          if (!(error instanceof RequestError)) {
            error = new RequestError(error.message, error, this);
          }
          const typedError = error;
          const { response } = typedError;
          (async () => {
            if (response && !response.body) {
              response.setEncoding(this._readableState.encoding);
              try {
                response.rawBody = await get_buffer_1.default(response);
                response.body = response.rawBody.toString();
              } catch (_a) {
              }
            }
            if (this.listenerCount("retry") !== 0) {
              let backoff;
              try {
                let retryAfter;
                if (response && "retry-after" in response.headers) {
                  retryAfter = Number(response.headers["retry-after"]);
                  if (Number.isNaN(retryAfter)) {
                    retryAfter = Date.parse(response.headers["retry-after"]) - Date.now();
                    if (retryAfter <= 0) {
                      retryAfter = 1;
                    }
                  } else {
                    retryAfter *= 1000;
                  }
                }
                backoff = await options.retry.calculateDelay({
                  attemptCount: retryCount,
                  retryOptions: options.retry,
                  error: typedError,
                  retryAfter,
                  computedValue: calculate_retry_delay_1.default({
                    attemptCount: retryCount,
                    retryOptions: options.retry,
                    error: typedError,
                    retryAfter,
                    computedValue: 0
                  })
                });
              } catch (error_) {
                this._error(new RequestError(error_.message, error_, this));
                return;
              }
              if (backoff) {
                const retry = async () => {
                  try {
                    for (const hook of this.options.hooks.beforeRetry) {
                      await hook(this.options, typedError, retryCount);
                    }
                  } catch (error_) {
                    this._error(new RequestError(error_.message, error, this));
                    return;
                  }
                  if (this.destroyed) {
                    return;
                  }
                  this.destroy();
                  this.emit("retry", retryCount, error);
                };
                this[kRetryTimeout] = setTimeout(retry, backoff);
                return;
              }
            }
            this._error(typedError);
          })();
        }
        _read() {
          this[kTriggerRead] = true;
          const response = this[kResponse];
          if (response && !this[kStopReading]) {
            if (response.readableLength) {
              this[kTriggerRead] = false;
            }
            let data;
            while ((data = response.read()) !== null) {
              this[kDownloadedSize] += data.length;
              this[kStartedReading] = true;
              const progress = this.downloadProgress;
              if (progress.percent < 1) {
                this.emit("downloadProgress", progress);
              }
              this.push(data);
            }
          }
        }
        _write(chunk, encoding, callback) {
          const write = () => {
            this._writeRequest(chunk, encoding, callback);
          };
          if (this.requestInitialized) {
            write();
          } else {
            this[kJobs].push(write);
          }
        }
        _writeRequest(chunk, encoding, callback) {
          if (this[kRequest].destroyed) {
            return;
          }
          this._progressCallbacks.push(() => {
            this[kUploadedSize] += Buffer.byteLength(chunk, encoding);
            const progress = this.uploadProgress;
            if (progress.percent < 1) {
              this.emit("uploadProgress", progress);
            }
          });
          this[kRequest].write(chunk, encoding, (error) => {
            if (!error && this._progressCallbacks.length > 0) {
              this._progressCallbacks.shift()();
            }
            callback(error);
          });
        }
        _final(callback) {
          const endRequest = () => {
            while (this._progressCallbacks.length !== 0) {
              this._progressCallbacks.shift()();
            }
            if (!(kRequest in this)) {
              callback();
              return;
            }
            if (this[kRequest].destroyed) {
              callback();
              return;
            }
            this[kRequest].end((error) => {
              if (!error) {
                this[kBodySize] = this[kUploadedSize];
                this.emit("uploadProgress", this.uploadProgress);
                this[kRequest].emit("upload-complete");
              }
              callback(error);
            });
          };
          if (this.requestInitialized) {
            endRequest();
          } else {
            this[kJobs].push(endRequest);
          }
        }
        _destroy(error, callback) {
          var _a;
          this[kStopReading] = true;
          clearTimeout(this[kRetryTimeout]);
          if (kRequest in this) {
            this[kCancelTimeouts]();
            if (!((_a = this[kResponse]) === null || _a === undefined ? undefined : _a.complete)) {
              this[kRequest].destroy();
            }
          }
          if (error !== null && !is_1.default.undefined(error) && !(error instanceof RequestError)) {
            error = new RequestError(error.message, error, this);
          }
          callback(error);
        }
        get _isAboutToError() {
          return this[kStopReading];
        }
        get ip() {
          var _a;
          return (_a = this.socket) === null || _a === undefined ? undefined : _a.remoteAddress;
        }
        get aborted() {
          var _a, _b, _c;
          return ((_b = (_a = this[kRequest]) === null || _a === undefined ? undefined : _a.destroyed) !== null && _b !== undefined ? _b : this.destroyed) && !((_c = this[kOriginalResponse]) === null || _c === undefined ? undefined : _c.complete);
        }
        get socket() {
          var _a, _b;
          return (_b = (_a = this[kRequest]) === null || _a === undefined ? undefined : _a.socket) !== null && _b !== undefined ? _b : undefined;
        }
        get downloadProgress() {
          let percent;
          if (this[kResponseSize]) {
            percent = this[kDownloadedSize] / this[kResponseSize];
          } else if (this[kResponseSize] === this[kDownloadedSize]) {
            percent = 1;
          } else {
            percent = 0;
          }
          return {
            percent,
            transferred: this[kDownloadedSize],
            total: this[kResponseSize]
          };
        }
        get uploadProgress() {
          let percent;
          if (this[kBodySize]) {
            percent = this[kUploadedSize] / this[kBodySize];
          } else if (this[kBodySize] === this[kUploadedSize]) {
            percent = 1;
          } else {
            percent = 0;
          }
          return {
            percent,
            transferred: this[kUploadedSize],
            total: this[kBodySize]
          };
        }
        get timings() {
          var _a;
          return (_a = this[kRequest]) === null || _a === undefined ? undefined : _a.timings;
        }
        get isFromCache() {
          return this[kIsFromCache];
        }
        pipe(destination, options) {
          if (this[kStartedReading]) {
            throw new Error("Failed to pipe. The response has been emitted already.");
          }
          if (destination instanceof http_1.ServerResponse) {
            this[kServerResponsesPiped].add(destination);
          }
          return super.pipe(destination, options);
        }
        unpipe(destination) {
          if (destination instanceof http_1.ServerResponse) {
            this[kServerResponsesPiped].delete(destination);
          }
          super.unpipe(destination);
          return this;
        }
      };
      exports22.default = Request;
    }
  });
  var require_types2 = __commonJS2({
    "../../node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/as-promise/types.js"(exports22) {
      var __createBinding2 = exports22 && exports22.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === undefined)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === undefined)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar2 = exports22 && exports22.__exportStar || function(m, exports3) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
            __createBinding2(exports3, m, p);
      };
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.CancelError = exports22.ParseError = undefined;
      var core_1 = require_core3();
      var ParseError = class extends core_1.RequestError {
        constructor(error, response) {
          const { options } = response.request;
          super(`${error.message} in "${options.url.toString()}"`, error, response.request);
          this.name = "ParseError";
          this.code = this.code === "ERR_GOT_REQUEST_ERROR" ? "ERR_BODY_PARSE_FAILURE" : this.code;
        }
      };
      exports22.ParseError = ParseError;
      var CancelError = class extends core_1.RequestError {
        constructor(request) {
          super("Promise was canceled", {}, request);
          this.name = "CancelError";
          this.code = "ERR_CANCELED";
        }
        get isCanceled() {
          return true;
        }
      };
      exports22.CancelError = CancelError;
      __exportStar2(require_core3(), exports22);
    }
  });
  var require_parse_body = __commonJS2({
    "../../node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/as-promise/parse-body.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var types_1 = require_types2();
      var parseBody = (response, responseType, parseJson, encoding) => {
        const { rawBody } = response;
        try {
          if (responseType === "text") {
            return rawBody.toString(encoding);
          }
          if (responseType === "json") {
            return rawBody.length === 0 ? "" : parseJson(rawBody.toString());
          }
          if (responseType === "buffer") {
            return rawBody;
          }
          throw new types_1.ParseError({
            message: `Unknown body type '${responseType}'`,
            name: "Error"
          }, response);
        } catch (error) {
          throw new types_1.ParseError(error, response);
        }
      };
      exports22.default = parseBody;
    }
  });
  var require_as_promise = __commonJS2({
    "../../node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/as-promise/index.js"(exports22) {
      var __createBinding2 = exports22 && exports22.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === undefined)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === undefined)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar2 = exports22 && exports22.__exportStar || function(m, exports3) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
            __createBinding2(exports3, m, p);
      };
      Object.defineProperty(exports22, "__esModule", { value: true });
      var events_1 = __require("events");
      var is_1 = require_dist();
      var PCancelable = require_p_cancelable();
      var types_1 = require_types2();
      var parse_body_1 = require_parse_body();
      var core_1 = require_core3();
      var proxy_events_1 = require_proxy_events2();
      var get_buffer_1 = require_get_buffer();
      var is_response_ok_1 = require_is_response_ok();
      var proxiedRequestEvents = [
        "request",
        "response",
        "redirect",
        "uploadProgress",
        "downloadProgress"
      ];
      function asPromise(normalizedOptions) {
        let globalRequest;
        let globalResponse;
        const emitter = new events_1.EventEmitter;
        const promise = new PCancelable((resolve, reject, onCancel) => {
          const makeRequest = (retryCount) => {
            const request = new core_1.default(undefined, normalizedOptions);
            request.retryCount = retryCount;
            request._noPipe = true;
            onCancel(() => request.destroy());
            onCancel.shouldReject = false;
            onCancel(() => reject(new types_1.CancelError(request)));
            globalRequest = request;
            request.once("response", async (response) => {
              var _a;
              response.retryCount = retryCount;
              if (response.request.aborted) {
                return;
              }
              let rawBody;
              try {
                rawBody = await get_buffer_1.default(request);
                response.rawBody = rawBody;
              } catch (_b) {
                return;
              }
              if (request._isAboutToError) {
                return;
              }
              const contentEncoding = ((_a = response.headers["content-encoding"]) !== null && _a !== undefined ? _a : "").toLowerCase();
              const isCompressed = ["gzip", "deflate", "br"].includes(contentEncoding);
              const { options } = request;
              if (isCompressed && !options.decompress) {
                response.body = rawBody;
              } else {
                try {
                  response.body = parse_body_1.default(response, options.responseType, options.parseJson, options.encoding);
                } catch (error) {
                  response.body = rawBody.toString();
                  if (is_response_ok_1.isResponseOk(response)) {
                    request._beforeError(error);
                    return;
                  }
                }
              }
              try {
                for (const [index, hook] of options.hooks.afterResponse.entries()) {
                  response = await hook(response, async (updatedOptions) => {
                    const typedOptions = core_1.default.normalizeArguments(undefined, {
                      ...updatedOptions,
                      retry: {
                        calculateDelay: () => 0
                      },
                      throwHttpErrors: false,
                      resolveBodyOnly: false
                    }, options);
                    typedOptions.hooks.afterResponse = typedOptions.hooks.afterResponse.slice(0, index);
                    for (const hook2 of typedOptions.hooks.beforeRetry) {
                      await hook2(typedOptions);
                    }
                    const promise2 = asPromise(typedOptions);
                    onCancel(() => {
                      promise2.catch(() => {
                      });
                      promise2.cancel();
                    });
                    return promise2;
                  });
                }
              } catch (error) {
                request._beforeError(new types_1.RequestError(error.message, error, request));
                return;
              }
              globalResponse = response;
              if (!is_response_ok_1.isResponseOk(response)) {
                request._beforeError(new types_1.HTTPError(response));
                return;
              }
              request.destroy();
              resolve(request.options.resolveBodyOnly ? response.body : response);
            });
            const onError = (error) => {
              if (promise.isCanceled) {
                return;
              }
              const { options } = request;
              if (error instanceof types_1.HTTPError && !options.throwHttpErrors) {
                const { response } = error;
                resolve(request.options.resolveBodyOnly ? response.body : response);
                return;
              }
              reject(error);
            };
            request.once("error", onError);
            const previousBody = request.options.body;
            request.once("retry", (newRetryCount, error) => {
              var _a, _b;
              if (previousBody === ((_a = error.request) === null || _a === undefined ? undefined : _a.options.body) && is_1.default.nodeStream((_b = error.request) === null || _b === undefined ? undefined : _b.options.body)) {
                onError(error);
                return;
              }
              makeRequest(newRetryCount);
            });
            proxy_events_1.default(request, emitter, proxiedRequestEvents);
          };
          makeRequest(0);
        });
        promise.on = (event, fn) => {
          emitter.on(event, fn);
          return promise;
        };
        const shortcut = (responseType) => {
          const newPromise = (async () => {
            await promise;
            const { options } = globalResponse.request;
            return parse_body_1.default(globalResponse, responseType, options.parseJson, options.encoding);
          })();
          Object.defineProperties(newPromise, Object.getOwnPropertyDescriptors(promise));
          return newPromise;
        };
        promise.json = () => {
          const { headers } = globalRequest.options;
          if (!globalRequest.writableFinished && headers.accept === undefined) {
            headers.accept = "application/json";
          }
          return shortcut("json");
        };
        promise.buffer = () => shortcut("buffer");
        promise.text = () => shortcut("text");
        return promise;
      }
      exports22.default = asPromise;
      __exportStar2(require_types2(), exports22);
    }
  });
  var require_create_rejection = __commonJS2({
    "../../node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/as-promise/create-rejection.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var types_1 = require_types2();
      function createRejection(error, ...beforeErrorGroups) {
        const promise = (async () => {
          if (error instanceof types_1.RequestError) {
            try {
              for (const hooks of beforeErrorGroups) {
                if (hooks) {
                  for (const hook of hooks) {
                    error = await hook(error);
                  }
                }
              }
            } catch (error_) {
              error = error_;
            }
          }
          throw error;
        })();
        const returnPromise = () => promise;
        promise.json = returnPromise;
        promise.text = returnPromise;
        promise.buffer = returnPromise;
        promise.on = returnPromise;
        return promise;
      }
      exports22.default = createRejection;
    }
  });
  var require_deep_freeze = __commonJS2({
    "../../node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/utils/deep-freeze.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var is_1 = require_dist();
      function deepFreeze(object) {
        for (const value of Object.values(object)) {
          if (is_1.default.plainObject(value) || is_1.default.array(value)) {
            deepFreeze(value);
          }
        }
        return Object.freeze(object);
      }
      exports22.default = deepFreeze;
    }
  });
  var require_types3 = __commonJS2({
    "../../node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/types.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
    }
  });
  var require_create = __commonJS2({
    "../../node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/create.js"(exports22) {
      var __createBinding2 = exports22 && exports22.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === undefined)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === undefined)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar2 = exports22 && exports22.__exportStar || function(m, exports3) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
            __createBinding2(exports3, m, p);
      };
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.defaultHandler = undefined;
      var is_1 = require_dist();
      var as_promise_1 = require_as_promise();
      var create_rejection_1 = require_create_rejection();
      var core_1 = require_core3();
      var deep_freeze_1 = require_deep_freeze();
      var errors = {
        RequestError: as_promise_1.RequestError,
        CacheError: as_promise_1.CacheError,
        ReadError: as_promise_1.ReadError,
        HTTPError: as_promise_1.HTTPError,
        MaxRedirectsError: as_promise_1.MaxRedirectsError,
        TimeoutError: as_promise_1.TimeoutError,
        ParseError: as_promise_1.ParseError,
        CancelError: as_promise_1.CancelError,
        UnsupportedProtocolError: as_promise_1.UnsupportedProtocolError,
        UploadError: as_promise_1.UploadError
      };
      var delay = async (ms) => new Promise((resolve) => {
        setTimeout(resolve, ms);
      });
      var { normalizeArguments } = core_1.default;
      var mergeOptions = (...sources) => {
        let mergedOptions;
        for (const source of sources) {
          mergedOptions = normalizeArguments(undefined, source, mergedOptions);
        }
        return mergedOptions;
      };
      var getPromiseOrStream = (options) => options.isStream ? new core_1.default(undefined, options) : as_promise_1.default(options);
      var isGotInstance = (value) => ("defaults" in value) && ("options" in value.defaults);
      var aliases = [
        "get",
        "post",
        "put",
        "patch",
        "head",
        "delete"
      ];
      exports22.defaultHandler = (options, next) => next(options);
      var callInitHooks = (hooks, options) => {
        if (hooks) {
          for (const hook of hooks) {
            hook(options);
          }
        }
      };
      var create = (defaults) => {
        defaults._rawHandlers = defaults.handlers;
        defaults.handlers = defaults.handlers.map((fn) => (options, next) => {
          let root;
          const result2 = fn(options, (newOptions) => {
            root = next(newOptions);
            return root;
          });
          if (result2 !== root && !options.isStream && root) {
            const typedResult = result2;
            const { then: promiseThen, catch: promiseCatch, finally: promiseFianlly } = typedResult;
            Object.setPrototypeOf(typedResult, Object.getPrototypeOf(root));
            Object.defineProperties(typedResult, Object.getOwnPropertyDescriptors(root));
            typedResult.then = promiseThen;
            typedResult.catch = promiseCatch;
            typedResult.finally = promiseFianlly;
          }
          return result2;
        });
        const got = (url, options = {}, _defaults) => {
          var _a, _b;
          let iteration = 0;
          const iterateHandlers = (newOptions) => {
            return defaults.handlers[iteration++](newOptions, iteration === defaults.handlers.length ? getPromiseOrStream : iterateHandlers);
          };
          if (is_1.default.plainObject(url)) {
            const mergedOptions = {
              ...url,
              ...options
            };
            core_1.setNonEnumerableProperties([url, options], mergedOptions);
            options = mergedOptions;
            url = undefined;
          }
          try {
            let initHookError;
            try {
              callInitHooks(defaults.options.hooks.init, options);
              callInitHooks((_a = options.hooks) === null || _a === undefined ? undefined : _a.init, options);
            } catch (error) {
              initHookError = error;
            }
            const normalizedOptions = normalizeArguments(url, options, _defaults !== null && _defaults !== undefined ? _defaults : defaults.options);
            normalizedOptions[core_1.kIsNormalizedAlready] = true;
            if (initHookError) {
              throw new as_promise_1.RequestError(initHookError.message, initHookError, normalizedOptions);
            }
            return iterateHandlers(normalizedOptions);
          } catch (error) {
            if (options.isStream) {
              throw error;
            } else {
              return create_rejection_1.default(error, defaults.options.hooks.beforeError, (_b = options.hooks) === null || _b === undefined ? undefined : _b.beforeError);
            }
          }
        };
        got.extend = (...instancesOrOptions) => {
          const optionsArray = [defaults.options];
          let handlers = [...defaults._rawHandlers];
          let isMutableDefaults;
          for (const value of instancesOrOptions) {
            if (isGotInstance(value)) {
              optionsArray.push(value.defaults.options);
              handlers.push(...value.defaults._rawHandlers);
              isMutableDefaults = value.defaults.mutableDefaults;
            } else {
              optionsArray.push(value);
              if ("handlers" in value) {
                handlers.push(...value.handlers);
              }
              isMutableDefaults = value.mutableDefaults;
            }
          }
          handlers = handlers.filter((handler) => handler !== exports22.defaultHandler);
          if (handlers.length === 0) {
            handlers.push(exports22.defaultHandler);
          }
          return create({
            options: mergeOptions(...optionsArray),
            handlers,
            mutableDefaults: Boolean(isMutableDefaults)
          });
        };
        const paginateEach = async function* (url, options) {
          let normalizedOptions = normalizeArguments(url, options, defaults.options);
          normalizedOptions.resolveBodyOnly = false;
          const pagination = normalizedOptions.pagination;
          if (!is_1.default.object(pagination)) {
            throw new TypeError("`options.pagination` must be implemented");
          }
          const all = [];
          let { countLimit } = pagination;
          let numberOfRequests = 0;
          while (numberOfRequests < pagination.requestLimit) {
            if (numberOfRequests !== 0) {
              await delay(pagination.backoff);
            }
            const result2 = await got(undefined, undefined, normalizedOptions);
            const parsed = await pagination.transform(result2);
            const current = [];
            for (const item of parsed) {
              if (pagination.filter(item, all, current)) {
                if (!pagination.shouldContinue(item, all, current)) {
                  return;
                }
                yield item;
                if (pagination.stackAllItems) {
                  all.push(item);
                }
                current.push(item);
                if (--countLimit <= 0) {
                  return;
                }
              }
            }
            const optionsToMerge = pagination.paginate(result2, all, current);
            if (optionsToMerge === false) {
              return;
            }
            if (optionsToMerge === result2.request.options) {
              normalizedOptions = result2.request.options;
            } else if (optionsToMerge !== undefined) {
              normalizedOptions = normalizeArguments(undefined, optionsToMerge, normalizedOptions);
            }
            numberOfRequests++;
          }
        };
        got.paginate = paginateEach;
        got.paginate.all = async (url, options) => {
          const results = [];
          for await (const item of paginateEach(url, options)) {
            results.push(item);
          }
          return results;
        };
        got.paginate.each = paginateEach;
        got.stream = (url, options) => got(url, { ...options, isStream: true });
        for (const method of aliases) {
          got[method] = (url, options) => got(url, { ...options, method });
          got.stream[method] = (url, options) => {
            return got(url, { ...options, method, isStream: true });
          };
        }
        Object.assign(got, errors);
        Object.defineProperty(got, "defaults", {
          value: defaults.mutableDefaults ? defaults : deep_freeze_1.default(defaults),
          writable: defaults.mutableDefaults,
          configurable: defaults.mutableDefaults,
          enumerable: true
        });
        got.mergeOptions = mergeOptions;
        return got;
      };
      exports22.default = create;
      __exportStar2(require_types3(), exports22);
    }
  });
  var require_source6 = __commonJS2({
    "../../node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/index.js"(exports22, module22) {
      var __createBinding2 = exports22 && exports22.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === undefined)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === undefined)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar2 = exports22 && exports22.__exportStar || function(m, exports3) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
            __createBinding2(exports3, m, p);
      };
      Object.defineProperty(exports22, "__esModule", { value: true });
      var url_1 = __require("url");
      var create_1 = require_create();
      var defaults = {
        options: {
          method: "GET",
          retry: {
            limit: 2,
            methods: [
              "GET",
              "PUT",
              "HEAD",
              "DELETE",
              "OPTIONS",
              "TRACE"
            ],
            statusCodes: [
              408,
              413,
              429,
              500,
              502,
              503,
              504,
              521,
              522,
              524
            ],
            errorCodes: [
              "ETIMEDOUT",
              "ECONNRESET",
              "EADDRINUSE",
              "ECONNREFUSED",
              "EPIPE",
              "ENOTFOUND",
              "ENETUNREACH",
              "EAI_AGAIN"
            ],
            maxRetryAfter: undefined,
            calculateDelay: ({ computedValue }) => computedValue
          },
          timeout: {},
          headers: {
            "user-agent": "got (https://github.com/sindresorhus/got)"
          },
          hooks: {
            init: [],
            beforeRequest: [],
            beforeRedirect: [],
            beforeRetry: [],
            beforeError: [],
            afterResponse: []
          },
          cache: undefined,
          dnsCache: undefined,
          decompress: true,
          throwHttpErrors: true,
          followRedirect: true,
          isStream: false,
          responseType: "text",
          resolveBodyOnly: false,
          maxRedirects: 10,
          prefixUrl: "",
          methodRewriting: true,
          ignoreInvalidCookies: false,
          context: {},
          http2: false,
          allowGetBody: false,
          https: undefined,
          pagination: {
            transform: (response) => {
              if (response.request.options.responseType === "json") {
                return response.body;
              }
              return JSON.parse(response.body);
            },
            paginate: (response) => {
              if (!Reflect.has(response.headers, "link")) {
                return false;
              }
              const items = response.headers.link.split(",");
              let next;
              for (const item of items) {
                const parsed = item.split(";");
                if (parsed[1].includes("next")) {
                  next = parsed[0].trimStart().trim();
                  next = next.slice(1, -1);
                  break;
                }
              }
              if (next) {
                const options = {
                  url: new url_1.URL(next)
                };
                return options;
              }
              return false;
            },
            filter: () => true,
            shouldContinue: () => true,
            countLimit: Infinity,
            backoff: 0,
            requestLimit: 1e4,
            stackAllItems: true
          },
          parseJson: (text) => JSON.parse(text),
          stringifyJson: (object) => JSON.stringify(object),
          cacheOptions: {}
        },
        handlers: [create_1.defaultHandler],
        mutableDefaults: false
      };
      var got = create_1.default(defaults);
      exports22.default = got;
      module22.exports = got;
      module22.exports.default = got;
      module22.exports.__esModule = true;
      __exportStar2(require_create(), exports22);
      __exportStar2(require_as_promise(), exports22);
    }
  });
  var require_httpUtils = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/httpUtils.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.Method = undefined;
      exports22.getNetworkSettings = getNetworkSettings;
      exports22.request = request;
      exports22.get = get;
      exports22.put = put;
      exports22.post = post;
      exports22.del = del;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var fslib_12 = require_lib();
      var https_1 = __require("https");
      var http_1 = __require("http");
      var micromatch_12 = tslib_12.__importDefault(require_micromatch());
      var tunnel_1 = tslib_12.__importDefault(require_tunnel2());
      var MessageName_1 = require_MessageName();
      var Report_1 = require_Report();
      var formatUtils = tslib_12.__importStar(require_formatUtils());
      var miscUtils = tslib_12.__importStar(require_miscUtils());
      var cache = /* @__PURE__ */ new Map;
      var fileCache = /* @__PURE__ */ new Map;
      var globalHttpAgent = new http_1.Agent({ keepAlive: true });
      var globalHttpsAgent = new https_1.Agent({ keepAlive: true });
      function parseProxy(specifier) {
        const url = new URL(specifier);
        const proxy = { host: url.hostname, headers: {} };
        if (url.port)
          proxy.port = Number(url.port);
        if (url.username && url.password)
          proxy.proxyAuth = `${url.username}:${url.password}`;
        return { proxy };
      }
      async function getCachedFile(filePath) {
        return miscUtils.getFactoryWithDefault(fileCache, filePath, () => {
          return fslib_12.xfs.readFilePromise(filePath).then((file) => {
            fileCache.set(filePath, file);
            return file;
          });
        });
      }
      function prettyResponseCode({ statusCode, statusMessage }, configuration) {
        const prettyStatusCode = formatUtils.pretty(configuration, statusCode, formatUtils.Type.NUMBER);
        const href = `https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/${statusCode}`;
        return formatUtils.applyHyperlink(configuration, `${prettyStatusCode}${statusMessage ? ` (${statusMessage})` : ``}`, href);
      }
      async function prettyNetworkError(response, { configuration, customErrorMessage }) {
        try {
          return await response;
        } catch (err) {
          if (err.name !== `HTTPError`)
            throw err;
          let message = customErrorMessage?.(err, configuration) ?? err.response.body?.error;
          if (message == null) {
            if (err.message.startsWith(`Response code`)) {
              message = `The remote server failed to provide the requested resource`;
            } else {
              message = err.message;
            }
          }
          if (err.code === `ETIMEDOUT` && err.event === `socket`)
            message += `(can be increased via ${formatUtils.pretty(configuration, `httpTimeout`, formatUtils.Type.SETTING)})`;
          const networkError = new Report_1.ReportError(MessageName_1.MessageName.NETWORK_ERROR, message, (report) => {
            if (err.response) {
              report.reportError(MessageName_1.MessageName.NETWORK_ERROR, `  ${formatUtils.prettyField(configuration, {
                label: `Response Code`,
                value: formatUtils.tuple(formatUtils.Type.NO_HINT, prettyResponseCode(err.response, configuration))
              })}`);
            }
            if (err.request) {
              report.reportError(MessageName_1.MessageName.NETWORK_ERROR, `  ${formatUtils.prettyField(configuration, {
                label: `Request Method`,
                value: formatUtils.tuple(formatUtils.Type.NO_HINT, err.request.options.method)
              })}`);
              report.reportError(MessageName_1.MessageName.NETWORK_ERROR, `  ${formatUtils.prettyField(configuration, {
                label: `Request URL`,
                value: formatUtils.tuple(formatUtils.Type.URL, err.request.requestUrl)
              })}`);
            }
            if (err.request.redirects.length > 0) {
              report.reportError(MessageName_1.MessageName.NETWORK_ERROR, `  ${formatUtils.prettyField(configuration, {
                label: `Request Redirects`,
                value: formatUtils.tuple(formatUtils.Type.NO_HINT, formatUtils.prettyList(configuration, err.request.redirects, formatUtils.Type.URL))
              })}`);
            }
            if (err.request.retryCount === err.request.options.retry.limit) {
              report.reportError(MessageName_1.MessageName.NETWORK_ERROR, `  ${formatUtils.prettyField(configuration, {
                label: `Request Retry Count`,
                value: formatUtils.tuple(formatUtils.Type.NO_HINT, `${formatUtils.pretty(configuration, err.request.retryCount, formatUtils.Type.NUMBER)} (can be increased via ${formatUtils.pretty(configuration, `httpRetry`, formatUtils.Type.SETTING)})`)
              })}`);
            }
          });
          networkError.originalError = err;
          throw networkError;
        }
      }
      function getNetworkSettings(target, opts) {
        const networkSettings = [...opts.configuration.get(`networkSettings`)].sort(([keyA], [keyB]) => {
          return keyB.length - keyA.length;
        });
        const mergedNetworkSettings = {
          enableNetwork: undefined,
          httpsCaFilePath: undefined,
          httpProxy: undefined,
          httpsProxy: undefined,
          httpsKeyFilePath: undefined,
          httpsCertFilePath: undefined
        };
        const mergableKeys = Object.keys(mergedNetworkSettings);
        const url = typeof target === `string` ? new URL(target) : target;
        for (const [glob, config] of networkSettings) {
          if (micromatch_12.default.isMatch(url.hostname, glob)) {
            for (const key of mergableKeys) {
              const setting = config.get(key);
              if (setting !== null && typeof mergedNetworkSettings[key] === `undefined`) {
                mergedNetworkSettings[key] = setting;
              }
            }
          }
        }
        for (const key of mergableKeys)
          if (typeof mergedNetworkSettings[key] === `undefined`)
            mergedNetworkSettings[key] = opts.configuration.get(key);
        return mergedNetworkSettings;
      }
      var Method;
      (function(Method2) {
        Method2["GET"] = "GET";
        Method2["PUT"] = "PUT";
        Method2["POST"] = "POST";
        Method2["DELETE"] = "DELETE";
      })(Method || (exports22.Method = Method = {}));
      async function request(target, body, { configuration, headers, jsonRequest, jsonResponse, method = Method.GET, wrapNetworkRequest }) {
        const options = { target, body, configuration, headers, jsonRequest, jsonResponse, method };
        const realRequest = async () => await requestImpl(target, body, options);
        const wrappedRequest = typeof wrapNetworkRequest !== `undefined` ? await wrapNetworkRequest(realRequest, options) : realRequest;
        const executor = await configuration.reduceHook((hooks) => {
          return hooks.wrapNetworkRequest;
        }, wrappedRequest, options);
        return await executor();
      }
      async function get(target, { configuration, jsonResponse, customErrorMessage, wrapNetworkRequest, ...rest }) {
        const runRequest = () => prettyNetworkError(request(target, null, { configuration, wrapNetworkRequest, ...rest }), { configuration, customErrorMessage }).then((response) => response.body);
        const entry = await (typeof wrapNetworkRequest !== `undefined` ? runRequest() : miscUtils.getFactoryWithDefault(cache, target, () => {
          return runRequest().then((body) => {
            cache.set(target, body);
            return body;
          });
        }));
        if (jsonResponse) {
          return JSON.parse(entry.toString());
        } else {
          return entry;
        }
      }
      async function put(target, body, { customErrorMessage, ...options }) {
        const response = await prettyNetworkError(request(target, body, { ...options, method: Method.PUT }), { customErrorMessage, configuration: options.configuration });
        return response.body;
      }
      async function post(target, body, { customErrorMessage, ...options }) {
        const response = await prettyNetworkError(request(target, body, { ...options, method: Method.POST }), { customErrorMessage, configuration: options.configuration });
        return response.body;
      }
      async function del(target, { customErrorMessage, ...options }) {
        const response = await prettyNetworkError(request(target, null, { ...options, method: Method.DELETE }), { customErrorMessage, configuration: options.configuration });
        return response.body;
      }
      async function requestImpl(target, body, { configuration, headers, jsonRequest, jsonResponse, method = Method.GET }) {
        const url = typeof target === `string` ? new URL(target) : target;
        const networkConfig = getNetworkSettings(url, { configuration });
        if (networkConfig.enableNetwork === false)
          throw new Report_1.ReportError(MessageName_1.MessageName.NETWORK_DISABLED, `Request to '${url.href}' has been blocked because of your configuration settings`);
        if (url.protocol === `http:` && !micromatch_12.default.isMatch(url.hostname, configuration.get(`unsafeHttpWhitelist`)))
          throw new Report_1.ReportError(MessageName_1.MessageName.NETWORK_UNSAFE_HTTP, `Unsafe http requests must be explicitly whitelisted in your configuration (${url.hostname})`);
        const agent = {
          http: networkConfig.httpProxy ? tunnel_1.default.httpOverHttp(parseProxy(networkConfig.httpProxy)) : globalHttpAgent,
          https: networkConfig.httpsProxy ? tunnel_1.default.httpsOverHttp(parseProxy(networkConfig.httpsProxy)) : globalHttpsAgent
        };
        const gotOptions = { agent, headers, method };
        gotOptions.responseType = jsonResponse ? `json` : `buffer`;
        if (body !== null) {
          if (Buffer.isBuffer(body) || !jsonRequest && typeof body === `string`) {
            gotOptions.body = body;
          } else {
            gotOptions.json = body;
          }
        }
        const socketTimeout = configuration.get(`httpTimeout`);
        const retry = configuration.get(`httpRetry`);
        const rejectUnauthorized = configuration.get(`enableStrictSsl`);
        const httpsCaFilePath = networkConfig.httpsCaFilePath;
        const httpsCertFilePath = networkConfig.httpsCertFilePath;
        const httpsKeyFilePath = networkConfig.httpsKeyFilePath;
        const { default: got } = await Promise.resolve().then(() => tslib_12.__importStar(require_source6()));
        const certificateAuthority = httpsCaFilePath ? await getCachedFile(httpsCaFilePath) : undefined;
        const certificate = httpsCertFilePath ? await getCachedFile(httpsCertFilePath) : undefined;
        const key = httpsKeyFilePath ? await getCachedFile(httpsKeyFilePath) : undefined;
        const gotClient = got.extend({
          timeout: {
            socket: socketTimeout
          },
          retry,
          https: {
            rejectUnauthorized,
            certificateAuthority,
            certificate,
            key
          },
          ...gotOptions
        });
        return configuration.getLimit(`networkConcurrency`)(() => {
          return gotClient(url);
        });
      }
    }
  });
  var require_nodeUtils = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/nodeUtils.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.openUrl = exports22.major = undefined;
      exports22.getArchitecture = getArchitecture;
      exports22.getArchitectureName = getArchitectureName;
      exports22.getArchitectureSet = getArchitectureSet;
      exports22.getCaller = getCaller;
      exports22.availableParallelism = availableParallelism;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var fslib_12 = require_lib();
      var os_1 = tslib_12.__importDefault(__require("os"));
      var execUtils = tslib_12.__importStar(require_execUtils());
      var miscUtils = tslib_12.__importStar(require_miscUtils());
      exports22.major = Number(process.versions.node.split(`.`)[0]);
      var openUrlBinary = (/* @__PURE__ */ new Map([
        [`darwin`, `open`],
        [`linux`, `xdg-open`],
        [`win32`, `explorer.exe`]
      ])).get(process.platform);
      exports22.openUrl = typeof openUrlBinary !== `undefined` ? async (url) => {
        try {
          await execUtils.execvp(openUrlBinary, [url], { cwd: fslib_12.ppath.cwd() });
          return true;
        } catch {
          return false;
        }
      } : undefined;
      var LDD_PATH = `/usr/bin/ldd`;
      function getLibc() {
        if (process.platform === `darwin` || process.platform === `win32`)
          return null;
        let header;
        try {
          header = fslib_12.xfs.readFileSync(LDD_PATH);
        } catch {
        }
        if (typeof header !== `undefined`) {
          if (header && (header.includes(`GLIBC`) || header.includes(`libc`)))
            return `glibc`;
          if (header && header.includes(`musl`)) {
            return `musl`;
          }
        }
        const report = process.report?.getReport() ?? {};
        const sharedObjects = report.sharedObjects ?? [];
        const libcRegExp = /\/(?:(ld-linux-|[^/]+-linux-gnu\/)|(libc.musl-|ld-musl-))/;
        return miscUtils.mapAndFind(sharedObjects, (entry) => {
          const match = entry.match(libcRegExp);
          if (!match)
            return miscUtils.mapAndFind.skip;
          if (match[1])
            return `glibc`;
          if (match[2])
            return `musl`;
          throw new Error(`Assertion failed: Expected the libc variant to have been detected`);
        }) ?? null;
      }
      var architecture;
      var architectureSet;
      function getArchitecture() {
        return architecture = architecture ?? {
          os: process.platform,
          cpu: process.arch,
          libc: getLibc()
        };
      }
      function getArchitectureName(architecture2 = getArchitecture()) {
        if (architecture2.libc) {
          return `${architecture2.os}-${architecture2.cpu}-${architecture2.libc}`;
        } else {
          return `${architecture2.os}-${architecture2.cpu}`;
        }
      }
      function getArchitectureSet() {
        const architecture2 = getArchitecture();
        return architectureSet = architectureSet ?? {
          os: [architecture2.os],
          cpu: [architecture2.cpu],
          libc: architecture2.libc ? [architecture2.libc] : []
        };
      }
      var chromeRe = /^\s*at (.*?) ?\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\/|[a-z]:\\|\\\\).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i;
      var chromeEvalRe = /\((\S*)(?::(\d+))(?::(\d+))\)/;
      function parseStackLine(line) {
        const parts = chromeRe.exec(line);
        if (!parts)
          return null;
        const isNative = parts[2] && parts[2].indexOf(`native`) === 0;
        const isEval = parts[2] && parts[2].indexOf(`eval`) === 0;
        const submatch = chromeEvalRe.exec(parts[2]);
        if (isEval && submatch != null) {
          parts[2] = submatch[1];
          parts[3] = submatch[2];
          parts[4] = submatch[3];
        }
        return {
          file: !isNative ? parts[2] : null,
          methodName: parts[1] || `<unknown>`,
          arguments: isNative ? [parts[2]] : [],
          line: parts[3] ? +parts[3] : null,
          column: parts[4] ? +parts[4] : null
        };
      }
      function getCaller() {
        const err = new Error;
        const line = err.stack.split(`
`)[3];
        return parseStackLine(line);
      }
      function availableParallelism() {
        if (typeof os_1.default.availableParallelism !== `undefined`)
          return os_1.default.availableParallelism();
        return Math.max(1, os_1.default.cpus().length);
      }
    }
  });
  var require_Configuration = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/Configuration.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.Configuration = exports22.coreDefinitions = exports22.WindowsLinkType = exports22.FormatType = exports22.SettingsType = exports22.SECRET = exports22.DEFAULT_RC_FILENAME = exports22.ENVIRONMENT_PREFIX = exports22.TAG_REGEXP = exports22.LEGACY_PLUGINS = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var fslib_12 = require_lib();
      var parsers_1 = require_lib2();
      var camelcase_1 = tslib_12.__importDefault(require_camelcase());
      var ci_info_1 = require_ci_info();
      var clipanion_12 = require_advanced();
      var dotenv_1 = require_main();
      var module_1 = __require("module");
      var p_limit_12 = tslib_12.__importDefault(require_p_limit());
      var stream_12 = __require("stream");
      var CorePlugin_1 = require_CorePlugin();
      var Manifest_1 = require_Manifest();
      var MultiFetcher_1 = require_MultiFetcher();
      var MultiResolver_1 = require_MultiResolver();
      var VirtualFetcher_1 = require_VirtualFetcher();
      var VirtualResolver_1 = require_VirtualResolver();
      var WorkspaceFetcher_1 = require_WorkspaceFetcher();
      var WorkspaceResolver_1 = require_WorkspaceResolver();
      var configUtils = tslib_12.__importStar(require_configUtils());
      var folderUtils = tslib_12.__importStar(require_folderUtils());
      var formatUtils = tslib_12.__importStar(require_formatUtils());
      var hashUtils = tslib_12.__importStar(require_hashUtils());
      var httpUtils = tslib_12.__importStar(require_httpUtils());
      var miscUtils = tslib_12.__importStar(require_miscUtils());
      var nodeUtils = tslib_12.__importStar(require_nodeUtils());
      var semverUtils = tslib_12.__importStar(require_semverUtils());
      var structUtils = tslib_12.__importStar(require_structUtils());
      var types_1 = require_types();
      var isPublicRepository = function() {
        if (!ci_info_1.GITHUB_ACTIONS || !process.env.GITHUB_EVENT_PATH)
          return false;
        const githubEventPath = fslib_12.npath.toPortablePath(process.env.GITHUB_EVENT_PATH);
        let data;
        try {
          data = fslib_12.xfs.readJsonSync(githubEventPath);
        } catch {
          return false;
        }
        if (!(`repository` in data) || !data.repository)
          return false;
        if (data.repository.private ?? true)
          return false;
        return true;
      }();
      exports22.LEGACY_PLUGINS = /* @__PURE__ */ new Set([
        `@yarnpkg/plugin-constraints`,
        `@yarnpkg/plugin-exec`,
        `@yarnpkg/plugin-interactive-tools`,
        `@yarnpkg/plugin-stage`,
        `@yarnpkg/plugin-typescript`,
        `@yarnpkg/plugin-version`,
        `@yarnpkg/plugin-workspace-tools`
      ]);
      var IGNORED_ENV_VARIABLES = /* @__PURE__ */ new Set([
        `isTestEnv`,
        `injectNpmUser`,
        `injectNpmPassword`,
        `injectNpm2FaToken`,
        `zipDataEpilogue`,
        `cacheCheckpointOverride`,
        `cacheVersionOverride`,
        `lockfileVersionOverride`,
        `binFolder`,
        `version`,
        `flags`,
        `profile`,
        `gpg`,
        `ignoreNode`,
        `wrapOutput`,
        `home`,
        `confDir`,
        `registry`,
        `ignoreCwd`
      ]);
      exports22.TAG_REGEXP = /^(?!v)[a-z0-9._-]+$/i;
      exports22.ENVIRONMENT_PREFIX = `yarn_`;
      exports22.DEFAULT_RC_FILENAME = `.yarnrc.yml`;
      exports22.SECRET = `********`;
      var SettingsType;
      (function(SettingsType2) {
        SettingsType2["ANY"] = "ANY";
        SettingsType2["BOOLEAN"] = "BOOLEAN";
        SettingsType2["ABSOLUTE_PATH"] = "ABSOLUTE_PATH";
        SettingsType2["LOCATOR"] = "LOCATOR";
        SettingsType2["LOCATOR_LOOSE"] = "LOCATOR_LOOSE";
        SettingsType2["NUMBER"] = "NUMBER";
        SettingsType2["STRING"] = "STRING";
        SettingsType2["SECRET"] = "SECRET";
        SettingsType2["SHAPE"] = "SHAPE";
        SettingsType2["MAP"] = "MAP";
      })(SettingsType || (exports22.SettingsType = SettingsType = {}));
      exports22.FormatType = formatUtils.Type;
      var WindowsLinkType;
      (function(WindowsLinkType2) {
        WindowsLinkType2["JUNCTIONS"] = "junctions";
        WindowsLinkType2["SYMLINKS"] = "symlinks";
      })(WindowsLinkType || (exports22.WindowsLinkType = WindowsLinkType = {}));
      exports22.coreDefinitions = {
        lastUpdateCheck: {
          description: `Last timestamp we checked whether new Yarn versions were available`,
          type: SettingsType.STRING,
          default: null
        },
        yarnPath: {
          description: `Path to the local executable that must be used over the global one`,
          type: SettingsType.ABSOLUTE_PATH,
          default: null
        },
        ignorePath: {
          description: `If true, the local executable will be ignored when using the global one`,
          type: SettingsType.BOOLEAN,
          default: false
        },
        globalFolder: {
          description: `Folder where all system-global files are stored`,
          type: SettingsType.ABSOLUTE_PATH,
          default: folderUtils.getDefaultGlobalFolder()
        },
        cacheFolder: {
          description: `Folder where the cache files must be written`,
          type: SettingsType.ABSOLUTE_PATH,
          default: `./.yarn/cache`
        },
        compressionLevel: {
          description: `Zip files compression level, from 0 to 9 or mixed (a variant of 9, which stores some files uncompressed, when compression doesn't yield good results)`,
          type: SettingsType.NUMBER,
          values: [`mixed`, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
          default: 0
        },
        virtualFolder: {
          description: `Folder where the virtual packages (cf doc) will be mapped on the disk (must be named __virtual__)`,
          type: SettingsType.ABSOLUTE_PATH,
          default: `./.yarn/__virtual__`
        },
        installStatePath: {
          description: `Path of the file where the install state will be persisted`,
          type: SettingsType.ABSOLUTE_PATH,
          default: `./.yarn/install-state.gz`
        },
        immutablePatterns: {
          description: `Array of glob patterns; files matching them won't be allowed to change during immutable installs`,
          type: SettingsType.STRING,
          default: [],
          isArray: true
        },
        rcFilename: {
          description: `Name of the files where the configuration can be found`,
          type: SettingsType.STRING,
          default: getRcFilename()
        },
        enableGlobalCache: {
          description: `If true, the system-wide cache folder will be used regardless of \`cache-folder\``,
          type: SettingsType.BOOLEAN,
          default: true
        },
        cacheMigrationMode: {
          description: `Defines the conditions under which Yarn upgrades should cause the cache archives to be regenerated.`,
          type: SettingsType.STRING,
          values: [`always`, `match-spec`, `required-only`],
          default: `always`
        },
        enableColors: {
          description: `If true, the CLI is allowed to use colors in its output`,
          type: SettingsType.BOOLEAN,
          default: formatUtils.supportsColor,
          defaultText: `<dynamic>`
        },
        enableHyperlinks: {
          description: `If true, the CLI is allowed to use hyperlinks in its output`,
          type: SettingsType.BOOLEAN,
          default: formatUtils.supportsHyperlinks,
          defaultText: `<dynamic>`
        },
        enableInlineBuilds: {
          description: `If true, the CLI will print the build output on the command line`,
          type: SettingsType.BOOLEAN,
          default: ci_info_1.isCI,
          defaultText: `<dynamic>`
        },
        enableMessageNames: {
          description: `If true, the CLI will prefix most messages with codes suitable for search engines`,
          type: SettingsType.BOOLEAN,
          default: true
        },
        enableProgressBars: {
          description: `If true, the CLI is allowed to show a progress bar for long-running events`,
          type: SettingsType.BOOLEAN,
          default: !ci_info_1.isCI,
          defaultText: `<dynamic>`
        },
        enableTimers: {
          description: `If true, the CLI is allowed to print the time spent executing commands`,
          type: SettingsType.BOOLEAN,
          default: true
        },
        enableTips: {
          description: `If true, installs will print a helpful message every day of the week`,
          type: SettingsType.BOOLEAN,
          default: !ci_info_1.isCI,
          defaultText: `<dynamic>`
        },
        preferInteractive: {
          description: `If true, the CLI will automatically use the interactive mode when called from a TTY`,
          type: SettingsType.BOOLEAN,
          default: false
        },
        preferTruncatedLines: {
          description: `If true, the CLI will truncate lines that would go beyond the size of the terminal`,
          type: SettingsType.BOOLEAN,
          default: false
        },
        progressBarStyle: {
          description: `Which style of progress bar should be used (only when progress bars are enabled)`,
          type: SettingsType.STRING,
          default: undefined,
          defaultText: `<dynamic>`
        },
        defaultLanguageName: {
          description: `Default language mode that should be used when a package doesn't offer any insight`,
          type: SettingsType.STRING,
          default: `node`
        },
        defaultProtocol: {
          description: `Default resolution protocol used when resolving pure semver and tag ranges`,
          type: SettingsType.STRING,
          default: `npm:`
        },
        enableTransparentWorkspaces: {
          description: `If false, Yarn won't automatically resolve workspace dependencies unless they use the \`workspace:\` protocol`,
          type: SettingsType.BOOLEAN,
          default: true
        },
        supportedArchitectures: {
          description: `Architectures that Yarn will fetch and inject into the resolver`,
          type: SettingsType.SHAPE,
          properties: {
            os: {
              description: `Array of supported process.platform strings, or null to target them all`,
              type: SettingsType.STRING,
              isArray: true,
              isNullable: true,
              default: [`current`]
            },
            cpu: {
              description: `Array of supported process.arch strings, or null to target them all`,
              type: SettingsType.STRING,
              isArray: true,
              isNullable: true,
              default: [`current`]
            },
            libc: {
              description: `Array of supported libc libraries, or null to target them all`,
              type: SettingsType.STRING,
              isArray: true,
              isNullable: true,
              default: [`current`]
            }
          }
        },
        enableMirror: {
          description: `If true, the downloaded packages will be retrieved and stored in both the local and global folders`,
          type: SettingsType.BOOLEAN,
          default: true
        },
        enableNetwork: {
          description: `If false, Yarn will refuse to use the network if required to`,
          type: SettingsType.BOOLEAN,
          default: true
        },
        enableOfflineMode: {
          description: `If true, Yarn will attempt to retrieve files and metadata from the global cache rather than the network`,
          type: SettingsType.BOOLEAN,
          default: false
        },
        httpProxy: {
          description: `URL of the http proxy that must be used for outgoing http requests`,
          type: SettingsType.STRING,
          default: null
        },
        httpsProxy: {
          description: `URL of the http proxy that must be used for outgoing https requests`,
          type: SettingsType.STRING,
          default: null
        },
        unsafeHttpWhitelist: {
          description: `List of the hostnames for which http queries are allowed (glob patterns are supported)`,
          type: SettingsType.STRING,
          default: [],
          isArray: true
        },
        httpTimeout: {
          description: `Timeout of each http request in milliseconds`,
          type: SettingsType.NUMBER,
          default: 60000
        },
        httpRetry: {
          description: `Retry times on http failure`,
          type: SettingsType.NUMBER,
          default: 3
        },
        networkConcurrency: {
          description: `Maximal number of concurrent requests`,
          type: SettingsType.NUMBER,
          default: 50
        },
        taskPoolConcurrency: {
          description: `Maximal amount of concurrent heavy task processing`,
          type: SettingsType.NUMBER,
          default: nodeUtils.availableParallelism()
        },
        taskPoolMode: {
          description: `Execution strategy for heavy tasks`,
          type: SettingsType.STRING,
          values: [`async`, `workers`],
          default: `workers`
        },
        networkSettings: {
          description: `Network settings per hostname (glob patterns are supported)`,
          type: SettingsType.MAP,
          valueDefinition: {
            description: ``,
            type: SettingsType.SHAPE,
            properties: {
              httpsCaFilePath: {
                description: `Path to file containing one or multiple Certificate Authority signing certificates`,
                type: SettingsType.ABSOLUTE_PATH,
                default: null
              },
              enableNetwork: {
                description: `If false, the package manager will refuse to use the network if required to`,
                type: SettingsType.BOOLEAN,
                default: null
              },
              httpProxy: {
                description: `URL of the http proxy that must be used for outgoing http requests`,
                type: SettingsType.STRING,
                default: null
              },
              httpsProxy: {
                description: `URL of the http proxy that must be used for outgoing https requests`,
                type: SettingsType.STRING,
                default: null
              },
              httpsKeyFilePath: {
                description: `Path to file containing private key in PEM format`,
                type: SettingsType.ABSOLUTE_PATH,
                default: null
              },
              httpsCertFilePath: {
                description: `Path to file containing certificate chain in PEM format`,
                type: SettingsType.ABSOLUTE_PATH,
                default: null
              }
            }
          }
        },
        httpsCaFilePath: {
          description: `A path to a file containing one or multiple Certificate Authority signing certificates`,
          type: SettingsType.ABSOLUTE_PATH,
          default: null
        },
        httpsKeyFilePath: {
          description: `Path to file containing private key in PEM format`,
          type: SettingsType.ABSOLUTE_PATH,
          default: null
        },
        httpsCertFilePath: {
          description: `Path to file containing certificate chain in PEM format`,
          type: SettingsType.ABSOLUTE_PATH,
          default: null
        },
        enableStrictSsl: {
          description: `If false, SSL certificate errors will be ignored`,
          type: SettingsType.BOOLEAN,
          default: true
        },
        logFilters: {
          description: `Overrides for log levels`,
          type: SettingsType.SHAPE,
          isArray: true,
          concatenateValues: true,
          properties: {
            code: {
              description: `Code of the messages covered by this override`,
              type: SettingsType.STRING,
              default: undefined
            },
            text: {
              description: `Code of the texts covered by this override`,
              type: SettingsType.STRING,
              default: undefined
            },
            pattern: {
              description: `Code of the patterns covered by this override`,
              type: SettingsType.STRING,
              default: undefined
            },
            level: {
              description: `Log level override, set to null to remove override`,
              type: SettingsType.STRING,
              values: Object.values(formatUtils.LogLevel),
              isNullable: true,
              default: undefined
            }
          }
        },
        enableTelemetry: {
          description: `If true, telemetry will be periodically sent, following the rules in https://yarnpkg.com/advanced/telemetry`,
          type: SettingsType.BOOLEAN,
          default: true
        },
        telemetryInterval: {
          description: `Minimal amount of time between two telemetry uploads, in days`,
          type: SettingsType.NUMBER,
          default: 7
        },
        telemetryUserId: {
          description: `If you desire to tell us which project you are, you can set this field. Completely optional and opt-in.`,
          type: SettingsType.STRING,
          default: null
        },
        enableHardenedMode: {
          description: `If true, automatically enable --check-resolutions --refresh-lockfile on installs`,
          type: SettingsType.BOOLEAN,
          default: ci_info_1.isPR && isPublicRepository,
          defaultText: `<true on public PRs>`
        },
        enableScripts: {
          description: `If true, packages are allowed to have install scripts by default`,
          type: SettingsType.BOOLEAN,
          default: true
        },
        enableStrictSettings: {
          description: `If true, unknown settings will cause Yarn to abort`,
          type: SettingsType.BOOLEAN,
          default: true
        },
        enableImmutableCache: {
          description: `If true, the cache is reputed immutable and actions that would modify it will throw`,
          type: SettingsType.BOOLEAN,
          default: false
        },
        enableCacheClean: {
          description: `If false, disallows the \`cache clean\` command`,
          type: SettingsType.BOOLEAN,
          default: true
        },
        checksumBehavior: {
          description: `Enumeration defining what to do when a checksum doesn't match expectations`,
          type: SettingsType.STRING,
          default: `throw`
        },
        injectEnvironmentFiles: {
          description: `List of all the environment files that Yarn should inject inside the process when it starts`,
          type: SettingsType.ABSOLUTE_PATH,
          default: [`.env.yarn?`],
          isArray: true
        },
        packageExtensions: {
          description: `Map of package corrections to apply on the dependency tree`,
          type: SettingsType.MAP,
          valueDefinition: {
            description: `The extension that will be applied to any package whose version matches the specified range`,
            type: SettingsType.SHAPE,
            properties: {
              dependencies: {
                description: `The set of dependencies that must be made available to the current package in order for it to work properly`,
                type: SettingsType.MAP,
                valueDefinition: {
                  description: `A range`,
                  type: SettingsType.STRING
                }
              },
              peerDependencies: {
                description: `Inherited dependencies - the consumer of the package will be tasked to provide them`,
                type: SettingsType.MAP,
                valueDefinition: {
                  description: `A semver range`,
                  type: SettingsType.STRING
                }
              },
              peerDependenciesMeta: {
                description: `Extra information related to the dependencies listed in the peerDependencies field`,
                type: SettingsType.MAP,
                valueDefinition: {
                  description: `The peerDependency meta`,
                  type: SettingsType.SHAPE,
                  properties: {
                    optional: {
                      description: `If true, the selected peer dependency will be marked as optional by the package manager and the consumer omitting it won't be reported as an error`,
                      type: SettingsType.BOOLEAN,
                      default: false
                    }
                  }
                }
              }
            }
          }
        }
      };
      function parseValue(configuration, path2, valueBase, definition, folder) {
        const value = configUtils.getValue(valueBase);
        if (definition.isArray || definition.type === SettingsType.ANY && Array.isArray(value)) {
          if (!Array.isArray(value)) {
            return String(value).split(/,/).map((segment) => {
              return parseSingleValue(configuration, path2, segment, definition, folder);
            });
          } else {
            return value.map((sub, i) => parseSingleValue(configuration, `${path2}[${i}]`, sub, definition, folder));
          }
        } else {
          if (Array.isArray(value)) {
            throw new Error(`Non-array configuration settings "${path2}" cannot be an array`);
          } else {
            return parseSingleValue(configuration, path2, valueBase, definition, folder);
          }
        }
      }
      function parseSingleValue(configuration, path2, valueBase, definition, folder) {
        const value = configUtils.getValue(valueBase);
        switch (definition.type) {
          case SettingsType.ANY:
            return configUtils.getValueByTree(value);
          case SettingsType.SHAPE:
            return parseShape(configuration, path2, valueBase, definition, folder);
          case SettingsType.MAP:
            return parseMap(configuration, path2, valueBase, definition, folder);
        }
        if (value === null && !definition.isNullable && definition.default !== null)
          throw new Error(`Non-nullable configuration settings "${path2}" cannot be set to null`);
        if (definition.values?.includes(value))
          return value;
        const interpretValue = () => {
          if (definition.type === SettingsType.BOOLEAN && typeof value !== `string`)
            return miscUtils.parseBoolean(value);
          if (typeof value !== `string`)
            throw new Error(`Expected configuration setting "${path2}" to be a string, got ${typeof value}`);
          const valueWithReplacedVariables = miscUtils.replaceEnvVariables(value, {
            env: configuration.env
          });
          switch (definition.type) {
            case SettingsType.ABSOLUTE_PATH: {
              let cwd = folder;
              const source = configUtils.getSource(valueBase);
              if (source && source[0] !== `<`)
                cwd = fslib_12.ppath.dirname(source);
              return fslib_12.ppath.resolve(cwd, fslib_12.npath.toPortablePath(valueWithReplacedVariables));
            }
            case SettingsType.LOCATOR_LOOSE:
              return structUtils.parseLocator(valueWithReplacedVariables, false);
            case SettingsType.NUMBER:
              return parseInt(valueWithReplacedVariables);
            case SettingsType.LOCATOR:
              return structUtils.parseLocator(valueWithReplacedVariables);
            case SettingsType.BOOLEAN:
              return miscUtils.parseBoolean(valueWithReplacedVariables);
            default:
              return valueWithReplacedVariables;
          }
        };
        const interpreted = interpretValue();
        if (definition.values && !definition.values.includes(interpreted))
          throw new Error(`Invalid value, expected one of ${definition.values.join(`, `)}`);
        return interpreted;
      }
      function parseShape(configuration, path2, valueBase, definition, folder) {
        const value = configUtils.getValue(valueBase);
        if (typeof value !== `object` || Array.isArray(value))
          throw new clipanion_12.UsageError(`Object configuration settings "${path2}" must be an object`);
        const result2 = getDefaultValue(configuration, definition, {
          ignoreArrays: true
        });
        if (value === null)
          return result2;
        for (const [propKey, propValue] of Object.entries(value)) {
          const subPath = `${path2}.${propKey}`;
          const subDefinition = definition.properties[propKey];
          if (!subDefinition)
            throw new clipanion_12.UsageError(`Unrecognized configuration settings found: ${path2}.${propKey} - run "yarn config -v" to see the list of settings supported in Yarn`);
          result2.set(propKey, parseValue(configuration, subPath, propValue, definition.properties[propKey], folder));
        }
        return result2;
      }
      function parseMap(configuration, path2, valueBase, definition, folder) {
        const value = configUtils.getValue(valueBase);
        const result2 = /* @__PURE__ */ new Map;
        if (typeof value !== `object` || Array.isArray(value))
          throw new clipanion_12.UsageError(`Map configuration settings "${path2}" must be an object`);
        if (value === null)
          return result2;
        for (const [propKey, propValue] of Object.entries(value)) {
          const normalizedKey = definition.normalizeKeys ? definition.normalizeKeys(propKey) : propKey;
          const subPath = `${path2}['${normalizedKey}']`;
          const valueDefinition = definition.valueDefinition;
          result2.set(normalizedKey, parseValue(configuration, subPath, propValue, valueDefinition, folder));
        }
        return result2;
      }
      function getDefaultValue(configuration, definition, { ignoreArrays = false } = {}) {
        switch (definition.type) {
          case SettingsType.SHAPE: {
            if (definition.isArray && !ignoreArrays)
              return [];
            const result2 = /* @__PURE__ */ new Map;
            for (const [propKey, propDefinition] of Object.entries(definition.properties))
              result2.set(propKey, getDefaultValue(configuration, propDefinition));
            return result2;
          }
          case SettingsType.MAP: {
            if (definition.isArray && !ignoreArrays)
              return [];
            return /* @__PURE__ */ new Map;
          }
          case SettingsType.ABSOLUTE_PATH: {
            if (definition.default === null)
              return null;
            if (configuration.projectCwd === null) {
              if (Array.isArray(definition.default)) {
                return definition.default.map((entry) => fslib_12.ppath.normalize(entry));
              } else if (fslib_12.ppath.isAbsolute(definition.default)) {
                return fslib_12.ppath.normalize(definition.default);
              } else if (definition.isNullable) {
                return null;
              } else {
                return;
              }
            } else {
              if (Array.isArray(definition.default)) {
                return definition.default.map((entry) => fslib_12.ppath.resolve(configuration.projectCwd, entry));
              } else {
                return fslib_12.ppath.resolve(configuration.projectCwd, definition.default);
              }
            }
          }
          default: {
            return definition.default;
          }
        }
      }
      function transformConfiguration(rawValue, definition, transforms) {
        if (definition.type === SettingsType.SECRET && typeof rawValue === `string` && transforms.hideSecrets)
          return exports22.SECRET;
        if (definition.type === SettingsType.ABSOLUTE_PATH && typeof rawValue === `string` && transforms.getNativePaths)
          return fslib_12.npath.fromPortablePath(rawValue);
        if (definition.isArray && Array.isArray(rawValue)) {
          const newValue = [];
          for (const value of rawValue)
            newValue.push(transformConfiguration(value, definition, transforms));
          return newValue;
        }
        if (definition.type === SettingsType.MAP && rawValue instanceof Map) {
          if (rawValue.size === 0)
            return;
          const newValue = /* @__PURE__ */ new Map;
          for (const [key, value] of rawValue.entries()) {
            const transformedValue = transformConfiguration(value, definition.valueDefinition, transforms);
            if (typeof transformedValue !== `undefined`) {
              newValue.set(key, transformedValue);
            }
          }
          return newValue;
        }
        if (definition.type === SettingsType.SHAPE && rawValue instanceof Map) {
          if (rawValue.size === 0)
            return;
          const newValue = /* @__PURE__ */ new Map;
          for (const [key, value] of rawValue.entries()) {
            const propertyDefinition = definition.properties[key];
            const transformedValue = transformConfiguration(value, propertyDefinition, transforms);
            if (typeof transformedValue !== `undefined`) {
              newValue.set(key, transformedValue);
            }
          }
          return newValue;
        }
        return rawValue;
      }
      function getEnvironmentSettings() {
        const environmentSettings = {};
        for (let [key, value] of Object.entries(process.env)) {
          key = key.toLowerCase();
          if (!key.startsWith(exports22.ENVIRONMENT_PREFIX))
            continue;
          key = (0, camelcase_1.default)(key.slice(exports22.ENVIRONMENT_PREFIX.length));
          environmentSettings[key] = value;
        }
        return environmentSettings;
      }
      function getRcFilename() {
        const rcKey = `${exports22.ENVIRONMENT_PREFIX}rc_filename`;
        for (const [key, value] of Object.entries(process.env))
          if (key.toLowerCase() === rcKey && typeof value === `string`)
            return value;
        return exports22.DEFAULT_RC_FILENAME;
      }
      async function tryRead(p) {
        try {
          return await fslib_12.xfs.readFilePromise(p);
        } catch {
          return Buffer.of();
        }
      }
      async function isSameBinaryContent(a, b) {
        return Buffer.compare(...await Promise.all([
          tryRead(a),
          tryRead(b)
        ])) === 0;
      }
      async function isSameBinaryInode(a, b) {
        const [aStat, bStat] = await Promise.all([
          fslib_12.xfs.statPromise(a),
          fslib_12.xfs.statPromise(b)
        ]);
        return aStat.dev === bStat.dev && aStat.ino === bStat.ino;
      }
      var isSameBinary = process.platform === `win32` ? isSameBinaryContent : isSameBinaryInode;
      async function checkYarnPath({ configuration, selfPath }) {
        const yarnPath = configuration.get(`yarnPath`);
        const ignorePath = configuration.get(`ignorePath`);
        if (ignorePath || yarnPath === null || yarnPath === selfPath)
          return null;
        if (await isSameBinary(yarnPath, selfPath))
          return null;
        return yarnPath;
      }
      var Configuration2 = class _Configuration {
        static create(startingCwd, projectCwdOrPlugins, maybePlugins) {
          const configuration = new _Configuration(startingCwd);
          if (typeof projectCwdOrPlugins !== `undefined` && !(projectCwdOrPlugins instanceof Map))
            configuration.projectCwd = projectCwdOrPlugins;
          configuration.importSettings(exports22.coreDefinitions);
          const plugins2 = typeof maybePlugins !== `undefined` ? maybePlugins : projectCwdOrPlugins instanceof Map ? projectCwdOrPlugins : /* @__PURE__ */ new Map;
          for (const [name, plugin] of plugins2)
            configuration.activatePlugin(name, plugin);
          return configuration;
        }
        static async find(startingCwd, pluginConfiguration, { strict = true, usePathCheck = null, useRc = true } = {}) {
          const environmentSettings = getEnvironmentSettings();
          delete environmentSettings.rcFilename;
          const configuration = new _Configuration(startingCwd);
          const rcFiles = await _Configuration.findRcFiles(startingCwd);
          const homeRcFile = await _Configuration.findFolderRcFile(folderUtils.getHomeFolder());
          if (homeRcFile) {
            const rcFile = rcFiles.find((rcFile2) => rcFile2.path === homeRcFile.path);
            if (!rcFile) {
              rcFiles.unshift(homeRcFile);
            }
          }
          const resolvedRcFile = configUtils.resolveRcFiles(rcFiles.map((rcFile) => [rcFile.path, rcFile.data]));
          const resolvedRcFileCwd = fslib_12.PortablePath.dot;
          const allCoreFieldKeys = new Set(Object.keys(exports22.coreDefinitions));
          const pickPrimaryCoreFields = ({ yarnPath, ignorePath, injectEnvironmentFiles }) => ({ yarnPath, ignorePath, injectEnvironmentFiles });
          const pickSecondaryCoreFields = ({ yarnPath, ignorePath, injectEnvironmentFiles, ...rest }) => {
            const secondaryCoreFields = {};
            for (const [key, value] of Object.entries(rest))
              if (allCoreFieldKeys.has(key))
                secondaryCoreFields[key] = value;
            return secondaryCoreFields;
          };
          const pickPluginFields = ({ yarnPath, ignorePath, ...rest }) => {
            const pluginFields = {};
            for (const [key, value] of Object.entries(rest))
              if (!allCoreFieldKeys.has(key))
                pluginFields[key] = value;
            return pluginFields;
          };
          configuration.importSettings(pickPrimaryCoreFields(exports22.coreDefinitions));
          configuration.useWithSource(`<environment>`, pickPrimaryCoreFields(environmentSettings), startingCwd, { strict: false });
          if (resolvedRcFile) {
            const [source, data] = resolvedRcFile;
            configuration.useWithSource(source, pickPrimaryCoreFields(data), resolvedRcFileCwd, { strict: false });
          }
          if (usePathCheck) {
            const yarnPath = await checkYarnPath({
              configuration,
              selfPath: usePathCheck
            });
            if (yarnPath !== null) {
              return configuration;
            } else {
              configuration.useWithSource(`<override>`, { ignorePath: true }, startingCwd, { strict: false, overwrite: true });
            }
          }
          const projectCwd = await _Configuration.findProjectCwd(startingCwd);
          configuration.startingCwd = startingCwd;
          configuration.projectCwd = projectCwd;
          const env = Object.assign(/* @__PURE__ */ Object.create(null), process.env);
          configuration.env = env;
          const environmentFiles = await Promise.all(configuration.get(`injectEnvironmentFiles`).map(async (p) => {
            const content = p.endsWith(`?`) ? await fslib_12.xfs.readFilePromise(p.slice(0, -1), `utf8`).catch(() => ``) : await fslib_12.xfs.readFilePromise(p, `utf8`);
            return (0, dotenv_1.parse)(content);
          }));
          for (const environmentEntries of environmentFiles)
            for (const [key, value] of Object.entries(environmentEntries))
              configuration.env[key] = miscUtils.replaceEnvVariables(value, { env });
          configuration.importSettings(pickSecondaryCoreFields(exports22.coreDefinitions));
          configuration.useWithSource(`<environment>`, pickSecondaryCoreFields(environmentSettings), startingCwd, { strict });
          if (resolvedRcFile) {
            const [source, data] = resolvedRcFile;
            configuration.useWithSource(source, pickSecondaryCoreFields(data), resolvedRcFileCwd, { strict });
          }
          const getDefault = (object) => {
            return `default` in object ? object.default : object;
          };
          const corePlugins = /* @__PURE__ */ new Map([
            [`@@core`, CorePlugin_1.CorePlugin]
          ]);
          if (pluginConfiguration !== null)
            for (const request of pluginConfiguration.plugins.keys())
              corePlugins.set(request, getDefault(pluginConfiguration.modules.get(request)));
          for (const [name, corePlugin] of corePlugins)
            configuration.activatePlugin(name, corePlugin);
          const thirdPartyPlugins = /* @__PURE__ */ new Map([]);
          if (pluginConfiguration !== null) {
            const requireEntries = /* @__PURE__ */ new Map;
            for (const [request, embedModule] of pluginConfiguration.modules)
              requireEntries.set(request, () => embedModule);
            const dynamicPlugins = /* @__PURE__ */ new Set;
            const importPlugin = async (pluginPath, source) => {
              const { factory, name } = miscUtils.dynamicRequire(pluginPath);
              if (!factory)
                return;
              if (dynamicPlugins.has(name))
                return;
              const pluginRequireEntries = new Map(requireEntries);
              const pluginRequire = (request) => {
                if ((0, module_1.isBuiltin)(request))
                  return miscUtils.dynamicRequire(request);
                if (pluginRequireEntries.has(request)) {
                  return pluginRequireEntries.get(request)();
                } else {
                  throw new clipanion_12.UsageError(`This plugin cannot access the package referenced via ${request} which is neither a builtin, nor an exposed entry`);
                }
              };
              const plugin = await miscUtils.prettifyAsyncErrors(async () => {
                return getDefault(await factory(pluginRequire));
              }, (message) => {
                return `${message} (when initializing ${name}, defined in ${source})`;
              });
              requireEntries.set(name, () => plugin);
              dynamicPlugins.add(name);
              thirdPartyPlugins.set(name, plugin);
            };
            if (environmentSettings.plugins) {
              for (const userProvidedPath of environmentSettings.plugins.split(`;`)) {
                const pluginPath = fslib_12.ppath.resolve(startingCwd, fslib_12.npath.toPortablePath(userProvidedPath));
                await importPlugin(pluginPath, `<environment>`);
              }
            }
            for (const { path: path2, cwd, data } of rcFiles) {
              if (!useRc)
                continue;
              if (!Array.isArray(data.plugins))
                continue;
              for (const userPluginEntry of data.plugins) {
                const userProvidedPath = typeof userPluginEntry !== `string` ? userPluginEntry.path : userPluginEntry;
                const userProvidedSpec = userPluginEntry?.spec ?? ``;
                const userProvidedChecksum = userPluginEntry?.checksum ?? ``;
                if (exports22.LEGACY_PLUGINS.has(userProvidedSpec))
                  continue;
                const pluginPath = fslib_12.ppath.resolve(cwd, fslib_12.npath.toPortablePath(userProvidedPath));
                if (!await fslib_12.xfs.existsPromise(pluginPath)) {
                  if (!userProvidedSpec) {
                    const prettyPluginName = formatUtils.pretty(configuration, fslib_12.ppath.basename(pluginPath, `.cjs`), formatUtils.Type.NAME);
                    const prettyGitIgnore = formatUtils.pretty(configuration, `.gitignore`, formatUtils.Type.NAME);
                    const prettyYarnrc = formatUtils.pretty(configuration, configuration.values.get(`rcFilename`), formatUtils.Type.NAME);
                    const prettyUrl = formatUtils.pretty(configuration, `https://yarnpkg.com/getting-started/qa#which-files-should-be-gitignored`, formatUtils.Type.URL);
                    throw new clipanion_12.UsageError(`Missing source for the ${prettyPluginName} plugin - please try to remove the plugin from ${prettyYarnrc} then reinstall it manually. This error usually occurs because ${prettyGitIgnore} is incorrect, check ${prettyUrl} to make sure your plugin folder isn't gitignored.`);
                  }
                  if (!userProvidedSpec.match(/^https?:/)) {
                    const prettyPluginName = formatUtils.pretty(configuration, fslib_12.ppath.basename(pluginPath, `.cjs`), formatUtils.Type.NAME);
                    const prettyYarnrc = formatUtils.pretty(configuration, configuration.values.get(`rcFilename`), formatUtils.Type.NAME);
                    throw new clipanion_12.UsageError(`Failed to recognize the source for the ${prettyPluginName} plugin - please try to delete the plugin from ${prettyYarnrc} then reinstall it manually.`);
                  }
                  const pluginBuffer = await httpUtils.get(userProvidedSpec, { configuration });
                  const pluginChecksum = hashUtils.makeHash(pluginBuffer);
                  if (userProvidedChecksum && userProvidedChecksum !== pluginChecksum) {
                    const prettyPluginName = formatUtils.pretty(configuration, fslib_12.ppath.basename(pluginPath, `.cjs`), formatUtils.Type.NAME);
                    const prettyYarnrc = formatUtils.pretty(configuration, configuration.values.get(`rcFilename`), formatUtils.Type.NAME);
                    const prettyPluginImportCommand = formatUtils.pretty(configuration, `yarn plugin import ${userProvidedSpec}`, formatUtils.Type.CODE);
                    throw new clipanion_12.UsageError(`Failed to fetch the ${prettyPluginName} plugin from its remote location: its checksum seems to have changed. If this is expected, please remove the plugin from ${prettyYarnrc} then run ${prettyPluginImportCommand} to reimport it.`);
                  }
                  await fslib_12.xfs.mkdirPromise(fslib_12.ppath.dirname(pluginPath), { recursive: true });
                  await fslib_12.xfs.writeFilePromise(pluginPath, pluginBuffer);
                }
                await importPlugin(pluginPath, path2);
              }
            }
          }
          for (const [name, thirdPartyPlugin] of thirdPartyPlugins)
            configuration.activatePlugin(name, thirdPartyPlugin);
          configuration.useWithSource(`<environment>`, pickPluginFields(environmentSettings), startingCwd, { strict });
          if (resolvedRcFile) {
            const [source, data] = resolvedRcFile;
            configuration.useWithSource(source, pickPluginFields(data), resolvedRcFileCwd, { strict });
          }
          if (configuration.get(`enableGlobalCache`)) {
            configuration.values.set(`cacheFolder`, `${configuration.get(`globalFolder`)}/cache`);
            configuration.sources.set(`cacheFolder`, `<internal>`);
          }
          return configuration;
        }
        static async findRcFiles(startingCwd) {
          const rcFilename = getRcFilename();
          const rcFiles = [];
          let nextCwd = startingCwd;
          let currentCwd = null;
          while (nextCwd !== currentCwd) {
            currentCwd = nextCwd;
            const rcPath = fslib_12.ppath.join(currentCwd, rcFilename);
            if (fslib_12.xfs.existsSync(rcPath)) {
              const content = await fslib_12.xfs.readFilePromise(rcPath, `utf8`);
              let data;
              try {
                data = (0, parsers_1.parseSyml)(content);
              } catch (error) {
                let tip = ``;
                if (content.match(/^\s+(?!-)[^:]+\s+\S+/m))
                  tip = ` (in particular, make sure you list the colons after each key name)`;
                throw new clipanion_12.UsageError(`Parse error when loading ${rcPath}; please check it's proper Yaml${tip}`);
              }
              rcFiles.unshift({ path: rcPath, cwd: currentCwd, data });
            }
            nextCwd = fslib_12.ppath.dirname(currentCwd);
          }
          return rcFiles;
        }
        static async findFolderRcFile(cwd) {
          const path2 = fslib_12.ppath.join(cwd, fslib_12.Filename.rc);
          let content;
          try {
            content = await fslib_12.xfs.readFilePromise(path2, `utf8`);
          } catch (err) {
            if (err.code === `ENOENT`)
              return null;
            throw err;
          }
          const data = (0, parsers_1.parseSyml)(content);
          return { path: path2, cwd, data };
        }
        static async findProjectCwd(startingCwd) {
          let projectCwd = null;
          let nextCwd = startingCwd;
          let currentCwd = null;
          while (nextCwd !== currentCwd) {
            currentCwd = nextCwd;
            if (fslib_12.xfs.existsSync(fslib_12.ppath.join(currentCwd, fslib_12.Filename.lockfile)))
              return currentCwd;
            if (fslib_12.xfs.existsSync(fslib_12.ppath.join(currentCwd, fslib_12.Filename.manifest)))
              projectCwd = currentCwd;
            nextCwd = fslib_12.ppath.dirname(currentCwd);
          }
          return projectCwd;
        }
        static async updateConfiguration(cwd, patch, opts = {}) {
          const rcFilename = getRcFilename();
          const configurationPath = fslib_12.ppath.join(cwd, rcFilename);
          const current = fslib_12.xfs.existsSync(configurationPath) ? (0, parsers_1.parseSyml)(await fslib_12.xfs.readFilePromise(configurationPath, `utf8`)) : {};
          let patched = false;
          let replacement;
          if (typeof patch === `function`) {
            try {
              replacement = patch(current);
            } catch {
              replacement = patch({});
            }
            if (replacement === current) {
              return false;
            }
          } else {
            replacement = current;
            for (const key of Object.keys(patch)) {
              const currentValue = current[key];
              const patchField = patch[key];
              let nextValue;
              if (typeof patchField === `function`) {
                try {
                  nextValue = patchField(currentValue);
                } catch {
                  nextValue = patchField(undefined);
                }
              } else {
                nextValue = patchField;
              }
              if (currentValue === nextValue)
                continue;
              if (nextValue === _Configuration.deleteProperty)
                delete replacement[key];
              else
                replacement[key] = nextValue;
              patched = true;
            }
            if (!patched) {
              return false;
            }
          }
          await fslib_12.xfs.changeFilePromise(configurationPath, (0, parsers_1.stringifySyml)(replacement), {
            automaticNewlines: true
          });
          return true;
        }
        static async addPlugin(cwd, pluginMetaList) {
          if (pluginMetaList.length === 0)
            return;
          await _Configuration.updateConfiguration(cwd, (current) => {
            const currentPluginMetaList = current.plugins ?? [];
            if (currentPluginMetaList.length === 0)
              return { ...current, plugins: pluginMetaList };
            const newPluginMetaList = [];
            let notYetProcessedList = [...pluginMetaList];
            for (const currentPluginMeta of currentPluginMetaList) {
              const currentPluginPath = typeof currentPluginMeta !== `string` ? currentPluginMeta.path : currentPluginMeta;
              const updatingPlugin = notYetProcessedList.find((pluginMeta) => {
                return pluginMeta.path === currentPluginPath;
              });
              if (updatingPlugin) {
                newPluginMetaList.push(updatingPlugin);
                notYetProcessedList = notYetProcessedList.filter((p) => p !== updatingPlugin);
              } else {
                newPluginMetaList.push(currentPluginMeta);
              }
            }
            newPluginMetaList.push(...notYetProcessedList);
            return { ...current, plugins: newPluginMetaList };
          });
        }
        static async updateHomeConfiguration(patch) {
          const homeFolder = folderUtils.getHomeFolder();
          return await _Configuration.updateConfiguration(homeFolder, patch);
        }
        constructor(startingCwd) {
          this.isCI = ci_info_1.isCI;
          this.projectCwd = null;
          this.plugins = /* @__PURE__ */ new Map;
          this.settings = /* @__PURE__ */ new Map;
          this.values = /* @__PURE__ */ new Map;
          this.sources = /* @__PURE__ */ new Map;
          this.invalid = /* @__PURE__ */ new Map;
          this.env = {};
          this.limits = /* @__PURE__ */ new Map;
          this.packageExtensions = null;
          this.startingCwd = startingCwd;
        }
        activatePlugin(name, plugin) {
          this.plugins.set(name, plugin);
          if (typeof plugin.configuration !== `undefined`) {
            this.importSettings(plugin.configuration);
          }
        }
        importSettings(definitions) {
          for (const [name, definition] of Object.entries(definitions)) {
            if (definition == null)
              continue;
            if (this.settings.has(name))
              throw new Error(`Cannot redefine settings "${name}"`);
            this.settings.set(name, definition);
            this.values.set(name, getDefaultValue(this, definition));
          }
        }
        useWithSource(source, data, folder, opts) {
          try {
            this.use(source, data, folder, opts);
          } catch (error) {
            error.message += ` (in ${formatUtils.pretty(this, source, formatUtils.Type.PATH)})`;
            throw error;
          }
        }
        use(source, data, folder, { strict = true, overwrite = false } = {}) {
          strict = strict && this.get(`enableStrictSettings`);
          for (const key of [`enableStrictSettings`, ...Object.keys(data)]) {
            const value = data[key];
            const fieldSource = configUtils.getSource(value);
            if (fieldSource)
              source = fieldSource;
            if (typeof value === `undefined`)
              continue;
            if (key === `plugins`)
              continue;
            if (source === `<environment>` && IGNORED_ENV_VARIABLES.has(key))
              continue;
            if (key === `rcFilename`)
              throw new clipanion_12.UsageError(`The rcFilename settings can only be set via ${`${exports22.ENVIRONMENT_PREFIX}RC_FILENAME`.toUpperCase()}, not via a rc file`);
            const definition = this.settings.get(key);
            if (!definition) {
              const homeFolder = folderUtils.getHomeFolder();
              const rcFileFolder = source[0] !== `<` ? fslib_12.ppath.dirname(source) : null;
              const isHomeRcFile = rcFileFolder !== null ? homeFolder === rcFileFolder : false;
              if (strict && !isHomeRcFile) {
                throw new clipanion_12.UsageError(`Unrecognized or legacy configuration settings found: ${key} - run "yarn config -v" to see the list of settings supported in Yarn`);
              } else {
                this.invalid.set(key, source);
                continue;
              }
            }
            if (this.sources.has(key) && !(overwrite || definition.type === SettingsType.MAP || definition.isArray && definition.concatenateValues))
              continue;
            let parsed;
            try {
              parsed = parseValue(this, key, value, definition, folder);
            } catch (error) {
              error.message += ` in ${formatUtils.pretty(this, source, formatUtils.Type.PATH)}`;
              throw error;
            }
            if (key === `enableStrictSettings` && source !== `<environment>`) {
              strict = parsed;
              continue;
            }
            if (definition.type === SettingsType.MAP) {
              const previousValue = this.values.get(key);
              this.values.set(key, new Map(overwrite ? [...previousValue, ...parsed] : [...parsed, ...previousValue]));
              this.sources.set(key, `${this.sources.get(key)}, ${source}`);
            } else if (definition.isArray && definition.concatenateValues) {
              const previousValue = this.values.get(key);
              this.values.set(key, overwrite ? [...previousValue, ...parsed] : [...parsed, ...previousValue]);
              this.sources.set(key, `${this.sources.get(key)}, ${source}`);
            } else {
              this.values.set(key, parsed);
              this.sources.set(key, source);
            }
          }
        }
        get(key) {
          if (!this.values.has(key))
            throw new Error(`Invalid configuration key "${key}"`);
          return this.values.get(key);
        }
        getSpecial(key, { hideSecrets = false, getNativePaths = false }) {
          const rawValue = this.get(key);
          const definition = this.settings.get(key);
          if (typeof definition === `undefined`)
            throw new clipanion_12.UsageError(`Couldn't find a configuration settings named "${key}"`);
          return transformConfiguration(rawValue, definition, {
            hideSecrets,
            getNativePaths
          });
        }
        getSubprocessStreams(logFile, { header, prefix, report }) {
          let stdout;
          let stderr;
          const logStream = fslib_12.xfs.createWriteStream(logFile);
          if (this.get(`enableInlineBuilds`)) {
            const stdoutLineReporter = report.createStreamReporter(`${prefix} ${formatUtils.pretty(this, `STDOUT`, `green`)}`);
            const stderrLineReporter = report.createStreamReporter(`${prefix} ${formatUtils.pretty(this, `STDERR`, `red`)}`);
            stdout = new stream_12.PassThrough;
            stdout.pipe(stdoutLineReporter);
            stdout.pipe(logStream);
            stderr = new stream_12.PassThrough;
            stderr.pipe(stderrLineReporter);
            stderr.pipe(logStream);
          } else {
            stdout = logStream;
            stderr = logStream;
            if (typeof header !== `undefined`) {
              stdout.write(`${header}
`);
            }
          }
          return { stdout, stderr };
        }
        makeResolver() {
          const pluginResolvers = [];
          for (const plugin of this.plugins.values())
            for (const resolver of plugin.resolvers || [])
              pluginResolvers.push(new resolver);
          return new MultiResolver_1.MultiResolver([
            new VirtualResolver_1.VirtualResolver,
            new WorkspaceResolver_1.WorkspaceResolver,
            ...pluginResolvers
          ]);
        }
        makeFetcher() {
          const pluginFetchers = [];
          for (const plugin of this.plugins.values())
            for (const fetcher of plugin.fetchers || [])
              pluginFetchers.push(new fetcher);
          return new MultiFetcher_1.MultiFetcher([
            new VirtualFetcher_1.VirtualFetcher,
            new WorkspaceFetcher_1.WorkspaceFetcher,
            ...pluginFetchers
          ]);
        }
        getLinkers() {
          const linkers = [];
          for (const plugin of this.plugins.values())
            for (const linker of plugin.linkers || [])
              linkers.push(new linker);
          return linkers;
        }
        getSupportedArchitectures() {
          const architecture = nodeUtils.getArchitecture();
          const supportedArchitectures = this.get(`supportedArchitectures`);
          let os = supportedArchitectures.get(`os`);
          if (os !== null)
            os = os.map((value) => value === `current` ? architecture.os : value);
          let cpu = supportedArchitectures.get(`cpu`);
          if (cpu !== null)
            cpu = cpu.map((value) => value === `current` ? architecture.cpu : value);
          let libc = supportedArchitectures.get(`libc`);
          if (libc !== null)
            libc = miscUtils.mapAndFilter(libc, (value) => value === `current` ? architecture.libc ?? miscUtils.mapAndFilter.skip : value);
          return { os, cpu, libc };
        }
        isInteractive({ interactive, stdout }) {
          if (!stdout.isTTY)
            return false;
          return interactive ?? this.get(`preferInteractive`);
        }
        async getPackageExtensions() {
          if (this.packageExtensions !== null)
            return this.packageExtensions;
          this.packageExtensions = /* @__PURE__ */ new Map;
          const packageExtensions = this.packageExtensions;
          const registerPackageExtension = (descriptor, extensionData, { userProvided = false } = {}) => {
            if (!semverUtils.validRange(descriptor.range))
              throw new Error(`Only semver ranges are allowed as keys for the packageExtensions setting`);
            const extension = new Manifest_1.Manifest;
            extension.load(extensionData, { yamlCompatibilityMode: true });
            const extensionsPerIdent = miscUtils.getArrayWithDefault(packageExtensions, descriptor.identHash);
            const extensionsPerRange = [];
            extensionsPerIdent.push([descriptor.range, extensionsPerRange]);
            const baseExtension = {
              status: types_1.PackageExtensionStatus.Inactive,
              userProvided,
              parentDescriptor: descriptor
            };
            for (const dependency of extension.dependencies.values())
              extensionsPerRange.push({ ...baseExtension, type: types_1.PackageExtensionType.Dependency, descriptor: dependency });
            for (const peerDependency of extension.peerDependencies.values())
              extensionsPerRange.push({ ...baseExtension, type: types_1.PackageExtensionType.PeerDependency, descriptor: peerDependency });
            for (const [selector, meta] of extension.peerDependenciesMeta) {
              for (const [key, value] of Object.entries(meta)) {
                extensionsPerRange.push({ ...baseExtension, type: types_1.PackageExtensionType.PeerDependencyMeta, selector, key, value });
              }
            }
          };
          await this.triggerHook((hooks) => {
            return hooks.registerPackageExtensions;
          }, this, registerPackageExtension);
          for (const [descriptorString, extensionData] of this.get(`packageExtensions`))
            registerPackageExtension(structUtils.parseDescriptor(descriptorString, true), miscUtils.convertMapsToIndexableObjects(extensionData), { userProvided: true });
          return packageExtensions;
        }
        normalizeLocator(locator) {
          if (semverUtils.validRange(locator.reference))
            return structUtils.makeLocator(locator, `${this.get(`defaultProtocol`)}${locator.reference}`);
          if (exports22.TAG_REGEXP.test(locator.reference))
            return structUtils.makeLocator(locator, `${this.get(`defaultProtocol`)}${locator.reference}`);
          return locator;
        }
        normalizeDependency(dependency) {
          if (semverUtils.validRange(dependency.range))
            return structUtils.makeDescriptor(dependency, `${this.get(`defaultProtocol`)}${dependency.range}`);
          if (exports22.TAG_REGEXP.test(dependency.range))
            return structUtils.makeDescriptor(dependency, `${this.get(`defaultProtocol`)}${dependency.range}`);
          return dependency;
        }
        normalizeDependencyMap(dependencyMap) {
          return new Map([...dependencyMap].map(([key, dependency]) => {
            return [key, this.normalizeDependency(dependency)];
          }));
        }
        normalizePackage(original, { packageExtensions }) {
          const pkg = structUtils.copyPackage(original);
          const extensionsPerIdent = packageExtensions.get(original.identHash);
          if (typeof extensionsPerIdent !== `undefined`) {
            const version = original.version;
            if (version !== null) {
              for (const [range, extensionsPerRange] of extensionsPerIdent) {
                if (!semverUtils.satisfiesWithPrereleases(version, range))
                  continue;
                for (const extension of extensionsPerRange) {
                  if (extension.status === types_1.PackageExtensionStatus.Inactive)
                    extension.status = types_1.PackageExtensionStatus.Redundant;
                  switch (extension.type) {
                    case types_1.PackageExtensionType.Dependency:
                      {
                        const currentDependency = pkg.dependencies.get(extension.descriptor.identHash);
                        if (typeof currentDependency === `undefined`) {
                          extension.status = types_1.PackageExtensionStatus.Active;
                          pkg.dependencies.set(extension.descriptor.identHash, this.normalizeDependency(extension.descriptor));
                        }
                      }
                      break;
                    case types_1.PackageExtensionType.PeerDependency:
                      {
                        const currentPeerDependency = pkg.peerDependencies.get(extension.descriptor.identHash);
                        if (typeof currentPeerDependency === `undefined`) {
                          extension.status = types_1.PackageExtensionStatus.Active;
                          pkg.peerDependencies.set(extension.descriptor.identHash, extension.descriptor);
                        }
                      }
                      break;
                    case types_1.PackageExtensionType.PeerDependencyMeta:
                      {
                        const currentPeerDependencyMeta = pkg.peerDependenciesMeta.get(extension.selector);
                        if (typeof currentPeerDependencyMeta === `undefined` || !Object.hasOwn(currentPeerDependencyMeta, extension.key) || currentPeerDependencyMeta[extension.key] !== extension.value) {
                          extension.status = types_1.PackageExtensionStatus.Active;
                          miscUtils.getFactoryWithDefault(pkg.peerDependenciesMeta, extension.selector, () => ({}))[extension.key] = extension.value;
                        }
                      }
                      break;
                    default: {
                      miscUtils.assertNever(extension);
                    }
                  }
                }
              }
            }
          }
          const getTypesName = (descriptor) => {
            return descriptor.scope ? `${descriptor.scope}__${descriptor.name}` : `${descriptor.name}`;
          };
          for (const identString of pkg.peerDependenciesMeta.keys()) {
            const ident = structUtils.parseIdent(identString);
            if (!pkg.peerDependencies.has(ident.identHash)) {
              pkg.peerDependencies.set(ident.identHash, structUtils.makeDescriptor(ident, `*`));
            }
          }
          for (const descriptor of pkg.peerDependencies.values()) {
            if (descriptor.scope === `types`)
              continue;
            const typesName = getTypesName(descriptor);
            const typesIdent = structUtils.makeIdent(`types`, typesName);
            const stringifiedTypesIdent = structUtils.stringifyIdent(typesIdent);
            if (pkg.peerDependencies.has(typesIdent.identHash) || pkg.peerDependenciesMeta.has(stringifiedTypesIdent))
              continue;
            pkg.peerDependencies.set(typesIdent.identHash, structUtils.makeDescriptor(typesIdent, `*`));
            pkg.peerDependenciesMeta.set(stringifiedTypesIdent, {
              optional: true
            });
          }
          pkg.dependencies = new Map(miscUtils.sortMap(pkg.dependencies, ([, descriptor]) => structUtils.stringifyDescriptor(descriptor)));
          pkg.peerDependencies = new Map(miscUtils.sortMap(pkg.peerDependencies, ([, descriptor]) => structUtils.stringifyDescriptor(descriptor)));
          return pkg;
        }
        getLimit(key) {
          return miscUtils.getFactoryWithDefault(this.limits, key, () => {
            return (0, p_limit_12.default)(this.get(key));
          });
        }
        async triggerHook(get, ...args) {
          for (const plugin of this.plugins.values()) {
            const hooks = plugin.hooks;
            if (!hooks)
              continue;
            const hook = get(hooks);
            if (!hook)
              continue;
            await hook(...args);
          }
        }
        async triggerMultipleHooks(get, argsList) {
          for (const args of argsList) {
            await this.triggerHook(get, ...args);
          }
        }
        async reduceHook(get, initialValue, ...args) {
          let value = initialValue;
          for (const plugin of this.plugins.values()) {
            const hooks = plugin.hooks;
            if (!hooks)
              continue;
            const hook = get(hooks);
            if (!hook)
              continue;
            value = await hook(value, ...args);
          }
          return value;
        }
        async firstHook(get, ...args) {
          for (const plugin of this.plugins.values()) {
            const hooks = plugin.hooks;
            if (!hooks)
              continue;
            const hook = get(hooks);
            if (!hook)
              continue;
            const ret = await hook(...args);
            if (typeof ret !== `undefined`) {
              return ret;
            }
          }
          return null;
        }
      };
      exports22.Configuration = Configuration2;
      Configuration2.deleteProperty = Symbol();
      Configuration2.telemetry = null;
    }
  });
  var require_execUtils = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/execUtils.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.ExecError = exports22.PipeError = exports22.EndStrategy = undefined;
      exports22.pipevp = pipevp;
      exports22.execvp = execvp;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var fslib_12 = require_lib();
      var cross_spawn_1 = tslib_12.__importDefault(require_cross_spawn());
      var Configuration_1 = require_Configuration();
      var MessageName_1 = require_MessageName();
      var Report_1 = require_Report();
      var formatUtils = tslib_12.__importStar(require_formatUtils());
      var EndStrategy;
      (function(EndStrategy2) {
        EndStrategy2[EndStrategy2["Never"] = 0] = "Never";
        EndStrategy2[EndStrategy2["ErrorCode"] = 1] = "ErrorCode";
        EndStrategy2[EndStrategy2["Always"] = 2] = "Always";
      })(EndStrategy || (exports22.EndStrategy = EndStrategy = {}));
      var PipeError = class extends Report_1.ReportError {
        constructor({ fileName, code, signal }) {
          const configuration = Configuration_1.Configuration.create(fslib_12.ppath.cwd());
          const prettyFileName = formatUtils.pretty(configuration, fileName, formatUtils.Type.PATH);
          super(MessageName_1.MessageName.EXCEPTION, `Child ${prettyFileName} reported an error`, (report) => {
            reportExitStatus(code, signal, { configuration, report });
          });
          this.code = getExitCode(code, signal);
        }
      };
      exports22.PipeError = PipeError;
      var ExecError = class extends PipeError {
        constructor({ fileName, code, signal, stdout, stderr }) {
          super({ fileName, code, signal });
          this.stdout = stdout;
          this.stderr = stderr;
        }
      };
      exports22.ExecError = ExecError;
      function hasFd(stream) {
        return stream !== null && typeof stream.fd === `number`;
      }
      var activeChildren = /* @__PURE__ */ new Set;
      function sigintHandler() {
      }
      function sigtermHandler() {
        for (const child of activeChildren) {
          child.kill();
        }
      }
      async function pipevp(fileName, args, { cwd, env = process.env, strict = false, stdin = null, stdout, stderr, end = EndStrategy.Always }) {
        const stdio = [`pipe`, `pipe`, `pipe`];
        if (stdin === null)
          stdio[0] = `ignore`;
        else if (hasFd(stdin))
          stdio[0] = stdin;
        if (hasFd(stdout))
          stdio[1] = stdout;
        if (hasFd(stderr))
          stdio[2] = stderr;
        const child = (0, cross_spawn_1.default)(fileName, args, {
          cwd: fslib_12.npath.fromPortablePath(cwd),
          env: {
            ...env,
            PWD: fslib_12.npath.fromPortablePath(cwd)
          },
          stdio
        });
        activeChildren.add(child);
        if (activeChildren.size === 1) {
          process.on(`SIGINT`, sigintHandler);
          process.on(`SIGTERM`, sigtermHandler);
        }
        if (!hasFd(stdin) && stdin !== null)
          stdin.pipe(child.stdin);
        if (!hasFd(stdout))
          child.stdout.pipe(stdout, { end: false });
        if (!hasFd(stderr))
          child.stderr.pipe(stderr, { end: false });
        const closeStreams = () => {
          for (const stream of /* @__PURE__ */ new Set([stdout, stderr])) {
            if (!hasFd(stream)) {
              stream.end();
            }
          }
        };
        return new Promise((resolve, reject) => {
          child.on(`error`, (error) => {
            activeChildren.delete(child);
            if (activeChildren.size === 0) {
              process.off(`SIGINT`, sigintHandler);
              process.off(`SIGTERM`, sigtermHandler);
            }
            if (end === EndStrategy.Always || end === EndStrategy.ErrorCode)
              closeStreams();
            reject(error);
          });
          child.on(`close`, (code, signal) => {
            activeChildren.delete(child);
            if (activeChildren.size === 0) {
              process.off(`SIGINT`, sigintHandler);
              process.off(`SIGTERM`, sigtermHandler);
            }
            if (end === EndStrategy.Always || end === EndStrategy.ErrorCode && code !== 0)
              closeStreams();
            if (code === 0 || !strict) {
              resolve({ code: getExitCode(code, signal) });
            } else {
              reject(new PipeError({ fileName, code, signal }));
            }
          });
        });
      }
      async function execvp(fileName, args, { cwd, env = process.env, encoding = `utf8`, strict = false }) {
        const stdio = [`ignore`, `pipe`, `pipe`];
        const stdoutChunks = [];
        const stderrChunks = [];
        const nativeCwd = fslib_12.npath.fromPortablePath(cwd);
        if (typeof env.PWD !== `undefined`)
          env = { ...env, PWD: nativeCwd };
        const subprocess = (0, cross_spawn_1.default)(fileName, args, {
          cwd: nativeCwd,
          env,
          stdio
        });
        subprocess.stdout.on(`data`, (chunk) => {
          stdoutChunks.push(chunk);
        });
        subprocess.stderr.on(`data`, (chunk) => {
          stderrChunks.push(chunk);
        });
        return await new Promise((resolve, reject) => {
          subprocess.on(`error`, (err) => {
            const configuration = Configuration_1.Configuration.create(cwd);
            const prettyFileName = formatUtils.pretty(configuration, fileName, formatUtils.Type.PATH);
            reject(new Report_1.ReportError(MessageName_1.MessageName.EXCEPTION, `Process ${prettyFileName} failed to spawn`, (report) => {
              report.reportError(MessageName_1.MessageName.EXCEPTION, `  ${formatUtils.prettyField(configuration, {
                label: `Thrown Error`,
                value: formatUtils.tuple(formatUtils.Type.NO_HINT, err.message)
              })}`);
            }));
          });
          subprocess.on(`close`, (code, signal) => {
            const stdout = encoding === `buffer` ? Buffer.concat(stdoutChunks) : Buffer.concat(stdoutChunks).toString(encoding);
            const stderr = encoding === `buffer` ? Buffer.concat(stderrChunks) : Buffer.concat(stderrChunks).toString(encoding);
            if (code === 0 || !strict) {
              resolve({
                code: getExitCode(code, signal),
                stdout,
                stderr
              });
            } else {
              reject(new ExecError({ fileName, code, signal, stdout, stderr }));
            }
          });
        });
      }
      var signalToCodeMap = /* @__PURE__ */ new Map([
        [`SIGINT`, 2],
        [`SIGQUIT`, 3],
        [`SIGKILL`, 9],
        [`SIGTERM`, 15]
      ]);
      function getExitCode(code, signal) {
        const signalCode = signalToCodeMap.get(signal);
        if (typeof signalCode !== `undefined`) {
          return 128 + signalCode;
        } else {
          return code ?? 1;
        }
      }
      function reportExitStatus(code, signal, { configuration, report }) {
        report.reportError(MessageName_1.MessageName.EXCEPTION, `  ${formatUtils.prettyField(configuration, code !== null ? {
          label: `Exit Code`,
          value: formatUtils.tuple(formatUtils.Type.NUMBER, code)
        } : {
          label: `Exit Signal`,
          value: formatUtils.tuple(formatUtils.Type.CODE, signal)
        })}`);
      }
    }
  });
  var require_instance = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+libzip@3.1.0_@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/libzip/lib/instance.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.cachedInstance = undefined;
      exports22.setFactory = setFactory;
      exports22.getInstance = getInstance;
      exports22.tryInstance = tryInstance;
      var registeredFactory = () => {
        throw new Error(`Assertion failed: No libzip instance is available, and no factory was configured`);
      };
      function setFactory(factory) {
        registeredFactory = factory;
      }
      function getInstance() {
        if (typeof exports22.cachedInstance === `undefined`)
          exports22.cachedInstance = registeredFactory();
        return exports22.cachedInstance;
      }
      function tryInstance() {
        return exports22.cachedInstance;
      }
    }
  });
  var require_libzipSync = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+libzip@3.1.0_@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/libzip/lib/libzipSync.js"(exports22, module22) {
      var frozenFs = Object.assign({}, __require("fs"));
      var createModule = function() {
        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : undefined;
        if (typeof __filename !== "undefined")
          _scriptDir = _scriptDir || __filename;
        return function(createModule2) {
          createModule2 = createModule2 || {};
          var Module = typeof createModule2 !== "undefined" ? createModule2 : {};
          var readyPromiseResolve, readyPromiseReject;
          Module["ready"] = new Promise(function(resolve, reject) {
            readyPromiseResolve = resolve;
            readyPromiseReject = reject;
          });
          var moduleOverrides = {};
          var key;
          for (key in Module) {
            if (Module.hasOwnProperty(key)) {
              moduleOverrides[key] = Module[key];
            }
          }
          var arguments_ = [];
          var thisProgram = "./this.program";
          var quit_ = function(status, toThrow) {
            throw toThrow;
          };
          var ENVIRONMENT_IS_WORKER = false;
          var ENVIRONMENT_IS_NODE = true;
          var scriptDirectory = "";
          function locateFile(path2) {
            if (Module["locateFile"]) {
              return Module["locateFile"](path2, scriptDirectory);
            }
            return scriptDirectory + path2;
          }
          var read_, readBinary;
          var nodeFS;
          var nodePath;
          if (ENVIRONMENT_IS_NODE) {
            if (ENVIRONMENT_IS_WORKER) {
              scriptDirectory = __require("path").dirname(scriptDirectory) + "/";
            } else {
              scriptDirectory = __dirname + "/";
            }
            read_ = function shell_read(filename, binary) {
              var ret = tryParseAsDataURI(filename);
              if (ret) {
                return binary ? ret : ret.toString();
              }
              if (!nodeFS)
                nodeFS = frozenFs;
              if (!nodePath)
                nodePath = __require("path");
              filename = nodePath["normalize"](filename);
              return nodeFS["readFileSync"](filename, binary ? null : "utf8");
            };
            readBinary = function readBinary2(filename) {
              var ret = read_(filename, true);
              if (!ret.buffer) {
                ret = new Uint8Array(ret);
              }
              assert(ret.buffer);
              return ret;
            };
            if (process["argv"].length > 1) {
              thisProgram = process["argv"][1].replace(/\\/g, "/");
            }
            arguments_ = process["argv"].slice(2);
            quit_ = function(status) {
              process["exit"](status);
            };
            Module["inspect"] = function() {
              return "[Emscripten Module object]";
            };
          } else {
          }
          var out = Module["print"] || console.log.bind(console);
          var err = Module["printErr"] || console.warn.bind(console);
          for (key in moduleOverrides) {
            if (moduleOverrides.hasOwnProperty(key)) {
              Module[key] = moduleOverrides[key];
            }
          }
          moduleOverrides = null;
          if (Module["arguments"])
            arguments_ = Module["arguments"];
          if (Module["thisProgram"])
            thisProgram = Module["thisProgram"];
          if (Module["quit"])
            quit_ = Module["quit"];
          var tempRet0 = 0;
          var setTempRet0 = function(value) {
            tempRet0 = value;
          };
          var wasmBinary;
          if (Module["wasmBinary"])
            wasmBinary = Module["wasmBinary"];
          var noExitRuntime = Module["noExitRuntime"] || true;
          if (typeof WebAssembly !== "object") {
            abort("no native wasm support detected");
          }
          function getValue(ptr, type, noSafe) {
            type = type || "i8";
            if (type.charAt(type.length - 1) === "*")
              type = "i32";
            switch (type) {
              case "i1":
                return HEAP8[ptr >> 0];
              case "i8":
                return HEAP8[ptr >> 0];
              case "i16":
                return LE_HEAP_LOAD_I16((ptr >> 1) * 2);
              case "i32":
                return LE_HEAP_LOAD_I32((ptr >> 2) * 4);
              case "i64":
                return LE_HEAP_LOAD_I32((ptr >> 2) * 4);
              case "float":
                return LE_HEAP_LOAD_F32((ptr >> 2) * 4);
              case "double":
                return LE_HEAP_LOAD_F64((ptr >> 3) * 8);
              default:
                abort("invalid type for getValue: " + type);
            }
            return null;
          }
          var wasmMemory;
          var ABORT = false;
          var EXITSTATUS;
          function assert(condition, text) {
            if (!condition) {
              abort("Assertion failed: " + text);
            }
          }
          function getCFunc(ident) {
            var func = Module["_" + ident];
            assert(func, "Cannot call unknown function " + ident + ", make sure it is exported");
            return func;
          }
          function ccall(ident, returnType, argTypes, args, opts) {
            var toC = {
              string: function(str) {
                var ret2 = 0;
                if (str !== null && str !== undefined && str !== 0) {
                  var len = (str.length << 2) + 1;
                  ret2 = stackAlloc(len);
                  stringToUTF8(str, ret2, len);
                }
                return ret2;
              },
              array: function(arr) {
                var ret2 = stackAlloc(arr.length);
                writeArrayToMemory(arr, ret2);
                return ret2;
              }
            };
            function convertReturnValue(ret2) {
              if (returnType === "string")
                return UTF8ToString(ret2);
              if (returnType === "boolean")
                return Boolean(ret2);
              return ret2;
            }
            var func = getCFunc(ident);
            var cArgs = [];
            var stack = 0;
            if (args) {
              for (var i = 0;i < args.length; i++) {
                var converter = toC[argTypes[i]];
                if (converter) {
                  if (stack === 0)
                    stack = stackSave();
                  cArgs[i] = converter(args[i]);
                } else {
                  cArgs[i] = args[i];
                }
              }
            }
            var ret = func.apply(null, cArgs);
            ret = convertReturnValue(ret);
            if (stack !== 0)
              stackRestore(stack);
            return ret;
          }
          function cwrap(ident, returnType, argTypes, opts) {
            argTypes = argTypes || [];
            var numericArgs = argTypes.every(function(type) {
              return type === "number";
            });
            var numericRet = returnType !== "string";
            if (numericRet && numericArgs && !opts) {
              return getCFunc(ident);
            }
            return function() {
              return ccall(ident, returnType, argTypes, arguments, opts);
            };
          }
          var UTF8Decoder = new TextDecoder("utf8");
          function UTF8ToString(ptr, maxBytesToRead) {
            if (!ptr)
              return "";
            var maxPtr = ptr + maxBytesToRead;
            for (var end = ptr;!(end >= maxPtr) && HEAPU8[end]; )
              ++end;
            return UTF8Decoder.decode(HEAPU8.subarray(ptr, end));
          }
          function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
            if (!(maxBytesToWrite > 0))
              return 0;
            var startIdx = outIdx;
            var endIdx = outIdx + maxBytesToWrite - 1;
            for (var i = 0;i < str.length; ++i) {
              var u = str.charCodeAt(i);
              if (u >= 55296 && u <= 57343) {
                var u1 = str.charCodeAt(++i);
                u = 65536 + ((u & 1023) << 10) | u1 & 1023;
              }
              if (u <= 127) {
                if (outIdx >= endIdx)
                  break;
                heap[outIdx++] = u;
              } else if (u <= 2047) {
                if (outIdx + 1 >= endIdx)
                  break;
                heap[outIdx++] = 192 | u >> 6;
                heap[outIdx++] = 128 | u & 63;
              } else if (u <= 65535) {
                if (outIdx + 2 >= endIdx)
                  break;
                heap[outIdx++] = 224 | u >> 12;
                heap[outIdx++] = 128 | u >> 6 & 63;
                heap[outIdx++] = 128 | u & 63;
              } else {
                if (outIdx + 3 >= endIdx)
                  break;
                heap[outIdx++] = 240 | u >> 18;
                heap[outIdx++] = 128 | u >> 12 & 63;
                heap[outIdx++] = 128 | u >> 6 & 63;
                heap[outIdx++] = 128 | u & 63;
              }
            }
            heap[outIdx] = 0;
            return outIdx - startIdx;
          }
          function stringToUTF8(str, outPtr, maxBytesToWrite) {
            return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
          }
          function lengthBytesUTF8(str) {
            var len = 0;
            for (var i = 0;i < str.length; ++i) {
              var u = str.charCodeAt(i);
              if (u >= 55296 && u <= 57343)
                u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
              if (u <= 127)
                ++len;
              else if (u <= 2047)
                len += 2;
              else if (u <= 65535)
                len += 3;
              else
                len += 4;
            }
            return len;
          }
          function allocateUTF8(str) {
            var size = lengthBytesUTF8(str) + 1;
            var ret = _malloc(size);
            if (ret)
              stringToUTF8Array(str, HEAP8, ret, size);
            return ret;
          }
          function writeArrayToMemory(array, buffer2) {
            HEAP8.set(array, buffer2);
          }
          function alignUp(x, multiple) {
            if (x % multiple > 0) {
              x += multiple - x % multiple;
            }
            return x;
          }
          var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
          var HEAP_DATA_VIEW;
          function updateGlobalBufferAndViews(buf) {
            buffer = buf;
            Module["HEAP_DATA_VIEW"] = HEAP_DATA_VIEW = new DataView(buf);
            Module["HEAP8"] = HEAP8 = new Int8Array(buf);
            Module["HEAP16"] = HEAP16 = new Int16Array(buf);
            Module["HEAP32"] = HEAP32 = new Int32Array(buf);
            Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
            Module["HEAPU16"] = HEAPU16 = new Uint16Array(buf);
            Module["HEAPU32"] = HEAPU32 = new Uint32Array(buf);
            Module["HEAPF32"] = HEAPF32 = new Float32Array(buf);
            Module["HEAPF64"] = HEAPF64 = new Float64Array(buf);
          }
          var INITIAL_MEMORY = Module["INITIAL_MEMORY"] || 16777216;
          var wasmTable;
          var __ATPRERUN__ = [];
          var __ATINIT__ = [];
          var __ATPOSTRUN__ = [];
          var runtimeInitialized = false;
          function preRun() {
            if (Module["preRun"]) {
              if (typeof Module["preRun"] == "function")
                Module["preRun"] = [Module["preRun"]];
              while (Module["preRun"].length) {
                addOnPreRun(Module["preRun"].shift());
              }
            }
            callRuntimeCallbacks(__ATPRERUN__);
          }
          function initRuntime() {
            runtimeInitialized = true;
            callRuntimeCallbacks(__ATINIT__);
          }
          function postRun() {
            if (Module["postRun"]) {
              if (typeof Module["postRun"] == "function")
                Module["postRun"] = [Module["postRun"]];
              while (Module["postRun"].length) {
                addOnPostRun(Module["postRun"].shift());
              }
            }
            callRuntimeCallbacks(__ATPOSTRUN__);
          }
          function addOnPreRun(cb) {
            __ATPRERUN__.unshift(cb);
          }
          function addOnInit(cb) {
            __ATINIT__.unshift(cb);
          }
          function addOnPostRun(cb) {
            __ATPOSTRUN__.unshift(cb);
          }
          var runDependencies = 0;
          var runDependencyWatcher = null;
          var dependenciesFulfilled = null;
          function addRunDependency(id) {
            runDependencies++;
            if (Module["monitorRunDependencies"]) {
              Module["monitorRunDependencies"](runDependencies);
            }
          }
          function removeRunDependency(id) {
            runDependencies--;
            if (Module["monitorRunDependencies"]) {
              Module["monitorRunDependencies"](runDependencies);
            }
            if (runDependencies == 0) {
              if (runDependencyWatcher !== null) {
                clearInterval(runDependencyWatcher);
                runDependencyWatcher = null;
              }
              if (dependenciesFulfilled) {
                var callback = dependenciesFulfilled;
                dependenciesFulfilled = null;
                callback();
              }
            }
          }
          Module["preloadedImages"] = {};
          Module["preloadedAudios"] = {};
          function abort(what) {
            if (Module["onAbort"]) {
              Module["onAbort"](what);
            }
            what += "";
            err(what);
            ABORT = true;
            EXITSTATUS = 1;
            what = "abort(" + what + "). Build with -s ASSERTIONS=1 for more info.";
            var e = new WebAssembly.RuntimeError(what);
            readyPromiseReject(e);
            throw e;
          }
          var dataURIPrefix = "data:application/octet-stream;base64,";
          function isDataURI(filename) {
            return filename.startsWith(dataURIPrefix);
          }
          var wasmBinaryFile = "data:application/octet-stream;base64,";
          if (!isDataURI(wasmBinaryFile)) {
            wasmBinaryFile = locateFile(wasmBinaryFile);
          }
          function getBinary(file) {
            try {
              if (file == wasmBinaryFile && wasmBinary) {
                return new Uint8Array(wasmBinary);
              }
              var binary = tryParseAsDataURI(file);
              if (binary) {
                return binary;
              }
              if (readBinary) {
                return readBinary(file);
              } else {
                throw "sync fetching of the wasm failed: you can preload it to Module['wasmBinary'] manually, or emcc.py will do that for you when generating HTML (but not JS)";
              }
            } catch (err2) {
              abort(err2);
            }
          }
          function instantiateSync(file, info) {
            var instance;
            var module3;
            var binary;
            try {
              binary = getBinary(file);
              module3 = new WebAssembly.Module(binary);
              instance = new WebAssembly.Instance(module3, info);
            } catch (e) {
              var str = e.toString();
              err("failed to compile wasm module: " + str);
              if (str.includes("imported Memory") || str.includes("memory import")) {
                err("Memory size incompatibility issues may be due to changing INITIAL_MEMORY at runtime to something too large. Use ALLOW_MEMORY_GROWTH to allow any size memory (and also make sure not to set INITIAL_MEMORY at runtime to something smaller than it was at compile time).");
              }
              throw e;
            }
            return [instance, module3];
          }
          function createWasm() {
            var info = { a: asmLibraryArg };
            function receiveInstance(instance, module3) {
              var exports4 = instance.exports;
              Module["asm"] = exports4;
              wasmMemory = Module["asm"]["g"];
              updateGlobalBufferAndViews(wasmMemory.buffer);
              wasmTable = Module["asm"]["W"];
              addOnInit(Module["asm"]["h"]);
              removeRunDependency("wasm-instantiate");
            }
            addRunDependency("wasm-instantiate");
            if (Module["instantiateWasm"]) {
              try {
                var exports3 = Module["instantiateWasm"](info, receiveInstance);
                return exports3;
              } catch (e) {
                err("Module.instantiateWasm callback failed with error: " + e);
                return false;
              }
            }
            var result2 = instantiateSync(wasmBinaryFile, info);
            receiveInstance(result2[0]);
            return Module["asm"];
          }
          function LE_HEAP_LOAD_F32(byteOffset) {
            return HEAP_DATA_VIEW.getFloat32(byteOffset, true);
          }
          function LE_HEAP_LOAD_F64(byteOffset) {
            return HEAP_DATA_VIEW.getFloat64(byteOffset, true);
          }
          function LE_HEAP_LOAD_I16(byteOffset) {
            return HEAP_DATA_VIEW.getInt16(byteOffset, true);
          }
          function LE_HEAP_LOAD_I32(byteOffset) {
            return HEAP_DATA_VIEW.getInt32(byteOffset, true);
          }
          function LE_HEAP_STORE_I32(byteOffset, value) {
            HEAP_DATA_VIEW.setInt32(byteOffset, value, true);
          }
          function callRuntimeCallbacks(callbacks) {
            while (callbacks.length > 0) {
              var callback = callbacks.shift();
              if (typeof callback == "function") {
                callback(Module);
                continue;
              }
              var func = callback.func;
              if (typeof func === "number") {
                if (callback.arg === undefined) {
                  wasmTable.get(func)();
                } else {
                  wasmTable.get(func)(callback.arg);
                }
              } else {
                func(callback.arg === undefined ? null : callback.arg);
              }
            }
          }
          function _gmtime_r(time, tmPtr) {
            var date = new Date(LE_HEAP_LOAD_I32((time >> 2) * 4) * 1000);
            LE_HEAP_STORE_I32((tmPtr >> 2) * 4, date.getUTCSeconds());
            LE_HEAP_STORE_I32((tmPtr + 4 >> 2) * 4, date.getUTCMinutes());
            LE_HEAP_STORE_I32((tmPtr + 8 >> 2) * 4, date.getUTCHours());
            LE_HEAP_STORE_I32((tmPtr + 12 >> 2) * 4, date.getUTCDate());
            LE_HEAP_STORE_I32((tmPtr + 16 >> 2) * 4, date.getUTCMonth());
            LE_HEAP_STORE_I32((tmPtr + 20 >> 2) * 4, date.getUTCFullYear() - 1900);
            LE_HEAP_STORE_I32((tmPtr + 24 >> 2) * 4, date.getUTCDay());
            LE_HEAP_STORE_I32((tmPtr + 36 >> 2) * 4, 0);
            LE_HEAP_STORE_I32((tmPtr + 32 >> 2) * 4, 0);
            var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
            var yday = (date.getTime() - start) / (1000 * 60 * 60 * 24) | 0;
            LE_HEAP_STORE_I32((tmPtr + 28 >> 2) * 4, yday);
            if (!_gmtime_r.GMTString)
              _gmtime_r.GMTString = allocateUTF8("GMT");
            LE_HEAP_STORE_I32((tmPtr + 40 >> 2) * 4, _gmtime_r.GMTString);
            return tmPtr;
          }
          function ___gmtime_r(a0, a1) {
            return _gmtime_r(a0, a1);
          }
          function _emscripten_memcpy_big(dest, src, num) {
            HEAPU8.copyWithin(dest, src, src + num);
          }
          function emscripten_realloc_buffer(size) {
            try {
              wasmMemory.grow(size - buffer.byteLength + 65535 >>> 16);
              updateGlobalBufferAndViews(wasmMemory.buffer);
              return 1;
            } catch (e) {
            }
          }
          function _emscripten_resize_heap(requestedSize) {
            var oldSize = HEAPU8.length;
            requestedSize = requestedSize >>> 0;
            var maxHeapSize = 2147483648;
            if (requestedSize > maxHeapSize) {
              return false;
            }
            for (var cutDown = 1;cutDown <= 4; cutDown *= 2) {
              var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);
              overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);
              var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));
              var replacement = emscripten_realloc_buffer(newSize);
              if (replacement) {
                return true;
              }
            }
            return false;
          }
          function _setTempRet0(val) {
            setTempRet0(val);
          }
          function _time(ptr) {
            var ret = Date.now() / 1000 | 0;
            if (ptr) {
              LE_HEAP_STORE_I32((ptr >> 2) * 4, ret);
            }
            return ret;
          }
          function _tzset() {
            if (_tzset.called)
              return;
            _tzset.called = true;
            var currentYear = (/* @__PURE__ */ new Date()).getFullYear();
            var winter = new Date(currentYear, 0, 1);
            var summer = new Date(currentYear, 6, 1);
            var winterOffset = winter.getTimezoneOffset();
            var summerOffset = summer.getTimezoneOffset();
            var stdTimezoneOffset = Math.max(winterOffset, summerOffset);
            LE_HEAP_STORE_I32((__get_timezone() >> 2) * 4, stdTimezoneOffset * 60);
            LE_HEAP_STORE_I32((__get_daylight() >> 2) * 4, Number(winterOffset != summerOffset));
            function extractZone(date) {
              var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
              return match ? match[1] : "GMT";
            }
            var winterName = extractZone(winter);
            var summerName = extractZone(summer);
            var winterNamePtr = allocateUTF8(winterName);
            var summerNamePtr = allocateUTF8(summerName);
            if (summerOffset < winterOffset) {
              LE_HEAP_STORE_I32((__get_tzname() >> 2) * 4, winterNamePtr);
              LE_HEAP_STORE_I32((__get_tzname() + 4 >> 2) * 4, summerNamePtr);
            } else {
              LE_HEAP_STORE_I32((__get_tzname() >> 2) * 4, summerNamePtr);
              LE_HEAP_STORE_I32((__get_tzname() + 4 >> 2) * 4, winterNamePtr);
            }
          }
          function _timegm(tmPtr) {
            _tzset();
            var time = Date.UTC(LE_HEAP_LOAD_I32((tmPtr + 20 >> 2) * 4) + 1900, LE_HEAP_LOAD_I32((tmPtr + 16 >> 2) * 4), LE_HEAP_LOAD_I32((tmPtr + 12 >> 2) * 4), LE_HEAP_LOAD_I32((tmPtr + 8 >> 2) * 4), LE_HEAP_LOAD_I32((tmPtr + 4 >> 2) * 4), LE_HEAP_LOAD_I32((tmPtr >> 2) * 4), 0);
            var date = new Date(time);
            LE_HEAP_STORE_I32((tmPtr + 24 >> 2) * 4, date.getUTCDay());
            var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
            var yday = (date.getTime() - start) / (1000 * 60 * 60 * 24) | 0;
            LE_HEAP_STORE_I32((tmPtr + 28 >> 2) * 4, yday);
            return date.getTime() / 1000 | 0;
          }
          var decodeBase64 = typeof atob === "function" ? atob : function(input) {
            var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
            var output = "";
            var chr1, chr2, chr3;
            var enc1, enc2, enc3, enc4;
            var i = 0;
            input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
            do {
              enc1 = keyStr.indexOf(input.charAt(i++));
              enc2 = keyStr.indexOf(input.charAt(i++));
              enc3 = keyStr.indexOf(input.charAt(i++));
              enc4 = keyStr.indexOf(input.charAt(i++));
              chr1 = enc1 << 2 | enc2 >> 4;
              chr2 = (enc2 & 15) << 4 | enc3 >> 2;
              chr3 = (enc3 & 3) << 6 | enc4;
              output = output + String.fromCharCode(chr1);
              if (enc3 !== 64) {
                output = output + String.fromCharCode(chr2);
              }
              if (enc4 !== 64) {
                output = output + String.fromCharCode(chr3);
              }
            } while (i < input.length);
            return output;
          };
          function intArrayFromBase64(s) {
            if (typeof ENVIRONMENT_IS_NODE === "boolean" && ENVIRONMENT_IS_NODE) {
              var buf;
              try {
                buf = Buffer.from(s, "base64");
              } catch (_) {
                buf = new Buffer(s, "base64");
              }
              return new Uint8Array(buf["buffer"], buf["byteOffset"], buf["byteLength"]);
            }
            try {
              var decoded = decodeBase64(s);
              var bytes = new Uint8Array(decoded.length);
              for (var i = 0;i < decoded.length; ++i) {
                bytes[i] = decoded.charCodeAt(i);
              }
              return bytes;
            } catch (_) {
              throw new Error("Converting base64 string to bytes failed.");
            }
          }
          function tryParseAsDataURI(filename) {
            if (!isDataURI(filename)) {
              return;
            }
            return intArrayFromBase64(filename.slice(dataURIPrefix.length));
          }
          var asmLibraryArg = {
            e: ___gmtime_r,
            c: _emscripten_memcpy_big,
            d: _emscripten_resize_heap,
            a: _setTempRet0,
            b: _time,
            f: _timegm
          };
          var asm = createWasm();
          var ___wasm_call_ctors = Module["___wasm_call_ctors"] = asm["h"];
          var _zip_ext_count_symlinks = Module["_zip_ext_count_symlinks"] = asm["i"];
          var _zip_file_get_external_attributes = Module["_zip_file_get_external_attributes"] = asm["j"];
          var _zipstruct_statS = Module["_zipstruct_statS"] = asm["k"];
          var _zipstruct_stat_size = Module["_zipstruct_stat_size"] = asm["l"];
          var _zipstruct_stat_mtime = Module["_zipstruct_stat_mtime"] = asm["m"];
          var _zipstruct_stat_crc = Module["_zipstruct_stat_crc"] = asm["n"];
          var _zipstruct_errorS = Module["_zipstruct_errorS"] = asm["o"];
          var _zipstruct_error_code_zip = Module["_zipstruct_error_code_zip"] = asm["p"];
          var _zipstruct_stat_comp_size = Module["_zipstruct_stat_comp_size"] = asm["q"];
          var _zipstruct_stat_comp_method = Module["_zipstruct_stat_comp_method"] = asm["r"];
          var _zip_close = Module["_zip_close"] = asm["s"];
          var _zip_delete = Module["_zip_delete"] = asm["t"];
          var _zip_dir_add = Module["_zip_dir_add"] = asm["u"];
          var _zip_discard = Module["_zip_discard"] = asm["v"];
          var _zip_error_init_with_code = Module["_zip_error_init_with_code"] = asm["w"];
          var _zip_get_error = Module["_zip_get_error"] = asm["x"];
          var _zip_file_get_error = Module["_zip_file_get_error"] = asm["y"];
          var _zip_error_strerror = Module["_zip_error_strerror"] = asm["z"];
          var _zip_fclose = Module["_zip_fclose"] = asm["A"];
          var _zip_file_add = Module["_zip_file_add"] = asm["B"];
          var _free = Module["_free"] = asm["C"];
          var _malloc = Module["_malloc"] = asm["D"];
          var _zip_source_error = Module["_zip_source_error"] = asm["E"];
          var _zip_source_seek = Module["_zip_source_seek"] = asm["F"];
          var _zip_file_set_external_attributes = Module["_zip_file_set_external_attributes"] = asm["G"];
          var _zip_file_set_mtime = Module["_zip_file_set_mtime"] = asm["H"];
          var _zip_fopen_index = Module["_zip_fopen_index"] = asm["I"];
          var _zip_fread = Module["_zip_fread"] = asm["J"];
          var _zip_get_name = Module["_zip_get_name"] = asm["K"];
          var _zip_get_num_entries = Module["_zip_get_num_entries"] = asm["L"];
          var _zip_source_read = Module["_zip_source_read"] = asm["M"];
          var _zip_name_locate = Module["_zip_name_locate"] = asm["N"];
          var _zip_open_from_source = Module["_zip_open_from_source"] = asm["O"];
          var _zip_set_file_compression = Module["_zip_set_file_compression"] = asm["P"];
          var _zip_source_buffer = Module["_zip_source_buffer"] = asm["Q"];
          var _zip_source_buffer_create = Module["_zip_source_buffer_create"] = asm["R"];
          var _zip_source_close = Module["_zip_source_close"] = asm["S"];
          var _zip_source_free = Module["_zip_source_free"] = asm["T"];
          var _zip_source_keep = Module["_zip_source_keep"] = asm["U"];
          var _zip_source_open = Module["_zip_source_open"] = asm["V"];
          var _zip_source_tell = Module["_zip_source_tell"] = asm["X"];
          var _zip_stat_index = Module["_zip_stat_index"] = asm["Y"];
          var __get_tzname = Module["__get_tzname"] = asm["Z"];
          var __get_daylight = Module["__get_daylight"] = asm["_"];
          var __get_timezone = Module["__get_timezone"] = asm["$"];
          var stackSave = Module["stackSave"] = asm["aa"];
          var stackRestore = Module["stackRestore"] = asm["ba"];
          var stackAlloc = Module["stackAlloc"] = asm["ca"];
          Module["cwrap"] = cwrap;
          Module["getValue"] = getValue;
          var calledRun;
          dependenciesFulfilled = function runCaller() {
            if (!calledRun)
              run();
            if (!calledRun)
              dependenciesFulfilled = runCaller;
          };
          function run(args) {
            args = args || arguments_;
            if (runDependencies > 0) {
              return;
            }
            preRun();
            if (runDependencies > 0) {
              return;
            }
            function doRun() {
              if (calledRun)
                return;
              calledRun = true;
              Module["calledRun"] = true;
              if (ABORT)
                return;
              initRuntime();
              readyPromiseResolve(Module);
              if (Module["onRuntimeInitialized"])
                Module["onRuntimeInitialized"]();
              postRun();
            }
            if (Module["setStatus"]) {
              Module["setStatus"]("Running...");
              setTimeout(function() {
                setTimeout(function() {
                  Module["setStatus"]("");
                }, 1);
                doRun();
              }, 1);
            } else {
              doRun();
            }
          }
          Module["run"] = run;
          if (Module["preInit"]) {
            if (typeof Module["preInit"] == "function")
              Module["preInit"] = [Module["preInit"]];
            while (Module["preInit"].length > 0) {
              Module["preInit"].pop()();
            }
          }
          run();
          return createModule2;
        };
      }();
      if (typeof exports22 === "object" && typeof module22 === "object")
        module22.exports = createModule;
      else if (typeof define === "function" && define["amd"])
        define([], function() {
          return createModule;
        });
      else if (typeof exports22 === "object")
        exports22["createModule"] = createModule;
    }
  });
  var require_makeInterface = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+libzip@3.1.0_@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/libzip/lib/makeInterface.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.makeInterface = exports22.Errors = undefined;
      var number64 = [
        `number`,
        `number`
      ];
      var Errors;
      (function(Errors2) {
        Errors2[Errors2["ZIP_ER_OK"] = 0] = "ZIP_ER_OK";
        Errors2[Errors2["ZIP_ER_MULTIDISK"] = 1] = "ZIP_ER_MULTIDISK";
        Errors2[Errors2["ZIP_ER_RENAME"] = 2] = "ZIP_ER_RENAME";
        Errors2[Errors2["ZIP_ER_CLOSE"] = 3] = "ZIP_ER_CLOSE";
        Errors2[Errors2["ZIP_ER_SEEK"] = 4] = "ZIP_ER_SEEK";
        Errors2[Errors2["ZIP_ER_READ"] = 5] = "ZIP_ER_READ";
        Errors2[Errors2["ZIP_ER_WRITE"] = 6] = "ZIP_ER_WRITE";
        Errors2[Errors2["ZIP_ER_CRC"] = 7] = "ZIP_ER_CRC";
        Errors2[Errors2["ZIP_ER_ZIPCLOSED"] = 8] = "ZIP_ER_ZIPCLOSED";
        Errors2[Errors2["ZIP_ER_NOENT"] = 9] = "ZIP_ER_NOENT";
        Errors2[Errors2["ZIP_ER_EXISTS"] = 10] = "ZIP_ER_EXISTS";
        Errors2[Errors2["ZIP_ER_OPEN"] = 11] = "ZIP_ER_OPEN";
        Errors2[Errors2["ZIP_ER_TMPOPEN"] = 12] = "ZIP_ER_TMPOPEN";
        Errors2[Errors2["ZIP_ER_ZLIB"] = 13] = "ZIP_ER_ZLIB";
        Errors2[Errors2["ZIP_ER_MEMORY"] = 14] = "ZIP_ER_MEMORY";
        Errors2[Errors2["ZIP_ER_CHANGED"] = 15] = "ZIP_ER_CHANGED";
        Errors2[Errors2["ZIP_ER_COMPNOTSUPP"] = 16] = "ZIP_ER_COMPNOTSUPP";
        Errors2[Errors2["ZIP_ER_EOF"] = 17] = "ZIP_ER_EOF";
        Errors2[Errors2["ZIP_ER_INVAL"] = 18] = "ZIP_ER_INVAL";
        Errors2[Errors2["ZIP_ER_NOZIP"] = 19] = "ZIP_ER_NOZIP";
        Errors2[Errors2["ZIP_ER_INTERNAL"] = 20] = "ZIP_ER_INTERNAL";
        Errors2[Errors2["ZIP_ER_INCONS"] = 21] = "ZIP_ER_INCONS";
        Errors2[Errors2["ZIP_ER_REMOVE"] = 22] = "ZIP_ER_REMOVE";
        Errors2[Errors2["ZIP_ER_DELETED"] = 23] = "ZIP_ER_DELETED";
        Errors2[Errors2["ZIP_ER_ENCRNOTSUPP"] = 24] = "ZIP_ER_ENCRNOTSUPP";
        Errors2[Errors2["ZIP_ER_RDONLY"] = 25] = "ZIP_ER_RDONLY";
        Errors2[Errors2["ZIP_ER_NOPASSWD"] = 26] = "ZIP_ER_NOPASSWD";
        Errors2[Errors2["ZIP_ER_WRONGPASSWD"] = 27] = "ZIP_ER_WRONGPASSWD";
        Errors2[Errors2["ZIP_ER_OPNOTSUPP"] = 28] = "ZIP_ER_OPNOTSUPP";
        Errors2[Errors2["ZIP_ER_INUSE"] = 29] = "ZIP_ER_INUSE";
        Errors2[Errors2["ZIP_ER_TELL"] = 30] = "ZIP_ER_TELL";
        Errors2[Errors2["ZIP_ER_COMPRESSED_DATA"] = 31] = "ZIP_ER_COMPRESSED_DATA";
      })(Errors || (exports22.Errors = Errors = {}));
      var makeInterface = (emZip) => ({
        get HEAPU8() {
          return emZip.HEAPU8;
        },
        errors: Errors,
        SEEK_SET: 0,
        SEEK_CUR: 1,
        SEEK_END: 2,
        ZIP_CHECKCONS: 4,
        ZIP_EXCL: 2,
        ZIP_RDONLY: 16,
        ZIP_FL_OVERWRITE: 8192,
        ZIP_FL_COMPRESSED: 4,
        ZIP_OPSYS_DOS: 0,
        ZIP_OPSYS_AMIGA: 1,
        ZIP_OPSYS_OPENVMS: 2,
        ZIP_OPSYS_UNIX: 3,
        ZIP_OPSYS_VM_CMS: 4,
        ZIP_OPSYS_ATARI_ST: 5,
        ZIP_OPSYS_OS_2: 6,
        ZIP_OPSYS_MACINTOSH: 7,
        ZIP_OPSYS_Z_SYSTEM: 8,
        ZIP_OPSYS_CPM: 9,
        ZIP_OPSYS_WINDOWS_NTFS: 10,
        ZIP_OPSYS_MVS: 11,
        ZIP_OPSYS_VSE: 12,
        ZIP_OPSYS_ACORN_RISC: 13,
        ZIP_OPSYS_VFAT: 14,
        ZIP_OPSYS_ALTERNATE_MVS: 15,
        ZIP_OPSYS_BEOS: 16,
        ZIP_OPSYS_TANDEM: 17,
        ZIP_OPSYS_OS_400: 18,
        ZIP_OPSYS_OS_X: 19,
        ZIP_CM_DEFAULT: -1,
        ZIP_CM_STORE: 0,
        ZIP_CM_DEFLATE: 8,
        uint08S: emZip._malloc(1),
        uint32S: emZip._malloc(4),
        malloc: emZip._malloc,
        free: emZip._free,
        getValue: emZip.getValue,
        openFromSource: emZip.cwrap(`zip_open_from_source`, `number`, [`number`, `number`, `number`]),
        close: emZip.cwrap(`zip_close`, `number`, [`number`]),
        discard: emZip.cwrap(`zip_discard`, null, [`number`]),
        getError: emZip.cwrap(`zip_get_error`, `number`, [`number`]),
        getName: emZip.cwrap(`zip_get_name`, `string`, [`number`, `number`, `number`]),
        getNumEntries: emZip.cwrap(`zip_get_num_entries`, `number`, [`number`, `number`]),
        delete: emZip.cwrap(`zip_delete`, `number`, [`number`, `number`]),
        statIndex: emZip.cwrap(`zip_stat_index`, `number`, [`number`, ...number64, `number`, `number`]),
        fopenIndex: emZip.cwrap(`zip_fopen_index`, `number`, [`number`, ...number64, `number`]),
        fread: emZip.cwrap(`zip_fread`, `number`, [`number`, `number`, `number`, `number`]),
        fclose: emZip.cwrap(`zip_fclose`, `number`, [`number`]),
        dir: {
          add: emZip.cwrap(`zip_dir_add`, `number`, [`number`, `string`])
        },
        file: {
          add: emZip.cwrap(`zip_file_add`, `number`, [`number`, `string`, `number`, `number`]),
          getError: emZip.cwrap(`zip_file_get_error`, `number`, [`number`]),
          getExternalAttributes: emZip.cwrap(`zip_file_get_external_attributes`, `number`, [`number`, ...number64, `number`, `number`, `number`]),
          setExternalAttributes: emZip.cwrap(`zip_file_set_external_attributes`, `number`, [`number`, ...number64, `number`, `number`, `number`]),
          setMtime: emZip.cwrap(`zip_file_set_mtime`, `number`, [`number`, ...number64, `number`, `number`]),
          setCompression: emZip.cwrap(`zip_set_file_compression`, `number`, [`number`, ...number64, `number`, `number`])
        },
        ext: {
          countSymlinks: emZip.cwrap(`zip_ext_count_symlinks`, `number`, [`number`])
        },
        error: {
          initWithCode: emZip.cwrap(`zip_error_init_with_code`, null, [`number`, `number`]),
          strerror: emZip.cwrap(`zip_error_strerror`, `string`, [`number`])
        },
        name: {
          locate: emZip.cwrap(`zip_name_locate`, `number`, [`number`, `string`, `number`])
        },
        source: {
          fromUnattachedBuffer: emZip.cwrap(`zip_source_buffer_create`, `number`, [`number`, ...number64, `number`, `number`]),
          fromBuffer: emZip.cwrap(`zip_source_buffer`, `number`, [`number`, `number`, ...number64, `number`]),
          free: emZip.cwrap(`zip_source_free`, null, [`number`]),
          keep: emZip.cwrap(`zip_source_keep`, null, [`number`]),
          open: emZip.cwrap(`zip_source_open`, `number`, [`number`]),
          close: emZip.cwrap(`zip_source_close`, `number`, [`number`]),
          seek: emZip.cwrap(`zip_source_seek`, `number`, [`number`, ...number64, `number`]),
          tell: emZip.cwrap(`zip_source_tell`, `number`, [`number`]),
          read: emZip.cwrap(`zip_source_read`, `number`, [`number`, `number`, `number`]),
          error: emZip.cwrap(`zip_source_error`, `number`, [`number`])
        },
        struct: {
          statS: emZip.cwrap(`zipstruct_statS`, `number`, []),
          statSize: emZip.cwrap(`zipstruct_stat_size`, `number`, [`number`]),
          statCompSize: emZip.cwrap(`zipstruct_stat_comp_size`, `number`, [`number`]),
          statCompMethod: emZip.cwrap(`zipstruct_stat_comp_method`, `number`, [`number`]),
          statMtime: emZip.cwrap(`zipstruct_stat_mtime`, `number`, [`number`]),
          statCrc: emZip.cwrap(`zipstruct_stat_crc`, `number`, [`number`]),
          errorS: emZip.cwrap(`zipstruct_errorS`, `number`, []),
          errorCodeZip: emZip.cwrap(`zipstruct_error_code_zip`, `number`, [`number`])
        }
      });
      exports22.makeInterface = makeInterface;
    }
  });
  var require_ZipOpenFS = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+libzip@3.1.0_@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/libzip/lib/ZipOpenFS.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.ZipOpenFS = undefined;
      exports22.getArchivePart = getArchivePart;
      var fslib_12 = require_lib();
      var fslib_2 = require_lib();
      var libzip_1 = require_sync7();
      function getArchivePart(path2, extension) {
        let idx = path2.indexOf(extension);
        if (idx <= 0)
          return null;
        let nextCharIdx = idx;
        while (idx >= 0) {
          nextCharIdx = idx + extension.length;
          if (path2[nextCharIdx] === fslib_2.ppath.sep)
            break;
          if (path2[idx - 1] === fslib_2.ppath.sep)
            return null;
          idx = path2.indexOf(extension, nextCharIdx);
        }
        if (path2.length > nextCharIdx && path2[nextCharIdx] !== fslib_2.ppath.sep)
          return null;
        return path2.slice(0, nextCharIdx);
      }
      var ZipOpenFS = class _ZipOpenFS extends fslib_12.MountFS {
        static async openPromise(fn, opts) {
          const zipOpenFs = new _ZipOpenFS(opts);
          try {
            return await fn(zipOpenFs);
          } finally {
            zipOpenFs.saveAndClose();
          }
        }
        constructor(opts = {}) {
          const fileExtensions = opts.fileExtensions;
          const readOnlyArchives = opts.readOnlyArchives;
          const getMountPoint = typeof fileExtensions === `undefined` ? (path2) => getArchivePart(path2, `.zip`) : (path2) => {
            for (const extension of fileExtensions) {
              const result2 = getArchivePart(path2, extension);
              if (result2) {
                return result2;
              }
            }
            return null;
          };
          const factorySync = (baseFs, p) => {
            return new libzip_1.ZipFS(p, {
              baseFs,
              readOnly: readOnlyArchives,
              stats: baseFs.statSync(p)
            });
          };
          const factoryPromise = async (baseFs, p) => {
            const zipOptions = {
              baseFs,
              readOnly: readOnlyArchives,
              stats: await baseFs.statPromise(p)
            };
            return () => {
              return new libzip_1.ZipFS(p, zipOptions);
            };
          };
          super({
            ...opts,
            factorySync,
            factoryPromise,
            getMountPoint
          });
        }
      };
      exports22.ZipOpenFS = ZipOpenFS;
    }
  });
  var require_ZipFS = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+libzip@3.1.0_@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/libzip/lib/ZipFS.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.ZipFS = exports22.LibzipError = exports22.DEFAULT_COMPRESSION_LEVEL = undefined;
      exports22.makeEmptyArchive = makeEmptyArchive;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var fslib_12 = require_lib();
      var fslib_2 = require_lib();
      var fslib_3 = require_lib();
      var fslib_4 = require_lib();
      var fslib_5 = require_lib();
      var fslib_6 = require_lib();
      var fs_1 = __require("fs");
      var stream_12 = __require("stream");
      var util_1 = __require("util");
      var zlib_1 = tslib_12.__importDefault(__require("zlib"));
      var instance_1 = require_instance();
      exports22.DEFAULT_COMPRESSION_LEVEL = `mixed`;
      function toUnixTimestamp(time) {
        if (typeof time === `string` && String(+time) === time)
          return +time;
        if (typeof time === `number` && Number.isFinite(time)) {
          if (time < 0) {
            return Date.now() / 1000;
          } else {
            return time;
          }
        }
        if (util_1.types.isDate(time))
          return time.getTime() / 1000;
        throw new Error(`Invalid time`);
      }
      function makeEmptyArchive() {
        return Buffer.from([
          80,
          75,
          5,
          6,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]);
      }
      var LibzipError = class extends Error {
        constructor(message, code) {
          super(message);
          this.name = `Libzip Error`;
          this.code = code;
        }
      };
      exports22.LibzipError = LibzipError;
      var ZipFS = class extends fslib_12.BasePortableFakeFS {
        constructor(source, opts = {}) {
          super();
          this.listings = /* @__PURE__ */ new Map;
          this.entries = /* @__PURE__ */ new Map;
          this.fileSources = /* @__PURE__ */ new Map;
          this.fds = /* @__PURE__ */ new Map;
          this.nextFd = 0;
          this.ready = false;
          this.readOnly = false;
          const pathOptions = opts;
          this.level = typeof pathOptions.level !== `undefined` ? pathOptions.level : exports22.DEFAULT_COMPRESSION_LEVEL;
          source ??= makeEmptyArchive();
          if (typeof source === `string`) {
            const { baseFs = new fslib_2.NodeFS } = pathOptions;
            this.baseFs = baseFs;
            this.path = source;
          } else {
            this.path = null;
            this.baseFs = null;
          }
          if (opts.stats) {
            this.stats = opts.stats;
          } else {
            if (typeof source === `string`) {
              try {
                this.stats = this.baseFs.statSync(source);
              } catch (error) {
                if (error.code === `ENOENT` && pathOptions.create) {
                  this.stats = fslib_5.statUtils.makeDefaultStats();
                } else {
                  throw error;
                }
              }
            } else {
              this.stats = fslib_5.statUtils.makeDefaultStats();
            }
          }
          this.libzip = (0, instance_1.getInstance)();
          const errPtr = this.libzip.malloc(4);
          try {
            let flags = 0;
            if (opts.readOnly) {
              flags |= this.libzip.ZIP_RDONLY;
              this.readOnly = true;
            }
            if (typeof source === `string`)
              source = pathOptions.create ? makeEmptyArchive() : this.baseFs.readFileSync(source);
            const lzSource = this.allocateUnattachedSource(source);
            try {
              this.zip = this.libzip.openFromSource(lzSource, flags, errPtr);
              this.lzSource = lzSource;
            } catch (error) {
              this.libzip.source.free(lzSource);
              throw error;
            }
            if (this.zip === 0) {
              const error = this.libzip.struct.errorS();
              this.libzip.error.initWithCode(error, this.libzip.getValue(errPtr, `i32`));
              throw this.makeLibzipError(error);
            }
          } finally {
            this.libzip.free(errPtr);
          }
          this.listings.set(fslib_6.PortablePath.root, /* @__PURE__ */ new Set);
          const entryCount = this.libzip.getNumEntries(this.zip, 0);
          for (let t = 0;t < entryCount; ++t) {
            const raw = this.libzip.getName(this.zip, t, 0);
            if (fslib_6.ppath.isAbsolute(raw))
              continue;
            const p = fslib_6.ppath.resolve(fslib_6.PortablePath.root, raw);
            this.registerEntry(p, t);
            if (raw.endsWith(`/`)) {
              this.registerListing(p);
            }
          }
          this.symlinkCount = this.libzip.ext.countSymlinks(this.zip);
          if (this.symlinkCount === -1)
            throw this.makeLibzipError(this.libzip.getError(this.zip));
          this.ready = true;
        }
        makeLibzipError(error) {
          const errorCode = this.libzip.struct.errorCodeZip(error);
          const strerror = this.libzip.error.strerror(error);
          const libzipError = new LibzipError(strerror, this.libzip.errors[errorCode]);
          if (errorCode === this.libzip.errors.ZIP_ER_CHANGED)
            throw new Error(`Assertion failed: Unexpected libzip error: ${libzipError.message}`);
          return libzipError;
        }
        getExtractHint(hints) {
          for (const fileName of this.entries.keys()) {
            const ext = this.pathUtils.extname(fileName);
            if (hints.relevantExtensions.has(ext)) {
              return true;
            }
          }
          return false;
        }
        getAllFiles() {
          return Array.from(this.entries.keys());
        }
        getRealPath() {
          if (!this.path)
            throw new Error(`ZipFS don't have real paths when loaded from a buffer`);
          return this.path;
        }
        prepareClose() {
          if (!this.ready)
            throw fslib_5.errors.EBUSY(`archive closed, close`);
          (0, fslib_4.unwatchAllFiles)(this);
        }
        getBufferAndClose() {
          this.prepareClose();
          if (this.entries.size === 0) {
            this.discardAndClose();
            return makeEmptyArchive();
          }
          try {
            this.libzip.source.keep(this.lzSource);
            if (this.libzip.close(this.zip) === -1)
              throw this.makeLibzipError(this.libzip.getError(this.zip));
            if (this.libzip.source.open(this.lzSource) === -1)
              throw this.makeLibzipError(this.libzip.source.error(this.lzSource));
            if (this.libzip.source.seek(this.lzSource, 0, 0, this.libzip.SEEK_END) === -1)
              throw this.makeLibzipError(this.libzip.source.error(this.lzSource));
            const size = this.libzip.source.tell(this.lzSource);
            if (size === -1)
              throw this.makeLibzipError(this.libzip.source.error(this.lzSource));
            if (this.libzip.source.seek(this.lzSource, 0, 0, this.libzip.SEEK_SET) === -1)
              throw this.makeLibzipError(this.libzip.source.error(this.lzSource));
            const buffer = this.libzip.malloc(size);
            if (!buffer)
              throw new Error(`Couldn't allocate enough memory`);
            try {
              const rc = this.libzip.source.read(this.lzSource, buffer, size);
              if (rc === -1)
                throw this.makeLibzipError(this.libzip.source.error(this.lzSource));
              else if (rc < size)
                throw new Error(`Incomplete read`);
              else if (rc > size)
                throw new Error(`Overread`);
              let result2 = Buffer.from(this.libzip.HEAPU8.subarray(buffer, buffer + size));
              if (process.env.YARN_IS_TEST_ENV && process.env.YARN_ZIP_DATA_EPILOGUE)
                result2 = Buffer.concat([result2, Buffer.from(process.env.YARN_ZIP_DATA_EPILOGUE)]);
              return result2;
            } finally {
              this.libzip.free(buffer);
            }
          } finally {
            this.libzip.source.close(this.lzSource);
            this.libzip.source.free(this.lzSource);
            this.ready = false;
          }
        }
        discardAndClose() {
          this.prepareClose();
          this.libzip.discard(this.zip);
          this.ready = false;
        }
        saveAndClose() {
          if (!this.path || !this.baseFs)
            throw new Error(`ZipFS cannot be saved and must be discarded when loaded from a buffer`);
          if (this.readOnly) {
            this.discardAndClose();
            return;
          }
          const newMode = this.baseFs.existsSync(this.path) || this.stats.mode === fslib_5.statUtils.DEFAULT_MODE ? undefined : this.stats.mode;
          this.baseFs.writeFileSync(this.path, this.getBufferAndClose(), { mode: newMode });
          this.ready = false;
        }
        resolve(p) {
          return fslib_6.ppath.resolve(fslib_6.PortablePath.root, p);
        }
        async openPromise(p, flags, mode) {
          return this.openSync(p, flags, mode);
        }
        openSync(p, flags, mode) {
          const fd = this.nextFd++;
          this.fds.set(fd, { cursor: 0, p });
          return fd;
        }
        hasOpenFileHandles() {
          return !!this.fds.size;
        }
        async opendirPromise(p, opts) {
          return this.opendirSync(p, opts);
        }
        opendirSync(p, opts = {}) {
          const resolvedP = this.resolveFilename(`opendir '${p}'`, p);
          if (!this.entries.has(resolvedP) && !this.listings.has(resolvedP))
            throw fslib_5.errors.ENOENT(`opendir '${p}'`);
          const directoryListing = this.listings.get(resolvedP);
          if (!directoryListing)
            throw fslib_5.errors.ENOTDIR(`opendir '${p}'`);
          const entries = [...directoryListing];
          const fd = this.openSync(resolvedP, `r`);
          const onClose = () => {
            this.closeSync(fd);
          };
          return (0, fslib_3.opendir)(this, resolvedP, entries, { onClose });
        }
        async readPromise(fd, buffer, offset, length, position) {
          return this.readSync(fd, buffer, offset, length, position);
        }
        readSync(fd, buffer, offset = 0, length = buffer.byteLength, position = -1) {
          const entry = this.fds.get(fd);
          if (typeof entry === `undefined`)
            throw fslib_5.errors.EBADF(`read`);
          const realPosition = position === -1 || position === null ? entry.cursor : position;
          const source = this.readFileSync(entry.p);
          source.copy(buffer, offset, realPosition, realPosition + length);
          const bytesRead = Math.max(0, Math.min(source.length - realPosition, length));
          if (position === -1 || position === null)
            entry.cursor += bytesRead;
          return bytesRead;
        }
        async writePromise(fd, buffer, offset, length, position) {
          if (typeof buffer === `string`) {
            return this.writeSync(fd, buffer, position);
          } else {
            return this.writeSync(fd, buffer, offset, length, position);
          }
        }
        writeSync(fd, buffer, offset, length, position) {
          const entry = this.fds.get(fd);
          if (typeof entry === `undefined`)
            throw fslib_5.errors.EBADF(`read`);
          throw new Error(`Unimplemented`);
        }
        async closePromise(fd) {
          return this.closeSync(fd);
        }
        closeSync(fd) {
          const entry = this.fds.get(fd);
          if (typeof entry === `undefined`)
            throw fslib_5.errors.EBADF(`read`);
          this.fds.delete(fd);
        }
        createReadStream(p, { encoding } = {}) {
          if (p === null)
            throw new Error(`Unimplemented`);
          const fd = this.openSync(p, `r`);
          const stream = Object.assign(new stream_12.PassThrough({
            emitClose: true,
            autoDestroy: true,
            destroy: (error, callback) => {
              clearImmediate(immediate);
              this.closeSync(fd);
              callback(error);
            }
          }), {
            close() {
              stream.destroy();
            },
            bytesRead: 0,
            path: p,
            pending: false
          });
          const immediate = setImmediate(async () => {
            try {
              const data = await this.readFilePromise(p, encoding);
              stream.bytesRead = data.length;
              stream.end(data);
            } catch (error) {
              stream.destroy(error);
            }
          });
          return stream;
        }
        createWriteStream(p, { encoding } = {}) {
          if (this.readOnly)
            throw fslib_5.errors.EROFS(`open '${p}'`);
          if (p === null)
            throw new Error(`Unimplemented`);
          const chunks = [];
          const fd = this.openSync(p, `w`);
          const stream = Object.assign(new stream_12.PassThrough({
            autoDestroy: true,
            emitClose: true,
            destroy: (error, callback) => {
              try {
                if (error) {
                  callback(error);
                } else {
                  this.writeFileSync(p, Buffer.concat(chunks), encoding);
                  callback(null);
                }
              } catch (err) {
                callback(err);
              } finally {
                this.closeSync(fd);
              }
            }
          }), {
            close() {
              stream.destroy();
            },
            bytesWritten: 0,
            path: p,
            pending: false
          });
          stream.on(`data`, (chunk) => {
            const chunkBuffer = Buffer.from(chunk);
            stream.bytesWritten += chunkBuffer.length;
            chunks.push(chunkBuffer);
          });
          return stream;
        }
        async realpathPromise(p) {
          return this.realpathSync(p);
        }
        realpathSync(p) {
          const resolvedP = this.resolveFilename(`lstat '${p}'`, p);
          if (!this.entries.has(resolvedP) && !this.listings.has(resolvedP))
            throw fslib_5.errors.ENOENT(`lstat '${p}'`);
          return resolvedP;
        }
        async existsPromise(p) {
          return this.existsSync(p);
        }
        existsSync(p) {
          if (!this.ready)
            throw fslib_5.errors.EBUSY(`archive closed, existsSync '${p}'`);
          if (this.symlinkCount === 0) {
            const resolvedP2 = fslib_6.ppath.resolve(fslib_6.PortablePath.root, p);
            return this.entries.has(resolvedP2) || this.listings.has(resolvedP2);
          }
          let resolvedP;
          try {
            resolvedP = this.resolveFilename(`stat '${p}'`, p, undefined, false);
          } catch (error) {
            return false;
          }
          if (resolvedP === undefined)
            return false;
          return this.entries.has(resolvedP) || this.listings.has(resolvedP);
        }
        async accessPromise(p, mode) {
          return this.accessSync(p, mode);
        }
        accessSync(p, mode = fs_1.constants.F_OK) {
          const resolvedP = this.resolveFilename(`access '${p}'`, p);
          if (!this.entries.has(resolvedP) && !this.listings.has(resolvedP))
            throw fslib_5.errors.ENOENT(`access '${p}'`);
          if (this.readOnly && mode & fs_1.constants.W_OK) {
            throw fslib_5.errors.EROFS(`access '${p}'`);
          }
        }
        async statPromise(p, opts = { bigint: false }) {
          if (opts.bigint)
            return this.statSync(p, { bigint: true });
          return this.statSync(p);
        }
        statSync(p, opts = { bigint: false, throwIfNoEntry: true }) {
          const resolvedP = this.resolveFilename(`stat '${p}'`, p, undefined, opts.throwIfNoEntry);
          if (resolvedP === undefined)
            return;
          if (!this.entries.has(resolvedP) && !this.listings.has(resolvedP)) {
            if (opts.throwIfNoEntry === false)
              return;
            throw fslib_5.errors.ENOENT(`stat '${p}'`);
          }
          if (p[p.length - 1] === `/` && !this.listings.has(resolvedP))
            throw fslib_5.errors.ENOTDIR(`stat '${p}'`);
          return this.statImpl(`stat '${p}'`, resolvedP, opts);
        }
        async fstatPromise(fd, opts) {
          return this.fstatSync(fd, opts);
        }
        fstatSync(fd, opts) {
          const entry = this.fds.get(fd);
          if (typeof entry === `undefined`)
            throw fslib_5.errors.EBADF(`fstatSync`);
          const { p } = entry;
          const resolvedP = this.resolveFilename(`stat '${p}'`, p);
          if (!this.entries.has(resolvedP) && !this.listings.has(resolvedP))
            throw fslib_5.errors.ENOENT(`stat '${p}'`);
          if (p[p.length - 1] === `/` && !this.listings.has(resolvedP))
            throw fslib_5.errors.ENOTDIR(`stat '${p}'`);
          return this.statImpl(`fstat '${p}'`, resolvedP, opts);
        }
        async lstatPromise(p, opts = { bigint: false }) {
          if (opts.bigint)
            return this.lstatSync(p, { bigint: true });
          return this.lstatSync(p);
        }
        lstatSync(p, opts = { bigint: false, throwIfNoEntry: true }) {
          const resolvedP = this.resolveFilename(`lstat '${p}'`, p, false, opts.throwIfNoEntry);
          if (resolvedP === undefined)
            return;
          if (!this.entries.has(resolvedP) && !this.listings.has(resolvedP)) {
            if (opts.throwIfNoEntry === false)
              return;
            throw fslib_5.errors.ENOENT(`lstat '${p}'`);
          }
          if (p[p.length - 1] === `/` && !this.listings.has(resolvedP))
            throw fslib_5.errors.ENOTDIR(`lstat '${p}'`);
          return this.statImpl(`lstat '${p}'`, resolvedP, opts);
        }
        statImpl(reason, p, opts = {}) {
          const entry = this.entries.get(p);
          if (typeof entry !== `undefined`) {
            const stat = this.libzip.struct.statS();
            const rc = this.libzip.statIndex(this.zip, entry, 0, 0, stat);
            if (rc === -1)
              throw this.makeLibzipError(this.libzip.getError(this.zip));
            const uid = this.stats.uid;
            const gid = this.stats.gid;
            const size = this.libzip.struct.statSize(stat) >>> 0;
            const blksize = 512;
            const blocks = Math.ceil(size / blksize);
            const mtimeMs = (this.libzip.struct.statMtime(stat) >>> 0) * 1000;
            const atimeMs = mtimeMs;
            const birthtimeMs = mtimeMs;
            const ctimeMs = mtimeMs;
            const atime = new Date(atimeMs);
            const birthtime = new Date(birthtimeMs);
            const ctime = new Date(ctimeMs);
            const mtime = new Date(mtimeMs);
            const type = this.listings.has(p) ? fs_1.constants.S_IFDIR : this.isSymbolicLink(entry) ? fs_1.constants.S_IFLNK : fs_1.constants.S_IFREG;
            const defaultMode = type === fs_1.constants.S_IFDIR ? 493 : 420;
            const mode = type | this.getUnixMode(entry, defaultMode) & 511;
            const crc = this.libzip.struct.statCrc(stat);
            const statInstance = Object.assign(new fslib_5.statUtils.StatEntry, { uid, gid, size, blksize, blocks, atime, birthtime, ctime, mtime, atimeMs, birthtimeMs, ctimeMs, mtimeMs, mode, crc });
            return opts.bigint === true ? fslib_5.statUtils.convertToBigIntStats(statInstance) : statInstance;
          }
          if (this.listings.has(p)) {
            const uid = this.stats.uid;
            const gid = this.stats.gid;
            const size = 0;
            const blksize = 512;
            const blocks = 0;
            const atimeMs = this.stats.mtimeMs;
            const birthtimeMs = this.stats.mtimeMs;
            const ctimeMs = this.stats.mtimeMs;
            const mtimeMs = this.stats.mtimeMs;
            const atime = new Date(atimeMs);
            const birthtime = new Date(birthtimeMs);
            const ctime = new Date(ctimeMs);
            const mtime = new Date(mtimeMs);
            const mode = fs_1.constants.S_IFDIR | 493;
            const crc = 0;
            const statInstance = Object.assign(new fslib_5.statUtils.StatEntry, { uid, gid, size, blksize, blocks, atime, birthtime, ctime, mtime, atimeMs, birthtimeMs, ctimeMs, mtimeMs, mode, crc });
            return opts.bigint === true ? fslib_5.statUtils.convertToBigIntStats(statInstance) : statInstance;
          }
          throw new Error(`Unreachable`);
        }
        getUnixMode(index, defaultMode) {
          const rc = this.libzip.file.getExternalAttributes(this.zip, index, 0, 0, this.libzip.uint08S, this.libzip.uint32S);
          if (rc === -1)
            throw this.makeLibzipError(this.libzip.getError(this.zip));
          const opsys = this.libzip.getValue(this.libzip.uint08S, `i8`) >>> 0;
          if (opsys !== this.libzip.ZIP_OPSYS_UNIX)
            return defaultMode;
          return this.libzip.getValue(this.libzip.uint32S, `i32`) >>> 16;
        }
        registerListing(p) {
          const existingListing = this.listings.get(p);
          if (existingListing)
            return existingListing;
          const parentListing = this.registerListing(fslib_6.ppath.dirname(p));
          parentListing.add(fslib_6.ppath.basename(p));
          const newListing = /* @__PURE__ */ new Set;
          this.listings.set(p, newListing);
          return newListing;
        }
        registerEntry(p, index) {
          const parentListing = this.registerListing(fslib_6.ppath.dirname(p));
          parentListing.add(fslib_6.ppath.basename(p));
          this.entries.set(p, index);
        }
        unregisterListing(p) {
          this.listings.delete(p);
          const parentListing = this.listings.get(fslib_6.ppath.dirname(p));
          parentListing?.delete(fslib_6.ppath.basename(p));
        }
        unregisterEntry(p) {
          this.unregisterListing(p);
          const entry = this.entries.get(p);
          this.entries.delete(p);
          if (typeof entry === `undefined`)
            return;
          this.fileSources.delete(entry);
          if (this.isSymbolicLink(entry)) {
            this.symlinkCount--;
          }
        }
        deleteEntry(p, index) {
          this.unregisterEntry(p);
          const rc = this.libzip.delete(this.zip, index);
          if (rc === -1) {
            throw this.makeLibzipError(this.libzip.getError(this.zip));
          }
        }
        resolveFilename(reason, p, resolveLastComponent = true, throwIfNoEntry = true) {
          if (!this.ready)
            throw fslib_5.errors.EBUSY(`archive closed, ${reason}`);
          let resolvedP = fslib_6.ppath.resolve(fslib_6.PortablePath.root, p);
          if (resolvedP === `/`)
            return fslib_6.PortablePath.root;
          const fileIndex = this.entries.get(resolvedP);
          if (resolveLastComponent && fileIndex !== undefined) {
            if (this.symlinkCount !== 0 && this.isSymbolicLink(fileIndex)) {
              const target = this.getFileSource(fileIndex).toString();
              return this.resolveFilename(reason, fslib_6.ppath.resolve(fslib_6.ppath.dirname(resolvedP), target), true, throwIfNoEntry);
            } else {
              return resolvedP;
            }
          }
          while (true) {
            const parentP = this.resolveFilename(reason, fslib_6.ppath.dirname(resolvedP), true, throwIfNoEntry);
            if (parentP === undefined)
              return parentP;
            const isDir = this.listings.has(parentP);
            const doesExist = this.entries.has(parentP);
            if (!isDir && !doesExist) {
              if (throwIfNoEntry === false)
                return;
              throw fslib_5.errors.ENOENT(reason);
            }
            if (!isDir)
              throw fslib_5.errors.ENOTDIR(reason);
            resolvedP = fslib_6.ppath.resolve(parentP, fslib_6.ppath.basename(resolvedP));
            if (!resolveLastComponent || this.symlinkCount === 0)
              break;
            const index = this.libzip.name.locate(this.zip, resolvedP.slice(1), 0);
            if (index === -1)
              break;
            if (this.isSymbolicLink(index)) {
              const target = this.getFileSource(index).toString();
              resolvedP = fslib_6.ppath.resolve(fslib_6.ppath.dirname(resolvedP), target);
            } else {
              break;
            }
          }
          return resolvedP;
        }
        allocateBuffer(content) {
          if (!Buffer.isBuffer(content))
            content = Buffer.from(content);
          const buffer = this.libzip.malloc(content.byteLength);
          if (!buffer)
            throw new Error(`Couldn't allocate enough memory`);
          const heap = new Uint8Array(this.libzip.HEAPU8.buffer, buffer, content.byteLength);
          heap.set(content);
          return { buffer, byteLength: content.byteLength };
        }
        allocateUnattachedSource(content) {
          const error = this.libzip.struct.errorS();
          const { buffer, byteLength } = this.allocateBuffer(content);
          const source = this.libzip.source.fromUnattachedBuffer(buffer, byteLength, 0, 1, error);
          if (source === 0) {
            this.libzip.free(error);
            throw this.makeLibzipError(error);
          }
          return source;
        }
        allocateSource(content) {
          const { buffer, byteLength } = this.allocateBuffer(content);
          const source = this.libzip.source.fromBuffer(this.zip, buffer, byteLength, 0, 1);
          if (source === 0) {
            this.libzip.free(buffer);
            throw this.makeLibzipError(this.libzip.getError(this.zip));
          }
          return source;
        }
        setFileSource(p, content) {
          const buffer = Buffer.isBuffer(content) ? content : Buffer.from(content);
          const target = fslib_6.ppath.relative(fslib_6.PortablePath.root, p);
          const lzSource = this.allocateSource(content);
          try {
            const newIndex = this.libzip.file.add(this.zip, target, lzSource, this.libzip.ZIP_FL_OVERWRITE);
            if (newIndex === -1)
              throw this.makeLibzipError(this.libzip.getError(this.zip));
            if (this.level !== `mixed`) {
              const method = this.level === 0 ? this.libzip.ZIP_CM_STORE : this.libzip.ZIP_CM_DEFLATE;
              const rc = this.libzip.file.setCompression(this.zip, newIndex, 0, method, this.level);
              if (rc === -1) {
                throw this.makeLibzipError(this.libzip.getError(this.zip));
              }
            }
            this.fileSources.set(newIndex, buffer);
            return newIndex;
          } catch (error) {
            this.libzip.source.free(lzSource);
            throw error;
          }
        }
        isSymbolicLink(index) {
          if (this.symlinkCount === 0)
            return false;
          const attrs = this.libzip.file.getExternalAttributes(this.zip, index, 0, 0, this.libzip.uint08S, this.libzip.uint32S);
          if (attrs === -1)
            throw this.makeLibzipError(this.libzip.getError(this.zip));
          const opsys = this.libzip.getValue(this.libzip.uint08S, `i8`) >>> 0;
          if (opsys !== this.libzip.ZIP_OPSYS_UNIX)
            return false;
          const attributes = this.libzip.getValue(this.libzip.uint32S, `i32`) >>> 16;
          return (attributes & fs_1.constants.S_IFMT) === fs_1.constants.S_IFLNK;
        }
        getFileSource(index, opts = { asyncDecompress: false }) {
          const cachedFileSource = this.fileSources.get(index);
          if (typeof cachedFileSource !== `undefined`)
            return cachedFileSource;
          const stat = this.libzip.struct.statS();
          const rc = this.libzip.statIndex(this.zip, index, 0, 0, stat);
          if (rc === -1)
            throw this.makeLibzipError(this.libzip.getError(this.zip));
          const size = this.libzip.struct.statCompSize(stat);
          const compressionMethod = this.libzip.struct.statCompMethod(stat);
          const buffer = this.libzip.malloc(size);
          try {
            const file = this.libzip.fopenIndex(this.zip, index, 0, this.libzip.ZIP_FL_COMPRESSED);
            if (file === 0)
              throw this.makeLibzipError(this.libzip.getError(this.zip));
            try {
              const rc2 = this.libzip.fread(file, buffer, size, 0);
              if (rc2 === -1)
                throw this.makeLibzipError(this.libzip.file.getError(file));
              else if (rc2 < size)
                throw new Error(`Incomplete read`);
              else if (rc2 > size)
                throw new Error(`Overread`);
              const memory = this.libzip.HEAPU8.subarray(buffer, buffer + size);
              const data = Buffer.from(memory);
              if (compressionMethod === 0) {
                this.fileSources.set(index, data);
                return data;
              } else if (opts.asyncDecompress) {
                return new Promise((resolve, reject) => {
                  zlib_1.default.inflateRaw(data, (error, result2) => {
                    if (error) {
                      reject(error);
                    } else {
                      this.fileSources.set(index, result2);
                      resolve(result2);
                    }
                  });
                });
              } else {
                const decompressedData = zlib_1.default.inflateRawSync(data);
                this.fileSources.set(index, decompressedData);
                return decompressedData;
              }
            } finally {
              this.libzip.fclose(file);
            }
          } finally {
            this.libzip.free(buffer);
          }
        }
        async fchmodPromise(fd, mask) {
          return this.chmodPromise(this.fdToPath(fd, `fchmod`), mask);
        }
        fchmodSync(fd, mask) {
          return this.chmodSync(this.fdToPath(fd, `fchmodSync`), mask);
        }
        async chmodPromise(p, mask) {
          return this.chmodSync(p, mask);
        }
        chmodSync(p, mask) {
          if (this.readOnly)
            throw fslib_5.errors.EROFS(`chmod '${p}'`);
          mask &= 493;
          const resolvedP = this.resolveFilename(`chmod '${p}'`, p, false);
          const entry = this.entries.get(resolvedP);
          if (typeof entry === `undefined`)
            throw new Error(`Assertion failed: The entry should have been registered (${resolvedP})`);
          const oldMod = this.getUnixMode(entry, fs_1.constants.S_IFREG | 0);
          const newMod = oldMod & ~511 | mask;
          const rc = this.libzip.file.setExternalAttributes(this.zip, entry, 0, 0, this.libzip.ZIP_OPSYS_UNIX, newMod << 16);
          if (rc === -1) {
            throw this.makeLibzipError(this.libzip.getError(this.zip));
          }
        }
        async fchownPromise(fd, uid, gid) {
          return this.chownPromise(this.fdToPath(fd, `fchown`), uid, gid);
        }
        fchownSync(fd, uid, gid) {
          return this.chownSync(this.fdToPath(fd, `fchownSync`), uid, gid);
        }
        async chownPromise(p, uid, gid) {
          return this.chownSync(p, uid, gid);
        }
        chownSync(p, uid, gid) {
          throw new Error(`Unimplemented`);
        }
        async renamePromise(oldP, newP) {
          return this.renameSync(oldP, newP);
        }
        renameSync(oldP, newP) {
          throw new Error(`Unimplemented`);
        }
        async copyFilePromise(sourceP, destP, flags) {
          const { indexSource, indexDest, resolvedDestP } = this.prepareCopyFile(sourceP, destP, flags);
          const source = await this.getFileSource(indexSource, { asyncDecompress: true });
          const newIndex = this.setFileSource(resolvedDestP, source);
          if (newIndex !== indexDest) {
            this.registerEntry(resolvedDestP, newIndex);
          }
        }
        copyFileSync(sourceP, destP, flags = 0) {
          const { indexSource, indexDest, resolvedDestP } = this.prepareCopyFile(sourceP, destP, flags);
          const source = this.getFileSource(indexSource);
          const newIndex = this.setFileSource(resolvedDestP, source);
          if (newIndex !== indexDest) {
            this.registerEntry(resolvedDestP, newIndex);
          }
        }
        prepareCopyFile(sourceP, destP, flags = 0) {
          if (this.readOnly)
            throw fslib_5.errors.EROFS(`copyfile '${sourceP} -> '${destP}'`);
          if ((flags & fs_1.constants.COPYFILE_FICLONE_FORCE) !== 0)
            throw fslib_5.errors.ENOSYS(`unsupported clone operation`, `copyfile '${sourceP}' -> ${destP}'`);
          const resolvedSourceP = this.resolveFilename(`copyfile '${sourceP} -> ${destP}'`, sourceP);
          const indexSource = this.entries.get(resolvedSourceP);
          if (typeof indexSource === `undefined`)
            throw fslib_5.errors.EINVAL(`copyfile '${sourceP}' -> '${destP}'`);
          const resolvedDestP = this.resolveFilename(`copyfile '${sourceP}' -> ${destP}'`, destP);
          const indexDest = this.entries.get(resolvedDestP);
          if ((flags & (fs_1.constants.COPYFILE_EXCL | fs_1.constants.COPYFILE_FICLONE_FORCE)) !== 0 && typeof indexDest !== `undefined`)
            throw fslib_5.errors.EEXIST(`copyfile '${sourceP}' -> '${destP}'`);
          return {
            indexSource,
            resolvedDestP,
            indexDest
          };
        }
        async appendFilePromise(p, content, opts) {
          if (this.readOnly)
            throw fslib_5.errors.EROFS(`open '${p}'`);
          if (typeof opts === `undefined`)
            opts = { flag: `a` };
          else if (typeof opts === `string`)
            opts = { flag: `a`, encoding: opts };
          else if (typeof opts.flag === `undefined`)
            opts = { flag: `a`, ...opts };
          return this.writeFilePromise(p, content, opts);
        }
        appendFileSync(p, content, opts = {}) {
          if (this.readOnly)
            throw fslib_5.errors.EROFS(`open '${p}'`);
          if (typeof opts === `undefined`)
            opts = { flag: `a` };
          else if (typeof opts === `string`)
            opts = { flag: `a`, encoding: opts };
          else if (typeof opts.flag === `undefined`)
            opts = { flag: `a`, ...opts };
          return this.writeFileSync(p, content, opts);
        }
        fdToPath(fd, reason) {
          const path2 = this.fds.get(fd)?.p;
          if (typeof path2 === `undefined`)
            throw fslib_5.errors.EBADF(reason);
          return path2;
        }
        async writeFilePromise(p, content, opts) {
          const { encoding, mode, index, resolvedP } = this.prepareWriteFile(p, opts);
          if (index !== undefined && typeof opts === `object` && opts.flag && opts.flag.includes(`a`))
            content = Buffer.concat([await this.getFileSource(index, { asyncDecompress: true }), Buffer.from(content)]);
          if (encoding !== null)
            content = content.toString(encoding);
          const newIndex = this.setFileSource(resolvedP, content);
          if (newIndex !== index)
            this.registerEntry(resolvedP, newIndex);
          if (mode !== null) {
            await this.chmodPromise(resolvedP, mode);
          }
        }
        writeFileSync(p, content, opts) {
          const { encoding, mode, index, resolvedP } = this.prepareWriteFile(p, opts);
          if (index !== undefined && typeof opts === `object` && opts.flag && opts.flag.includes(`a`))
            content = Buffer.concat([this.getFileSource(index), Buffer.from(content)]);
          if (encoding !== null)
            content = content.toString(encoding);
          const newIndex = this.setFileSource(resolvedP, content);
          if (newIndex !== index)
            this.registerEntry(resolvedP, newIndex);
          if (mode !== null) {
            this.chmodSync(resolvedP, mode);
          }
        }
        prepareWriteFile(p, opts) {
          if (typeof p === `number`)
            p = this.fdToPath(p, `read`);
          if (this.readOnly)
            throw fslib_5.errors.EROFS(`open '${p}'`);
          const resolvedP = this.resolveFilename(`open '${p}'`, p);
          if (this.listings.has(resolvedP))
            throw fslib_5.errors.EISDIR(`open '${p}'`);
          let encoding = null, mode = null;
          if (typeof opts === `string`) {
            encoding = opts;
          } else if (typeof opts === `object`) {
            ({
              encoding = null,
              mode = null
            } = opts);
          }
          const index = this.entries.get(resolvedP);
          return {
            encoding,
            mode,
            resolvedP,
            index
          };
        }
        async unlinkPromise(p) {
          return this.unlinkSync(p);
        }
        unlinkSync(p) {
          if (this.readOnly)
            throw fslib_5.errors.EROFS(`unlink '${p}'`);
          const resolvedP = this.resolveFilename(`unlink '${p}'`, p);
          if (this.listings.has(resolvedP))
            throw fslib_5.errors.EISDIR(`unlink '${p}'`);
          const index = this.entries.get(resolvedP);
          if (typeof index === `undefined`)
            throw fslib_5.errors.EINVAL(`unlink '${p}'`);
          this.deleteEntry(resolvedP, index);
        }
        async utimesPromise(p, atime, mtime) {
          return this.utimesSync(p, atime, mtime);
        }
        utimesSync(p, atime, mtime) {
          if (this.readOnly)
            throw fslib_5.errors.EROFS(`utimes '${p}'`);
          const resolvedP = this.resolveFilename(`utimes '${p}'`, p);
          this.utimesImpl(resolvedP, mtime);
        }
        async lutimesPromise(p, atime, mtime) {
          return this.lutimesSync(p, atime, mtime);
        }
        lutimesSync(p, atime, mtime) {
          if (this.readOnly)
            throw fslib_5.errors.EROFS(`lutimes '${p}'`);
          const resolvedP = this.resolveFilename(`utimes '${p}'`, p, false);
          this.utimesImpl(resolvedP, mtime);
        }
        utimesImpl(resolvedP, mtime) {
          if (this.listings.has(resolvedP)) {
            if (!this.entries.has(resolvedP))
              this.hydrateDirectory(resolvedP);
          }
          const entry = this.entries.get(resolvedP);
          if (entry === undefined)
            throw new Error(`Unreachable`);
          const rc = this.libzip.file.setMtime(this.zip, entry, 0, toUnixTimestamp(mtime), 0);
          if (rc === -1) {
            throw this.makeLibzipError(this.libzip.getError(this.zip));
          }
        }
        async mkdirPromise(p, opts) {
          return this.mkdirSync(p, opts);
        }
        mkdirSync(p, { mode = 493, recursive = false } = {}) {
          if (recursive)
            return this.mkdirpSync(p, { chmod: mode });
          if (this.readOnly)
            throw fslib_5.errors.EROFS(`mkdir '${p}'`);
          const resolvedP = this.resolveFilename(`mkdir '${p}'`, p);
          if (this.entries.has(resolvedP) || this.listings.has(resolvedP))
            throw fslib_5.errors.EEXIST(`mkdir '${p}'`);
          this.hydrateDirectory(resolvedP);
          this.chmodSync(resolvedP, mode);
          return;
        }
        async rmdirPromise(p, opts) {
          return this.rmdirSync(p, opts);
        }
        rmdirSync(p, { recursive = false } = {}) {
          if (this.readOnly)
            throw fslib_5.errors.EROFS(`rmdir '${p}'`);
          if (recursive) {
            this.removeSync(p);
            return;
          }
          const resolvedP = this.resolveFilename(`rmdir '${p}'`, p);
          const directoryListing = this.listings.get(resolvedP);
          if (!directoryListing)
            throw fslib_5.errors.ENOTDIR(`rmdir '${p}'`);
          if (directoryListing.size > 0)
            throw fslib_5.errors.ENOTEMPTY(`rmdir '${p}'`);
          const index = this.entries.get(resolvedP);
          if (typeof index === `undefined`)
            throw fslib_5.errors.EINVAL(`rmdir '${p}'`);
          this.deleteEntry(p, index);
        }
        async rmPromise(p, opts) {
          return this.rmSync(p, opts);
        }
        rmSync(p, { recursive = false } = {}) {
          if (this.readOnly)
            throw fslib_5.errors.EROFS(`rm '${p}'`);
          if (recursive) {
            this.removeSync(p);
            return;
          }
          const resolvedP = this.resolveFilename(`rm '${p}'`, p);
          const directoryListing = this.listings.get(resolvedP);
          if (!directoryListing)
            throw fslib_5.errors.ENOTDIR(`rm '${p}'`);
          if (directoryListing.size > 0)
            throw fslib_5.errors.ENOTEMPTY(`rm '${p}'`);
          const index = this.entries.get(resolvedP);
          if (typeof index === `undefined`)
            throw fslib_5.errors.EINVAL(`rm '${p}'`);
          this.deleteEntry(p, index);
        }
        hydrateDirectory(resolvedP) {
          const index = this.libzip.dir.add(this.zip, fslib_6.ppath.relative(fslib_6.PortablePath.root, resolvedP));
          if (index === -1)
            throw this.makeLibzipError(this.libzip.getError(this.zip));
          this.registerListing(resolvedP);
          this.registerEntry(resolvedP, index);
          return index;
        }
        async linkPromise(existingP, newP) {
          return this.linkSync(existingP, newP);
        }
        linkSync(existingP, newP) {
          throw fslib_5.errors.EOPNOTSUPP(`link '${existingP}' -> '${newP}'`);
        }
        async symlinkPromise(target, p) {
          return this.symlinkSync(target, p);
        }
        symlinkSync(target, p) {
          if (this.readOnly)
            throw fslib_5.errors.EROFS(`symlink '${target}' -> '${p}'`);
          const resolvedP = this.resolveFilename(`symlink '${target}' -> '${p}'`, p);
          if (this.listings.has(resolvedP))
            throw fslib_5.errors.EISDIR(`symlink '${target}' -> '${p}'`);
          if (this.entries.has(resolvedP))
            throw fslib_5.errors.EEXIST(`symlink '${target}' -> '${p}'`);
          const index = this.setFileSource(resolvedP, target);
          this.registerEntry(resolvedP, index);
          const rc = this.libzip.file.setExternalAttributes(this.zip, index, 0, 0, this.libzip.ZIP_OPSYS_UNIX, (fs_1.constants.S_IFLNK | 511) << 16);
          if (rc === -1)
            throw this.makeLibzipError(this.libzip.getError(this.zip));
          this.symlinkCount += 1;
        }
        async readFilePromise(p, encoding) {
          if (typeof encoding === `object`)
            encoding = encoding ? encoding.encoding : undefined;
          const data = await this.readFileBuffer(p, { asyncDecompress: true });
          return encoding ? data.toString(encoding) : data;
        }
        readFileSync(p, encoding) {
          if (typeof encoding === `object`)
            encoding = encoding ? encoding.encoding : undefined;
          const data = this.readFileBuffer(p);
          return encoding ? data.toString(encoding) : data;
        }
        readFileBuffer(p, opts = { asyncDecompress: false }) {
          if (typeof p === `number`)
            p = this.fdToPath(p, `read`);
          const resolvedP = this.resolveFilename(`open '${p}'`, p);
          if (!this.entries.has(resolvedP) && !this.listings.has(resolvedP))
            throw fslib_5.errors.ENOENT(`open '${p}'`);
          if (p[p.length - 1] === `/` && !this.listings.has(resolvedP))
            throw fslib_5.errors.ENOTDIR(`open '${p}'`);
          if (this.listings.has(resolvedP))
            throw fslib_5.errors.EISDIR(`read`);
          const entry = this.entries.get(resolvedP);
          if (entry === undefined)
            throw new Error(`Unreachable`);
          return this.getFileSource(entry, opts);
        }
        async readdirPromise(p, opts) {
          return this.readdirSync(p, opts);
        }
        readdirSync(p, opts) {
          const resolvedP = this.resolveFilename(`scandir '${p}'`, p);
          if (!this.entries.has(resolvedP) && !this.listings.has(resolvedP))
            throw fslib_5.errors.ENOENT(`scandir '${p}'`);
          const directoryListing = this.listings.get(resolvedP);
          if (!directoryListing)
            throw fslib_5.errors.ENOTDIR(`scandir '${p}'`);
          if (opts?.recursive) {
            if (opts?.withFileTypes) {
              const entries = Array.from(directoryListing, (name) => {
                return Object.assign(this.statImpl(`lstat`, fslib_6.ppath.join(p, name)), {
                  name,
                  path: fslib_6.PortablePath.dot
                });
              });
              for (const entry of entries) {
                if (!entry.isDirectory())
                  continue;
                const subPath = fslib_6.ppath.join(entry.path, entry.name);
                const subListing = this.listings.get(fslib_6.ppath.join(resolvedP, subPath));
                for (const child of subListing) {
                  entries.push(Object.assign(this.statImpl(`lstat`, fslib_6.ppath.join(p, subPath, child)), {
                    name: child,
                    path: subPath
                  }));
                }
              }
              return entries;
            } else {
              const entries = [...directoryListing];
              for (const subPath of entries) {
                const subListing = this.listings.get(fslib_6.ppath.join(resolvedP, subPath));
                if (typeof subListing === `undefined`)
                  continue;
                for (const child of subListing) {
                  entries.push(fslib_6.ppath.join(subPath, child));
                }
              }
              return entries;
            }
          } else if (opts?.withFileTypes) {
            return Array.from(directoryListing, (name) => {
              return Object.assign(this.statImpl(`lstat`, fslib_6.ppath.join(p, name)), {
                name,
                path: undefined
              });
            });
          } else {
            return [...directoryListing];
          }
        }
        async readlinkPromise(p) {
          const entry = this.prepareReadlink(p);
          return (await this.getFileSource(entry, { asyncDecompress: true })).toString();
        }
        readlinkSync(p) {
          const entry = this.prepareReadlink(p);
          return this.getFileSource(entry).toString();
        }
        prepareReadlink(p) {
          const resolvedP = this.resolveFilename(`readlink '${p}'`, p, false);
          if (!this.entries.has(resolvedP) && !this.listings.has(resolvedP))
            throw fslib_5.errors.ENOENT(`readlink '${p}'`);
          if (p[p.length - 1] === `/` && !this.listings.has(resolvedP))
            throw fslib_5.errors.ENOTDIR(`open '${p}'`);
          if (this.listings.has(resolvedP))
            throw fslib_5.errors.EINVAL(`readlink '${p}'`);
          const entry = this.entries.get(resolvedP);
          if (entry === undefined)
            throw new Error(`Unreachable`);
          if (!this.isSymbolicLink(entry))
            throw fslib_5.errors.EINVAL(`readlink '${p}'`);
          return entry;
        }
        async truncatePromise(p, len = 0) {
          const resolvedP = this.resolveFilename(`open '${p}'`, p);
          const index = this.entries.get(resolvedP);
          if (typeof index === `undefined`)
            throw fslib_5.errors.EINVAL(`open '${p}'`);
          const source = await this.getFileSource(index, { asyncDecompress: true });
          const truncated = Buffer.alloc(len, 0);
          source.copy(truncated);
          return await this.writeFilePromise(p, truncated);
        }
        truncateSync(p, len = 0) {
          const resolvedP = this.resolveFilename(`open '${p}'`, p);
          const index = this.entries.get(resolvedP);
          if (typeof index === `undefined`)
            throw fslib_5.errors.EINVAL(`open '${p}'`);
          const source = this.getFileSource(index);
          const truncated = Buffer.alloc(len, 0);
          source.copy(truncated);
          return this.writeFileSync(p, truncated);
        }
        async ftruncatePromise(fd, len) {
          return this.truncatePromise(this.fdToPath(fd, `ftruncate`), len);
        }
        ftruncateSync(fd, len) {
          return this.truncateSync(this.fdToPath(fd, `ftruncateSync`), len);
        }
        watch(p, a, b) {
          let persistent;
          switch (typeof a) {
            case `function`:
            case `string`:
            case `undefined`:
              {
                persistent = true;
              }
              break;
            default:
              {
                ({ persistent = true } = a);
              }
              break;
          }
          if (!persistent)
            return { on: () => {
            }, close: () => {
            } };
          const interval = setInterval(() => {
          }, 24 * 60 * 60 * 1000);
          return { on: () => {
          }, close: () => {
            clearInterval(interval);
          } };
        }
        watchFile(p, a, b) {
          const resolvedP = fslib_6.ppath.resolve(fslib_6.PortablePath.root, p);
          return (0, fslib_4.watchFile)(this, resolvedP, a, b);
        }
        unwatchFile(p, cb) {
          const resolvedP = fslib_6.ppath.resolve(fslib_6.PortablePath.root, p);
          return (0, fslib_4.unwatchFile)(this, resolvedP, cb);
        }
      };
      exports22.ZipFS = ZipFS;
    }
  });
  var require_mountMemoryDrive = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+libzip@3.1.0_@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/libzip/lib/mountMemoryDrive.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.mountMemoryDrive = mountMemoryDrive;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var fslib_12 = require_lib();
      var fs_1 = tslib_12.__importDefault(__require("fs"));
      var ZipFS_1 = require_ZipFS();
      function mountMemoryDrive(origFs, mountPoint, source = Buffer.alloc(0), opts) {
        const archive = new ZipFS_1.ZipFS(source);
        const getMountPoint = (p) => {
          const detectedMountPoint = p === mountPoint || p.startsWith(`${mountPoint}/`) ? p.slice(0, mountPoint.length) : null;
          return detectedMountPoint;
        };
        const factoryPromise = async (baseFs, p) => {
          return () => archive;
        };
        const factorySync = (baseFs, p) => {
          return archive;
        };
        const localFs = { ...origFs };
        const nodeFs = new fslib_12.NodeFS(localFs);
        const mountFs = new fslib_12.MountFS({
          baseFs: nodeFs,
          getMountPoint,
          factoryPromise,
          factorySync,
          magicByte: 21,
          maxAge: Infinity,
          typeCheck: opts?.typeCheck
        });
        (0, fslib_12.patchFs)(fs_1.default, new fslib_12.PosixFS(mountFs));
        return archive;
      }
    }
  });
  var require_common4 = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+libzip@3.1.0_@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/libzip/lib/common.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.mountMemoryDrive = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      tslib_12.__exportStar(require_ZipOpenFS(), exports22);
      tslib_12.__exportStar(require_ZipFS(), exports22);
      var mountMemoryDrive_1 = require_mountMemoryDrive();
      Object.defineProperty(exports22, "mountMemoryDrive", { enumerable: true, get: function() {
        return mountMemoryDrive_1.mountMemoryDrive;
      } });
    }
  });
  var require_sync7 = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+libzip@3.1.0_@yarnpkg+fslib@3.1.1/node_modules/@yarnpkg/libzip/lib/sync.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.getLibzipSync = getLibzipSync;
      exports22.getLibzipPromise = getLibzipPromise;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var instance_1 = require_instance();
      var libzipSync_1 = tslib_12.__importDefault(require_libzipSync());
      var makeInterface_1 = require_makeInterface();
      tslib_12.__exportStar(require_common4(), exports22);
      (0, instance_1.setFactory)(() => {
        const emZip = (0, libzipSync_1.default)();
        return (0, makeInterface_1.makeInterface)(emZip);
      });
      function getLibzipSync() {
        return (0, instance_1.getInstance)();
      }
      async function getLibzipPromise() {
        return (0, instance_1.getInstance)();
      }
    }
  });
  var require_entry3 = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+shell@4.1.1_typanion@3.14.0/node_modules/@yarnpkg/shell/lib/commands/entry.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var fslib_12 = require_lib();
      var clipanion_12 = require_advanced();
      var index_1 = require_lib4();
      var EntryCommand = class extends clipanion_12.Command {
        constructor() {
          super(...arguments);
          this.cwd = clipanion_12.Option.String(`--cwd`, process.cwd(), {
            description: `The directory to run the command in`
          });
          this.commandName = clipanion_12.Option.String();
          this.args = clipanion_12.Option.Proxy();
        }
        async execute() {
          const command = this.args.length > 0 ? `${this.commandName} ${this.args.join(` `)}` : this.commandName;
          return await (0, index_1.execute)(command, [], {
            cwd: fslib_12.npath.toPortablePath(this.cwd),
            stdin: this.context.stdin,
            stdout: this.context.stdout,
            stderr: this.context.stderr
          });
        }
      };
      EntryCommand.usage = {
        description: `run a command using yarn's portable shell`,
        details: `
      This command will run a command using Yarn's portable shell.

      Make sure to escape glob patterns, redirections, and other features that might be expanded by your own shell.

      Note: To escape something from Yarn's shell, you might have to escape it twice, the first time from your own shell.

      Note: Don't use this command in Yarn scripts, as Yarn's shell is automatically used.

      For a list of features, visit: https://github.com/yarnpkg/berry/blob/master/packages/yarnpkg-shell/README.md.
    `,
        examples: [[
          `Run a simple command`,
          `$0 echo Hello`
        ], [
          `Run a command with a glob pattern`,
          `$0 echo '*.js'`
        ], [
          `Run a command with a redirection`,
          `$0 echo Hello World '>' hello.txt`
        ], [
          `Run a command with an escaped glob pattern (The double escape is needed in Unix shells)`,
          `$0 echo '"*.js"'`
        ], [
          `Run a command with a variable (Double quotes are needed in Unix shells, to prevent them from expanding the variable)`,
          `$0 "GREETING=Hello echo $GREETING World"`
        ]]
      };
      exports22.default = EntryCommand;
    }
  });
  var require_errors4 = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+shell@4.1.1_typanion@3.14.0/node_modules/@yarnpkg/shell/lib/errors.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.ShellError = undefined;
      var ShellError = class extends Error {
        constructor(message) {
          super(message);
          this.name = `ShellError`;
        }
      };
      exports22.ShellError = ShellError;
    }
  });
  var require_globUtils = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+shell@4.1.1_typanion@3.14.0/node_modules/@yarnpkg/shell/lib/globUtils.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.fastGlobOptions = exports22.micromatchOptions = undefined;
      exports22.isGlobPattern = isGlobPattern;
      exports22.match = match;
      exports22.isBraceExpansion = isBraceExpansion;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var fslib_12 = require_lib();
      var fast_glob_1 = tslib_12.__importDefault(require_out4());
      var fs_1 = tslib_12.__importDefault(__require("fs"));
      var micromatch_12 = tslib_12.__importDefault(require_micromatch());
      exports22.micromatchOptions = {
        strictBrackets: true
      };
      exports22.fastGlobOptions = {
        onlyDirectories: false,
        onlyFiles: false
      };
      function isGlobPattern(pattern) {
        if (!micromatch_12.default.scan(pattern, exports22.micromatchOptions).isGlob)
          return false;
        try {
          micromatch_12.default.parse(pattern, exports22.micromatchOptions);
        } catch {
          return false;
        }
        return true;
      }
      function match(pattern, { cwd, baseFs }) {
        return (0, fast_glob_1.default)(pattern, {
          ...exports22.fastGlobOptions,
          cwd: fslib_12.npath.fromPortablePath(cwd),
          fs: (0, fslib_12.extendFs)(fs_1.default, new fslib_12.PosixFS(baseFs))
        });
      }
      function isBraceExpansion(pattern) {
        return micromatch_12.default.scan(pattern, exports22.micromatchOptions).isBrace;
      }
    }
  });
  var require_pipe = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+shell@4.1.1_typanion@3.14.0/node_modules/@yarnpkg/shell/lib/pipe.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.Handle = exports22.ProtectedStream = exports22.Pipe = undefined;
      exports22.makeProcess = makeProcess;
      exports22.makeBuiltin = makeBuiltin;
      exports22.start = start;
      exports22.createOutputStreamsWithPrefix = createOutputStreamsWithPrefix;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var cross_spawn_1 = tslib_12.__importDefault(require_cross_spawn());
      var stream_12 = __require("stream");
      var string_decoder_1 = __require("string_decoder");
      var Pipe;
      (function(Pipe2) {
        Pipe2[Pipe2["STDIN"] = 0] = "STDIN";
        Pipe2[Pipe2["STDOUT"] = 1] = "STDOUT";
        Pipe2[Pipe2["STDERR"] = 2] = "STDERR";
      })(Pipe || (exports22.Pipe = Pipe = {}));
      var activeChildren = /* @__PURE__ */ new Set;
      function sigintHandler() {
      }
      function sigtermHandler() {
        for (const child of activeChildren) {
          child.kill();
        }
      }
      function makeProcess(name, args, opts, spawnOpts) {
        return (stdio) => {
          const stdin = stdio[0] instanceof stream_12.Transform ? `pipe` : stdio[0];
          const stdout = stdio[1] instanceof stream_12.Transform ? `pipe` : stdio[1];
          const stderr = stdio[2] instanceof stream_12.Transform ? `pipe` : stdio[2];
          const child = (0, cross_spawn_1.default)(name, args, { ...spawnOpts, stdio: [
            stdin,
            stdout,
            stderr
          ] });
          activeChildren.add(child);
          if (activeChildren.size === 1) {
            process.on(`SIGINT`, sigintHandler);
            process.on(`SIGTERM`, sigtermHandler);
          }
          if (stdio[0] instanceof stream_12.Transform)
            stdio[0].pipe(child.stdin);
          if (stdio[1] instanceof stream_12.Transform)
            child.stdout.pipe(stdio[1], { end: false });
          if (stdio[2] instanceof stream_12.Transform)
            child.stderr.pipe(stdio[2], { end: false });
          return {
            stdin: child.stdin,
            promise: new Promise((resolve) => {
              child.on(`error`, (error) => {
                activeChildren.delete(child);
                if (activeChildren.size === 0) {
                  process.off(`SIGINT`, sigintHandler);
                  process.off(`SIGTERM`, sigtermHandler);
                }
                switch (error.code) {
                  case `ENOENT`:
                    {
                      stdio[2].write(`command not found: ${name}
`);
                      resolve(127);
                    }
                    break;
                  case `EACCES`:
                    {
                      stdio[2].write(`permission denied: ${name}
`);
                      resolve(128);
                    }
                    break;
                  default:
                    {
                      stdio[2].write(`uncaught error: ${error.message}
`);
                      resolve(1);
                    }
                    break;
                }
              });
              child.on(`close`, (code) => {
                activeChildren.delete(child);
                if (activeChildren.size === 0) {
                  process.off(`SIGINT`, sigintHandler);
                  process.off(`SIGTERM`, sigtermHandler);
                }
                if (code !== null) {
                  resolve(code);
                } else {
                  resolve(129);
                }
              });
            })
          };
        };
      }
      function makeBuiltin(builtin) {
        return (stdio) => {
          const stdin = stdio[0] === `pipe` ? new stream_12.PassThrough : stdio[0];
          return {
            stdin,
            promise: Promise.resolve().then(() => builtin({
              stdin,
              stdout: stdio[1],
              stderr: stdio[2]
            }))
          };
        };
      }
      var ProtectedStream = class {
        constructor(stream) {
          this.stream = stream;
        }
        close() {
        }
        get() {
          return this.stream;
        }
      };
      exports22.ProtectedStream = ProtectedStream;
      var PipeStream = class {
        constructor() {
          this.stream = null;
        }
        close() {
          if (this.stream === null) {
            throw new Error(`Assertion failed: No stream attached`);
          } else {
            this.stream.end();
          }
        }
        attach(stream) {
          this.stream = stream;
        }
        get() {
          if (this.stream === null) {
            throw new Error(`Assertion failed: No stream attached`);
          } else {
            return this.stream;
          }
        }
      };
      var Handle = class _Handle {
        static start(implementation, { stdin, stdout, stderr }) {
          const chain = new _Handle(null, implementation);
          chain.stdin = stdin;
          chain.stdout = stdout;
          chain.stderr = stderr;
          return chain;
        }
        constructor(ancestor, implementation) {
          this.stdin = null;
          this.stdout = null;
          this.stderr = null;
          this.pipe = null;
          this.ancestor = ancestor;
          this.implementation = implementation;
        }
        pipeTo(implementation, source = Pipe.STDOUT) {
          const next = new _Handle(this, implementation);
          const pipe = new PipeStream;
          next.pipe = pipe;
          next.stdout = this.stdout;
          next.stderr = this.stderr;
          if ((source & Pipe.STDOUT) === Pipe.STDOUT)
            this.stdout = pipe;
          else if (this.ancestor !== null)
            this.stderr = this.ancestor.stdout;
          if ((source & Pipe.STDERR) === Pipe.STDERR)
            this.stderr = pipe;
          else if (this.ancestor !== null)
            this.stderr = this.ancestor.stderr;
          return next;
        }
        async exec() {
          const stdio = [
            `ignore`,
            `ignore`,
            `ignore`
          ];
          if (this.pipe) {
            stdio[0] = `pipe`;
          } else {
            if (this.stdin === null) {
              throw new Error(`Assertion failed: No input stream registered`);
            } else {
              stdio[0] = this.stdin.get();
            }
          }
          let stdoutLock;
          if (this.stdout === null) {
            throw new Error(`Assertion failed: No output stream registered`);
          } else {
            stdoutLock = this.stdout;
            stdio[1] = stdoutLock.get();
          }
          let stderrLock;
          if (this.stderr === null) {
            throw new Error(`Assertion failed: No error stream registered`);
          } else {
            stderrLock = this.stderr;
            stdio[2] = stderrLock.get();
          }
          const child = this.implementation(stdio);
          if (this.pipe)
            this.pipe.attach(child.stdin);
          return await child.promise.then((code) => {
            stdoutLock.close();
            stderrLock.close();
            return code;
          });
        }
        async run() {
          const promises = [];
          for (let handle = this;handle; handle = handle.ancestor)
            promises.push(handle.exec());
          const exitCodes = await Promise.all(promises);
          return exitCodes[0];
        }
      };
      exports22.Handle = Handle;
      function start(p, opts) {
        return Handle.start(p, opts);
      }
      function createStreamReporter(reportFn, prefix = null) {
        const stream = new stream_12.PassThrough;
        const decoder = new string_decoder_1.StringDecoder;
        let buffer = ``;
        stream.on(`data`, (chunk) => {
          let chunkStr = decoder.write(chunk);
          let lineIndex;
          do {
            lineIndex = chunkStr.indexOf(`
`);
            if (lineIndex !== -1) {
              const line = buffer + chunkStr.substring(0, lineIndex);
              chunkStr = chunkStr.substring(lineIndex + 1);
              buffer = ``;
              if (prefix !== null) {
                reportFn(`${prefix} ${line}`);
              } else {
                reportFn(line);
              }
            }
          } while (lineIndex !== -1);
          buffer += chunkStr;
        });
        stream.on(`end`, () => {
          const last = decoder.end();
          if (last !== ``) {
            if (prefix !== null) {
              reportFn(`${prefix} ${last}`);
            } else {
              reportFn(last);
            }
          }
        });
        return stream;
      }
      function createOutputStreamsWithPrefix(state, { prefix }) {
        return {
          stdout: createStreamReporter((text) => state.stdout.write(`${text}
`), state.stdout.isTTY ? prefix : null),
          stderr: createStreamReporter((text) => state.stderr.write(`${text}
`), state.stderr.isTTY ? prefix : null)
        };
      }
    }
  });
  var require_lib4 = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+shell@4.1.1_typanion@3.14.0/node_modules/@yarnpkg/shell/lib/index.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.globUtils = exports22.ShellError = exports22.EntryCommand = undefined;
      exports22.execute = execute;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var fslib_12 = require_lib();
      var parsers_1 = require_lib2();
      var chalk_1 = tslib_12.__importDefault(require_source());
      var os_1 = __require("os");
      var stream_12 = __require("stream");
      var promises_1 = __require("timers/promises");
      var entry_1 = tslib_12.__importDefault(require_entry3());
      exports22.EntryCommand = entry_1.default;
      var errors_1 = require_errors4();
      Object.defineProperty(exports22, "ShellError", { enumerable: true, get: function() {
        return errors_1.ShellError;
      } });
      var globUtils = tslib_12.__importStar(require_globUtils());
      exports22.globUtils = globUtils;
      var pipe_1 = require_pipe();
      var pipe_2 = require_pipe();
      var StreamType;
      (function(StreamType2) {
        StreamType2[StreamType2["Readable"] = 1] = "Readable";
        StreamType2[StreamType2["Writable"] = 2] = "Writable";
      })(StreamType || (StreamType = {}));
      function getFileDescriptorStream(fd, type, state) {
        const stream = new stream_12.PassThrough({ autoDestroy: true });
        switch (fd) {
          case pipe_2.Pipe.STDIN:
            {
              if ((type & StreamType.Readable) === StreamType.Readable)
                state.stdin.pipe(stream, { end: false });
              if ((type & StreamType.Writable) === StreamType.Writable && state.stdin instanceof stream_12.Writable) {
                stream.pipe(state.stdin, { end: false });
              }
            }
            break;
          case pipe_2.Pipe.STDOUT:
            {
              if ((type & StreamType.Readable) === StreamType.Readable)
                state.stdout.pipe(stream, { end: false });
              if ((type & StreamType.Writable) === StreamType.Writable) {
                stream.pipe(state.stdout, { end: false });
              }
            }
            break;
          case pipe_2.Pipe.STDERR:
            {
              if ((type & StreamType.Readable) === StreamType.Readable)
                state.stderr.pipe(stream, { end: false });
              if ((type & StreamType.Writable) === StreamType.Writable) {
                stream.pipe(state.stderr, { end: false });
              }
            }
            break;
          default: {
            throw new errors_1.ShellError(`Bad file descriptor: "${fd}"`);
          }
        }
        return stream;
      }
      function cloneState(state, mergeWith = {}) {
        const newState = { ...state, ...mergeWith };
        newState.environment = { ...state.environment, ...mergeWith.environment };
        newState.variables = { ...state.variables, ...mergeWith.variables };
        return newState;
      }
      var BUILTINS = /* @__PURE__ */ new Map([
        [`cd`, async ([target = (0, os_1.homedir)(), ...rest], opts, state) => {
          const resolvedTarget = fslib_12.ppath.resolve(state.cwd, fslib_12.npath.toPortablePath(target));
          const stat = await opts.baseFs.statPromise(resolvedTarget).catch((error) => {
            throw error.code === `ENOENT` ? new errors_1.ShellError(`cd: no such file or directory: ${target}`) : error;
          });
          if (!stat.isDirectory())
            throw new errors_1.ShellError(`cd: not a directory: ${target}`);
          state.cwd = resolvedTarget;
          return 0;
        }],
        [`pwd`, async (args, opts, state) => {
          state.stdout.write(`${fslib_12.npath.fromPortablePath(state.cwd)}
`);
          return 0;
        }],
        [`:`, async (args, opts, state) => {
          return 0;
        }],
        [`true`, async (args, opts, state) => {
          return 0;
        }],
        [`false`, async (args, opts, state) => {
          return 1;
        }],
        [`exit`, async ([code, ...rest], opts, state) => {
          return state.exitCode = parseInt(code ?? state.variables[`?`], 10);
        }],
        [`echo`, async (args, opts, state) => {
          state.stdout.write(`${args.join(` `)}
`);
          return 0;
        }],
        [`sleep`, async ([time], opts, state) => {
          if (typeof time === `undefined`)
            throw new errors_1.ShellError(`sleep: missing operand`);
          const seconds = Number(time);
          if (Number.isNaN(seconds))
            throw new errors_1.ShellError(`sleep: invalid time interval '${time}'`);
          return await (0, promises_1.setTimeout)(1000 * seconds, 0);
        }],
        [`unset`, async (args, opts, state) => {
          for (const name of args) {
            delete state.environment[name];
            delete state.variables[name];
          }
          return 0;
        }],
        [`__ysh_run_procedure`, async (args, opts, state) => {
          const procedure = state.procedures[args[0]];
          const exitCode = await (0, pipe_2.start)(procedure, {
            stdin: new pipe_2.ProtectedStream(state.stdin),
            stdout: new pipe_2.ProtectedStream(state.stdout),
            stderr: new pipe_2.ProtectedStream(state.stderr)
          }).run();
          return exitCode;
        }],
        [`__ysh_set_redirects`, async (args, opts, state) => {
          let stdin = state.stdin;
          let stdout = state.stdout;
          let stderr = state.stderr;
          const inputs = [];
          const outputs = [];
          const errors = [];
          let t = 0;
          while (args[t] !== `--`) {
            const key = args[t++];
            const { type, fd } = JSON.parse(key);
            const pushInput = (readableFactory) => {
              switch (fd) {
                case null:
                case 0:
                  {
                    inputs.push(readableFactory);
                  }
                  break;
                default:
                  throw new Error(`Unsupported file descriptor: "${fd}"`);
              }
            };
            const pushOutput = (writable) => {
              switch (fd) {
                case null:
                case 1:
                  {
                    outputs.push(writable);
                  }
                  break;
                case 2:
                  {
                    errors.push(writable);
                  }
                  break;
                default:
                  throw new Error(`Unsupported file descriptor: "${fd}"`);
              }
            };
            const count = Number(args[t++]);
            const last = t + count;
            for (let u = t;u < last; ++t, ++u) {
              switch (type) {
                case `<`:
                  {
                    pushInput(() => {
                      return opts.baseFs.createReadStream(fslib_12.ppath.resolve(state.cwd, fslib_12.npath.toPortablePath(args[u])));
                    });
                  }
                  break;
                case `<<<`:
                  {
                    pushInput(() => {
                      const input = new stream_12.PassThrough;
                      process.nextTick(() => {
                        input.write(`${args[u]}
`);
                        input.end();
                      });
                      return input;
                    });
                  }
                  break;
                case `<&`:
                  {
                    pushInput(() => getFileDescriptorStream(Number(args[u]), StreamType.Readable, state));
                  }
                  break;
                case `>`:
                case `>>`:
                  {
                    const outputPath = fslib_12.ppath.resolve(state.cwd, fslib_12.npath.toPortablePath(args[u]));
                    if (outputPath === `/dev/null`) {
                      pushOutput(new stream_12.Writable({
                        autoDestroy: true,
                        emitClose: true,
                        write(chunk, encoding, callback) {
                          setImmediate(callback);
                        }
                      }));
                    } else {
                      pushOutput(opts.baseFs.createWriteStream(outputPath, type === `>>` ? { flags: `a` } : undefined));
                    }
                  }
                  break;
                case `>&`:
                  {
                    pushOutput(getFileDescriptorStream(Number(args[u]), StreamType.Writable, state));
                  }
                  break;
                default: {
                  throw new Error(`Assertion failed: Unsupported redirection type: "${type}"`);
                }
              }
            }
          }
          if (inputs.length > 0) {
            const pipe = new stream_12.PassThrough;
            stdin = pipe;
            const bindInput = (n) => {
              if (n === inputs.length) {
                pipe.end();
              } else {
                const input = inputs[n]();
                input.pipe(pipe, { end: false });
                input.on(`end`, () => {
                  bindInput(n + 1);
                });
              }
            };
            bindInput(0);
          }
          if (outputs.length > 0) {
            const pipe = new stream_12.PassThrough;
            stdout = pipe;
            for (const output of outputs) {
              pipe.pipe(output);
            }
          }
          if (errors.length > 0) {
            const pipe = new stream_12.PassThrough;
            stderr = pipe;
            for (const error of errors) {
              pipe.pipe(error);
            }
          }
          const exitCode = await (0, pipe_2.start)(makeCommandAction(args.slice(t + 1), opts, state), {
            stdin: new pipe_2.ProtectedStream(stdin),
            stdout: new pipe_2.ProtectedStream(stdout),
            stderr: new pipe_2.ProtectedStream(stderr)
          }).run();
          await Promise.all(outputs.map((output) => {
            return new Promise((resolve, reject) => {
              output.on(`error`, (error) => {
                reject(error);
              });
              output.on(`close`, () => {
                resolve();
              });
              output.end();
            });
          }));
          await Promise.all(errors.map((err) => {
            return new Promise((resolve, reject) => {
              err.on(`error`, (error) => {
                reject(error);
              });
              err.on(`close`, () => {
                resolve();
              });
              err.end();
            });
          }));
          return exitCode;
        }]
      ]);
      async function executeBufferedSubshell(ast, opts, state) {
        const chunks = [];
        const stdout = new stream_12.PassThrough;
        stdout.on(`data`, (chunk) => chunks.push(chunk));
        await executeShellLine(ast, opts, cloneState(state, { stdout }));
        return Buffer.concat(chunks).toString().replace(/[\r\n]+$/, ``);
      }
      async function applyEnvVariables(environmentSegments, opts, state) {
        const envPromises = environmentSegments.map(async (envSegment) => {
          const interpolatedArgs = await interpolateArguments(envSegment.args, opts, state);
          return {
            name: envSegment.name,
            value: interpolatedArgs.join(` `)
          };
        });
        const interpolatedEnvs = await Promise.all(envPromises);
        return interpolatedEnvs.reduce((envs, env) => {
          envs[env.name] = env.value;
          return envs;
        }, {});
      }
      function split(raw) {
        return raw.match(/[^ \r\n\t]+/g) || [];
      }
      async function evaluateVariable(segment, opts, state, push, pushAndClose = push) {
        switch (segment.name) {
          case `$`:
            {
              push(String(process.pid));
            }
            break;
          case `#`:
            {
              push(String(opts.args.length));
            }
            break;
          case `@`:
            {
              if (segment.quoted) {
                for (const raw of opts.args) {
                  pushAndClose(raw);
                }
              } else {
                for (const raw of opts.args) {
                  const parts = split(raw);
                  for (let t = 0;t < parts.length - 1; ++t)
                    pushAndClose(parts[t]);
                  push(parts[parts.length - 1]);
                }
              }
            }
            break;
          case `*`:
            {
              const raw = opts.args.join(` `);
              if (segment.quoted) {
                push(raw);
              } else {
                for (const part of split(raw)) {
                  pushAndClose(part);
                }
              }
            }
            break;
          case `PPID`:
            {
              push(String(process.ppid));
            }
            break;
          case `RANDOM`:
            {
              push(String(Math.floor(Math.random() * 32768)));
            }
            break;
          default:
            {
              const argIndex = parseInt(segment.name, 10);
              let raw;
              const isArgument = Number.isFinite(argIndex);
              if (isArgument) {
                if (argIndex >= 0 && argIndex < opts.args.length) {
                  raw = opts.args[argIndex];
                }
              } else {
                if (Object.hasOwn(state.variables, segment.name)) {
                  raw = state.variables[segment.name];
                } else if (Object.hasOwn(state.environment, segment.name)) {
                  raw = state.environment[segment.name];
                }
              }
              if (typeof raw !== `undefined` && segment.alternativeValue) {
                raw = (await interpolateArguments(segment.alternativeValue, opts, state)).join(` `);
              } else if (typeof raw === `undefined`) {
                if (segment.defaultValue) {
                  raw = (await interpolateArguments(segment.defaultValue, opts, state)).join(` `);
                } else if (segment.alternativeValue) {
                  raw = ``;
                }
              }
              if (typeof raw === `undefined`) {
                if (isArgument)
                  throw new errors_1.ShellError(`Unbound argument #${argIndex}`);
                throw new errors_1.ShellError(`Unbound variable "${segment.name}"`);
              }
              if (segment.quoted) {
                push(raw);
              } else {
                const parts = split(raw);
                for (let t = 0;t < parts.length - 1; ++t)
                  pushAndClose(parts[t]);
                const part = parts[parts.length - 1];
                if (typeof part !== `undefined`) {
                  push(part);
                }
              }
            }
            break;
        }
      }
      var operators = {
        addition: (left, right) => left + right,
        subtraction: (left, right) => left - right,
        multiplication: (left, right) => left * right,
        division: (left, right) => Math.trunc(left / right)
      };
      async function evaluateArithmetic(arithmetic, opts, state) {
        if (arithmetic.type === `number`) {
          if (!Number.isInteger(arithmetic.value)) {
            throw new Error(`Invalid number: "${arithmetic.value}", only integers are allowed`);
          } else {
            return arithmetic.value;
          }
        } else if (arithmetic.type === `variable`) {
          const parts = [];
          await evaluateVariable({ ...arithmetic, quoted: true }, opts, state, (result2) => parts.push(result2));
          const number = Number(parts.join(` `));
          if (Number.isNaN(number)) {
            return evaluateArithmetic({ type: `variable`, name: parts.join(` `) }, opts, state);
          } else {
            return evaluateArithmetic({ type: `number`, value: number }, opts, state);
          }
        } else {
          return operators[arithmetic.type](await evaluateArithmetic(arithmetic.left, opts, state), await evaluateArithmetic(arithmetic.right, opts, state));
        }
      }
      async function interpolateArguments(commandArgs, opts, state) {
        const redirections = /* @__PURE__ */ new Map;
        const interpolated = [];
        let interpolatedSegments = [];
        const push = (segment) => {
          interpolatedSegments.push(segment);
        };
        const close = () => {
          if (interpolatedSegments.length > 0)
            interpolated.push(interpolatedSegments.join(``));
          interpolatedSegments = [];
        };
        const pushAndClose = (segment) => {
          push(segment);
          close();
        };
        const redirect = (type, fd, target) => {
          const key = JSON.stringify({ type, fd });
          let targets = redirections.get(key);
          if (typeof targets === `undefined`)
            redirections.set(key, targets = []);
          targets.push(target);
        };
        for (const commandArg of commandArgs) {
          let isGlob = false;
          switch (commandArg.type) {
            case `redirection`:
              {
                const interpolatedArgs = await interpolateArguments(commandArg.args, opts, state);
                for (const interpolatedArg of interpolatedArgs) {
                  redirect(commandArg.subtype, commandArg.fd, interpolatedArg);
                }
              }
              break;
            case `argument`:
              {
                for (const segment of commandArg.segments) {
                  switch (segment.type) {
                    case `text`:
                      {
                        push(segment.text);
                      }
                      break;
                    case `glob`:
                      {
                        push(segment.pattern);
                        isGlob = true;
                      }
                      break;
                    case `shell`:
                      {
                        const raw = await executeBufferedSubshell(segment.shell, opts, state);
                        if (segment.quoted) {
                          push(raw);
                        } else {
                          const parts = split(raw);
                          for (let t = 0;t < parts.length - 1; ++t)
                            pushAndClose(parts[t]);
                          push(parts[parts.length - 1]);
                        }
                      }
                      break;
                    case `variable`:
                      {
                        await evaluateVariable(segment, opts, state, push, pushAndClose);
                      }
                      break;
                    case `arithmetic`:
                      {
                        push(String(await evaluateArithmetic(segment.arithmetic, opts, state)));
                      }
                      break;
                  }
                }
              }
              break;
          }
          close();
          if (isGlob) {
            const pattern = interpolated.pop();
            if (typeof pattern === `undefined`)
              throw new Error(`Assertion failed: Expected a glob pattern to have been set`);
            const matches = await opts.glob.match(pattern, { cwd: state.cwd, baseFs: opts.baseFs });
            if (matches.length === 0) {
              const braceExpansionNotice = globUtils.isBraceExpansion(pattern) ? `. Note: Brace expansion of arbitrary strings isn't currently supported. For more details, please read this issue: https://github.com/yarnpkg/berry/issues/22` : ``;
              throw new errors_1.ShellError(`No matches found: "${pattern}"${braceExpansionNotice}`);
            }
            for (const match of matches.sort()) {
              pushAndClose(match);
            }
          }
        }
        if (redirections.size > 0) {
          const redirectionArgs = [];
          for (const [key, targets] of redirections.entries())
            redirectionArgs.splice(redirectionArgs.length, 0, key, String(targets.length), ...targets);
          interpolated.splice(0, 0, `__ysh_set_redirects`, ...redirectionArgs, `--`);
        }
        return interpolated;
      }
      function makeCommandAction(args, opts, state) {
        if (!opts.builtins.has(args[0]))
          args = [`command`, ...args];
        const nativeCwd = fslib_12.npath.fromPortablePath(state.cwd);
        let env = state.environment;
        if (typeof env.PWD !== `undefined`)
          env = { ...env, PWD: nativeCwd };
        const [name, ...rest] = args;
        if (name === `command`) {
          return (0, pipe_1.makeProcess)(rest[0], rest.slice(1), opts, {
            cwd: nativeCwd,
            env
          });
        }
        const builtin = opts.builtins.get(name);
        if (typeof builtin === `undefined`)
          throw new Error(`Assertion failed: A builtin should exist for "${name}"`);
        return (0, pipe_1.makeBuiltin)(async ({ stdin, stdout, stderr }) => {
          const { stdin: initialStdin, stdout: initialStdout, stderr: initialStderr } = state;
          state.stdin = stdin;
          state.stdout = stdout;
          state.stderr = stderr;
          try {
            return await builtin(rest, opts, state);
          } finally {
            state.stdin = initialStdin;
            state.stdout = initialStdout;
            state.stderr = initialStderr;
          }
        });
      }
      function makeSubshellAction(ast, opts, state) {
        return (stdio) => {
          const stdin = new stream_12.PassThrough;
          const promise = executeShellLine(ast, opts, cloneState(state, { stdin }));
          return { stdin, promise };
        };
      }
      function makeGroupAction(ast, opts, state) {
        return (stdio) => {
          const stdin = new stream_12.PassThrough;
          const promise = executeShellLine(ast, opts, state);
          return { stdin, promise };
        };
      }
      function makeActionFromProcedure(procedure, args, opts, activeState) {
        if (args.length === 0) {
          return procedure;
        } else {
          let key;
          do {
            key = String(Math.random());
          } while (Object.hasOwn(activeState.procedures, key));
          activeState.procedures = { ...activeState.procedures };
          activeState.procedures[key] = procedure;
          return makeCommandAction([...args, `__ysh_run_procedure`, key], opts, activeState);
        }
      }
      async function executeCommandChainImpl(node, opts, state) {
        let current = node;
        let pipeType = null;
        let execution = null;
        while (current) {
          const activeState = current.then ? { ...state } : state;
          let action;
          switch (current.type) {
            case `command`:
              {
                const args = await interpolateArguments(current.args, opts, state);
                const environment = await applyEnvVariables(current.envs, opts, state);
                action = current.envs.length ? makeCommandAction(args, opts, cloneState(activeState, { environment })) : makeCommandAction(args, opts, activeState);
              }
              break;
            case `subshell`:
              {
                const args = await interpolateArguments(current.args, opts, state);
                const procedure = makeSubshellAction(current.subshell, opts, activeState);
                action = makeActionFromProcedure(procedure, args, opts, activeState);
              }
              break;
            case `group`:
              {
                const args = await interpolateArguments(current.args, opts, state);
                const procedure = makeGroupAction(current.group, opts, activeState);
                action = makeActionFromProcedure(procedure, args, opts, activeState);
              }
              break;
            case `envs`:
              {
                const environment = await applyEnvVariables(current.envs, opts, state);
                activeState.environment = { ...activeState.environment, ...environment };
                action = makeCommandAction([`true`], opts, activeState);
              }
              break;
          }
          if (typeof action === `undefined`)
            throw new Error(`Assertion failed: An action should have been generated`);
          if (pipeType === null) {
            execution = (0, pipe_2.start)(action, {
              stdin: new pipe_2.ProtectedStream(activeState.stdin),
              stdout: new pipe_2.ProtectedStream(activeState.stdout),
              stderr: new pipe_2.ProtectedStream(activeState.stderr)
            });
          } else {
            if (execution === null)
              throw new Error(`Assertion failed: The execution pipeline should have been setup`);
            switch (pipeType) {
              case `|`:
                {
                  execution = execution.pipeTo(action, pipe_2.Pipe.STDOUT);
                }
                break;
              case `|&`:
                {
                  execution = execution.pipeTo(action, pipe_2.Pipe.STDOUT | pipe_2.Pipe.STDERR);
                }
                break;
            }
          }
          if (current.then) {
            pipeType = current.then.type;
            current = current.then.chain;
          } else {
            current = null;
          }
        }
        if (execution === null)
          throw new Error(`Assertion failed: The execution pipeline should have been setup`);
        return await execution.run();
      }
      async function executeCommandChain(node, opts, state, { background = false } = {}) {
        function getColorizer(index) {
          const colors = [`#2E86AB`, `#A23B72`, `#F18F01`, `#C73E1D`, `#CCE2A3`];
          const colorName = colors[index % colors.length];
          return chalk_1.default.hex(colorName);
        }
        if (background) {
          const index = state.nextBackgroundJobIndex++;
          const colorizer = getColorizer(index);
          const rawPrefix = `[${index}]`;
          const prefix = colorizer(rawPrefix);
          const { stdout, stderr } = (0, pipe_1.createOutputStreamsWithPrefix)(state, { prefix });
          state.backgroundJobs.push(executeCommandChainImpl(node, opts, cloneState(state, { stdout, stderr })).catch((error) => stderr.write(`${error.message}
`)).finally(() => {
            if (state.stdout.isTTY) {
              state.stdout.write(`Job ${prefix}, '${colorizer((0, parsers_1.stringifyCommandChain)(node))}' has ended
`);
            }
          }));
          return 0;
        }
        return await executeCommandChainImpl(node, opts, state);
      }
      async function executeCommandLine(node, opts, state, { background = false } = {}) {
        let code;
        const setCode = (newCode) => {
          code = newCode;
          state.variables[`?`] = String(newCode);
        };
        const executeChain = async (line) => {
          try {
            return await executeCommandChain(line.chain, opts, state, { background: background && typeof line.then === `undefined` });
          } catch (error) {
            if (!(error instanceof errors_1.ShellError))
              throw error;
            state.stderr.write(`${error.message}
`);
            return 1;
          }
        };
        setCode(await executeChain(node));
        while (node.then) {
          if (state.exitCode !== null)
            return state.exitCode;
          switch (node.then.type) {
            case `&&`:
              {
                if (code === 0) {
                  setCode(await executeChain(node.then.line));
                }
              }
              break;
            case `||`:
              {
                if (code !== 0) {
                  setCode(await executeChain(node.then.line));
                }
              }
              break;
            default: {
              throw new Error(`Assertion failed: Unsupported command type: "${node.then.type}"`);
            }
          }
          node = node.then.line;
        }
        return code;
      }
      async function executeShellLine(node, opts, state) {
        const originalBackgroundJobs = state.backgroundJobs;
        state.backgroundJobs = [];
        let rightMostExitCode = 0;
        for (const { command, type } of node) {
          rightMostExitCode = await executeCommandLine(command, opts, state, { background: type === `&` });
          if (state.exitCode !== null)
            return state.exitCode;
          state.variables[`?`] = String(rightMostExitCode);
        }
        await Promise.all(state.backgroundJobs);
        state.backgroundJobs = originalBackgroundJobs;
        return rightMostExitCode;
      }
      function locateArgsVariableInSegment(segment) {
        switch (segment.type) {
          case `variable`: {
            return segment.name === `@` || segment.name === `#` || segment.name === `*` || Number.isFinite(parseInt(segment.name, 10)) || `defaultValue` in segment && !!segment.defaultValue && segment.defaultValue.some((arg) => locateArgsVariableInArgument(arg)) || `alternativeValue` in segment && !!segment.alternativeValue && segment.alternativeValue.some((arg) => locateArgsVariableInArgument(arg));
          }
          case `arithmetic`: {
            return locateArgsVariableInArithmetic(segment.arithmetic);
          }
          case `shell`: {
            return locateArgsVariable(segment.shell);
          }
          default: {
            return false;
          }
        }
      }
      function locateArgsVariableInArgument(arg) {
        switch (arg.type) {
          case `redirection`: {
            return arg.args.some((arg2) => locateArgsVariableInArgument(arg2));
          }
          case `argument`: {
            return arg.segments.some((segment) => locateArgsVariableInSegment(segment));
          }
          default:
            throw new Error(`Assertion failed: Unsupported argument type: "${arg.type}"`);
        }
      }
      function locateArgsVariableInArithmetic(arg) {
        switch (arg.type) {
          case `variable`: {
            return locateArgsVariableInSegment(arg);
          }
          case `number`: {
            return false;
          }
          default:
            return locateArgsVariableInArithmetic(arg.left) || locateArgsVariableInArithmetic(arg.right);
        }
      }
      function locateArgsVariable(node) {
        return node.some(({ command }) => {
          while (command) {
            let chain = command.chain;
            while (chain) {
              let hasArgs;
              switch (chain.type) {
                case `subshell`:
                  {
                    hasArgs = locateArgsVariable(chain.subshell);
                  }
                  break;
                case `command`:
                  {
                    hasArgs = chain.envs.some((env) => env.args.some((arg) => {
                      return locateArgsVariableInArgument(arg);
                    })) || chain.args.some((arg) => {
                      return locateArgsVariableInArgument(arg);
                    });
                  }
                  break;
              }
              if (hasArgs)
                return true;
              if (!chain.then)
                break;
              chain = chain.then.chain;
            }
            if (!command.then)
              break;
            command = command.then.line;
          }
          return false;
        });
      }
      async function execute(command, args = [], { baseFs = new fslib_12.NodeFS, builtins = {}, cwd = fslib_12.npath.toPortablePath(process.cwd()), env = process.env, stdin = process.stdin, stdout = process.stdout, stderr = process.stderr, variables = {}, glob = globUtils } = {}) {
        const normalizedEnv = {};
        for (const [key, value] of Object.entries(env))
          if (typeof value !== `undefined`)
            normalizedEnv[key] = value;
        const normalizedBuiltins = new Map(BUILTINS);
        for (const [key, builtin] of Object.entries(builtins))
          normalizedBuiltins.set(key, builtin);
        if (stdin === null) {
          stdin = new stream_12.PassThrough;
          stdin.end();
        }
        const ast = (0, parsers_1.parseShell)(command, glob);
        if (!locateArgsVariable(ast) && ast.length > 0 && args.length > 0) {
          let { command: command2 } = ast[ast.length - 1];
          while (command2.then)
            command2 = command2.then.line;
          let chain = command2.chain;
          while (chain.then)
            chain = chain.then.chain;
          if (chain.type === `command`) {
            chain.args = chain.args.concat(args.map((arg) => {
              return {
                type: `argument`,
                segments: [{
                  type: `text`,
                  text: arg
                }]
              };
            }));
          }
        }
        return await executeShellLine(ast, {
          args,
          baseFs,
          builtins: normalizedBuiltins,
          initialStdin: stdin,
          initialStdout: stdout,
          initialStderr: stderr,
          glob
        }, {
          cwd,
          environment: normalizedEnv,
          exitCode: null,
          procedures: {},
          stdin,
          stdout,
          stderr,
          variables: Object.assign({}, variables, {
            [`?`]: 0
          }),
          nextBackgroundJobIndex: 1,
          backgroundJobs: []
        });
      }
    }
  });
  var require_arrayMap = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_arrayMap.js"(exports22, module22) {
      function arrayMap(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result2 = Array(length);
        while (++index < length) {
          result2[index] = iteratee(array[index], index, array);
        }
        return result2;
      }
      module22.exports = arrayMap;
    }
  });
  var require_baseToString = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseToString.js"(exports22, module22) {
      var Symbol2 = require_Symbol();
      var arrayMap = require_arrayMap();
      var isArray = require_isArray();
      var isSymbol = require_isSymbol();
      var INFINITY = 1 / 0;
      var symbolProto = Symbol2 ? Symbol2.prototype : undefined;
      var symbolToString = symbolProto ? symbolProto.toString : undefined;
      function baseToString(value) {
        if (typeof value == "string") {
          return value;
        }
        if (isArray(value)) {
          return arrayMap(value, baseToString) + "";
        }
        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : "";
        }
        var result2 = value + "";
        return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
      }
      module22.exports = baseToString;
    }
  });
  var require_toString = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/toString.js"(exports22, module22) {
      var baseToString = require_baseToString();
      function toString(value) {
        return value == null ? "" : baseToString(value);
      }
      module22.exports = toString;
    }
  });
  var require_baseSlice = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseSlice.js"(exports22, module22) {
      function baseSlice(array, start, end) {
        var index = -1, length = array.length;
        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }
        end = end > length ? length : end;
        if (end < 0) {
          end += length;
        }
        length = start > end ? 0 : end - start >>> 0;
        start >>>= 0;
        var result2 = Array(length);
        while (++index < length) {
          result2[index] = array[index + start];
        }
        return result2;
      }
      module22.exports = baseSlice;
    }
  });
  var require_castSlice = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_castSlice.js"(exports22, module22) {
      var baseSlice = require_baseSlice();
      function castSlice(array, start, end) {
        var length = array.length;
        end = end === undefined ? length : end;
        return !start && end >= length ? array : baseSlice(array, start, end);
      }
      module22.exports = castSlice;
    }
  });
  var require_hasUnicode = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_hasUnicode.js"(exports22, module22) {
      var rsAstralRange = "\\ud800-\\udfff";
      var rsComboMarksRange = "\\u0300-\\u036f";
      var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
      var rsComboSymbolsRange = "\\u20d0-\\u20ff";
      var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
      var rsVarRange = "\\ufe0e\\ufe0f";
      var rsZWJ = "\\u200d";
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }
      module22.exports = hasUnicode;
    }
  });
  var require_asciiToArray = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_asciiToArray.js"(exports22, module22) {
      function asciiToArray(string) {
        return string.split("");
      }
      module22.exports = asciiToArray;
    }
  });
  var require_unicodeToArray = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_unicodeToArray.js"(exports22, module22) {
      var rsAstralRange = "\\ud800-\\udfff";
      var rsComboMarksRange = "\\u0300-\\u036f";
      var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
      var rsComboSymbolsRange = "\\u20d0-\\u20ff";
      var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
      var rsVarRange = "\\ufe0e\\ufe0f";
      var rsAstral = "[" + rsAstralRange + "]";
      var rsCombo = "[" + rsComboRange + "]";
      var rsFitz = "\\ud83c[\\udffb-\\udfff]";
      var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
      var rsNonAstral = "[^" + rsAstralRange + "]";
      var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
      var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
      var rsZWJ = "\\u200d";
      var reOptMod = rsModifier + "?";
      var rsOptVar = "[" + rsVarRange + "]?";
      var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
      var rsSeq = rsOptVar + reOptMod + rsOptJoin;
      var rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }
      module22.exports = unicodeToArray;
    }
  });
  var require_stringToArray = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_stringToArray.js"(exports22, module22) {
      var asciiToArray = require_asciiToArray();
      var hasUnicode = require_hasUnicode();
      var unicodeToArray = require_unicodeToArray();
      function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
      }
      module22.exports = stringToArray;
    }
  });
  var require_createCaseFirst = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_createCaseFirst.js"(exports22, module22) {
      var castSlice = require_castSlice();
      var hasUnicode = require_hasUnicode();
      var stringToArray = require_stringToArray();
      var toString = require_toString();
      function createCaseFirst(methodName) {
        return function(string) {
          string = toString(string);
          var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
          var chr = strSymbols ? strSymbols[0] : string.charAt(0);
          var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
          return chr[methodName]() + trailing;
        };
      }
      module22.exports = createCaseFirst;
    }
  });
  var require_upperFirst = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/upperFirst.js"(exports22, module22) {
      var createCaseFirst = require_createCaseFirst();
      var upperFirst = createCaseFirst("toUpperCase");
      module22.exports = upperFirst;
    }
  });
  var require_capitalize = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/capitalize.js"(exports22, module22) {
      var toString = require_toString();
      var upperFirst = require_upperFirst();
      function capitalize(string) {
        return upperFirst(toString(string).toLowerCase());
      }
      module22.exports = capitalize;
    }
  });
  var require_grapheme_splitter = __commonJS2({
    "../../node_modules/.pnpm/grapheme-splitter@1.0.4/node_modules/grapheme-splitter/index.js"(exports22, module22) {
      function GraphemeSplitter() {
        var CR = 0, LF = 1, Control = 2, Extend = 3, Regional_Indicator = 4, SpacingMark = 5, L = 6, V = 7, T = 8, LV = 9, LVT = 10, Other = 11, Prepend = 12, E_Base = 13, E_Modifier = 14, ZWJ = 15, Glue_After_Zwj = 16, E_Base_GAZ = 17;
        var NotBreak = 0, BreakStart = 1, Break = 2, BreakLastRegional = 3, BreakPenultimateRegional = 4;
        function isSurrogate(str, pos) {
          return 55296 <= str.charCodeAt(pos) && str.charCodeAt(pos) <= 56319 && 56320 <= str.charCodeAt(pos + 1) && str.charCodeAt(pos + 1) <= 57343;
        }
        function codePointAt(str, idx) {
          if (idx === undefined) {
            idx = 0;
          }
          var code = str.charCodeAt(idx);
          if (55296 <= code && code <= 56319 && idx < str.length - 1) {
            var hi = code;
            var low = str.charCodeAt(idx + 1);
            if (56320 <= low && low <= 57343) {
              return (hi - 55296) * 1024 + (low - 56320) + 65536;
            }
            return hi;
          }
          if (56320 <= code && code <= 57343 && idx >= 1) {
            var hi = str.charCodeAt(idx - 1);
            var low = code;
            if (55296 <= hi && hi <= 56319) {
              return (hi - 55296) * 1024 + (low - 56320) + 65536;
            }
            return low;
          }
          return code;
        }
        function shouldBreak(start, mid, end) {
          var all = [start].concat(mid).concat([end]);
          var previous = all[all.length - 2];
          var next = end;
          var eModifierIndex = all.lastIndexOf(E_Modifier);
          if (eModifierIndex > 1 && all.slice(1, eModifierIndex).every(function(c) {
            return c == Extend;
          }) && [Extend, E_Base, E_Base_GAZ].indexOf(start) == -1) {
            return Break;
          }
          var rIIndex = all.lastIndexOf(Regional_Indicator);
          if (rIIndex > 0 && all.slice(1, rIIndex).every(function(c) {
            return c == Regional_Indicator;
          }) && [Prepend, Regional_Indicator].indexOf(previous) == -1) {
            if (all.filter(function(c) {
              return c == Regional_Indicator;
            }).length % 2 == 1) {
              return BreakLastRegional;
            } else {
              return BreakPenultimateRegional;
            }
          }
          if (previous == CR && next == LF) {
            return NotBreak;
          } else if (previous == Control || previous == CR || previous == LF) {
            if (next == E_Modifier && mid.every(function(c) {
              return c == Extend;
            })) {
              return Break;
            } else {
              return BreakStart;
            }
          } else if (next == Control || next == CR || next == LF) {
            return BreakStart;
          } else if (previous == L && (next == L || next == V || next == LV || next == LVT)) {
            return NotBreak;
          } else if ((previous == LV || previous == V) && (next == V || next == T)) {
            return NotBreak;
          } else if ((previous == LVT || previous == T) && next == T) {
            return NotBreak;
          } else if (next == Extend || next == ZWJ) {
            return NotBreak;
          } else if (next == SpacingMark) {
            return NotBreak;
          } else if (previous == Prepend) {
            return NotBreak;
          }
          var previousNonExtendIndex = all.indexOf(Extend) != -1 ? all.lastIndexOf(Extend) - 1 : all.length - 2;
          if ([E_Base, E_Base_GAZ].indexOf(all[previousNonExtendIndex]) != -1 && all.slice(previousNonExtendIndex + 1, -1).every(function(c) {
            return c == Extend;
          }) && next == E_Modifier) {
            return NotBreak;
          }
          if (previous == ZWJ && [Glue_After_Zwj, E_Base_GAZ].indexOf(next) != -1) {
            return NotBreak;
          }
          if (mid.indexOf(Regional_Indicator) != -1) {
            return Break;
          }
          if (previous == Regional_Indicator && next == Regional_Indicator) {
            return NotBreak;
          }
          return BreakStart;
        }
        this.nextBreak = function(string, index) {
          if (index === undefined) {
            index = 0;
          }
          if (index < 0) {
            return 0;
          }
          if (index >= string.length - 1) {
            return string.length;
          }
          var prev = getGraphemeBreakProperty(codePointAt(string, index));
          var mid = [];
          for (var i = index + 1;i < string.length; i++) {
            if (isSurrogate(string, i - 1)) {
              continue;
            }
            var next = getGraphemeBreakProperty(codePointAt(string, i));
            if (shouldBreak(prev, mid, next)) {
              return i;
            }
            mid.push(next);
          }
          return string.length;
        };
        this.splitGraphemes = function(str) {
          var res = [];
          var index = 0;
          var brk;
          while ((brk = this.nextBreak(str, index)) < str.length) {
            res.push(str.slice(index, brk));
            index = brk;
          }
          if (index < str.length) {
            res.push(str.slice(index));
          }
          return res;
        };
        this.iterateGraphemes = function(str) {
          var index = 0;
          var res = {
            next: function() {
              var value;
              var brk;
              if ((brk = this.nextBreak(str, index)) < str.length) {
                value = str.slice(index, brk);
                index = brk;
                return { value, done: false };
              }
              if (index < str.length) {
                value = str.slice(index);
                index = str.length;
                return { value, done: false };
              }
              return { value: undefined, done: true };
            }.bind(this)
          };
          if (typeof Symbol !== "undefined" && Symbol.iterator) {
            res[Symbol.iterator] = function() {
              return res;
            };
          }
          return res;
        };
        this.countGraphemes = function(str) {
          var count = 0;
          var index = 0;
          var brk;
          while ((brk = this.nextBreak(str, index)) < str.length) {
            index = brk;
            count++;
          }
          if (index < str.length) {
            count++;
          }
          return count;
        };
        function getGraphemeBreakProperty(code) {
          if (1536 <= code && code <= 1541 || code == 1757 || code == 1807 || code == 2274 || code == 3406 || code == 69821 || 70082 <= code && code <= 70083 || code == 72250 || 72326 <= code && code <= 72329 || code == 73030) {
            return Prepend;
          }
          if (code == 13) {
            return CR;
          }
          if (code == 10) {
            return LF;
          }
          if (0 <= code && code <= 9 || 11 <= code && code <= 12 || 14 <= code && code <= 31 || 127 <= code && code <= 159 || code == 173 || code == 1564 || code == 6158 || code == 8203 || 8206 <= code && code <= 8207 || code == 8232 || code == 8233 || 8234 <= code && code <= 8238 || 8288 <= code && code <= 8292 || code == 8293 || 8294 <= code && code <= 8303 || 55296 <= code && code <= 57343 || code == 65279 || 65520 <= code && code <= 65528 || 65529 <= code && code <= 65531 || 113824 <= code && code <= 113827 || 119155 <= code && code <= 119162 || code == 917504 || code == 917505 || 917506 <= code && code <= 917535 || 917632 <= code && code <= 917759 || 918000 <= code && code <= 921599) {
            return Control;
          }
          if (768 <= code && code <= 879 || 1155 <= code && code <= 1159 || 1160 <= code && code <= 1161 || 1425 <= code && code <= 1469 || code == 1471 || 1473 <= code && code <= 1474 || 1476 <= code && code <= 1477 || code == 1479 || 1552 <= code && code <= 1562 || 1611 <= code && code <= 1631 || code == 1648 || 1750 <= code && code <= 1756 || 1759 <= code && code <= 1764 || 1767 <= code && code <= 1768 || 1770 <= code && code <= 1773 || code == 1809 || 1840 <= code && code <= 1866 || 1958 <= code && code <= 1968 || 2027 <= code && code <= 2035 || 2070 <= code && code <= 2073 || 2075 <= code && code <= 2083 || 2085 <= code && code <= 2087 || 2089 <= code && code <= 2093 || 2137 <= code && code <= 2139 || 2260 <= code && code <= 2273 || 2275 <= code && code <= 2306 || code == 2362 || code == 2364 || 2369 <= code && code <= 2376 || code == 2381 || 2385 <= code && code <= 2391 || 2402 <= code && code <= 2403 || code == 2433 || code == 2492 || code == 2494 || 2497 <= code && code <= 2500 || code == 2509 || code == 2519 || 2530 <= code && code <= 2531 || 2561 <= code && code <= 2562 || code == 2620 || 2625 <= code && code <= 2626 || 2631 <= code && code <= 2632 || 2635 <= code && code <= 2637 || code == 2641 || 2672 <= code && code <= 2673 || code == 2677 || 2689 <= code && code <= 2690 || code == 2748 || 2753 <= code && code <= 2757 || 2759 <= code && code <= 2760 || code == 2765 || 2786 <= code && code <= 2787 || 2810 <= code && code <= 2815 || code == 2817 || code == 2876 || code == 2878 || code == 2879 || 2881 <= code && code <= 2884 || code == 2893 || code == 2902 || code == 2903 || 2914 <= code && code <= 2915 || code == 2946 || code == 3006 || code == 3008 || code == 3021 || code == 3031 || code == 3072 || 3134 <= code && code <= 3136 || 3142 <= code && code <= 3144 || 3146 <= code && code <= 3149 || 3157 <= code && code <= 3158 || 3170 <= code && code <= 3171 || code == 3201 || code == 3260 || code == 3263 || code == 3266 || code == 3270 || 3276 <= code && code <= 3277 || 3285 <= code && code <= 3286 || 3298 <= code && code <= 3299 || 3328 <= code && code <= 3329 || 3387 <= code && code <= 3388 || code == 3390 || 3393 <= code && code <= 3396 || code == 3405 || code == 3415 || 3426 <= code && code <= 3427 || code == 3530 || code == 3535 || 3538 <= code && code <= 3540 || code == 3542 || code == 3551 || code == 3633 || 3636 <= code && code <= 3642 || 3655 <= code && code <= 3662 || code == 3761 || 3764 <= code && code <= 3769 || 3771 <= code && code <= 3772 || 3784 <= code && code <= 3789 || 3864 <= code && code <= 3865 || code == 3893 || code == 3895 || code == 3897 || 3953 <= code && code <= 3966 || 3968 <= code && code <= 3972 || 3974 <= code && code <= 3975 || 3981 <= code && code <= 3991 || 3993 <= code && code <= 4028 || code == 4038 || 4141 <= code && code <= 4144 || 4146 <= code && code <= 4151 || 4153 <= code && code <= 4154 || 4157 <= code && code <= 4158 || 4184 <= code && code <= 4185 || 4190 <= code && code <= 4192 || 4209 <= code && code <= 4212 || code == 4226 || 4229 <= code && code <= 4230 || code == 4237 || code == 4253 || 4957 <= code && code <= 4959 || 5906 <= code && code <= 5908 || 5938 <= code && code <= 5940 || 5970 <= code && code <= 5971 || 6002 <= code && code <= 6003 || 6068 <= code && code <= 6069 || 6071 <= code && code <= 6077 || code == 6086 || 6089 <= code && code <= 6099 || code == 6109 || 6155 <= code && code <= 6157 || 6277 <= code && code <= 6278 || code == 6313 || 6432 <= code && code <= 6434 || 6439 <= code && code <= 6440 || code == 6450 || 6457 <= code && code <= 6459 || 6679 <= code && code <= 6680 || code == 6683 || code == 6742 || 6744 <= code && code <= 6750 || code == 6752 || code == 6754 || 6757 <= code && code <= 6764 || 6771 <= code && code <= 6780 || code == 6783 || 6832 <= code && code <= 6845 || code == 6846 || 6912 <= code && code <= 6915 || code == 6964 || 6966 <= code && code <= 6970 || code == 6972 || code == 6978 || 7019 <= code && code <= 7027 || 7040 <= code && code <= 7041 || 7074 <= code && code <= 7077 || 7080 <= code && code <= 7081 || 7083 <= code && code <= 7085 || code == 7142 || 7144 <= code && code <= 7145 || code == 7149 || 7151 <= code && code <= 7153 || 7212 <= code && code <= 7219 || 7222 <= code && code <= 7223 || 7376 <= code && code <= 7378 || 7380 <= code && code <= 7392 || 7394 <= code && code <= 7400 || code == 7405 || code == 7412 || 7416 <= code && code <= 7417 || 7616 <= code && code <= 7673 || 7675 <= code && code <= 7679 || code == 8204 || 8400 <= code && code <= 8412 || 8413 <= code && code <= 8416 || code == 8417 || 8418 <= code && code <= 8420 || 8421 <= code && code <= 8432 || 11503 <= code && code <= 11505 || code == 11647 || 11744 <= code && code <= 11775 || 12330 <= code && code <= 12333 || 12334 <= code && code <= 12335 || 12441 <= code && code <= 12442 || code == 42607 || 42608 <= code && code <= 42610 || 42612 <= code && code <= 42621 || 42654 <= code && code <= 42655 || 42736 <= code && code <= 42737 || code == 43010 || code == 43014 || code == 43019 || 43045 <= code && code <= 43046 || 43204 <= code && code <= 43205 || 43232 <= code && code <= 43249 || 43302 <= code && code <= 43309 || 43335 <= code && code <= 43345 || 43392 <= code && code <= 43394 || code == 43443 || 43446 <= code && code <= 43449 || code == 43452 || code == 43493 || 43561 <= code && code <= 43566 || 43569 <= code && code <= 43570 || 43573 <= code && code <= 43574 || code == 43587 || code == 43596 || code == 43644 || code == 43696 || 43698 <= code && code <= 43700 || 43703 <= code && code <= 43704 || 43710 <= code && code <= 43711 || code == 43713 || 43756 <= code && code <= 43757 || code == 43766 || code == 44005 || code == 44008 || code == 44013 || code == 64286 || 65024 <= code && code <= 65039 || 65056 <= code && code <= 65071 || 65438 <= code && code <= 65439 || code == 66045 || code == 66272 || 66422 <= code && code <= 66426 || 68097 <= code && code <= 68099 || 68101 <= code && code <= 68102 || 68108 <= code && code <= 68111 || 68152 <= code && code <= 68154 || code == 68159 || 68325 <= code && code <= 68326 || code == 69633 || 69688 <= code && code <= 69702 || 69759 <= code && code <= 69761 || 69811 <= code && code <= 69814 || 69817 <= code && code <= 69818 || 69888 <= code && code <= 69890 || 69927 <= code && code <= 69931 || 69933 <= code && code <= 69940 || code == 70003 || 70016 <= code && code <= 70017 || 70070 <= code && code <= 70078 || 70090 <= code && code <= 70092 || 70191 <= code && code <= 70193 || code == 70196 || 70198 <= code && code <= 70199 || code == 70206 || code == 70367 || 70371 <= code && code <= 70378 || 70400 <= code && code <= 70401 || code == 70460 || code == 70462 || code == 70464 || code == 70487 || 70502 <= code && code <= 70508 || 70512 <= code && code <= 70516 || 70712 <= code && code <= 70719 || 70722 <= code && code <= 70724 || code == 70726 || code == 70832 || 70835 <= code && code <= 70840 || code == 70842 || code == 70845 || 70847 <= code && code <= 70848 || 70850 <= code && code <= 70851 || code == 71087 || 71090 <= code && code <= 71093 || 71100 <= code && code <= 71101 || 71103 <= code && code <= 71104 || 71132 <= code && code <= 71133 || 71219 <= code && code <= 71226 || code == 71229 || 71231 <= code && code <= 71232 || code == 71339 || code == 71341 || 71344 <= code && code <= 71349 || code == 71351 || 71453 <= code && code <= 71455 || 71458 <= code && code <= 71461 || 71463 <= code && code <= 71467 || 72193 <= code && code <= 72198 || 72201 <= code && code <= 72202 || 72243 <= code && code <= 72248 || 72251 <= code && code <= 72254 || code == 72263 || 72273 <= code && code <= 72278 || 72281 <= code && code <= 72283 || 72330 <= code && code <= 72342 || 72344 <= code && code <= 72345 || 72752 <= code && code <= 72758 || 72760 <= code && code <= 72765 || code == 72767 || 72850 <= code && code <= 72871 || 72874 <= code && code <= 72880 || 72882 <= code && code <= 72883 || 72885 <= code && code <= 72886 || 73009 <= code && code <= 73014 || code == 73018 || 73020 <= code && code <= 73021 || 73023 <= code && code <= 73029 || code == 73031 || 92912 <= code && code <= 92916 || 92976 <= code && code <= 92982 || 94095 <= code && code <= 94098 || 113821 <= code && code <= 113822 || code == 119141 || 119143 <= code && code <= 119145 || 119150 <= code && code <= 119154 || 119163 <= code && code <= 119170 || 119173 <= code && code <= 119179 || 119210 <= code && code <= 119213 || 119362 <= code && code <= 119364 || 121344 <= code && code <= 121398 || 121403 <= code && code <= 121452 || code == 121461 || code == 121476 || 121499 <= code && code <= 121503 || 121505 <= code && code <= 121519 || 122880 <= code && code <= 122886 || 122888 <= code && code <= 122904 || 122907 <= code && code <= 122913 || 122915 <= code && code <= 122916 || 122918 <= code && code <= 122922 || 125136 <= code && code <= 125142 || 125252 <= code && code <= 125258 || 917536 <= code && code <= 917631 || 917760 <= code && code <= 917999) {
            return Extend;
          }
          if (127462 <= code && code <= 127487) {
            return Regional_Indicator;
          }
          if (code == 2307 || code == 2363 || 2366 <= code && code <= 2368 || 2377 <= code && code <= 2380 || 2382 <= code && code <= 2383 || 2434 <= code && code <= 2435 || 2495 <= code && code <= 2496 || 2503 <= code && code <= 2504 || 2507 <= code && code <= 2508 || code == 2563 || 2622 <= code && code <= 2624 || code == 2691 || 2750 <= code && code <= 2752 || code == 2761 || 2763 <= code && code <= 2764 || 2818 <= code && code <= 2819 || code == 2880 || 2887 <= code && code <= 2888 || 2891 <= code && code <= 2892 || code == 3007 || 3009 <= code && code <= 3010 || 3014 <= code && code <= 3016 || 3018 <= code && code <= 3020 || 3073 <= code && code <= 3075 || 3137 <= code && code <= 3140 || 3202 <= code && code <= 3203 || code == 3262 || 3264 <= code && code <= 3265 || 3267 <= code && code <= 3268 || 3271 <= code && code <= 3272 || 3274 <= code && code <= 3275 || 3330 <= code && code <= 3331 || 3391 <= code && code <= 3392 || 3398 <= code && code <= 3400 || 3402 <= code && code <= 3404 || 3458 <= code && code <= 3459 || 3536 <= code && code <= 3537 || 3544 <= code && code <= 3550 || 3570 <= code && code <= 3571 || code == 3635 || code == 3763 || 3902 <= code && code <= 3903 || code == 3967 || code == 4145 || 4155 <= code && code <= 4156 || 4182 <= code && code <= 4183 || code == 4228 || code == 6070 || 6078 <= code && code <= 6085 || 6087 <= code && code <= 6088 || 6435 <= code && code <= 6438 || 6441 <= code && code <= 6443 || 6448 <= code && code <= 6449 || 6451 <= code && code <= 6456 || 6681 <= code && code <= 6682 || code == 6741 || code == 6743 || 6765 <= code && code <= 6770 || code == 6916 || code == 6965 || code == 6971 || 6973 <= code && code <= 6977 || 6979 <= code && code <= 6980 || code == 7042 || code == 7073 || 7078 <= code && code <= 7079 || code == 7082 || code == 7143 || 7146 <= code && code <= 7148 || code == 7150 || 7154 <= code && code <= 7155 || 7204 <= code && code <= 7211 || 7220 <= code && code <= 7221 || code == 7393 || 7410 <= code && code <= 7411 || code == 7415 || 43043 <= code && code <= 43044 || code == 43047 || 43136 <= code && code <= 43137 || 43188 <= code && code <= 43203 || 43346 <= code && code <= 43347 || code == 43395 || 43444 <= code && code <= 43445 || 43450 <= code && code <= 43451 || 43453 <= code && code <= 43456 || 43567 <= code && code <= 43568 || 43571 <= code && code <= 43572 || code == 43597 || code == 43755 || 43758 <= code && code <= 43759 || code == 43765 || 44003 <= code && code <= 44004 || 44006 <= code && code <= 44007 || 44009 <= code && code <= 44010 || code == 44012 || code == 69632 || code == 69634 || code == 69762 || 69808 <= code && code <= 69810 || 69815 <= code && code <= 69816 || code == 69932 || code == 70018 || 70067 <= code && code <= 70069 || 70079 <= code && code <= 70080 || 70188 <= code && code <= 70190 || 70194 <= code && code <= 70195 || code == 70197 || 70368 <= code && code <= 70370 || 70402 <= code && code <= 70403 || code == 70463 || 70465 <= code && code <= 70468 || 70471 <= code && code <= 70472 || 70475 <= code && code <= 70477 || 70498 <= code && code <= 70499 || 70709 <= code && code <= 70711 || 70720 <= code && code <= 70721 || code == 70725 || 70833 <= code && code <= 70834 || code == 70841 || 70843 <= code && code <= 70844 || code == 70846 || code == 70849 || 71088 <= code && code <= 71089 || 71096 <= code && code <= 71099 || code == 71102 || 71216 <= code && code <= 71218 || 71227 <= code && code <= 71228 || code == 71230 || code == 71340 || 71342 <= code && code <= 71343 || code == 71350 || 71456 <= code && code <= 71457 || code == 71462 || 72199 <= code && code <= 72200 || code == 72249 || 72279 <= code && code <= 72280 || code == 72343 || code == 72751 || code == 72766 || code == 72873 || code == 72881 || code == 72884 || 94033 <= code && code <= 94078 || code == 119142 || code == 119149) {
            return SpacingMark;
          }
          if (4352 <= code && code <= 4447 || 43360 <= code && code <= 43388) {
            return L;
          }
          if (4448 <= code && code <= 4519 || 55216 <= code && code <= 55238) {
            return V;
          }
          if (4520 <= code && code <= 4607 || 55243 <= code && code <= 55291) {
            return T;
          }
          if (code == 44032 || code == 44060 || code == 44088 || code == 44116 || code == 44144 || code == 44172 || code == 44200 || code == 44228 || code == 44256 || code == 44284 || code == 44312 || code == 44340 || code == 44368 || code == 44396 || code == 44424 || code == 44452 || code == 44480 || code == 44508 || code == 44536 || code == 44564 || code == 44592 || code == 44620 || code == 44648 || code == 44676 || code == 44704 || code == 44732 || code == 44760 || code == 44788 || code == 44816 || code == 44844 || code == 44872 || code == 44900 || code == 44928 || code == 44956 || code == 44984 || code == 45012 || code == 45040 || code == 45068 || code == 45096 || code == 45124 || code == 45152 || code == 45180 || code == 45208 || code == 45236 || code == 45264 || code == 45292 || code == 45320 || code == 45348 || code == 45376 || code == 45404 || code == 45432 || code == 45460 || code == 45488 || code == 45516 || code == 45544 || code == 45572 || code == 45600 || code == 45628 || code == 45656 || code == 45684 || code == 45712 || code == 45740 || code == 45768 || code == 45796 || code == 45824 || code == 45852 || code == 45880 || code == 45908 || code == 45936 || code == 45964 || code == 45992 || code == 46020 || code == 46048 || code == 46076 || code == 46104 || code == 46132 || code == 46160 || code == 46188 || code == 46216 || code == 46244 || code == 46272 || code == 46300 || code == 46328 || code == 46356 || code == 46384 || code == 46412 || code == 46440 || code == 46468 || code == 46496 || code == 46524 || code == 46552 || code == 46580 || code == 46608 || code == 46636 || code == 46664 || code == 46692 || code == 46720 || code == 46748 || code == 46776 || code == 46804 || code == 46832 || code == 46860 || code == 46888 || code == 46916 || code == 46944 || code == 46972 || code == 47000 || code == 47028 || code == 47056 || code == 47084 || code == 47112 || code == 47140 || code == 47168 || code == 47196 || code == 47224 || code == 47252 || code == 47280 || code == 47308 || code == 47336 || code == 47364 || code == 47392 || code == 47420 || code == 47448 || code == 47476 || code == 47504 || code == 47532 || code == 47560 || code == 47588 || code == 47616 || code == 47644 || code == 47672 || code == 47700 || code == 47728 || code == 47756 || code == 47784 || code == 47812 || code == 47840 || code == 47868 || code == 47896 || code == 47924 || code == 47952 || code == 47980 || code == 48008 || code == 48036 || code == 48064 || code == 48092 || code == 48120 || code == 48148 || code == 48176 || code == 48204 || code == 48232 || code == 48260 || code == 48288 || code == 48316 || code == 48344 || code == 48372 || code == 48400 || code == 48428 || code == 48456 || code == 48484 || code == 48512 || code == 48540 || code == 48568 || code == 48596 || code == 48624 || code == 48652 || code == 48680 || code == 48708 || code == 48736 || code == 48764 || code == 48792 || code == 48820 || code == 48848 || code == 48876 || code == 48904 || code == 48932 || code == 48960 || code == 48988 || code == 49016 || code == 49044 || code == 49072 || code == 49100 || code == 49128 || code == 49156 || code == 49184 || code == 49212 || code == 49240 || code == 49268 || code == 49296 || code == 49324 || code == 49352 || code == 49380 || code == 49408 || code == 49436 || code == 49464 || code == 49492 || code == 49520 || code == 49548 || code == 49576 || code == 49604 || code == 49632 || code == 49660 || code == 49688 || code == 49716 || code == 49744 || code == 49772 || code == 49800 || code == 49828 || code == 49856 || code == 49884 || code == 49912 || code == 49940 || code == 49968 || code == 49996 || code == 50024 || code == 50052 || code == 50080 || code == 50108 || code == 50136 || code == 50164 || code == 50192 || code == 50220 || code == 50248 || code == 50276 || code == 50304 || code == 50332 || code == 50360 || code == 50388 || code == 50416 || code == 50444 || code == 50472 || code == 50500 || code == 50528 || code == 50556 || code == 50584 || code == 50612 || code == 50640 || code == 50668 || code == 50696 || code == 50724 || code == 50752 || code == 50780 || code == 50808 || code == 50836 || code == 50864 || code == 50892 || code == 50920 || code == 50948 || code == 50976 || code == 51004 || code == 51032 || code == 51060 || code == 51088 || code == 51116 || code == 51144 || code == 51172 || code == 51200 || code == 51228 || code == 51256 || code == 51284 || code == 51312 || code == 51340 || code == 51368 || code == 51396 || code == 51424 || code == 51452 || code == 51480 || code == 51508 || code == 51536 || code == 51564 || code == 51592 || code == 51620 || code == 51648 || code == 51676 || code == 51704 || code == 51732 || code == 51760 || code == 51788 || code == 51816 || code == 51844 || code == 51872 || code == 51900 || code == 51928 || code == 51956 || code == 51984 || code == 52012 || code == 52040 || code == 52068 || code == 52096 || code == 52124 || code == 52152 || code == 52180 || code == 52208 || code == 52236 || code == 52264 || code == 52292 || code == 52320 || code == 52348 || code == 52376 || code == 52404 || code == 52432 || code == 52460 || code == 52488 || code == 52516 || code == 52544 || code == 52572 || code == 52600 || code == 52628 || code == 52656 || code == 52684 || code == 52712 || code == 52740 || code == 52768 || code == 52796 || code == 52824 || code == 52852 || code == 52880 || code == 52908 || code == 52936 || code == 52964 || code == 52992 || code == 53020 || code == 53048 || code == 53076 || code == 53104 || code == 53132 || code == 53160 || code == 53188 || code == 53216 || code == 53244 || code == 53272 || code == 53300 || code == 53328 || code == 53356 || code == 53384 || code == 53412 || code == 53440 || code == 53468 || code == 53496 || code == 53524 || code == 53552 || code == 53580 || code == 53608 || code == 53636 || code == 53664 || code == 53692 || code == 53720 || code == 53748 || code == 53776 || code == 53804 || code == 53832 || code == 53860 || code == 53888 || code == 53916 || code == 53944 || code == 53972 || code == 54000 || code == 54028 || code == 54056 || code == 54084 || code == 54112 || code == 54140 || code == 54168 || code == 54196 || code == 54224 || code == 54252 || code == 54280 || code == 54308 || code == 54336 || code == 54364 || code == 54392 || code == 54420 || code == 54448 || code == 54476 || code == 54504 || code == 54532 || code == 54560 || code == 54588 || code == 54616 || code == 54644 || code == 54672 || code == 54700 || code == 54728 || code == 54756 || code == 54784 || code == 54812 || code == 54840 || code == 54868 || code == 54896 || code == 54924 || code == 54952 || code == 54980 || code == 55008 || code == 55036 || code == 55064 || code == 55092 || code == 55120 || code == 55148 || code == 55176) {
            return LV;
          }
          if (44033 <= code && code <= 44059 || 44061 <= code && code <= 44087 || 44089 <= code && code <= 44115 || 44117 <= code && code <= 44143 || 44145 <= code && code <= 44171 || 44173 <= code && code <= 44199 || 44201 <= code && code <= 44227 || 44229 <= code && code <= 44255 || 44257 <= code && code <= 44283 || 44285 <= code && code <= 44311 || 44313 <= code && code <= 44339 || 44341 <= code && code <= 44367 || 44369 <= code && code <= 44395 || 44397 <= code && code <= 44423 || 44425 <= code && code <= 44451 || 44453 <= code && code <= 44479 || 44481 <= code && code <= 44507 || 44509 <= code && code <= 44535 || 44537 <= code && code <= 44563 || 44565 <= code && code <= 44591 || 44593 <= code && code <= 44619 || 44621 <= code && code <= 44647 || 44649 <= code && code <= 44675 || 44677 <= code && code <= 44703 || 44705 <= code && code <= 44731 || 44733 <= code && code <= 44759 || 44761 <= code && code <= 44787 || 44789 <= code && code <= 44815 || 44817 <= code && code <= 44843 || 44845 <= code && code <= 44871 || 44873 <= code && code <= 44899 || 44901 <= code && code <= 44927 || 44929 <= code && code <= 44955 || 44957 <= code && code <= 44983 || 44985 <= code && code <= 45011 || 45013 <= code && code <= 45039 || 45041 <= code && code <= 45067 || 45069 <= code && code <= 45095 || 45097 <= code && code <= 45123 || 45125 <= code && code <= 45151 || 45153 <= code && code <= 45179 || 45181 <= code && code <= 45207 || 45209 <= code && code <= 45235 || 45237 <= code && code <= 45263 || 45265 <= code && code <= 45291 || 45293 <= code && code <= 45319 || 45321 <= code && code <= 45347 || 45349 <= code && code <= 45375 || 45377 <= code && code <= 45403 || 45405 <= code && code <= 45431 || 45433 <= code && code <= 45459 || 45461 <= code && code <= 45487 || 45489 <= code && code <= 45515 || 45517 <= code && code <= 45543 || 45545 <= code && code <= 45571 || 45573 <= code && code <= 45599 || 45601 <= code && code <= 45627 || 45629 <= code && code <= 45655 || 45657 <= code && code <= 45683 || 45685 <= code && code <= 45711 || 45713 <= code && code <= 45739 || 45741 <= code && code <= 45767 || 45769 <= code && code <= 45795 || 45797 <= code && code <= 45823 || 45825 <= code && code <= 45851 || 45853 <= code && code <= 45879 || 45881 <= code && code <= 45907 || 45909 <= code && code <= 45935 || 45937 <= code && code <= 45963 || 45965 <= code && code <= 45991 || 45993 <= code && code <= 46019 || 46021 <= code && code <= 46047 || 46049 <= code && code <= 46075 || 46077 <= code && code <= 46103 || 46105 <= code && code <= 46131 || 46133 <= code && code <= 46159 || 46161 <= code && code <= 46187 || 46189 <= code && code <= 46215 || 46217 <= code && code <= 46243 || 46245 <= code && code <= 46271 || 46273 <= code && code <= 46299 || 46301 <= code && code <= 46327 || 46329 <= code && code <= 46355 || 46357 <= code && code <= 46383 || 46385 <= code && code <= 46411 || 46413 <= code && code <= 46439 || 46441 <= code && code <= 46467 || 46469 <= code && code <= 46495 || 46497 <= code && code <= 46523 || 46525 <= code && code <= 46551 || 46553 <= code && code <= 46579 || 46581 <= code && code <= 46607 || 46609 <= code && code <= 46635 || 46637 <= code && code <= 46663 || 46665 <= code && code <= 46691 || 46693 <= code && code <= 46719 || 46721 <= code && code <= 46747 || 46749 <= code && code <= 46775 || 46777 <= code && code <= 46803 || 46805 <= code && code <= 46831 || 46833 <= code && code <= 46859 || 46861 <= code && code <= 46887 || 46889 <= code && code <= 46915 || 46917 <= code && code <= 46943 || 46945 <= code && code <= 46971 || 46973 <= code && code <= 46999 || 47001 <= code && code <= 47027 || 47029 <= code && code <= 47055 || 47057 <= code && code <= 47083 || 47085 <= code && code <= 47111 || 47113 <= code && code <= 47139 || 47141 <= code && code <= 47167 || 47169 <= code && code <= 47195 || 47197 <= code && code <= 47223 || 47225 <= code && code <= 47251 || 47253 <= code && code <= 47279 || 47281 <= code && code <= 47307 || 47309 <= code && code <= 47335 || 47337 <= code && code <= 47363 || 47365 <= code && code <= 47391 || 47393 <= code && code <= 47419 || 47421 <= code && code <= 47447 || 47449 <= code && code <= 47475 || 47477 <= code && code <= 47503 || 47505 <= code && code <= 47531 || 47533 <= code && code <= 47559 || 47561 <= code && code <= 47587 || 47589 <= code && code <= 47615 || 47617 <= code && code <= 47643 || 47645 <= code && code <= 47671 || 47673 <= code && code <= 47699 || 47701 <= code && code <= 47727 || 47729 <= code && code <= 47755 || 47757 <= code && code <= 47783 || 47785 <= code && code <= 47811 || 47813 <= code && code <= 47839 || 47841 <= code && code <= 47867 || 47869 <= code && code <= 47895 || 47897 <= code && code <= 47923 || 47925 <= code && code <= 47951 || 47953 <= code && code <= 47979 || 47981 <= code && code <= 48007 || 48009 <= code && code <= 48035 || 48037 <= code && code <= 48063 || 48065 <= code && code <= 48091 || 48093 <= code && code <= 48119 || 48121 <= code && code <= 48147 || 48149 <= code && code <= 48175 || 48177 <= code && code <= 48203 || 48205 <= code && code <= 48231 || 48233 <= code && code <= 48259 || 48261 <= code && code <= 48287 || 48289 <= code && code <= 48315 || 48317 <= code && code <= 48343 || 48345 <= code && code <= 48371 || 48373 <= code && code <= 48399 || 48401 <= code && code <= 48427 || 48429 <= code && code <= 48455 || 48457 <= code && code <= 48483 || 48485 <= code && code <= 48511 || 48513 <= code && code <= 48539 || 48541 <= code && code <= 48567 || 48569 <= code && code <= 48595 || 48597 <= code && code <= 48623 || 48625 <= code && code <= 48651 || 48653 <= code && code <= 48679 || 48681 <= code && code <= 48707 || 48709 <= code && code <= 48735 || 48737 <= code && code <= 48763 || 48765 <= code && code <= 48791 || 48793 <= code && code <= 48819 || 48821 <= code && code <= 48847 || 48849 <= code && code <= 48875 || 48877 <= code && code <= 48903 || 48905 <= code && code <= 48931 || 48933 <= code && code <= 48959 || 48961 <= code && code <= 48987 || 48989 <= code && code <= 49015 || 49017 <= code && code <= 49043 || 49045 <= code && code <= 49071 || 49073 <= code && code <= 49099 || 49101 <= code && code <= 49127 || 49129 <= code && code <= 49155 || 49157 <= code && code <= 49183 || 49185 <= code && code <= 49211 || 49213 <= code && code <= 49239 || 49241 <= code && code <= 49267 || 49269 <= code && code <= 49295 || 49297 <= code && code <= 49323 || 49325 <= code && code <= 49351 || 49353 <= code && code <= 49379 || 49381 <= code && code <= 49407 || 49409 <= code && code <= 49435 || 49437 <= code && code <= 49463 || 49465 <= code && code <= 49491 || 49493 <= code && code <= 49519 || 49521 <= code && code <= 49547 || 49549 <= code && code <= 49575 || 49577 <= code && code <= 49603 || 49605 <= code && code <= 49631 || 49633 <= code && code <= 49659 || 49661 <= code && code <= 49687 || 49689 <= code && code <= 49715 || 49717 <= code && code <= 49743 || 49745 <= code && code <= 49771 || 49773 <= code && code <= 49799 || 49801 <= code && code <= 49827 || 49829 <= code && code <= 49855 || 49857 <= code && code <= 49883 || 49885 <= code && code <= 49911 || 49913 <= code && code <= 49939 || 49941 <= code && code <= 49967 || 49969 <= code && code <= 49995 || 49997 <= code && code <= 50023 || 50025 <= code && code <= 50051 || 50053 <= code && code <= 50079 || 50081 <= code && code <= 50107 || 50109 <= code && code <= 50135 || 50137 <= code && code <= 50163 || 50165 <= code && code <= 50191 || 50193 <= code && code <= 50219 || 50221 <= code && code <= 50247 || 50249 <= code && code <= 50275 || 50277 <= code && code <= 50303 || 50305 <= code && code <= 50331 || 50333 <= code && code <= 50359 || 50361 <= code && code <= 50387 || 50389 <= code && code <= 50415 || 50417 <= code && code <= 50443 || 50445 <= code && code <= 50471 || 50473 <= code && code <= 50499 || 50501 <= code && code <= 50527 || 50529 <= code && code <= 50555 || 50557 <= code && code <= 50583 || 50585 <= code && code <= 50611 || 50613 <= code && code <= 50639 || 50641 <= code && code <= 50667 || 50669 <= code && code <= 50695 || 50697 <= code && code <= 50723 || 50725 <= code && code <= 50751 || 50753 <= code && code <= 50779 || 50781 <= code && code <= 50807 || 50809 <= code && code <= 50835 || 50837 <= code && code <= 50863 || 50865 <= code && code <= 50891 || 50893 <= code && code <= 50919 || 50921 <= code && code <= 50947 || 50949 <= code && code <= 50975 || 50977 <= code && code <= 51003 || 51005 <= code && code <= 51031 || 51033 <= code && code <= 51059 || 51061 <= code && code <= 51087 || 51089 <= code && code <= 51115 || 51117 <= code && code <= 51143 || 51145 <= code && code <= 51171 || 51173 <= code && code <= 51199 || 51201 <= code && code <= 51227 || 51229 <= code && code <= 51255 || 51257 <= code && code <= 51283 || 51285 <= code && code <= 51311 || 51313 <= code && code <= 51339 || 51341 <= code && code <= 51367 || 51369 <= code && code <= 51395 || 51397 <= code && code <= 51423 || 51425 <= code && code <= 51451 || 51453 <= code && code <= 51479 || 51481 <= code && code <= 51507 || 51509 <= code && code <= 51535 || 51537 <= code && code <= 51563 || 51565 <= code && code <= 51591 || 51593 <= code && code <= 51619 || 51621 <= code && code <= 51647 || 51649 <= code && code <= 51675 || 51677 <= code && code <= 51703 || 51705 <= code && code <= 51731 || 51733 <= code && code <= 51759 || 51761 <= code && code <= 51787 || 51789 <= code && code <= 51815 || 51817 <= code && code <= 51843 || 51845 <= code && code <= 51871 || 51873 <= code && code <= 51899 || 51901 <= code && code <= 51927 || 51929 <= code && code <= 51955 || 51957 <= code && code <= 51983 || 51985 <= code && code <= 52011 || 52013 <= code && code <= 52039 || 52041 <= code && code <= 52067 || 52069 <= code && code <= 52095 || 52097 <= code && code <= 52123 || 52125 <= code && code <= 52151 || 52153 <= code && code <= 52179 || 52181 <= code && code <= 52207 || 52209 <= code && code <= 52235 || 52237 <= code && code <= 52263 || 52265 <= code && code <= 52291 || 52293 <= code && code <= 52319 || 52321 <= code && code <= 52347 || 52349 <= code && code <= 52375 || 52377 <= code && code <= 52403 || 52405 <= code && code <= 52431 || 52433 <= code && code <= 52459 || 52461 <= code && code <= 52487 || 52489 <= code && code <= 52515 || 52517 <= code && code <= 52543 || 52545 <= code && code <= 52571 || 52573 <= code && code <= 52599 || 52601 <= code && code <= 52627 || 52629 <= code && code <= 52655 || 52657 <= code && code <= 52683 || 52685 <= code && code <= 52711 || 52713 <= code && code <= 52739 || 52741 <= code && code <= 52767 || 52769 <= code && code <= 52795 || 52797 <= code && code <= 52823 || 52825 <= code && code <= 52851 || 52853 <= code && code <= 52879 || 52881 <= code && code <= 52907 || 52909 <= code && code <= 52935 || 52937 <= code && code <= 52963 || 52965 <= code && code <= 52991 || 52993 <= code && code <= 53019 || 53021 <= code && code <= 53047 || 53049 <= code && code <= 53075 || 53077 <= code && code <= 53103 || 53105 <= code && code <= 53131 || 53133 <= code && code <= 53159 || 53161 <= code && code <= 53187 || 53189 <= code && code <= 53215 || 53217 <= code && code <= 53243 || 53245 <= code && code <= 53271 || 53273 <= code && code <= 53299 || 53301 <= code && code <= 53327 || 53329 <= code && code <= 53355 || 53357 <= code && code <= 53383 || 53385 <= code && code <= 53411 || 53413 <= code && code <= 53439 || 53441 <= code && code <= 53467 || 53469 <= code && code <= 53495 || 53497 <= code && code <= 53523 || 53525 <= code && code <= 53551 || 53553 <= code && code <= 53579 || 53581 <= code && code <= 53607 || 53609 <= code && code <= 53635 || 53637 <= code && code <= 53663 || 53665 <= code && code <= 53691 || 53693 <= code && code <= 53719 || 53721 <= code && code <= 53747 || 53749 <= code && code <= 53775 || 53777 <= code && code <= 53803 || 53805 <= code && code <= 53831 || 53833 <= code && code <= 53859 || 53861 <= code && code <= 53887 || 53889 <= code && code <= 53915 || 53917 <= code && code <= 53943 || 53945 <= code && code <= 53971 || 53973 <= code && code <= 53999 || 54001 <= code && code <= 54027 || 54029 <= code && code <= 54055 || 54057 <= code && code <= 54083 || 54085 <= code && code <= 54111 || 54113 <= code && code <= 54139 || 54141 <= code && code <= 54167 || 54169 <= code && code <= 54195 || 54197 <= code && code <= 54223 || 54225 <= code && code <= 54251 || 54253 <= code && code <= 54279 || 54281 <= code && code <= 54307 || 54309 <= code && code <= 54335 || 54337 <= code && code <= 54363 || 54365 <= code && code <= 54391 || 54393 <= code && code <= 54419 || 54421 <= code && code <= 54447 || 54449 <= code && code <= 54475 || 54477 <= code && code <= 54503 || 54505 <= code && code <= 54531 || 54533 <= code && code <= 54559 || 54561 <= code && code <= 54587 || 54589 <= code && code <= 54615 || 54617 <= code && code <= 54643 || 54645 <= code && code <= 54671 || 54673 <= code && code <= 54699 || 54701 <= code && code <= 54727 || 54729 <= code && code <= 54755 || 54757 <= code && code <= 54783 || 54785 <= code && code <= 54811 || 54813 <= code && code <= 54839 || 54841 <= code && code <= 54867 || 54869 <= code && code <= 54895 || 54897 <= code && code <= 54923 || 54925 <= code && code <= 54951 || 54953 <= code && code <= 54979 || 54981 <= code && code <= 55007 || 55009 <= code && code <= 55035 || 55037 <= code && code <= 55063 || 55065 <= code && code <= 55091 || 55093 <= code && code <= 55119 || 55121 <= code && code <= 55147 || 55149 <= code && code <= 55175 || 55177 <= code && code <= 55203) {
            return LVT;
          }
          if (code == 9757 || code == 9977 || 9994 <= code && code <= 9997 || code == 127877 || 127938 <= code && code <= 127940 || code == 127943 || 127946 <= code && code <= 127948 || 128066 <= code && code <= 128067 || 128070 <= code && code <= 128080 || code == 128110 || 128112 <= code && code <= 128120 || code == 128124 || 128129 <= code && code <= 128131 || 128133 <= code && code <= 128135 || code == 128170 || 128372 <= code && code <= 128373 || code == 128378 || code == 128400 || 128405 <= code && code <= 128406 || 128581 <= code && code <= 128583 || 128587 <= code && code <= 128591 || code == 128675 || 128692 <= code && code <= 128694 || code == 128704 || code == 128716 || 129304 <= code && code <= 129308 || 129310 <= code && code <= 129311 || code == 129318 || 129328 <= code && code <= 129337 || 129341 <= code && code <= 129342 || 129489 <= code && code <= 129501) {
            return E_Base;
          }
          if (127995 <= code && code <= 127999) {
            return E_Modifier;
          }
          if (code == 8205) {
            return ZWJ;
          }
          if (code == 9792 || code == 9794 || 9877 <= code && code <= 9878 || code == 9992 || code == 10084 || code == 127752 || code == 127806 || code == 127859 || code == 127891 || code == 127908 || code == 127912 || code == 127979 || code == 127981 || code == 128139 || 128187 <= code && code <= 128188 || code == 128295 || code == 128300 || code == 128488 || code == 128640 || code == 128658) {
            return Glue_After_Zwj;
          }
          if (128102 <= code && code <= 128105) {
            return E_Base_GAZ;
          }
          return Other;
        }
        return this;
      }
      if (typeof module22 != "undefined" && module22.exports) {
        module22.exports = GraphemeSplitter;
      }
    }
  });
  var require_slice_ansi = __commonJS2({
    "../../node_modules/.pnpm/@arcanis+slice-ansi@1.1.1/node_modules/@arcanis/slice-ansi/index.js"(exports22, module22) {
      var ANSI_SEQUENCE = /^(.*?)(\x1b\[[^m]+m|\x1b\]8;;.*?(\x1b\\|\u0007))/;
      var splitGraphemes;
      function getSplitter() {
        if (splitGraphemes)
          return splitGraphemes;
        if (typeof Intl.Segmenter !== `undefined`) {
          const segmenter = new Intl.Segmenter(`en`, { granularity: `grapheme` });
          return splitGraphemes = (text) => Array.from(segmenter.segment(text), ({ segment }) => segment);
        } else {
          const GraphemeSplitter = require_grapheme_splitter();
          const splitter = new GraphemeSplitter;
          return splitGraphemes = (text) => splitter.splitGraphemes(text);
        }
      }
      module22.exports = (orig, at = 0, until = orig.length) => {
        if (at < 0 || until < 0)
          throw new RangeError(`Negative indices aren't supported by this implementation`);
        const length = until - at;
        let output = ``;
        let skipped = 0;
        let visible = 0;
        while (orig.length > 0) {
          const lookup = orig.match(ANSI_SEQUENCE) || [orig, orig, undefined];
          let graphemes = getSplitter()(lookup[1]);
          const skipping = Math.min(at - skipped, graphemes.length);
          graphemes = graphemes.slice(skipping);
          const displaying = Math.min(length - visible, graphemes.length);
          output += graphemes.slice(0, displaying).join(``);
          skipped += skipping;
          visible += displaying;
          if (typeof lookup[2] !== `undefined`)
            output += lookup[2];
          orig = orig.slice(lookup[0].length);
        }
        return output;
      };
    }
  });
  var require_YarnVersion = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/YarnVersion.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.YarnVersion = undefined;
      exports22.YarnVersion = typeof YARN_VERSION !== `undefined` ? process.env.YARN_IS_TEST_ENV ? `0.0.0` : YARN_VERSION : null;
    }
  });
  var require_StreamReport = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/StreamReport.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.StreamReport = exports22.SUPPORTS_GROUPS = exports22.SINGLE_LINE_CHAR = undefined;
      exports22.formatName = formatName;
      exports22.formatNameWithHyperlink = formatNameWithHyperlink;
      exports22.reportOptionDeprecations = reportOptionDeprecations;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var slice_ansi_1 = tslib_12.__importDefault(require_slice_ansi());
      var ci_info_1 = tslib_12.__importDefault(require_ci_info());
      var MessageName_1 = require_MessageName();
      var Report_1 = require_Report();
      var YarnVersion_1 = require_YarnVersion();
      var formatUtils = tslib_12.__importStar(require_formatUtils());
      exports22.SINGLE_LINE_CHAR = `\xB7`;
      var PROGRESS_FRAMES = [`\u280B`, `\u2819`, `\u2839`, `\u2838`, `\u283C`, `\u2834`, `\u2826`, `\u2827`, `\u2807`, `\u280F`];
      var PROGRESS_INTERVAL = 80;
      var GROUP = ci_info_1.default.GITHUB_ACTIONS ? { start: (what) => `::group::${what}
`, end: (what) => `::endgroup::
` } : ci_info_1.default.TRAVIS ? { start: (what) => `travis_fold:start:${what}
`, end: (what) => `travis_fold:end:${what}
` } : ci_info_1.default.GITLAB ? { start: (what) => `section_start:${Math.floor(Date.now() / 1000)}:${what.toLowerCase().replace(/\W+/g, `_`)}[collapsed=true]\r\x1B[0K${what}
`, end: (what) => `section_end:${Math.floor(Date.now() / 1000)}:${what.toLowerCase().replace(/\W+/g, `_`)}\r\x1B[0K` } : null;
      exports22.SUPPORTS_GROUPS = GROUP !== null;
      var now = /* @__PURE__ */ new Date;
      var supportsEmojis = [`iTerm.app`, `Apple_Terminal`, `WarpTerminal`, `vscode`].includes(process.env.TERM_PROGRAM) || !!process.env.WT_SESSION;
      var makeRecord = (obj) => obj;
      var PROGRESS_STYLES = makeRecord({
        patrick: {
          date: [17, 3],
          chars: [`\uD83C\uDF40`, `\uD83C\uDF31`],
          size: 40
        },
        simba: {
          date: [19, 7],
          chars: [`\uD83E\uDD81`, `\uD83C\uDF34`],
          size: 40
        },
        jack: {
          date: [31, 10],
          chars: [`\uD83C\uDF83`, `\uD83E\uDD87`],
          size: 40
        },
        hogsfather: {
          date: [31, 12],
          chars: [`\uD83C\uDF89`, `\uD83C\uDF84`],
          size: 40
        },
        default: {
          chars: [`=`, `-`],
          size: 80
        }
      });
      var defaultStyle = supportsEmojis && Object.keys(PROGRESS_STYLES).find((name) => {
        const style = PROGRESS_STYLES[name];
        if (style.date && (style.date[0] !== now.getDate() || style.date[1] !== now.getMonth() + 1))
          return false;
        return true;
      }) || `default`;
      function formatName(name, { configuration, json }) {
        if (!configuration.get(`enableMessageNames`))
          return ``;
        const num = name === null ? 0 : name;
        const label = (0, MessageName_1.stringifyMessageName)(num);
        if (!json && name === null) {
          return formatUtils.pretty(configuration, label, `grey`);
        } else {
          return label;
        }
      }
      function formatNameWithHyperlink(name, { configuration, json }) {
        const code = formatName(name, { configuration, json });
        if (!code)
          return code;
        if (name === null || name === MessageName_1.MessageName.UNNAMED)
          return code;
        const desc = MessageName_1.MessageName[name];
        const href = `https://yarnpkg.com/advanced/error-codes#${code}---${desc}`.toLowerCase();
        return formatUtils.applyHyperlink(configuration, code, href);
      }
      async function reportOptionDeprecations({ configuration, stdout, forceError }, checks) {
        const deprecationReport = await StreamReport.start({
          configuration,
          stdout,
          includeFooter: false
        }, async (report) => {
          let hasWarnings = false;
          let hasErrors = false;
          for (const check of checks) {
            if (typeof check.option !== `undefined`) {
              if (check.error || forceError) {
                hasErrors = true;
                report.reportError(MessageName_1.MessageName.DEPRECATED_CLI_SETTINGS, check.message);
              } else {
                hasWarnings = true;
                report.reportWarning(MessageName_1.MessageName.DEPRECATED_CLI_SETTINGS, check.message);
              }
              check.callback?.();
            }
          }
          if (hasWarnings && !hasErrors) {
            report.reportSeparator();
          }
        });
        if (deprecationReport.hasErrors()) {
          return deprecationReport.exitCode();
        } else {
          return null;
        }
      }
      var StreamReport = class extends Report_1.Report {
        static async start(opts, cb) {
          const report = new this(opts);
          const emitWarning = process.emitWarning;
          process.emitWarning = (message, name) => {
            if (typeof message !== `string`) {
              const error = message;
              message = error.message;
              name = name ?? error.name;
            }
            const fullMessage = typeof name !== `undefined` ? `${name}: ${message}` : message;
            report.reportWarning(MessageName_1.MessageName.UNNAMED, fullMessage);
          };
          if (opts.includeVersion)
            report.reportInfo(MessageName_1.MessageName.UNNAMED, formatUtils.applyStyle(opts.configuration, `Yarn ${YarnVersion_1.YarnVersion}`, formatUtils.Style.BOLD));
          try {
            await cb(report);
          } catch (error) {
            report.reportExceptionOnce(error);
          } finally {
            await report.finalize();
            process.emitWarning = emitWarning;
          }
          return report;
        }
        constructor({ configuration, stdout, json = false, forceSectionAlignment = false, includeNames = true, includePrefix = true, includeFooter = true, includeLogs = !json, includeInfos = includeLogs, includeWarnings = includeLogs }) {
          super();
          this.uncommitted = /* @__PURE__ */ new Set;
          this.warningCount = 0;
          this.errorCount = 0;
          this.timerFooter = [];
          this.startTime = Date.now();
          this.indent = 0;
          this.level = 0;
          this.progress = /* @__PURE__ */ new Map;
          this.progressTime = 0;
          this.progressFrame = 0;
          this.progressTimeout = null;
          this.progressStyle = null;
          this.progressMaxScaledSize = null;
          formatUtils.addLogFilterSupport(this, { configuration });
          this.configuration = configuration;
          this.forceSectionAlignment = forceSectionAlignment;
          this.includeNames = includeNames;
          this.includePrefix = includePrefix;
          this.includeFooter = includeFooter;
          this.includeInfos = includeInfos;
          this.includeWarnings = includeWarnings;
          this.json = json;
          this.stdout = stdout;
          if (configuration.get(`enableProgressBars`) && !json && stdout.isTTY && stdout.columns > 22) {
            const styleName = configuration.get(`progressBarStyle`) || defaultStyle;
            if (!Object.hasOwn(PROGRESS_STYLES, styleName))
              throw new Error(`Assertion failed: Invalid progress bar style`);
            this.progressStyle = PROGRESS_STYLES[styleName];
            const maxWidth = Math.min(this.getRecommendedLength(), 80);
            this.progressMaxScaledSize = Math.floor(this.progressStyle.size * maxWidth / 80);
          }
        }
        hasErrors() {
          return this.errorCount > 0;
        }
        exitCode() {
          return this.hasErrors() ? 1 : 0;
        }
        getRecommendedLength() {
          const PREFIX_SIZE = `\u27A4 YN0000: \u280B `.length;
          const recommendedLength = this.progressStyle !== null ? this.stdout.columns - 1 : super.getRecommendedLength();
          return Math.max(40, recommendedLength - PREFIX_SIZE - this.indent * 2);
        }
        startSectionSync({ reportHeader, reportFooter, skipIfEmpty }, cb) {
          const mark = { committed: false, action: () => {
            reportHeader?.();
          } };
          if (skipIfEmpty) {
            this.uncommitted.add(mark);
          } else {
            mark.action();
            mark.committed = true;
          }
          const before = Date.now();
          try {
            return cb();
          } catch (error) {
            this.reportExceptionOnce(error);
            throw error;
          } finally {
            const after = Date.now();
            this.uncommitted.delete(mark);
            if (mark.committed) {
              reportFooter?.(after - before);
            }
          }
        }
        async startSectionPromise({ reportHeader, reportFooter, skipIfEmpty }, cb) {
          const mark = { committed: false, action: () => {
            reportHeader?.();
          } };
          if (skipIfEmpty) {
            this.uncommitted.add(mark);
          } else {
            mark.action();
            mark.committed = true;
          }
          const before = Date.now();
          try {
            return await cb();
          } catch (error) {
            this.reportExceptionOnce(error);
            throw error;
          } finally {
            const after = Date.now();
            this.uncommitted.delete(mark);
            if (mark.committed) {
              reportFooter?.(after - before);
            }
          }
        }
        startTimerImpl(what, opts, cb) {
          const realOpts = typeof opts === `function` ? {} : opts;
          const realCb = typeof opts === `function` ? opts : cb;
          return {
            cb: realCb,
            reportHeader: () => {
              this.level += 1;
              this.reportInfo(null, `\u250C ${what}`);
              this.indent += 1;
              if (GROUP !== null && !this.json && this.includeInfos) {
                this.stdout.write(GROUP.start(what));
              }
            },
            reportFooter: (elapsedTime) => {
              this.indent -= 1;
              if (GROUP !== null && !this.json && this.includeInfos) {
                this.stdout.write(GROUP.end(what));
                for (const cb2 of this.timerFooter) {
                  cb2();
                }
              }
              if (this.configuration.get(`enableTimers`) && elapsedTime > 200)
                this.reportInfo(null, `\u2514 Completed in ${formatUtils.pretty(this.configuration, elapsedTime, formatUtils.Type.DURATION)}`);
              else
                this.reportInfo(null, `\u2514 Completed`);
              this.level -= 1;
            },
            skipIfEmpty: realOpts.skipIfEmpty
          };
        }
        startTimerSync(what, opts, cb) {
          const { cb: realCb, ...sectionOps } = this.startTimerImpl(what, opts, cb);
          return this.startSectionSync(sectionOps, realCb);
        }
        async startTimerPromise(what, opts, cb) {
          const { cb: realCb, ...sectionOps } = this.startTimerImpl(what, opts, cb);
          return this.startSectionPromise(sectionOps, realCb);
        }
        reportSeparator() {
          if (this.indent === 0) {
            this.writeLine(``);
          } else {
            this.reportInfo(null, ``);
          }
        }
        reportInfo(name, text) {
          if (!this.includeInfos)
            return;
          this.commit();
          const formattedName = this.formatNameWithHyperlink(name);
          const prefix = formattedName ? `${formattedName}: ` : ``;
          const message = `${this.formatPrefix(prefix, `blueBright`)}${text}`;
          if (!this.json) {
            this.writeLine(message);
          } else {
            this.reportJson({ type: `info`, name, displayName: this.formatName(name), indent: this.formatIndent(), data: text });
          }
        }
        reportWarning(name, text) {
          this.warningCount += 1;
          if (!this.includeWarnings)
            return;
          this.commit();
          const formattedName = this.formatNameWithHyperlink(name);
          const prefix = formattedName ? `${formattedName}: ` : ``;
          if (!this.json) {
            this.writeLine(`${this.formatPrefix(prefix, `yellowBright`)}${text}`);
          } else {
            this.reportJson({ type: `warning`, name, displayName: this.formatName(name), indent: this.formatIndent(), data: text });
          }
        }
        reportError(name, text) {
          this.errorCount += 1;
          this.timerFooter.push(() => this.reportErrorImpl(name, text));
          this.reportErrorImpl(name, text);
        }
        reportErrorImpl(name, text) {
          this.commit();
          const formattedName = this.formatNameWithHyperlink(name);
          const prefix = formattedName ? `${formattedName}: ` : ``;
          if (!this.json) {
            this.writeLine(`${this.formatPrefix(prefix, `redBright`)}${text}`, { truncate: false });
          } else {
            this.reportJson({ type: `error`, name, displayName: this.formatName(name), indent: this.formatIndent(), data: text });
          }
        }
        reportFold(title, text) {
          if (!GROUP)
            return;
          const message = `${GROUP.start(title)}${text}${GROUP.end(title)}`;
          this.timerFooter.push(() => this.stdout.write(message));
        }
        reportProgress(progressIt) {
          if (this.progressStyle === null)
            return { ...Promise.resolve(), stop: () => {
            } };
          if (progressIt.hasProgress && progressIt.hasTitle)
            throw new Error(`Unimplemented: Progress bars can't have both progress and titles.`);
          let stopped = false;
          const promise = Promise.resolve().then(async () => {
            const progressDefinition = {
              progress: progressIt.hasProgress ? 0 : undefined,
              title: progressIt.hasTitle ? `` : undefined
            };
            this.progress.set(progressIt, {
              definition: progressDefinition,
              lastScaledSize: progressIt.hasProgress ? -1 : undefined,
              lastTitle: undefined
            });
            this.refreshProgress({ delta: -1 });
            for await (const { progress, title } of progressIt) {
              if (stopped)
                continue;
              if (progressDefinition.progress === progress && progressDefinition.title === title)
                continue;
              progressDefinition.progress = progress;
              progressDefinition.title = title;
              this.refreshProgress();
            }
            stop();
          });
          const stop = () => {
            if (stopped)
              return;
            stopped = true;
            this.progress.delete(progressIt);
            this.refreshProgress({ delta: 1 });
          };
          return { ...promise, stop };
        }
        reportJson(data) {
          if (this.json) {
            this.writeLine(`${JSON.stringify(data)}`);
          }
        }
        async finalize() {
          if (!this.includeFooter)
            return;
          let installStatus = ``;
          if (this.errorCount > 0)
            installStatus = `Failed with errors`;
          else if (this.warningCount > 0)
            installStatus = `Done with warnings`;
          else
            installStatus = `Done`;
          const timing = formatUtils.pretty(this.configuration, Date.now() - this.startTime, formatUtils.Type.DURATION);
          const message = this.configuration.get(`enableTimers`) ? `${installStatus} in ${timing}` : installStatus;
          if (this.errorCount > 0) {
            this.reportError(MessageName_1.MessageName.UNNAMED, message);
          } else if (this.warningCount > 0) {
            this.reportWarning(MessageName_1.MessageName.UNNAMED, message);
          } else {
            this.reportInfo(MessageName_1.MessageName.UNNAMED, message);
          }
        }
        writeLine(str, { truncate } = {}) {
          this.clearProgress({ clear: true });
          this.stdout.write(`${this.truncate(str, { truncate })}
`);
          this.writeProgress();
        }
        writeLines(lines, { truncate } = {}) {
          this.clearProgress({ delta: lines.length });
          for (const line of lines)
            this.stdout.write(`${this.truncate(line, { truncate })}
`);
          this.writeProgress();
        }
        commit() {
          const marks = this.uncommitted;
          this.uncommitted = /* @__PURE__ */ new Set;
          for (const mark of marks) {
            mark.committed = true;
            mark.action();
          }
        }
        clearProgress({ delta = 0, clear = false }) {
          if (this.progressStyle === null)
            return;
          if (this.progress.size + delta > 0) {
            this.stdout.write(`\x1B[${this.progress.size + delta}A`);
            if (delta > 0 || clear) {
              this.stdout.write(`\x1B[0J`);
            }
          }
        }
        writeProgress() {
          if (this.progressStyle === null)
            return;
          if (this.progressTimeout !== null)
            clearTimeout(this.progressTimeout);
          this.progressTimeout = null;
          if (this.progress.size === 0)
            return;
          const now2 = Date.now();
          if (now2 - this.progressTime > PROGRESS_INTERVAL) {
            this.progressFrame = (this.progressFrame + 1) % PROGRESS_FRAMES.length;
            this.progressTime = now2;
          }
          const spinner = PROGRESS_FRAMES[this.progressFrame];
          for (const progress of this.progress.values()) {
            let progressBar = ``;
            if (typeof progress.lastScaledSize !== `undefined`) {
              const ok = this.progressStyle.chars[0].repeat(progress.lastScaledSize);
              const ko = this.progressStyle.chars[1].repeat(this.progressMaxScaledSize - progress.lastScaledSize);
              progressBar = ` ${ok}${ko}`;
            }
            const formattedName = this.formatName(null);
            const prefix = formattedName ? `${formattedName}: ` : ``;
            const title = progress.definition.title ? ` ${progress.definition.title}` : ``;
            this.stdout.write(`${formatUtils.pretty(this.configuration, `\u27A4`, `blueBright`)} ${prefix}${spinner}${progressBar}${title}
`);
          }
          this.progressTimeout = setTimeout(() => {
            this.refreshProgress({ force: true });
          }, PROGRESS_INTERVAL);
        }
        refreshProgress({ delta = 0, force = false } = {}) {
          let needsUpdate = false;
          let needsClear = false;
          if (force || this.progress.size === 0) {
            needsUpdate = true;
          } else {
            for (const progress of this.progress.values()) {
              const refreshedScaledSize = typeof progress.definition.progress !== `undefined` ? Math.trunc(this.progressMaxScaledSize * progress.definition.progress) : undefined;
              const previousScaledSize = progress.lastScaledSize;
              progress.lastScaledSize = refreshedScaledSize;
              const previousTitle = progress.lastTitle;
              progress.lastTitle = progress.definition.title;
              if (refreshedScaledSize !== previousScaledSize || (needsClear = previousTitle !== progress.definition.title)) {
                needsUpdate = true;
                break;
              }
            }
          }
          if (needsUpdate) {
            this.clearProgress({ delta, clear: needsClear });
            this.writeProgress();
          }
        }
        truncate(str, { truncate } = {}) {
          if (this.progressStyle === null)
            truncate = false;
          if (typeof truncate === `undefined`)
            truncate = this.configuration.get(`preferTruncatedLines`);
          if (truncate)
            str = (0, slice_ansi_1.default)(str, 0, this.stdout.columns - 1);
          return str;
        }
        formatName(name) {
          if (!this.includeNames)
            return ``;
          return formatName(name, {
            configuration: this.configuration,
            json: this.json
          });
        }
        formatPrefix(prefix, caretColor) {
          return this.includePrefix ? `${formatUtils.pretty(this.configuration, `\u27A4`, caretColor)} ${prefix}${this.formatIndent()}` : ``;
        }
        formatNameWithHyperlink(name) {
          if (!this.includeNames)
            return ``;
          return formatNameWithHyperlink(name, {
            configuration: this.configuration,
            json: this.json
          });
        }
        formatIndent() {
          return this.level > 0 || !this.forceSectionAlignment ? `\u2502 `.repeat(this.indent) : `${exports22.SINGLE_LINE_CHAR} `;
        }
      };
      exports22.StreamReport = StreamReport;
    }
  });
  var require_scriptUtils = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/scriptUtils.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.PackageManager = undefined;
      exports22.detectPackageManager = detectPackageManager;
      exports22.makeScriptEnv = makeScriptEnv;
      exports22.prepareExternalProject = prepareExternalProject;
      exports22.hasPackageScript = hasPackageScript;
      exports22.executePackageScript = executePackageScript;
      exports22.executePackageShellcode = executePackageShellcode;
      exports22.executeWorkspaceScript = executeWorkspaceScript;
      exports22.hasWorkspaceScript = hasWorkspaceScript;
      exports22.executeWorkspaceLifecycleScript = executeWorkspaceLifecycleScript;
      exports22.maybeExecuteWorkspaceLifecycleScript = maybeExecuteWorkspaceLifecycleScript;
      exports22.isNodeScript = isNodeScript;
      exports22.getPackageAccessibleBinaries = getPackageAccessibleBinaries;
      exports22.getWorkspaceAccessibleBinaries = getWorkspaceAccessibleBinaries;
      exports22.executePackageAccessibleBinary = executePackageAccessibleBinary;
      exports22.executeWorkspaceAccessibleBinary = executeWorkspaceAccessibleBinary;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var fslib_12 = require_lib();
      var fslib_2 = require_lib();
      var libzip_1 = require_sync7();
      var shell_1 = require_lib4();
      var capitalize_1 = tslib_12.__importDefault(require_capitalize());
      var p_limit_12 = tslib_12.__importDefault(require_p_limit());
      var stream_12 = __require("stream");
      var Manifest_1 = require_Manifest();
      var MessageName_1 = require_MessageName();
      var Report_1 = require_Report();
      var StreamReport_1 = require_StreamReport();
      var YarnVersion_1 = require_YarnVersion();
      var execUtils = tslib_12.__importStar(require_execUtils());
      var formatUtils = tslib_12.__importStar(require_formatUtils());
      var miscUtils = tslib_12.__importStar(require_miscUtils());
      var semverUtils = tslib_12.__importStar(require_semverUtils());
      var structUtils = tslib_12.__importStar(require_structUtils());
      var PackageManager;
      (function(PackageManager2) {
        PackageManager2["Yarn1"] = "Yarn Classic";
        PackageManager2["Yarn2"] = "Yarn";
        PackageManager2["Npm"] = "npm";
        PackageManager2["Pnpm"] = "pnpm";
      })(PackageManager || (exports22.PackageManager = PackageManager = {}));
      async function makePathWrapper(location, name, argv0, args = []) {
        if (process.platform === `win32`) {
          const cmdScript = `@goto #_undefined_# 2>NUL || @title %COMSPEC% & @setlocal & @"${argv0}" ${args.map((arg) => `"${arg.replace(`"`, `""`)}"`).join(` `)} %*`;
          await fslib_2.xfs.writeFilePromise(fslib_2.ppath.format({ dir: location, name, ext: `.cmd` }), cmdScript);
        }
        await fslib_2.xfs.writeFilePromise(fslib_2.ppath.join(location, name), `#!/bin/sh
exec "${argv0}" ${args.map((arg) => `'${arg.replace(/'/g, `'"'"'`)}'`).join(` `)} "$@"
`, {
          mode: 493
        });
      }
      async function detectPackageManager(location) {
        const manifest = await Manifest_1.Manifest.tryFind(location);
        if (manifest?.packageManager) {
          const locator = structUtils.tryParseLocator(manifest.packageManager);
          if (locator?.name) {
            const reason = `found ${JSON.stringify({ packageManager: manifest.packageManager })} in manifest`;
            const [major] = locator.reference.split(`.`);
            switch (locator.name) {
              case `yarn`: {
                const packageManager = Number(major) === 1 ? PackageManager.Yarn1 : PackageManager.Yarn2;
                return { packageManagerField: true, packageManager, reason };
              }
              case `npm`: {
                return { packageManagerField: true, packageManager: PackageManager.Npm, reason };
              }
              case `pnpm`: {
                return { packageManagerField: true, packageManager: PackageManager.Pnpm, reason };
              }
            }
          }
        }
        let yarnLock;
        try {
          yarnLock = await fslib_2.xfs.readFilePromise(fslib_2.ppath.join(location, fslib_12.Filename.lockfile), `utf8`);
        } catch {
        }
        if (yarnLock !== undefined) {
          if (yarnLock.match(/^__metadata:$/m)) {
            return {
              packageManager: PackageManager.Yarn2,
              reason: `"__metadata" key found in yarn.lock`
            };
          } else {
            return {
              packageManager: PackageManager.Yarn1,
              reason: `"__metadata" key not found in yarn.lock, must be a Yarn classic lockfile`
            };
          }
        }
        if (fslib_2.xfs.existsSync(fslib_2.ppath.join(location, `package-lock.json`)))
          return { packageManager: PackageManager.Npm, reason: `found npm's "package-lock.json" lockfile` };
        if (fslib_2.xfs.existsSync(fslib_2.ppath.join(location, `pnpm-lock.yaml`)))
          return { packageManager: PackageManager.Pnpm, reason: `found pnpm's "pnpm-lock.yaml" lockfile` };
        return null;
      }
      async function makeScriptEnv({ project, locator, binFolder, ignoreCorepack, lifecycleScript, baseEnv = project?.configuration.env ?? process.env }) {
        const scriptEnv = {};
        for (const [key, value] of Object.entries(baseEnv))
          if (typeof value !== `undefined`)
            scriptEnv[key.toLowerCase() !== `path` ? key : `PATH`] = value;
        const nBinFolder = fslib_2.npath.fromPortablePath(binFolder);
        scriptEnv.BERRY_BIN_FOLDER = fslib_2.npath.fromPortablePath(nBinFolder);
        const yarnBin = process.env.COREPACK_ROOT && !ignoreCorepack ? fslib_2.npath.join(process.env.COREPACK_ROOT, `dist/yarn.js`) : process.argv[1];
        await Promise.all([
          makePathWrapper(binFolder, `node`, process.execPath),
          ...YarnVersion_1.YarnVersion !== null ? [
            makePathWrapper(binFolder, `run`, process.execPath, [yarnBin, `run`]),
            makePathWrapper(binFolder, `yarn`, process.execPath, [yarnBin]),
            makePathWrapper(binFolder, `yarnpkg`, process.execPath, [yarnBin]),
            makePathWrapper(binFolder, `node-gyp`, process.execPath, [yarnBin, `run`, `--top-level`, `node-gyp`])
          ] : []
        ]);
        if (project) {
          scriptEnv.INIT_CWD = fslib_2.npath.fromPortablePath(project.configuration.startingCwd);
          scriptEnv.PROJECT_CWD = fslib_2.npath.fromPortablePath(project.cwd);
        }
        scriptEnv.PATH = scriptEnv.PATH ? `${nBinFolder}${fslib_2.npath.delimiter}${scriptEnv.PATH}` : `${nBinFolder}`;
        scriptEnv.npm_execpath = `${nBinFolder}${fslib_2.npath.sep}yarn`;
        scriptEnv.npm_node_execpath = `${nBinFolder}${fslib_2.npath.sep}node`;
        if (locator) {
          if (!project)
            throw new Error(`Assertion failed: Missing project`);
          const workspace = project.tryWorkspaceByLocator(locator);
          const version2 = workspace ? workspace.manifest.version ?? `` : project.storedPackages.get(locator.locatorHash).version ?? ``;
          scriptEnv.npm_package_name = structUtils.stringifyIdent(locator);
          scriptEnv.npm_package_version = version2;
          let packageLocation;
          if (workspace) {
            packageLocation = workspace.cwd;
          } else {
            const pkg = project.storedPackages.get(locator.locatorHash);
            if (!pkg)
              throw new Error(`Package for ${structUtils.prettyLocator(project.configuration, locator)} not found in the project`);
            const linkers = project.configuration.getLinkers();
            const linkerOptions = { project, report: new StreamReport_1.StreamReport({ stdout: new stream_12.PassThrough, configuration: project.configuration }) };
            const linker = linkers.find((linker2) => linker2.supportsPackage(pkg, linkerOptions));
            if (!linker)
              throw new Error(`The package ${structUtils.prettyLocator(project.configuration, pkg)} isn't supported by any of the available linkers`);
            packageLocation = await linker.findPackageLocation(pkg, linkerOptions);
          }
          scriptEnv.npm_package_json = fslib_2.npath.fromPortablePath(fslib_2.ppath.join(packageLocation, fslib_12.Filename.manifest));
        }
        const version = YarnVersion_1.YarnVersion !== null ? `yarn/${YarnVersion_1.YarnVersion}` : `yarn/${miscUtils.dynamicRequire(`@yarnpkg/core`).version}-core`;
        scriptEnv.npm_config_user_agent = `${version} npm/? node/${process.version} ${process.platform} ${process.arch}`;
        if (lifecycleScript)
          scriptEnv.npm_lifecycle_event = lifecycleScript;
        if (project) {
          await project.configuration.triggerHook((hook) => hook.setupScriptEnvironment, project, scriptEnv, async (name, argv0, args) => {
            return await makePathWrapper(binFolder, name, argv0, args);
          });
        }
        return scriptEnv;
      }
      var MAX_PREPARE_CONCURRENCY = 2;
      var prepareLimit = (0, p_limit_12.default)(MAX_PREPARE_CONCURRENCY);
      async function prepareExternalProject(cwd, outputPath, { configuration, report, workspace = null, locator = null }) {
        await prepareLimit(async () => {
          await fslib_2.xfs.mktempPromise(async (logDir) => {
            const logFile = fslib_2.ppath.join(logDir, `pack.log`);
            const stdin = null;
            const { stdout, stderr } = configuration.getSubprocessStreams(logFile, { prefix: fslib_2.npath.fromPortablePath(cwd), report });
            const devirtualizedLocator = locator && structUtils.isVirtualLocator(locator) ? structUtils.devirtualizeLocator(locator) : locator;
            const name = devirtualizedLocator ? structUtils.stringifyLocator(devirtualizedLocator) : `an external project`;
            stdout.write(`Packing ${name} from sources
`);
            const packageManagerSelection = await detectPackageManager(cwd);
            let effectivePackageManager;
            if (packageManagerSelection !== null) {
              stdout.write(`Using ${packageManagerSelection.packageManager} for bootstrap. Reason: ${packageManagerSelection.reason}

`);
              effectivePackageManager = packageManagerSelection.packageManager;
            } else {
              stdout.write(`No package manager configuration detected; defaulting to Yarn

`);
              effectivePackageManager = PackageManager.Yarn2;
            }
            const ignoreCorepack = effectivePackageManager === PackageManager.Yarn2 && !packageManagerSelection?.packageManagerField;
            await fslib_2.xfs.mktempPromise(async (binFolder) => {
              const env = await makeScriptEnv({ binFolder, ignoreCorepack, baseEnv: { ...process.env, COREPACK_ENABLE_AUTO_PIN: `0` } });
              const workflows = /* @__PURE__ */ new Map([
                [PackageManager.Yarn1, async () => {
                  const workspaceCli = workspace !== null ? [`workspace`, workspace] : [];
                  const manifestPath = fslib_2.ppath.join(cwd, fslib_12.Filename.manifest);
                  const manifestBuffer = await fslib_2.xfs.readFilePromise(manifestPath);
                  const version = await execUtils.pipevp(process.execPath, [process.argv[1], `set`, `version`, `classic`, `--only-if-needed`, `--yarn-path`], { cwd, env, stdin, stdout, stderr, end: execUtils.EndStrategy.ErrorCode });
                  if (version.code !== 0)
                    return version.code;
                  await fslib_2.xfs.writeFilePromise(manifestPath, manifestBuffer);
                  await fslib_2.xfs.appendFilePromise(fslib_2.ppath.join(cwd, `.npmignore`), `/.yarn
`);
                  stdout.write(`
`);
                  delete env.NODE_ENV;
                  const install2 = await execUtils.pipevp(`yarn`, [`install`], { cwd, env, stdin, stdout, stderr, end: execUtils.EndStrategy.ErrorCode });
                  if (install2.code !== 0)
                    return install2.code;
                  stdout.write(`
`);
                  const pack = await execUtils.pipevp(`yarn`, [...workspaceCli, `pack`, `--filename`, fslib_2.npath.fromPortablePath(outputPath)], { cwd, env, stdin, stdout, stderr });
                  if (pack.code !== 0)
                    return pack.code;
                  return 0;
                }],
                [PackageManager.Yarn2, async () => {
                  const workspaceCli = workspace !== null ? [`workspace`, workspace] : [];
                  env.YARN_ENABLE_INLINE_BUILDS = `1`;
                  const lockfilePath = fslib_2.ppath.join(cwd, fslib_12.Filename.lockfile);
                  if (!await fslib_2.xfs.existsPromise(lockfilePath))
                    await fslib_2.xfs.writeFilePromise(lockfilePath, ``);
                  const pack = await execUtils.pipevp(`yarn`, [...workspaceCli, `pack`, `--install-if-needed`, `--filename`, fslib_2.npath.fromPortablePath(outputPath)], { cwd, env, stdin, stdout, stderr });
                  if (pack.code !== 0)
                    return pack.code;
                  return 0;
                }],
                [PackageManager.Npm, async () => {
                  if (workspace !== null) {
                    const versionStream = new stream_12.PassThrough;
                    const versionPromise = miscUtils.bufferStream(versionStream);
                    versionStream.pipe(stdout, { end: false });
                    const version = await execUtils.pipevp(`npm`, [`--version`], { cwd, env, stdin, stdout: versionStream, stderr, end: execUtils.EndStrategy.Never });
                    versionStream.end();
                    if (version.code !== 0) {
                      stdout.end();
                      stderr.end();
                      return version.code;
                    }
                    const npmVersion = (await versionPromise).toString().trim();
                    if (!semverUtils.satisfiesWithPrereleases(npmVersion, `>=7.x`)) {
                      const npmIdent = structUtils.makeIdent(null, `npm`);
                      const currentNpmDescriptor = structUtils.makeDescriptor(npmIdent, npmVersion);
                      const requiredNpmDescriptor = structUtils.makeDescriptor(npmIdent, `>=7.x`);
                      throw new Error(`Workspaces aren't supported by ${structUtils.prettyDescriptor(configuration, currentNpmDescriptor)}; please upgrade to ${structUtils.prettyDescriptor(configuration, requiredNpmDescriptor)} (npm has been detected as the primary package manager for ${formatUtils.pretty(configuration, cwd, formatUtils.Type.PATH)})`);
                    }
                  }
                  const workspaceCli = workspace !== null ? [`--workspace`, workspace] : [];
                  delete env.npm_config_user_agent;
                  delete env.npm_config_production;
                  delete env.NPM_CONFIG_PRODUCTION;
                  delete env.NODE_ENV;
                  const install2 = await execUtils.pipevp(`npm`, [`install`, `--legacy-peer-deps`], { cwd, env, stdin, stdout, stderr, end: execUtils.EndStrategy.ErrorCode });
                  if (install2.code !== 0)
                    return install2.code;
                  const packStream = new stream_12.PassThrough;
                  const packPromise = miscUtils.bufferStream(packStream);
                  packStream.pipe(stdout);
                  const pack = await execUtils.pipevp(`npm`, [`pack`, `--silent`, ...workspaceCli], { cwd, env, stdin, stdout: packStream, stderr });
                  if (pack.code !== 0)
                    return pack.code;
                  const packOutput = (await packPromise).toString().trim().replace(/^.*\n/s, ``);
                  const packTarget = fslib_2.ppath.resolve(cwd, fslib_2.npath.toPortablePath(packOutput));
                  await fslib_2.xfs.renamePromise(packTarget, outputPath);
                  return 0;
                }]
              ]);
              const workflow = workflows.get(effectivePackageManager);
              if (typeof workflow === `undefined`)
                throw new Error(`Assertion failed: Unsupported workflow`);
              const code = await workflow();
              if (code === 0 || typeof code === `undefined`)
                return;
              fslib_2.xfs.detachTemp(logDir);
              throw new Report_1.ReportError(MessageName_1.MessageName.PACKAGE_PREPARATION_FAILED, `Packing the package failed (exit code ${code}, logs can be found here: ${formatUtils.pretty(configuration, logFile, formatUtils.Type.PATH)})`);
            });
          });
        });
      }
      async function hasPackageScript(locator, scriptName, { project }) {
        const workspace = project.tryWorkspaceByLocator(locator);
        if (workspace !== null)
          return hasWorkspaceScript(workspace, scriptName);
        const pkg = project.storedPackages.get(locator.locatorHash);
        if (!pkg)
          throw new Error(`Package for ${structUtils.prettyLocator(project.configuration, locator)} not found in the project`);
        return await libzip_1.ZipOpenFS.openPromise(async (zipOpenFs) => {
          const configuration = project.configuration;
          const linkers = project.configuration.getLinkers();
          const linkerOptions = { project, report: new StreamReport_1.StreamReport({ stdout: new stream_12.PassThrough, configuration }) };
          const linker = linkers.find((linker2) => linker2.supportsPackage(pkg, linkerOptions));
          if (!linker)
            throw new Error(`The package ${structUtils.prettyLocator(project.configuration, pkg)} isn't supported by any of the available linkers`);
          const packageLocation = await linker.findPackageLocation(pkg, linkerOptions);
          const packageFs = new fslib_12.CwdFS(packageLocation, { baseFs: zipOpenFs });
          const manifest = await Manifest_1.Manifest.find(fslib_12.PortablePath.dot, { baseFs: packageFs });
          return manifest.scripts.has(scriptName);
        });
      }
      async function executePackageScript(locator, scriptName, args, { cwd, project, stdin, stdout, stderr }) {
        return await fslib_2.xfs.mktempPromise(async (binFolder) => {
          const { manifest, env, cwd: realCwd } = await initializePackageEnvironment(locator, { project, binFolder, cwd, lifecycleScript: scriptName });
          const script = manifest.scripts.get(scriptName);
          if (typeof script === `undefined`)
            return 1;
          const realExecutor = async () => {
            return await (0, shell_1.execute)(script, args, { cwd: realCwd, env, stdin, stdout, stderr });
          };
          const executor = await project.configuration.reduceHook((hooks) => {
            return hooks.wrapScriptExecution;
          }, realExecutor, project, locator, scriptName, {
            script,
            args,
            cwd: realCwd,
            env,
            stdin,
            stdout,
            stderr
          });
          return await executor();
        });
      }
      async function executePackageShellcode(locator, command, args, { cwd, project, stdin, stdout, stderr }) {
        return await fslib_2.xfs.mktempPromise(async (binFolder) => {
          const { env, cwd: realCwd } = await initializePackageEnvironment(locator, { project, binFolder, cwd });
          return await (0, shell_1.execute)(command, args, { cwd: realCwd, env, stdin, stdout, stderr });
        });
      }
      async function initializeWorkspaceEnvironment(workspace, { binFolder, cwd, lifecycleScript }) {
        const env = await makeScriptEnv({ project: workspace.project, locator: workspace.anchoredLocator, binFolder, lifecycleScript });
        await installBinaries(binFolder, await getWorkspaceAccessibleBinaries(workspace));
        if (typeof cwd === `undefined`)
          cwd = fslib_2.ppath.dirname(await fslib_2.xfs.realpathPromise(fslib_2.ppath.join(workspace.cwd, `package.json`)));
        return { manifest: workspace.manifest, binFolder, env, cwd };
      }
      async function initializePackageEnvironment(locator, { project, binFolder, cwd, lifecycleScript }) {
        const workspace = project.tryWorkspaceByLocator(locator);
        if (workspace !== null)
          return initializeWorkspaceEnvironment(workspace, { binFolder, cwd, lifecycleScript });
        const pkg = project.storedPackages.get(locator.locatorHash);
        if (!pkg)
          throw new Error(`Package for ${structUtils.prettyLocator(project.configuration, locator)} not found in the project`);
        return await libzip_1.ZipOpenFS.openPromise(async (zipOpenFs) => {
          const configuration = project.configuration;
          const linkers = project.configuration.getLinkers();
          const linkerOptions = { project, report: new StreamReport_1.StreamReport({ stdout: new stream_12.PassThrough, configuration }) };
          const linker = linkers.find((linker2) => linker2.supportsPackage(pkg, linkerOptions));
          if (!linker)
            throw new Error(`The package ${structUtils.prettyLocator(project.configuration, pkg)} isn't supported by any of the available linkers`);
          const env = await makeScriptEnv({ project, locator, binFolder, lifecycleScript });
          await installBinaries(binFolder, await getPackageAccessibleBinaries(locator, { project }));
          const packageLocation = await linker.findPackageLocation(pkg, linkerOptions);
          const packageFs = new fslib_12.CwdFS(packageLocation, { baseFs: zipOpenFs });
          const manifest = await Manifest_1.Manifest.find(fslib_12.PortablePath.dot, { baseFs: packageFs });
          if (typeof cwd === `undefined`)
            cwd = packageLocation;
          return { manifest, binFolder, env, cwd };
        });
      }
      async function executeWorkspaceScript(workspace, scriptName, args, { cwd, stdin, stdout, stderr }) {
        return await executePackageScript(workspace.anchoredLocator, scriptName, args, { cwd, project: workspace.project, stdin, stdout, stderr });
      }
      function hasWorkspaceScript(workspace, scriptName) {
        return workspace.manifest.scripts.has(scriptName);
      }
      async function executeWorkspaceLifecycleScript(workspace, lifecycleScriptName, { cwd, report }) {
        const { configuration } = workspace.project;
        const stdin = null;
        await fslib_2.xfs.mktempPromise(async (logDir) => {
          const logFile = fslib_2.ppath.join(logDir, `${lifecycleScriptName}.log`);
          const header = `# This file contains the result of Yarn calling the "${lifecycleScriptName}" lifecycle script inside a workspace ("${fslib_2.npath.fromPortablePath(workspace.cwd)}")
`;
          const { stdout, stderr } = configuration.getSubprocessStreams(logFile, {
            report,
            prefix: structUtils.prettyLocator(configuration, workspace.anchoredLocator),
            header
          });
          report.reportInfo(MessageName_1.MessageName.LIFECYCLE_SCRIPT, `Calling the "${lifecycleScriptName}" lifecycle script`);
          const exitCode = await executeWorkspaceScript(workspace, lifecycleScriptName, [], { cwd, stdin, stdout, stderr });
          stdout.end();
          stderr.end();
          if (exitCode !== 0) {
            fslib_2.xfs.detachTemp(logDir);
            throw new Report_1.ReportError(MessageName_1.MessageName.LIFECYCLE_SCRIPT, `${(0, capitalize_1.default)(lifecycleScriptName)} script failed (exit code ${formatUtils.pretty(configuration, exitCode, formatUtils.Type.NUMBER)}, logs can be found here: ${formatUtils.pretty(configuration, logFile, formatUtils.Type.PATH)}); run ${formatUtils.pretty(configuration, `yarn ${lifecycleScriptName}`, formatUtils.Type.CODE)} to investigate`);
          }
        });
      }
      async function maybeExecuteWorkspaceLifecycleScript(workspace, lifecycleScriptName, opts) {
        if (hasWorkspaceScript(workspace, lifecycleScriptName)) {
          await executeWorkspaceLifecycleScript(workspace, lifecycleScriptName, opts);
        }
      }
      function isNodeScript(p) {
        const ext = fslib_2.ppath.extname(p);
        if (ext.match(/\.[cm]?[jt]sx?$/))
          return true;
        if (ext === `.exe` || ext === `.bin`)
          return false;
        const buf = Buffer.alloc(4);
        let fd;
        try {
          fd = fslib_2.xfs.openSync(p, `r`);
        } catch {
          return true;
        }
        try {
          fslib_2.xfs.readSync(fd, buf, 0, buf.length, 0);
        } finally {
          fslib_2.xfs.closeSync(fd);
        }
        const magic = buf.readUint32BE();
        if (magic === 3405691582 || magic === 3489328638 || magic === 2135247942 || (magic & 4294901760) === 1297743872)
          return false;
        return true;
      }
      async function getPackageAccessibleBinaries(locator, { project }) {
        const configuration = project.configuration;
        const binaries = /* @__PURE__ */ new Map;
        const pkg = project.storedPackages.get(locator.locatorHash);
        if (!pkg)
          throw new Error(`Package for ${structUtils.prettyLocator(configuration, locator)} not found in the project`);
        const stdout = new stream_12.Writable;
        const linkers = configuration.getLinkers();
        const linkerOptions = { project, report: new StreamReport_1.StreamReport({ configuration, stdout }) };
        const visibleLocators = /* @__PURE__ */ new Set([locator.locatorHash]);
        for (const descriptor of pkg.dependencies.values()) {
          const resolution = project.storedResolutions.get(descriptor.descriptorHash);
          if (!resolution)
            throw new Error(`Assertion failed: The resolution (${structUtils.prettyDescriptor(configuration, descriptor)}) should have been registered`);
          visibleLocators.add(resolution);
        }
        const dependenciesWithBinaries = await Promise.all(Array.from(visibleLocators, async (locatorHash) => {
          const dependency = project.storedPackages.get(locatorHash);
          if (!dependency)
            throw new Error(`Assertion failed: The package (${locatorHash}) should have been registered`);
          if (dependency.bin.size === 0)
            return miscUtils.mapAndFilter.skip;
          const linker = linkers.find((linker2) => linker2.supportsPackage(dependency, linkerOptions));
          if (!linker)
            return miscUtils.mapAndFilter.skip;
          let packageLocation = null;
          try {
            packageLocation = await linker.findPackageLocation(dependency, linkerOptions);
          } catch (err) {
            if (err.code === `LOCATOR_NOT_INSTALLED`) {
              return miscUtils.mapAndFilter.skip;
            } else {
              throw err;
            }
          }
          return { dependency, packageLocation };
        }));
        for (const candidate of dependenciesWithBinaries) {
          if (candidate === miscUtils.mapAndFilter.skip)
            continue;
          const { dependency, packageLocation } = candidate;
          for (const [name, target] of dependency.bin) {
            const binaryPath = fslib_2.ppath.resolve(packageLocation, target);
            binaries.set(name, [dependency, fslib_2.npath.fromPortablePath(binaryPath), isNodeScript(binaryPath)]);
          }
        }
        return binaries;
      }
      async function getWorkspaceAccessibleBinaries(workspace) {
        return await getPackageAccessibleBinaries(workspace.anchoredLocator, { project: workspace.project });
      }
      async function installBinaries(target, binaries) {
        await Promise.all(Array.from(binaries, ([binaryName, [, binaryPath, isScript]]) => {
          return isScript ? makePathWrapper(target, binaryName, process.execPath, [binaryPath]) : makePathWrapper(target, binaryName, binaryPath, []);
        }));
      }
      async function executePackageAccessibleBinary(locator, binaryName, args, { cwd, project, stdin, stdout, stderr, nodeArgs = [], packageAccessibleBinaries }) {
        packageAccessibleBinaries ??= await getPackageAccessibleBinaries(locator, { project });
        const binary = packageAccessibleBinaries.get(binaryName);
        if (!binary)
          throw new Error(`Binary not found (${binaryName}) for ${structUtils.prettyLocator(project.configuration, locator)}`);
        return await fslib_2.xfs.mktempPromise(async (binFolder) => {
          const [, binaryPath] = binary;
          const env = await makeScriptEnv({ project, locator, binFolder });
          await installBinaries(env.BERRY_BIN_FOLDER, packageAccessibleBinaries);
          const promise = isNodeScript(fslib_2.npath.toPortablePath(binaryPath)) ? execUtils.pipevp(process.execPath, [...nodeArgs, binaryPath, ...args], { cwd, env, stdin, stdout, stderr }) : execUtils.pipevp(binaryPath, args, { cwd, env, stdin, stdout, stderr });
          let result2;
          try {
            result2 = await promise;
          } finally {
            await fslib_2.xfs.removePromise(env.BERRY_BIN_FOLDER);
          }
          return result2.code;
        });
      }
      async function executeWorkspaceAccessibleBinary(workspace, binaryName, args, { cwd, stdin, stdout, stderr, packageAccessibleBinaries }) {
        return await executePackageAccessibleBinary(workspace.anchoredLocator, binaryName, args, { project: workspace.project, cwd, stdin, stdout, stderr, packageAccessibleBinaries });
      }
    }
  });
  var require_high_level_opt = __commonJS2({
    "../../node_modules/.pnpm/tar@6.2.1/node_modules/tar/lib/high-level-opt.js"(exports22, module22) {
      var argmap = /* @__PURE__ */ new Map([
        ["C", "cwd"],
        ["f", "file"],
        ["z", "gzip"],
        ["P", "preservePaths"],
        ["U", "unlink"],
        ["strip-components", "strip"],
        ["stripComponents", "strip"],
        ["keep-newer", "newer"],
        ["keepNewer", "newer"],
        ["keep-newer-files", "newer"],
        ["keepNewerFiles", "newer"],
        ["k", "keep"],
        ["keep-existing", "keep"],
        ["keepExisting", "keep"],
        ["m", "noMtime"],
        ["no-mtime", "noMtime"],
        ["p", "preserveOwner"],
        ["L", "follow"],
        ["h", "follow"]
      ]);
      module22.exports = (opt) => opt ? Object.keys(opt).map((k) => [
        argmap.has(k) ? argmap.get(k) : k,
        opt[k]
      ]).reduce((set, kv) => (set[kv[0]] = kv[1], set), /* @__PURE__ */ Object.create(null)) : {};
    }
  });
  var require_minipass = __commonJS2({
    "../../node_modules/.pnpm/minipass@5.0.0/node_modules/minipass/index.js"(exports22) {
      var proc = typeof process === "object" && process ? process : {
        stdout: null,
        stderr: null
      };
      var EE = __require("events");
      var Stream = __require("stream");
      var stringdecoder = __require("string_decoder");
      var SD = stringdecoder.StringDecoder;
      var EOF = Symbol("EOF");
      var MAYBE_EMIT_END = Symbol("maybeEmitEnd");
      var EMITTED_END = Symbol("emittedEnd");
      var EMITTING_END = Symbol("emittingEnd");
      var EMITTED_ERROR = Symbol("emittedError");
      var CLOSED = Symbol("closed");
      var READ = Symbol("read");
      var FLUSH = Symbol("flush");
      var FLUSHCHUNK = Symbol("flushChunk");
      var ENCODING = Symbol("encoding");
      var DECODER = Symbol("decoder");
      var FLOWING = Symbol("flowing");
      var PAUSED = Symbol("paused");
      var RESUME = Symbol("resume");
      var BUFFER = Symbol("buffer");
      var PIPES = Symbol("pipes");
      var BUFFERLENGTH = Symbol("bufferLength");
      var BUFFERPUSH = Symbol("bufferPush");
      var BUFFERSHIFT = Symbol("bufferShift");
      var OBJECTMODE = Symbol("objectMode");
      var DESTROYED = Symbol("destroyed");
      var ERROR = Symbol("error");
      var EMITDATA = Symbol("emitData");
      var EMITEND = Symbol("emitEnd");
      var EMITEND2 = Symbol("emitEnd2");
      var ASYNC = Symbol("async");
      var ABORT = Symbol("abort");
      var ABORTED = Symbol("aborted");
      var SIGNAL = Symbol("signal");
      var defer = (fn) => Promise.resolve().then(fn);
      var doIter = global._MP_NO_ITERATOR_SYMBOLS_ !== "1";
      var ASYNCITERATOR = doIter && Symbol.asyncIterator || Symbol("asyncIterator not implemented");
      var ITERATOR = doIter && Symbol.iterator || Symbol("iterator not implemented");
      var isEndish = (ev) => ev === "end" || ev === "finish" || ev === "prefinish";
      var isArrayBuffer = (b) => b instanceof ArrayBuffer || typeof b === "object" && b.constructor && b.constructor.name === "ArrayBuffer" && b.byteLength >= 0;
      var isArrayBufferView = (b) => !Buffer.isBuffer(b) && ArrayBuffer.isView(b);
      var Pipe = class {
        constructor(src, dest, opts) {
          this.src = src;
          this.dest = dest;
          this.opts = opts;
          this.ondrain = () => src[RESUME]();
          dest.on("drain", this.ondrain);
        }
        unpipe() {
          this.dest.removeListener("drain", this.ondrain);
        }
        proxyErrors() {
        }
        end() {
          this.unpipe();
          if (this.opts.end)
            this.dest.end();
        }
      };
      var PipeProxyErrors = class extends Pipe {
        unpipe() {
          this.src.removeListener("error", this.proxyErrors);
          super.unpipe();
        }
        constructor(src, dest, opts) {
          super(src, dest, opts);
          this.proxyErrors = (er) => dest.emit("error", er);
          src.on("error", this.proxyErrors);
        }
      };
      var Minipass = class _Minipass extends Stream {
        constructor(options) {
          super();
          this[FLOWING] = false;
          this[PAUSED] = false;
          this[PIPES] = [];
          this[BUFFER] = [];
          this[OBJECTMODE] = options && options.objectMode || false;
          if (this[OBJECTMODE])
            this[ENCODING] = null;
          else
            this[ENCODING] = options && options.encoding || null;
          if (this[ENCODING] === "buffer")
            this[ENCODING] = null;
          this[ASYNC] = options && !!options.async || false;
          this[DECODER] = this[ENCODING] ? new SD(this[ENCODING]) : null;
          this[EOF] = false;
          this[EMITTED_END] = false;
          this[EMITTING_END] = false;
          this[CLOSED] = false;
          this[EMITTED_ERROR] = null;
          this.writable = true;
          this.readable = true;
          this[BUFFERLENGTH] = 0;
          this[DESTROYED] = false;
          if (options && options.debugExposeBuffer === true) {
            Object.defineProperty(this, "buffer", { get: () => this[BUFFER] });
          }
          if (options && options.debugExposePipes === true) {
            Object.defineProperty(this, "pipes", { get: () => this[PIPES] });
          }
          this[SIGNAL] = options && options.signal;
          this[ABORTED] = false;
          if (this[SIGNAL]) {
            this[SIGNAL].addEventListener("abort", () => this[ABORT]());
            if (this[SIGNAL].aborted) {
              this[ABORT]();
            }
          }
        }
        get bufferLength() {
          return this[BUFFERLENGTH];
        }
        get encoding() {
          return this[ENCODING];
        }
        set encoding(enc) {
          if (this[OBJECTMODE])
            throw new Error("cannot set encoding in objectMode");
          if (this[ENCODING] && enc !== this[ENCODING] && (this[DECODER] && this[DECODER].lastNeed || this[BUFFERLENGTH]))
            throw new Error("cannot change encoding");
          if (this[ENCODING] !== enc) {
            this[DECODER] = enc ? new SD(enc) : null;
            if (this[BUFFER].length)
              this[BUFFER] = this[BUFFER].map((chunk) => this[DECODER].write(chunk));
          }
          this[ENCODING] = enc;
        }
        setEncoding(enc) {
          this.encoding = enc;
        }
        get objectMode() {
          return this[OBJECTMODE];
        }
        set objectMode(om) {
          this[OBJECTMODE] = this[OBJECTMODE] || !!om;
        }
        get ["async"]() {
          return this[ASYNC];
        }
        set ["async"](a) {
          this[ASYNC] = this[ASYNC] || !!a;
        }
        [ABORT]() {
          this[ABORTED] = true;
          this.emit("abort", this[SIGNAL].reason);
          this.destroy(this[SIGNAL].reason);
        }
        get aborted() {
          return this[ABORTED];
        }
        set aborted(_) {
        }
        write(chunk, encoding, cb) {
          if (this[ABORTED])
            return false;
          if (this[EOF])
            throw new Error("write after end");
          if (this[DESTROYED]) {
            this.emit("error", Object.assign(new Error("Cannot call write after a stream was destroyed"), { code: "ERR_STREAM_DESTROYED" }));
            return true;
          }
          if (typeof encoding === "function")
            cb = encoding, encoding = "utf8";
          if (!encoding)
            encoding = "utf8";
          const fn = this[ASYNC] ? defer : (f) => f();
          if (!this[OBJECTMODE] && !Buffer.isBuffer(chunk)) {
            if (isArrayBufferView(chunk))
              chunk = Buffer.from(chunk.buffer, chunk.byteOffset, chunk.byteLength);
            else if (isArrayBuffer(chunk))
              chunk = Buffer.from(chunk);
            else if (typeof chunk !== "string")
              this.objectMode = true;
          }
          if (this[OBJECTMODE]) {
            if (this.flowing && this[BUFFERLENGTH] !== 0)
              this[FLUSH](true);
            if (this.flowing)
              this.emit("data", chunk);
            else
              this[BUFFERPUSH](chunk);
            if (this[BUFFERLENGTH] !== 0)
              this.emit("readable");
            if (cb)
              fn(cb);
            return this.flowing;
          }
          if (!chunk.length) {
            if (this[BUFFERLENGTH] !== 0)
              this.emit("readable");
            if (cb)
              fn(cb);
            return this.flowing;
          }
          if (typeof chunk === "string" && !(encoding === this[ENCODING] && !this[DECODER].lastNeed)) {
            chunk = Buffer.from(chunk, encoding);
          }
          if (Buffer.isBuffer(chunk) && this[ENCODING])
            chunk = this[DECODER].write(chunk);
          if (this.flowing && this[BUFFERLENGTH] !== 0)
            this[FLUSH](true);
          if (this.flowing)
            this.emit("data", chunk);
          else
            this[BUFFERPUSH](chunk);
          if (this[BUFFERLENGTH] !== 0)
            this.emit("readable");
          if (cb)
            fn(cb);
          return this.flowing;
        }
        read(n) {
          if (this[DESTROYED])
            return null;
          if (this[BUFFERLENGTH] === 0 || n === 0 || n > this[BUFFERLENGTH]) {
            this[MAYBE_EMIT_END]();
            return null;
          }
          if (this[OBJECTMODE])
            n = null;
          if (this[BUFFER].length > 1 && !this[OBJECTMODE]) {
            if (this.encoding)
              this[BUFFER] = [this[BUFFER].join("")];
            else
              this[BUFFER] = [Buffer.concat(this[BUFFER], this[BUFFERLENGTH])];
          }
          const ret = this[READ](n || null, this[BUFFER][0]);
          this[MAYBE_EMIT_END]();
          return ret;
        }
        [READ](n, chunk) {
          if (n === chunk.length || n === null)
            this[BUFFERSHIFT]();
          else {
            this[BUFFER][0] = chunk.slice(n);
            chunk = chunk.slice(0, n);
            this[BUFFERLENGTH] -= n;
          }
          this.emit("data", chunk);
          if (!this[BUFFER].length && !this[EOF])
            this.emit("drain");
          return chunk;
        }
        end(chunk, encoding, cb) {
          if (typeof chunk === "function")
            cb = chunk, chunk = null;
          if (typeof encoding === "function")
            cb = encoding, encoding = "utf8";
          if (chunk)
            this.write(chunk, encoding);
          if (cb)
            this.once("end", cb);
          this[EOF] = true;
          this.writable = false;
          if (this.flowing || !this[PAUSED])
            this[MAYBE_EMIT_END]();
          return this;
        }
        [RESUME]() {
          if (this[DESTROYED])
            return;
          this[PAUSED] = false;
          this[FLOWING] = true;
          this.emit("resume");
          if (this[BUFFER].length)
            this[FLUSH]();
          else if (this[EOF])
            this[MAYBE_EMIT_END]();
          else
            this.emit("drain");
        }
        resume() {
          return this[RESUME]();
        }
        pause() {
          this[FLOWING] = false;
          this[PAUSED] = true;
        }
        get destroyed() {
          return this[DESTROYED];
        }
        get flowing() {
          return this[FLOWING];
        }
        get paused() {
          return this[PAUSED];
        }
        [BUFFERPUSH](chunk) {
          if (this[OBJECTMODE])
            this[BUFFERLENGTH] += 1;
          else
            this[BUFFERLENGTH] += chunk.length;
          this[BUFFER].push(chunk);
        }
        [BUFFERSHIFT]() {
          if (this[OBJECTMODE])
            this[BUFFERLENGTH] -= 1;
          else
            this[BUFFERLENGTH] -= this[BUFFER][0].length;
          return this[BUFFER].shift();
        }
        [FLUSH](noDrain) {
          do {
          } while (this[FLUSHCHUNK](this[BUFFERSHIFT]()) && this[BUFFER].length);
          if (!noDrain && !this[BUFFER].length && !this[EOF])
            this.emit("drain");
        }
        [FLUSHCHUNK](chunk) {
          this.emit("data", chunk);
          return this.flowing;
        }
        pipe(dest, opts) {
          if (this[DESTROYED])
            return;
          const ended = this[EMITTED_END];
          opts = opts || {};
          if (dest === proc.stdout || dest === proc.stderr)
            opts.end = false;
          else
            opts.end = opts.end !== false;
          opts.proxyErrors = !!opts.proxyErrors;
          if (ended) {
            if (opts.end)
              dest.end();
          } else {
            this[PIPES].push(!opts.proxyErrors ? new Pipe(this, dest, opts) : new PipeProxyErrors(this, dest, opts));
            if (this[ASYNC])
              defer(() => this[RESUME]());
            else
              this[RESUME]();
          }
          return dest;
        }
        unpipe(dest) {
          const p = this[PIPES].find((p2) => p2.dest === dest);
          if (p) {
            this[PIPES].splice(this[PIPES].indexOf(p), 1);
            p.unpipe();
          }
        }
        addListener(ev, fn) {
          return this.on(ev, fn);
        }
        on(ev, fn) {
          const ret = super.on(ev, fn);
          if (ev === "data" && !this[PIPES].length && !this.flowing)
            this[RESUME]();
          else if (ev === "readable" && this[BUFFERLENGTH] !== 0)
            super.emit("readable");
          else if (isEndish(ev) && this[EMITTED_END]) {
            super.emit(ev);
            this.removeAllListeners(ev);
          } else if (ev === "error" && this[EMITTED_ERROR]) {
            if (this[ASYNC])
              defer(() => fn.call(this, this[EMITTED_ERROR]));
            else
              fn.call(this, this[EMITTED_ERROR]);
          }
          return ret;
        }
        get emittedEnd() {
          return this[EMITTED_END];
        }
        [MAYBE_EMIT_END]() {
          if (!this[EMITTING_END] && !this[EMITTED_END] && !this[DESTROYED] && this[BUFFER].length === 0 && this[EOF]) {
            this[EMITTING_END] = true;
            this.emit("end");
            this.emit("prefinish");
            this.emit("finish");
            if (this[CLOSED])
              this.emit("close");
            this[EMITTING_END] = false;
          }
        }
        emit(ev, data, ...extra) {
          if (ev !== "error" && ev !== "close" && ev !== DESTROYED && this[DESTROYED])
            return;
          else if (ev === "data") {
            return !this[OBJECTMODE] && !data ? false : this[ASYNC] ? defer(() => this[EMITDATA](data)) : this[EMITDATA](data);
          } else if (ev === "end") {
            return this[EMITEND]();
          } else if (ev === "close") {
            this[CLOSED] = true;
            if (!this[EMITTED_END] && !this[DESTROYED])
              return;
            const ret2 = super.emit("close");
            this.removeAllListeners("close");
            return ret2;
          } else if (ev === "error") {
            this[EMITTED_ERROR] = data;
            super.emit(ERROR, data);
            const ret2 = !this[SIGNAL] || this.listeners("error").length ? super.emit("error", data) : false;
            this[MAYBE_EMIT_END]();
            return ret2;
          } else if (ev === "resume") {
            const ret2 = super.emit("resume");
            this[MAYBE_EMIT_END]();
            return ret2;
          } else if (ev === "finish" || ev === "prefinish") {
            const ret2 = super.emit(ev);
            this.removeAllListeners(ev);
            return ret2;
          }
          const ret = super.emit(ev, data, ...extra);
          this[MAYBE_EMIT_END]();
          return ret;
        }
        [EMITDATA](data) {
          for (const p of this[PIPES]) {
            if (p.dest.write(data) === false)
              this.pause();
          }
          const ret = super.emit("data", data);
          this[MAYBE_EMIT_END]();
          return ret;
        }
        [EMITEND]() {
          if (this[EMITTED_END])
            return;
          this[EMITTED_END] = true;
          this.readable = false;
          if (this[ASYNC])
            defer(() => this[EMITEND2]());
          else
            this[EMITEND2]();
        }
        [EMITEND2]() {
          if (this[DECODER]) {
            const data = this[DECODER].end();
            if (data) {
              for (const p of this[PIPES]) {
                p.dest.write(data);
              }
              super.emit("data", data);
            }
          }
          for (const p of this[PIPES]) {
            p.end();
          }
          const ret = super.emit("end");
          this.removeAllListeners("end");
          return ret;
        }
        collect() {
          const buf = [];
          if (!this[OBJECTMODE])
            buf.dataLength = 0;
          const p = this.promise();
          this.on("data", (c) => {
            buf.push(c);
            if (!this[OBJECTMODE])
              buf.dataLength += c.length;
          });
          return p.then(() => buf);
        }
        concat() {
          return this[OBJECTMODE] ? Promise.reject(new Error("cannot concat in objectMode")) : this.collect().then((buf) => this[OBJECTMODE] ? Promise.reject(new Error("cannot concat in objectMode")) : this[ENCODING] ? buf.join("") : Buffer.concat(buf, buf.dataLength));
        }
        promise() {
          return new Promise((resolve, reject) => {
            this.on(DESTROYED, () => reject(new Error("stream destroyed")));
            this.on("error", (er) => reject(er));
            this.on("end", () => resolve());
          });
        }
        [ASYNCITERATOR]() {
          let stopped = false;
          const stop = () => {
            this.pause();
            stopped = true;
            return Promise.resolve({ done: true });
          };
          const next = () => {
            if (stopped)
              return stop();
            const res = this.read();
            if (res !== null)
              return Promise.resolve({ done: false, value: res });
            if (this[EOF])
              return stop();
            let resolve = null;
            let reject = null;
            const onerr = (er) => {
              this.removeListener("data", ondata);
              this.removeListener("end", onend);
              this.removeListener(DESTROYED, ondestroy);
              stop();
              reject(er);
            };
            const ondata = (value) => {
              this.removeListener("error", onerr);
              this.removeListener("end", onend);
              this.removeListener(DESTROYED, ondestroy);
              this.pause();
              resolve({ value, done: !!this[EOF] });
            };
            const onend = () => {
              this.removeListener("error", onerr);
              this.removeListener("data", ondata);
              this.removeListener(DESTROYED, ondestroy);
              stop();
              resolve({ done: true });
            };
            const ondestroy = () => onerr(new Error("stream destroyed"));
            return new Promise((res2, rej) => {
              reject = rej;
              resolve = res2;
              this.once(DESTROYED, ondestroy);
              this.once("error", onerr);
              this.once("end", onend);
              this.once("data", ondata);
            });
          };
          return {
            next,
            throw: stop,
            return: stop,
            [ASYNCITERATOR]() {
              return this;
            }
          };
        }
        [ITERATOR]() {
          let stopped = false;
          const stop = () => {
            this.pause();
            this.removeListener(ERROR, stop);
            this.removeListener(DESTROYED, stop);
            this.removeListener("end", stop);
            stopped = true;
            return { done: true };
          };
          const next = () => {
            if (stopped)
              return stop();
            const value = this.read();
            return value === null ? stop() : { value };
          };
          this.once("end", stop);
          this.once(ERROR, stop);
          this.once(DESTROYED, stop);
          return {
            next,
            throw: stop,
            return: stop,
            [ITERATOR]() {
              return this;
            }
          };
        }
        destroy(er) {
          if (this[DESTROYED]) {
            if (er)
              this.emit("error", er);
            else
              this.emit(DESTROYED);
            return this;
          }
          this[DESTROYED] = true;
          this[BUFFER].length = 0;
          this[BUFFERLENGTH] = 0;
          if (typeof this.close === "function" && !this[CLOSED])
            this.close();
          if (er)
            this.emit("error", er);
          else
            this.emit(DESTROYED);
          return this;
        }
        static isStream(s) {
          return !!s && (s instanceof _Minipass || s instanceof Stream || s instanceof EE && (typeof s.pipe === "function" || typeof s.write === "function" && typeof s.end === "function"));
        }
      };
      exports22.Minipass = Minipass;
    }
  });
  var require_constants7 = __commonJS2({
    "../../node_modules/.pnpm/minizlib@2.1.2/node_modules/minizlib/constants.js"(exports22, module22) {
      var realZlibConstants = __require("zlib").constants || { ZLIB_VERNUM: 4736 };
      module22.exports = Object.freeze(Object.assign(/* @__PURE__ */ Object.create(null), {
        Z_NO_FLUSH: 0,
        Z_PARTIAL_FLUSH: 1,
        Z_SYNC_FLUSH: 2,
        Z_FULL_FLUSH: 3,
        Z_FINISH: 4,
        Z_BLOCK: 5,
        Z_OK: 0,
        Z_STREAM_END: 1,
        Z_NEED_DICT: 2,
        Z_ERRNO: -1,
        Z_STREAM_ERROR: -2,
        Z_DATA_ERROR: -3,
        Z_MEM_ERROR: -4,
        Z_BUF_ERROR: -5,
        Z_VERSION_ERROR: -6,
        Z_NO_COMPRESSION: 0,
        Z_BEST_SPEED: 1,
        Z_BEST_COMPRESSION: 9,
        Z_DEFAULT_COMPRESSION: -1,
        Z_FILTERED: 1,
        Z_HUFFMAN_ONLY: 2,
        Z_RLE: 3,
        Z_FIXED: 4,
        Z_DEFAULT_STRATEGY: 0,
        DEFLATE: 1,
        INFLATE: 2,
        GZIP: 3,
        GUNZIP: 4,
        DEFLATERAW: 5,
        INFLATERAW: 6,
        UNZIP: 7,
        BROTLI_DECODE: 8,
        BROTLI_ENCODE: 9,
        Z_MIN_WINDOWBITS: 8,
        Z_MAX_WINDOWBITS: 15,
        Z_DEFAULT_WINDOWBITS: 15,
        Z_MIN_CHUNK: 64,
        Z_MAX_CHUNK: Infinity,
        Z_DEFAULT_CHUNK: 16384,
        Z_MIN_MEMLEVEL: 1,
        Z_MAX_MEMLEVEL: 9,
        Z_DEFAULT_MEMLEVEL: 8,
        Z_MIN_LEVEL: -1,
        Z_MAX_LEVEL: 9,
        Z_DEFAULT_LEVEL: -1,
        BROTLI_OPERATION_PROCESS: 0,
        BROTLI_OPERATION_FLUSH: 1,
        BROTLI_OPERATION_FINISH: 2,
        BROTLI_OPERATION_EMIT_METADATA: 3,
        BROTLI_MODE_GENERIC: 0,
        BROTLI_MODE_TEXT: 1,
        BROTLI_MODE_FONT: 2,
        BROTLI_DEFAULT_MODE: 0,
        BROTLI_MIN_QUALITY: 0,
        BROTLI_MAX_QUALITY: 11,
        BROTLI_DEFAULT_QUALITY: 11,
        BROTLI_MIN_WINDOW_BITS: 10,
        BROTLI_MAX_WINDOW_BITS: 24,
        BROTLI_LARGE_MAX_WINDOW_BITS: 30,
        BROTLI_DEFAULT_WINDOW: 22,
        BROTLI_MIN_INPUT_BLOCK_BITS: 16,
        BROTLI_MAX_INPUT_BLOCK_BITS: 24,
        BROTLI_PARAM_MODE: 0,
        BROTLI_PARAM_QUALITY: 1,
        BROTLI_PARAM_LGWIN: 2,
        BROTLI_PARAM_LGBLOCK: 3,
        BROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING: 4,
        BROTLI_PARAM_SIZE_HINT: 5,
        BROTLI_PARAM_LARGE_WINDOW: 6,
        BROTLI_PARAM_NPOSTFIX: 7,
        BROTLI_PARAM_NDIRECT: 8,
        BROTLI_DECODER_RESULT_ERROR: 0,
        BROTLI_DECODER_RESULT_SUCCESS: 1,
        BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT: 2,
        BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT: 3,
        BROTLI_DECODER_PARAM_DISABLE_RING_BUFFER_REALLOCATION: 0,
        BROTLI_DECODER_PARAM_LARGE_WINDOW: 1,
        BROTLI_DECODER_NO_ERROR: 0,
        BROTLI_DECODER_SUCCESS: 1,
        BROTLI_DECODER_NEEDS_MORE_INPUT: 2,
        BROTLI_DECODER_NEEDS_MORE_OUTPUT: 3,
        BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE: -1,
        BROTLI_DECODER_ERROR_FORMAT_RESERVED: -2,
        BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE: -3,
        BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET: -4,
        BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME: -5,
        BROTLI_DECODER_ERROR_FORMAT_CL_SPACE: -6,
        BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE: -7,
        BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT: -8,
        BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1: -9,
        BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2: -10,
        BROTLI_DECODER_ERROR_FORMAT_TRANSFORM: -11,
        BROTLI_DECODER_ERROR_FORMAT_DICTIONARY: -12,
        BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS: -13,
        BROTLI_DECODER_ERROR_FORMAT_PADDING_1: -14,
        BROTLI_DECODER_ERROR_FORMAT_PADDING_2: -15,
        BROTLI_DECODER_ERROR_FORMAT_DISTANCE: -16,
        BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET: -19,
        BROTLI_DECODER_ERROR_INVALID_ARGUMENTS: -20,
        BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES: -21,
        BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS: -22,
        BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP: -25,
        BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1: -26,
        BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2: -27,
        BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES: -30,
        BROTLI_DECODER_ERROR_UNREACHABLE: -31
      }, realZlibConstants));
    }
  });
  var require_minipass2 = __commonJS2({
    "../../node_modules/.pnpm/minipass@3.3.6/node_modules/minipass/index.js"(exports22, module22) {
      var proc = typeof process === "object" && process ? process : {
        stdout: null,
        stderr: null
      };
      var EE = __require("events");
      var Stream = __require("stream");
      var SD = __require("string_decoder").StringDecoder;
      var EOF = Symbol("EOF");
      var MAYBE_EMIT_END = Symbol("maybeEmitEnd");
      var EMITTED_END = Symbol("emittedEnd");
      var EMITTING_END = Symbol("emittingEnd");
      var EMITTED_ERROR = Symbol("emittedError");
      var CLOSED = Symbol("closed");
      var READ = Symbol("read");
      var FLUSH = Symbol("flush");
      var FLUSHCHUNK = Symbol("flushChunk");
      var ENCODING = Symbol("encoding");
      var DECODER = Symbol("decoder");
      var FLOWING = Symbol("flowing");
      var PAUSED = Symbol("paused");
      var RESUME = Symbol("resume");
      var BUFFERLENGTH = Symbol("bufferLength");
      var BUFFERPUSH = Symbol("bufferPush");
      var BUFFERSHIFT = Symbol("bufferShift");
      var OBJECTMODE = Symbol("objectMode");
      var DESTROYED = Symbol("destroyed");
      var EMITDATA = Symbol("emitData");
      var EMITEND = Symbol("emitEnd");
      var EMITEND2 = Symbol("emitEnd2");
      var ASYNC = Symbol("async");
      var defer = (fn) => Promise.resolve().then(fn);
      var doIter = global._MP_NO_ITERATOR_SYMBOLS_ !== "1";
      var ASYNCITERATOR = doIter && Symbol.asyncIterator || Symbol("asyncIterator not implemented");
      var ITERATOR = doIter && Symbol.iterator || Symbol("iterator not implemented");
      var isEndish = (ev) => ev === "end" || ev === "finish" || ev === "prefinish";
      var isArrayBuffer = (b) => b instanceof ArrayBuffer || typeof b === "object" && b.constructor && b.constructor.name === "ArrayBuffer" && b.byteLength >= 0;
      var isArrayBufferView = (b) => !Buffer.isBuffer(b) && ArrayBuffer.isView(b);
      var Pipe = class {
        constructor(src, dest, opts) {
          this.src = src;
          this.dest = dest;
          this.opts = opts;
          this.ondrain = () => src[RESUME]();
          dest.on("drain", this.ondrain);
        }
        unpipe() {
          this.dest.removeListener("drain", this.ondrain);
        }
        proxyErrors() {
        }
        end() {
          this.unpipe();
          if (this.opts.end)
            this.dest.end();
        }
      };
      var PipeProxyErrors = class extends Pipe {
        unpipe() {
          this.src.removeListener("error", this.proxyErrors);
          super.unpipe();
        }
        constructor(src, dest, opts) {
          super(src, dest, opts);
          this.proxyErrors = (er) => dest.emit("error", er);
          src.on("error", this.proxyErrors);
        }
      };
      module22.exports = class Minipass extends Stream {
        constructor(options) {
          super();
          this[FLOWING] = false;
          this[PAUSED] = false;
          this.pipes = [];
          this.buffer = [];
          this[OBJECTMODE] = options && options.objectMode || false;
          if (this[OBJECTMODE])
            this[ENCODING] = null;
          else
            this[ENCODING] = options && options.encoding || null;
          if (this[ENCODING] === "buffer")
            this[ENCODING] = null;
          this[ASYNC] = options && !!options.async || false;
          this[DECODER] = this[ENCODING] ? new SD(this[ENCODING]) : null;
          this[EOF] = false;
          this[EMITTED_END] = false;
          this[EMITTING_END] = false;
          this[CLOSED] = false;
          this[EMITTED_ERROR] = null;
          this.writable = true;
          this.readable = true;
          this[BUFFERLENGTH] = 0;
          this[DESTROYED] = false;
        }
        get bufferLength() {
          return this[BUFFERLENGTH];
        }
        get encoding() {
          return this[ENCODING];
        }
        set encoding(enc) {
          if (this[OBJECTMODE])
            throw new Error("cannot set encoding in objectMode");
          if (this[ENCODING] && enc !== this[ENCODING] && (this[DECODER] && this[DECODER].lastNeed || this[BUFFERLENGTH]))
            throw new Error("cannot change encoding");
          if (this[ENCODING] !== enc) {
            this[DECODER] = enc ? new SD(enc) : null;
            if (this.buffer.length)
              this.buffer = this.buffer.map((chunk) => this[DECODER].write(chunk));
          }
          this[ENCODING] = enc;
        }
        setEncoding(enc) {
          this.encoding = enc;
        }
        get objectMode() {
          return this[OBJECTMODE];
        }
        set objectMode(om) {
          this[OBJECTMODE] = this[OBJECTMODE] || !!om;
        }
        get ["async"]() {
          return this[ASYNC];
        }
        set ["async"](a) {
          this[ASYNC] = this[ASYNC] || !!a;
        }
        write(chunk, encoding, cb) {
          if (this[EOF])
            throw new Error("write after end");
          if (this[DESTROYED]) {
            this.emit("error", Object.assign(new Error("Cannot call write after a stream was destroyed"), { code: "ERR_STREAM_DESTROYED" }));
            return true;
          }
          if (typeof encoding === "function")
            cb = encoding, encoding = "utf8";
          if (!encoding)
            encoding = "utf8";
          const fn = this[ASYNC] ? defer : (f) => f();
          if (!this[OBJECTMODE] && !Buffer.isBuffer(chunk)) {
            if (isArrayBufferView(chunk))
              chunk = Buffer.from(chunk.buffer, chunk.byteOffset, chunk.byteLength);
            else if (isArrayBuffer(chunk))
              chunk = Buffer.from(chunk);
            else if (typeof chunk !== "string")
              this.objectMode = true;
          }
          if (this[OBJECTMODE]) {
            if (this.flowing && this[BUFFERLENGTH] !== 0)
              this[FLUSH](true);
            if (this.flowing)
              this.emit("data", chunk);
            else
              this[BUFFERPUSH](chunk);
            if (this[BUFFERLENGTH] !== 0)
              this.emit("readable");
            if (cb)
              fn(cb);
            return this.flowing;
          }
          if (!chunk.length) {
            if (this[BUFFERLENGTH] !== 0)
              this.emit("readable");
            if (cb)
              fn(cb);
            return this.flowing;
          }
          if (typeof chunk === "string" && !(encoding === this[ENCODING] && !this[DECODER].lastNeed)) {
            chunk = Buffer.from(chunk, encoding);
          }
          if (Buffer.isBuffer(chunk) && this[ENCODING])
            chunk = this[DECODER].write(chunk);
          if (this.flowing && this[BUFFERLENGTH] !== 0)
            this[FLUSH](true);
          if (this.flowing)
            this.emit("data", chunk);
          else
            this[BUFFERPUSH](chunk);
          if (this[BUFFERLENGTH] !== 0)
            this.emit("readable");
          if (cb)
            fn(cb);
          return this.flowing;
        }
        read(n) {
          if (this[DESTROYED])
            return null;
          if (this[BUFFERLENGTH] === 0 || n === 0 || n > this[BUFFERLENGTH]) {
            this[MAYBE_EMIT_END]();
            return null;
          }
          if (this[OBJECTMODE])
            n = null;
          if (this.buffer.length > 1 && !this[OBJECTMODE]) {
            if (this.encoding)
              this.buffer = [this.buffer.join("")];
            else
              this.buffer = [Buffer.concat(this.buffer, this[BUFFERLENGTH])];
          }
          const ret = this[READ](n || null, this.buffer[0]);
          this[MAYBE_EMIT_END]();
          return ret;
        }
        [READ](n, chunk) {
          if (n === chunk.length || n === null)
            this[BUFFERSHIFT]();
          else {
            this.buffer[0] = chunk.slice(n);
            chunk = chunk.slice(0, n);
            this[BUFFERLENGTH] -= n;
          }
          this.emit("data", chunk);
          if (!this.buffer.length && !this[EOF])
            this.emit("drain");
          return chunk;
        }
        end(chunk, encoding, cb) {
          if (typeof chunk === "function")
            cb = chunk, chunk = null;
          if (typeof encoding === "function")
            cb = encoding, encoding = "utf8";
          if (chunk)
            this.write(chunk, encoding);
          if (cb)
            this.once("end", cb);
          this[EOF] = true;
          this.writable = false;
          if (this.flowing || !this[PAUSED])
            this[MAYBE_EMIT_END]();
          return this;
        }
        [RESUME]() {
          if (this[DESTROYED])
            return;
          this[PAUSED] = false;
          this[FLOWING] = true;
          this.emit("resume");
          if (this.buffer.length)
            this[FLUSH]();
          else if (this[EOF])
            this[MAYBE_EMIT_END]();
          else
            this.emit("drain");
        }
        resume() {
          return this[RESUME]();
        }
        pause() {
          this[FLOWING] = false;
          this[PAUSED] = true;
        }
        get destroyed() {
          return this[DESTROYED];
        }
        get flowing() {
          return this[FLOWING];
        }
        get paused() {
          return this[PAUSED];
        }
        [BUFFERPUSH](chunk) {
          if (this[OBJECTMODE])
            this[BUFFERLENGTH] += 1;
          else
            this[BUFFERLENGTH] += chunk.length;
          this.buffer.push(chunk);
        }
        [BUFFERSHIFT]() {
          if (this.buffer.length) {
            if (this[OBJECTMODE])
              this[BUFFERLENGTH] -= 1;
            else
              this[BUFFERLENGTH] -= this.buffer[0].length;
          }
          return this.buffer.shift();
        }
        [FLUSH](noDrain) {
          do {
          } while (this[FLUSHCHUNK](this[BUFFERSHIFT]()));
          if (!noDrain && !this.buffer.length && !this[EOF])
            this.emit("drain");
        }
        [FLUSHCHUNK](chunk) {
          return chunk ? (this.emit("data", chunk), this.flowing) : false;
        }
        pipe(dest, opts) {
          if (this[DESTROYED])
            return;
          const ended = this[EMITTED_END];
          opts = opts || {};
          if (dest === proc.stdout || dest === proc.stderr)
            opts.end = false;
          else
            opts.end = opts.end !== false;
          opts.proxyErrors = !!opts.proxyErrors;
          if (ended) {
            if (opts.end)
              dest.end();
          } else {
            this.pipes.push(!opts.proxyErrors ? new Pipe(this, dest, opts) : new PipeProxyErrors(this, dest, opts));
            if (this[ASYNC])
              defer(() => this[RESUME]());
            else
              this[RESUME]();
          }
          return dest;
        }
        unpipe(dest) {
          const p = this.pipes.find((p2) => p2.dest === dest);
          if (p) {
            this.pipes.splice(this.pipes.indexOf(p), 1);
            p.unpipe();
          }
        }
        addListener(ev, fn) {
          return this.on(ev, fn);
        }
        on(ev, fn) {
          const ret = super.on(ev, fn);
          if (ev === "data" && !this.pipes.length && !this.flowing)
            this[RESUME]();
          else if (ev === "readable" && this[BUFFERLENGTH] !== 0)
            super.emit("readable");
          else if (isEndish(ev) && this[EMITTED_END]) {
            super.emit(ev);
            this.removeAllListeners(ev);
          } else if (ev === "error" && this[EMITTED_ERROR]) {
            if (this[ASYNC])
              defer(() => fn.call(this, this[EMITTED_ERROR]));
            else
              fn.call(this, this[EMITTED_ERROR]);
          }
          return ret;
        }
        get emittedEnd() {
          return this[EMITTED_END];
        }
        [MAYBE_EMIT_END]() {
          if (!this[EMITTING_END] && !this[EMITTED_END] && !this[DESTROYED] && this.buffer.length === 0 && this[EOF]) {
            this[EMITTING_END] = true;
            this.emit("end");
            this.emit("prefinish");
            this.emit("finish");
            if (this[CLOSED])
              this.emit("close");
            this[EMITTING_END] = false;
          }
        }
        emit(ev, data, ...extra) {
          if (ev !== "error" && ev !== "close" && ev !== DESTROYED && this[DESTROYED])
            return;
          else if (ev === "data") {
            return !data ? false : this[ASYNC] ? defer(() => this[EMITDATA](data)) : this[EMITDATA](data);
          } else if (ev === "end") {
            return this[EMITEND]();
          } else if (ev === "close") {
            this[CLOSED] = true;
            if (!this[EMITTED_END] && !this[DESTROYED])
              return;
            const ret2 = super.emit("close");
            this.removeAllListeners("close");
            return ret2;
          } else if (ev === "error") {
            this[EMITTED_ERROR] = data;
            const ret2 = super.emit("error", data);
            this[MAYBE_EMIT_END]();
            return ret2;
          } else if (ev === "resume") {
            const ret2 = super.emit("resume");
            this[MAYBE_EMIT_END]();
            return ret2;
          } else if (ev === "finish" || ev === "prefinish") {
            const ret2 = super.emit(ev);
            this.removeAllListeners(ev);
            return ret2;
          }
          const ret = super.emit(ev, data, ...extra);
          this[MAYBE_EMIT_END]();
          return ret;
        }
        [EMITDATA](data) {
          for (const p of this.pipes) {
            if (p.dest.write(data) === false)
              this.pause();
          }
          const ret = super.emit("data", data);
          this[MAYBE_EMIT_END]();
          return ret;
        }
        [EMITEND]() {
          if (this[EMITTED_END])
            return;
          this[EMITTED_END] = true;
          this.readable = false;
          if (this[ASYNC])
            defer(() => this[EMITEND2]());
          else
            this[EMITEND2]();
        }
        [EMITEND2]() {
          if (this[DECODER]) {
            const data = this[DECODER].end();
            if (data) {
              for (const p of this.pipes) {
                p.dest.write(data);
              }
              super.emit("data", data);
            }
          }
          for (const p of this.pipes) {
            p.end();
          }
          const ret = super.emit("end");
          this.removeAllListeners("end");
          return ret;
        }
        collect() {
          const buf = [];
          if (!this[OBJECTMODE])
            buf.dataLength = 0;
          const p = this.promise();
          this.on("data", (c) => {
            buf.push(c);
            if (!this[OBJECTMODE])
              buf.dataLength += c.length;
          });
          return p.then(() => buf);
        }
        concat() {
          return this[OBJECTMODE] ? Promise.reject(new Error("cannot concat in objectMode")) : this.collect().then((buf) => this[OBJECTMODE] ? Promise.reject(new Error("cannot concat in objectMode")) : this[ENCODING] ? buf.join("") : Buffer.concat(buf, buf.dataLength));
        }
        promise() {
          return new Promise((resolve, reject) => {
            this.on(DESTROYED, () => reject(new Error("stream destroyed")));
            this.on("error", (er) => reject(er));
            this.on("end", () => resolve());
          });
        }
        [ASYNCITERATOR]() {
          const next = () => {
            const res = this.read();
            if (res !== null)
              return Promise.resolve({ done: false, value: res });
            if (this[EOF])
              return Promise.resolve({ done: true });
            let resolve = null;
            let reject = null;
            const onerr = (er) => {
              this.removeListener("data", ondata);
              this.removeListener("end", onend);
              reject(er);
            };
            const ondata = (value) => {
              this.removeListener("error", onerr);
              this.removeListener("end", onend);
              this.pause();
              resolve({ value, done: !!this[EOF] });
            };
            const onend = () => {
              this.removeListener("error", onerr);
              this.removeListener("data", ondata);
              resolve({ done: true });
            };
            const ondestroy = () => onerr(new Error("stream destroyed"));
            return new Promise((res2, rej) => {
              reject = rej;
              resolve = res2;
              this.once(DESTROYED, ondestroy);
              this.once("error", onerr);
              this.once("end", onend);
              this.once("data", ondata);
            });
          };
          return { next };
        }
        [ITERATOR]() {
          const next = () => {
            const value = this.read();
            const done = value === null;
            return { value, done };
          };
          return { next };
        }
        destroy(er) {
          if (this[DESTROYED]) {
            if (er)
              this.emit("error", er);
            else
              this.emit(DESTROYED);
            return this;
          }
          this[DESTROYED] = true;
          this.buffer.length = 0;
          this[BUFFERLENGTH] = 0;
          if (typeof this.close === "function" && !this[CLOSED])
            this.close();
          if (er)
            this.emit("error", er);
          else
            this.emit(DESTROYED);
          return this;
        }
        static isStream(s) {
          return !!s && (s instanceof Minipass || s instanceof Stream || s instanceof EE && (typeof s.pipe === "function" || typeof s.write === "function" && typeof s.end === "function"));
        }
      };
    }
  });
  var require_minizlib = __commonJS2({
    "../../node_modules/.pnpm/minizlib@2.1.2/node_modules/minizlib/index.js"(exports22) {
      var assert = __require("assert");
      var Buffer2 = __require("buffer").Buffer;
      var realZlib = __require("zlib");
      var constants = exports22.constants = require_constants7();
      var Minipass = require_minipass2();
      var OriginalBufferConcat = Buffer2.concat;
      var _superWrite = Symbol("_superWrite");
      var ZlibError = class extends Error {
        constructor(err) {
          super("zlib: " + err.message);
          this.code = err.code;
          this.errno = err.errno;
          if (!this.code)
            this.code = "ZLIB_ERROR";
          this.message = "zlib: " + err.message;
          Error.captureStackTrace(this, this.constructor);
        }
        get name() {
          return "ZlibError";
        }
      };
      var _opts = Symbol("opts");
      var _flushFlag = Symbol("flushFlag");
      var _finishFlushFlag = Symbol("finishFlushFlag");
      var _fullFlushFlag = Symbol("fullFlushFlag");
      var _handle = Symbol("handle");
      var _onError = Symbol("onError");
      var _sawError = Symbol("sawError");
      var _level = Symbol("level");
      var _strategy = Symbol("strategy");
      var _ended = Symbol("ended");
      var _defaultFullFlush = Symbol("_defaultFullFlush");
      var ZlibBase = class extends Minipass {
        constructor(opts, mode) {
          if (!opts || typeof opts !== "object")
            throw new TypeError("invalid options for ZlibBase constructor");
          super(opts);
          this[_sawError] = false;
          this[_ended] = false;
          this[_opts] = opts;
          this[_flushFlag] = opts.flush;
          this[_finishFlushFlag] = opts.finishFlush;
          try {
            this[_handle] = new realZlib[mode](opts);
          } catch (er) {
            throw new ZlibError(er);
          }
          this[_onError] = (err) => {
            if (this[_sawError])
              return;
            this[_sawError] = true;
            this.close();
            this.emit("error", err);
          };
          this[_handle].on("error", (er) => this[_onError](new ZlibError(er)));
          this.once("end", () => this.close);
        }
        close() {
          if (this[_handle]) {
            this[_handle].close();
            this[_handle] = null;
            this.emit("close");
          }
        }
        reset() {
          if (!this[_sawError]) {
            assert(this[_handle], "zlib binding closed");
            return this[_handle].reset();
          }
        }
        flush(flushFlag) {
          if (this.ended)
            return;
          if (typeof flushFlag !== "number")
            flushFlag = this[_fullFlushFlag];
          this.write(Object.assign(Buffer2.alloc(0), { [_flushFlag]: flushFlag }));
        }
        end(chunk, encoding, cb) {
          if (chunk)
            this.write(chunk, encoding);
          this.flush(this[_finishFlushFlag]);
          this[_ended] = true;
          return super.end(null, null, cb);
        }
        get ended() {
          return this[_ended];
        }
        write(chunk, encoding, cb) {
          if (typeof encoding === "function")
            cb = encoding, encoding = "utf8";
          if (typeof chunk === "string")
            chunk = Buffer2.from(chunk, encoding);
          if (this[_sawError])
            return;
          assert(this[_handle], "zlib binding closed");
          const nativeHandle = this[_handle]._handle;
          const originalNativeClose = nativeHandle.close;
          nativeHandle.close = () => {
          };
          const originalClose = this[_handle].close;
          this[_handle].close = () => {
          };
          Buffer2.concat = (args) => args;
          let result2;
          try {
            const flushFlag = typeof chunk[_flushFlag] === "number" ? chunk[_flushFlag] : this[_flushFlag];
            result2 = this[_handle]._processChunk(chunk, flushFlag);
            Buffer2.concat = OriginalBufferConcat;
          } catch (err) {
            Buffer2.concat = OriginalBufferConcat;
            this[_onError](new ZlibError(err));
          } finally {
            if (this[_handle]) {
              this[_handle]._handle = nativeHandle;
              nativeHandle.close = originalNativeClose;
              this[_handle].close = originalClose;
              this[_handle].removeAllListeners("error");
            }
          }
          if (this[_handle])
            this[_handle].on("error", (er) => this[_onError](new ZlibError(er)));
          let writeReturn;
          if (result2) {
            if (Array.isArray(result2) && result2.length > 0) {
              writeReturn = this[_superWrite](Buffer2.from(result2[0]));
              for (let i = 1;i < result2.length; i++) {
                writeReturn = this[_superWrite](result2[i]);
              }
            } else {
              writeReturn = this[_superWrite](Buffer2.from(result2));
            }
          }
          if (cb)
            cb();
          return writeReturn;
        }
        [_superWrite](data) {
          return super.write(data);
        }
      };
      var Zlib = class extends ZlibBase {
        constructor(opts, mode) {
          opts = opts || {};
          opts.flush = opts.flush || constants.Z_NO_FLUSH;
          opts.finishFlush = opts.finishFlush || constants.Z_FINISH;
          super(opts, mode);
          this[_fullFlushFlag] = constants.Z_FULL_FLUSH;
          this[_level] = opts.level;
          this[_strategy] = opts.strategy;
        }
        params(level, strategy) {
          if (this[_sawError])
            return;
          if (!this[_handle])
            throw new Error("cannot switch params when binding is closed");
          if (!this[_handle].params)
            throw new Error("not supported in this implementation");
          if (this[_level] !== level || this[_strategy] !== strategy) {
            this.flush(constants.Z_SYNC_FLUSH);
            assert(this[_handle], "zlib binding closed");
            const origFlush = this[_handle].flush;
            this[_handle].flush = (flushFlag, cb) => {
              this.flush(flushFlag);
              cb();
            };
            try {
              this[_handle].params(level, strategy);
            } finally {
              this[_handle].flush = origFlush;
            }
            if (this[_handle]) {
              this[_level] = level;
              this[_strategy] = strategy;
            }
          }
        }
      };
      var Deflate = class extends Zlib {
        constructor(opts) {
          super(opts, "Deflate");
        }
      };
      var Inflate = class extends Zlib {
        constructor(opts) {
          super(opts, "Inflate");
        }
      };
      var _portable = Symbol("_portable");
      var Gzip = class extends Zlib {
        constructor(opts) {
          super(opts, "Gzip");
          this[_portable] = opts && !!opts.portable;
        }
        [_superWrite](data) {
          if (!this[_portable])
            return super[_superWrite](data);
          this[_portable] = false;
          data[9] = 255;
          return super[_superWrite](data);
        }
      };
      var Gunzip = class extends Zlib {
        constructor(opts) {
          super(opts, "Gunzip");
        }
      };
      var DeflateRaw = class extends Zlib {
        constructor(opts) {
          super(opts, "DeflateRaw");
        }
      };
      var InflateRaw = class extends Zlib {
        constructor(opts) {
          super(opts, "InflateRaw");
        }
      };
      var Unzip = class extends Zlib {
        constructor(opts) {
          super(opts, "Unzip");
        }
      };
      var Brotli = class extends ZlibBase {
        constructor(opts, mode) {
          opts = opts || {};
          opts.flush = opts.flush || constants.BROTLI_OPERATION_PROCESS;
          opts.finishFlush = opts.finishFlush || constants.BROTLI_OPERATION_FINISH;
          super(opts, mode);
          this[_fullFlushFlag] = constants.BROTLI_OPERATION_FLUSH;
        }
      };
      var BrotliCompress = class extends Brotli {
        constructor(opts) {
          super(opts, "BrotliCompress");
        }
      };
      var BrotliDecompress = class extends Brotli {
        constructor(opts) {
          super(opts, "BrotliDecompress");
        }
      };
      exports22.Deflate = Deflate;
      exports22.Inflate = Inflate;
      exports22.Gzip = Gzip;
      exports22.Gunzip = Gunzip;
      exports22.DeflateRaw = DeflateRaw;
      exports22.InflateRaw = InflateRaw;
      exports22.Unzip = Unzip;
      if (typeof realZlib.BrotliCompress === "function") {
        exports22.BrotliCompress = BrotliCompress;
        exports22.BrotliDecompress = BrotliDecompress;
      } else {
        exports22.BrotliCompress = exports22.BrotliDecompress = class {
          constructor() {
            throw new Error("Brotli is not supported in this version of Node.js");
          }
        };
      }
    }
  });
  var require_normalize_windows_path = __commonJS2({
    "../../node_modules/.pnpm/tar@6.2.1/node_modules/tar/lib/normalize-windows-path.js"(exports22, module22) {
      var platform = process.env.TESTING_TAR_FAKE_PLATFORM || process.platform;
      module22.exports = platform !== "win32" ? (p) => p : (p) => p && p.replace(/\\/g, "/");
    }
  });
  var require_read_entry = __commonJS2({
    "../../node_modules/.pnpm/tar@6.2.1/node_modules/tar/lib/read-entry.js"(exports22, module22) {
      var { Minipass } = require_minipass();
      var normPath = require_normalize_windows_path();
      var SLURP = Symbol("slurp");
      module22.exports = class ReadEntry extends Minipass {
        constructor(header, ex, gex) {
          super();
          this.pause();
          this.extended = ex;
          this.globalExtended = gex;
          this.header = header;
          this.startBlockSize = 512 * Math.ceil(header.size / 512);
          this.blockRemain = this.startBlockSize;
          this.remain = header.size;
          this.type = header.type;
          this.meta = false;
          this.ignore = false;
          switch (this.type) {
            case "File":
            case "OldFile":
            case "Link":
            case "SymbolicLink":
            case "CharacterDevice":
            case "BlockDevice":
            case "Directory":
            case "FIFO":
            case "ContiguousFile":
            case "GNUDumpDir":
              break;
            case "NextFileHasLongLinkpath":
            case "NextFileHasLongPath":
            case "OldGnuLongPath":
            case "GlobalExtendedHeader":
            case "ExtendedHeader":
            case "OldExtendedHeader":
              this.meta = true;
              break;
            default:
              this.ignore = true;
          }
          this.path = normPath(header.path);
          this.mode = header.mode;
          if (this.mode) {
            this.mode = this.mode & 4095;
          }
          this.uid = header.uid;
          this.gid = header.gid;
          this.uname = header.uname;
          this.gname = header.gname;
          this.size = header.size;
          this.mtime = header.mtime;
          this.atime = header.atime;
          this.ctime = header.ctime;
          this.linkpath = normPath(header.linkpath);
          this.uname = header.uname;
          this.gname = header.gname;
          if (ex) {
            this[SLURP](ex);
          }
          if (gex) {
            this[SLURP](gex, true);
          }
        }
        write(data) {
          const writeLen = data.length;
          if (writeLen > this.blockRemain) {
            throw new Error("writing more to entry than is appropriate");
          }
          const r = this.remain;
          const br = this.blockRemain;
          this.remain = Math.max(0, r - writeLen);
          this.blockRemain = Math.max(0, br - writeLen);
          if (this.ignore) {
            return true;
          }
          if (r >= writeLen) {
            return super.write(data);
          }
          return super.write(data.slice(0, r));
        }
        [SLURP](ex, global2) {
          for (const k in ex) {
            if (ex[k] !== null && ex[k] !== undefined && !(global2 && k === "path")) {
              this[k] = k === "path" || k === "linkpath" ? normPath(ex[k]) : ex[k];
            }
          }
        }
      };
    }
  });
  var require_types4 = __commonJS2({
    "../../node_modules/.pnpm/tar@6.2.1/node_modules/tar/lib/types.js"(exports22) {
      exports22.name = /* @__PURE__ */ new Map([
        ["0", "File"],
        ["", "OldFile"],
        ["1", "Link"],
        ["2", "SymbolicLink"],
        ["3", "CharacterDevice"],
        ["4", "BlockDevice"],
        ["5", "Directory"],
        ["6", "FIFO"],
        ["7", "ContiguousFile"],
        ["g", "GlobalExtendedHeader"],
        ["x", "ExtendedHeader"],
        ["A", "SolarisACL"],
        ["D", "GNUDumpDir"],
        ["I", "Inode"],
        ["K", "NextFileHasLongLinkpath"],
        ["L", "NextFileHasLongPath"],
        ["M", "ContinuationFile"],
        ["N", "OldGnuLongPath"],
        ["S", "SparseFile"],
        ["V", "TapeVolumeHeader"],
        ["X", "OldExtendedHeader"]
      ]);
      exports22.code = new Map(Array.from(exports22.name).map((kv) => [kv[1], kv[0]]));
    }
  });
  var require_large_numbers = __commonJS2({
    "../../node_modules/.pnpm/tar@6.2.1/node_modules/tar/lib/large-numbers.js"(exports22, module22) {
      var encode = (num, buf) => {
        if (!Number.isSafeInteger(num)) {
          throw Error("cannot encode number outside of javascript safe integer range");
        } else if (num < 0) {
          encodeNegative(num, buf);
        } else {
          encodePositive(num, buf);
        }
        return buf;
      };
      var encodePositive = (num, buf) => {
        buf[0] = 128;
        for (var i = buf.length;i > 1; i--) {
          buf[i - 1] = num & 255;
          num = Math.floor(num / 256);
        }
      };
      var encodeNegative = (num, buf) => {
        buf[0] = 255;
        var flipped = false;
        num = num * -1;
        for (var i = buf.length;i > 1; i--) {
          var byte = num & 255;
          num = Math.floor(num / 256);
          if (flipped) {
            buf[i - 1] = onesComp(byte);
          } else if (byte === 0) {
            buf[i - 1] = 0;
          } else {
            flipped = true;
            buf[i - 1] = twosComp(byte);
          }
        }
      };
      var parse = (buf) => {
        const pre = buf[0];
        const value = pre === 128 ? pos(buf.slice(1, buf.length)) : pre === 255 ? twos(buf) : null;
        if (value === null) {
          throw Error("invalid base256 encoding");
        }
        if (!Number.isSafeInteger(value)) {
          throw Error("parsed number outside of javascript safe integer range");
        }
        return value;
      };
      var twos = (buf) => {
        var len = buf.length;
        var sum = 0;
        var flipped = false;
        for (var i = len - 1;i > -1; i--) {
          var byte = buf[i];
          var f;
          if (flipped) {
            f = onesComp(byte);
          } else if (byte === 0) {
            f = byte;
          } else {
            flipped = true;
            f = twosComp(byte);
          }
          if (f !== 0) {
            sum -= f * Math.pow(256, len - i - 1);
          }
        }
        return sum;
      };
      var pos = (buf) => {
        var len = buf.length;
        var sum = 0;
        for (var i = len - 1;i > -1; i--) {
          var byte = buf[i];
          if (byte !== 0) {
            sum += byte * Math.pow(256, len - i - 1);
          }
        }
        return sum;
      };
      var onesComp = (byte) => (255 ^ byte) & 255;
      var twosComp = (byte) => (255 ^ byte) + 1 & 255;
      module22.exports = {
        encode,
        parse
      };
    }
  });
  var require_header = __commonJS2({
    "../../node_modules/.pnpm/tar@6.2.1/node_modules/tar/lib/header.js"(exports22, module22) {
      var types = require_types4();
      var pathModule = __require("path").posix;
      var large = require_large_numbers();
      var SLURP = Symbol("slurp");
      var TYPE = Symbol("type");
      var Header = class {
        constructor(data, off, ex, gex) {
          this.cksumValid = false;
          this.needPax = false;
          this.nullBlock = false;
          this.block = null;
          this.path = null;
          this.mode = null;
          this.uid = null;
          this.gid = null;
          this.size = null;
          this.mtime = null;
          this.cksum = null;
          this[TYPE] = "0";
          this.linkpath = null;
          this.uname = null;
          this.gname = null;
          this.devmaj = 0;
          this.devmin = 0;
          this.atime = null;
          this.ctime = null;
          if (Buffer.isBuffer(data)) {
            this.decode(data, off || 0, ex, gex);
          } else if (data) {
            this.set(data);
          }
        }
        decode(buf, off, ex, gex) {
          if (!off) {
            off = 0;
          }
          if (!buf || !(buf.length >= off + 512)) {
            throw new Error("need 512 bytes for header");
          }
          this.path = decString(buf, off, 100);
          this.mode = decNumber(buf, off + 100, 8);
          this.uid = decNumber(buf, off + 108, 8);
          this.gid = decNumber(buf, off + 116, 8);
          this.size = decNumber(buf, off + 124, 12);
          this.mtime = decDate(buf, off + 136, 12);
          this.cksum = decNumber(buf, off + 148, 12);
          this[SLURP](ex);
          this[SLURP](gex, true);
          this[TYPE] = decString(buf, off + 156, 1);
          if (this[TYPE] === "") {
            this[TYPE] = "0";
          }
          if (this[TYPE] === "0" && this.path.slice(-1) === "/") {
            this[TYPE] = "5";
          }
          if (this[TYPE] === "5") {
            this.size = 0;
          }
          this.linkpath = decString(buf, off + 157, 100);
          if (buf.slice(off + 257, off + 265).toString() === "ustar\x0000") {
            this.uname = decString(buf, off + 265, 32);
            this.gname = decString(buf, off + 297, 32);
            this.devmaj = decNumber(buf, off + 329, 8);
            this.devmin = decNumber(buf, off + 337, 8);
            if (buf[off + 475] !== 0) {
              const prefix = decString(buf, off + 345, 155);
              this.path = prefix + "/" + this.path;
            } else {
              const prefix = decString(buf, off + 345, 130);
              if (prefix) {
                this.path = prefix + "/" + this.path;
              }
              this.atime = decDate(buf, off + 476, 12);
              this.ctime = decDate(buf, off + 488, 12);
            }
          }
          let sum = 8 * 32;
          for (let i = off;i < off + 148; i++) {
            sum += buf[i];
          }
          for (let i = off + 156;i < off + 512; i++) {
            sum += buf[i];
          }
          this.cksumValid = sum === this.cksum;
          if (this.cksum === null && sum === 8 * 32) {
            this.nullBlock = true;
          }
        }
        [SLURP](ex, global2) {
          for (const k in ex) {
            if (ex[k] !== null && ex[k] !== undefined && !(global2 && k === "path")) {
              this[k] = ex[k];
            }
          }
        }
        encode(buf, off) {
          if (!buf) {
            buf = this.block = Buffer.alloc(512);
            off = 0;
          }
          if (!off) {
            off = 0;
          }
          if (!(buf.length >= off + 512)) {
            throw new Error("need 512 bytes for header");
          }
          const prefixSize = this.ctime || this.atime ? 130 : 155;
          const split = splitPrefix(this.path || "", prefixSize);
          const path2 = split[0];
          const prefix = split[1];
          this.needPax = split[2];
          this.needPax = encString(buf, off, 100, path2) || this.needPax;
          this.needPax = encNumber(buf, off + 100, 8, this.mode) || this.needPax;
          this.needPax = encNumber(buf, off + 108, 8, this.uid) || this.needPax;
          this.needPax = encNumber(buf, off + 116, 8, this.gid) || this.needPax;
          this.needPax = encNumber(buf, off + 124, 12, this.size) || this.needPax;
          this.needPax = encDate(buf, off + 136, 12, this.mtime) || this.needPax;
          buf[off + 156] = this[TYPE].charCodeAt(0);
          this.needPax = encString(buf, off + 157, 100, this.linkpath) || this.needPax;
          buf.write("ustar\x0000", off + 257, 8);
          this.needPax = encString(buf, off + 265, 32, this.uname) || this.needPax;
          this.needPax = encString(buf, off + 297, 32, this.gname) || this.needPax;
          this.needPax = encNumber(buf, off + 329, 8, this.devmaj) || this.needPax;
          this.needPax = encNumber(buf, off + 337, 8, this.devmin) || this.needPax;
          this.needPax = encString(buf, off + 345, prefixSize, prefix) || this.needPax;
          if (buf[off + 475] !== 0) {
            this.needPax = encString(buf, off + 345, 155, prefix) || this.needPax;
          } else {
            this.needPax = encString(buf, off + 345, 130, prefix) || this.needPax;
            this.needPax = encDate(buf, off + 476, 12, this.atime) || this.needPax;
            this.needPax = encDate(buf, off + 488, 12, this.ctime) || this.needPax;
          }
          let sum = 8 * 32;
          for (let i = off;i < off + 148; i++) {
            sum += buf[i];
          }
          for (let i = off + 156;i < off + 512; i++) {
            sum += buf[i];
          }
          this.cksum = sum;
          encNumber(buf, off + 148, 8, this.cksum);
          this.cksumValid = true;
          return this.needPax;
        }
        set(data) {
          for (const i in data) {
            if (data[i] !== null && data[i] !== undefined) {
              this[i] = data[i];
            }
          }
        }
        get type() {
          return types.name.get(this[TYPE]) || this[TYPE];
        }
        get typeKey() {
          return this[TYPE];
        }
        set type(type) {
          if (types.code.has(type)) {
            this[TYPE] = types.code.get(type);
          } else {
            this[TYPE] = type;
          }
        }
      };
      var splitPrefix = (p, prefixSize) => {
        const pathSize = 100;
        let pp = p;
        let prefix = "";
        let ret;
        const root = pathModule.parse(p).root || ".";
        if (Buffer.byteLength(pp) < pathSize) {
          ret = [pp, prefix, false];
        } else {
          prefix = pathModule.dirname(pp);
          pp = pathModule.basename(pp);
          do {
            if (Buffer.byteLength(pp) <= pathSize && Buffer.byteLength(prefix) <= prefixSize) {
              ret = [pp, prefix, false];
            } else if (Buffer.byteLength(pp) > pathSize && Buffer.byteLength(prefix) <= prefixSize) {
              ret = [pp.slice(0, pathSize - 1), prefix, true];
            } else {
              pp = pathModule.join(pathModule.basename(prefix), pp);
              prefix = pathModule.dirname(prefix);
            }
          } while (prefix !== root && !ret);
          if (!ret) {
            ret = [p.slice(0, pathSize - 1), "", true];
          }
        }
        return ret;
      };
      var decString = (buf, off, size) => buf.slice(off, off + size).toString("utf8").replace(/\0.*/, "");
      var decDate = (buf, off, size) => numToDate(decNumber(buf, off, size));
      var numToDate = (num) => num === null ? null : new Date(num * 1000);
      var decNumber = (buf, off, size) => buf[off] & 128 ? large.parse(buf.slice(off, off + size)) : decSmallNumber(buf, off, size);
      var nanNull = (value) => isNaN(value) ? null : value;
      var decSmallNumber = (buf, off, size) => nanNull(parseInt(buf.slice(off, off + size).toString("utf8").replace(/\0.*$/, "").trim(), 8));
      var MAXNUM = {
        12: 8589934591,
        8: 2097151
      };
      var encNumber = (buf, off, size, number) => number === null ? false : number > MAXNUM[size] || number < 0 ? (large.encode(number, buf.slice(off, off + size)), true) : (encSmallNumber(buf, off, size, number), false);
      var encSmallNumber = (buf, off, size, number) => buf.write(octalString(number, size), off, size, "ascii");
      var octalString = (number, size) => padOctal(Math.floor(number).toString(8), size);
      var padOctal = (string, size) => (string.length === size - 1 ? string : new Array(size - string.length - 1).join("0") + string + " ") + "\x00";
      var encDate = (buf, off, size, date) => date === null ? false : encNumber(buf, off, size, date.getTime() / 1000);
      var NULLS = new Array(156).join("\x00");
      var encString = (buf, off, size, string) => string === null ? false : (buf.write(string + NULLS, off, size, "utf8"), string.length !== Buffer.byteLength(string) || string.length > size);
      module22.exports = Header;
    }
  });
  var require_pax = __commonJS2({
    "../../node_modules/.pnpm/tar@6.2.1/node_modules/tar/lib/pax.js"(exports22, module22) {
      var Header = require_header();
      var path2 = __require("path");
      var Pax = class {
        constructor(obj, global2) {
          this.atime = obj.atime || null;
          this.charset = obj.charset || null;
          this.comment = obj.comment || null;
          this.ctime = obj.ctime || null;
          this.gid = obj.gid || null;
          this.gname = obj.gname || null;
          this.linkpath = obj.linkpath || null;
          this.mtime = obj.mtime || null;
          this.path = obj.path || null;
          this.size = obj.size || null;
          this.uid = obj.uid || null;
          this.uname = obj.uname || null;
          this.dev = obj.dev || null;
          this.ino = obj.ino || null;
          this.nlink = obj.nlink || null;
          this.global = global2 || false;
        }
        encode() {
          const body = this.encodeBody();
          if (body === "") {
            return null;
          }
          const bodyLen = Buffer.byteLength(body);
          const bufLen = 512 * Math.ceil(1 + bodyLen / 512);
          const buf = Buffer.allocUnsafe(bufLen);
          for (let i = 0;i < 512; i++) {
            buf[i] = 0;
          }
          new Header({
            path: ("PaxHeader/" + path2.basename(this.path)).slice(0, 99),
            mode: this.mode || 420,
            uid: this.uid || null,
            gid: this.gid || null,
            size: bodyLen,
            mtime: this.mtime || null,
            type: this.global ? "GlobalExtendedHeader" : "ExtendedHeader",
            linkpath: "",
            uname: this.uname || "",
            gname: this.gname || "",
            devmaj: 0,
            devmin: 0,
            atime: this.atime || null,
            ctime: this.ctime || null
          }).encode(buf);
          buf.write(body, 512, bodyLen, "utf8");
          for (let i = bodyLen + 512;i < buf.length; i++) {
            buf[i] = 0;
          }
          return buf;
        }
        encodeBody() {
          return this.encodeField("path") + this.encodeField("ctime") + this.encodeField("atime") + this.encodeField("dev") + this.encodeField("ino") + this.encodeField("nlink") + this.encodeField("charset") + this.encodeField("comment") + this.encodeField("gid") + this.encodeField("gname") + this.encodeField("linkpath") + this.encodeField("mtime") + this.encodeField("size") + this.encodeField("uid") + this.encodeField("uname");
        }
        encodeField(field) {
          if (this[field] === null || this[field] === undefined) {
            return "";
          }
          const v = this[field] instanceof Date ? this[field].getTime() / 1000 : this[field];
          const s = " " + (field === "dev" || field === "ino" || field === "nlink" ? "SCHILY." : "") + field + "=" + v + `
`;
          const byteLen = Buffer.byteLength(s);
          let digits = Math.floor(Math.log(byteLen) / Math.log(10)) + 1;
          if (byteLen + digits >= Math.pow(10, digits)) {
            digits += 1;
          }
          const len = digits + byteLen;
          return len + s;
        }
      };
      Pax.parse = (string, ex, g) => new Pax(merge(parseKV(string), ex), g);
      var merge = (a, b) => b ? Object.keys(a).reduce((s, k) => (s[k] = a[k], s), b) : a;
      var parseKV = (string) => string.replace(/\n$/, "").split(`
`).reduce(parseKVLine, /* @__PURE__ */ Object.create(null));
      var parseKVLine = (set, line) => {
        const n = parseInt(line, 10);
        if (n !== Buffer.byteLength(line) + 1) {
          return set;
        }
        line = line.slice((n + " ").length);
        const kv = line.split("=");
        const k = kv.shift().replace(/^SCHILY\.(dev|ino|nlink)/, "$1");
        if (!k) {
          return set;
        }
        const v = kv.join("=");
        set[k] = /^([A-Z]+\.)?([mac]|birth|creation)time$/.test(k) ? new Date(v * 1000) : /^[0-9]+$/.test(v) ? +v : v;
        return set;
      };
      module22.exports = Pax;
    }
  });
  var require_strip_trailing_slashes = __commonJS2({
    "../../node_modules/.pnpm/tar@6.2.1/node_modules/tar/lib/strip-trailing-slashes.js"(exports22, module22) {
      module22.exports = (str) => {
        let i = str.length - 1;
        let slashesStart = -1;
        while (i > -1 && str.charAt(i) === "/") {
          slashesStart = i;
          i--;
        }
        return slashesStart === -1 ? str : str.slice(0, slashesStart);
      };
    }
  });
  var require_warn_mixin = __commonJS2({
    "../../node_modules/.pnpm/tar@6.2.1/node_modules/tar/lib/warn-mixin.js"(exports22, module22) {
      module22.exports = (Base) => class extends Base {
        warn(code, message, data = {}) {
          if (this.file) {
            data.file = this.file;
          }
          if (this.cwd) {
            data.cwd = this.cwd;
          }
          data.code = message instanceof Error && message.code || code;
          data.tarCode = code;
          if (!this.strict && data.recoverable !== false) {
            if (message instanceof Error) {
              data = Object.assign(message, data);
              message = message.message;
            }
            this.emit("warn", data.tarCode, message, data);
          } else if (message instanceof Error) {
            this.emit("error", Object.assign(message, data));
          } else {
            this.emit("error", Object.assign(new Error(`${code}: ${message}`), data));
          }
        }
      };
    }
  });
  var require_winchars = __commonJS2({
    "../../node_modules/.pnpm/tar@6.2.1/node_modules/tar/lib/winchars.js"(exports22, module22) {
      var raw = [
        "|",
        "<",
        ">",
        "?",
        ":"
      ];
      var win = raw.map((char) => String.fromCharCode(61440 + char.charCodeAt(0)));
      var toWin = new Map(raw.map((char, i) => [char, win[i]]));
      var toRaw = new Map(win.map((char, i) => [char, raw[i]]));
      module22.exports = {
        encode: (s) => raw.reduce((s2, c) => s2.split(c).join(toWin.get(c)), s),
        decode: (s) => win.reduce((s2, c) => s2.split(c).join(toRaw.get(c)), s)
      };
    }
  });
  var require_strip_absolute_path = __commonJS2({
    "../../node_modules/.pnpm/tar@6.2.1/node_modules/tar/lib/strip-absolute-path.js"(exports22, module22) {
      var { isAbsolute, parse } = __require("path").win32;
      module22.exports = (path2) => {
        let r = "";
        let parsed = parse(path2);
        while (isAbsolute(path2) || parsed.root) {
          const root = path2.charAt(0) === "/" && path2.slice(0, 4) !== "//?/" ? "/" : parsed.root;
          path2 = path2.slice(root.length);
          r += root;
          parsed = parse(path2);
        }
        return [r, path2];
      };
    }
  });
  var require_mode_fix = __commonJS2({
    "../../node_modules/.pnpm/tar@6.2.1/node_modules/tar/lib/mode-fix.js"(exports22, module22) {
      module22.exports = (mode, isDir, portable) => {
        mode &= 4095;
        if (portable) {
          mode = (mode | 384) & ~18;
        }
        if (isDir) {
          if (mode & 256) {
            mode |= 64;
          }
          if (mode & 32) {
            mode |= 8;
          }
          if (mode & 4) {
            mode |= 1;
          }
        }
        return mode;
      };
    }
  });
  var require_write_entry = __commonJS2({
    "../../node_modules/.pnpm/tar@6.2.1/node_modules/tar/lib/write-entry.js"(exports22, module22) {
      var { Minipass } = require_minipass();
      var Pax = require_pax();
      var Header = require_header();
      var fs = __require("fs");
      var path2 = __require("path");
      var normPath = require_normalize_windows_path();
      var stripSlash = require_strip_trailing_slashes();
      var prefixPath = (path3, prefix) => {
        if (!prefix) {
          return normPath(path3);
        }
        path3 = normPath(path3).replace(/^\.(\/|$)/, "");
        return stripSlash(prefix) + "/" + path3;
      };
      var maxReadSize = 16 * 1024 * 1024;
      var PROCESS = Symbol("process");
      var FILE = Symbol("file");
      var DIRECTORY = Symbol("directory");
      var SYMLINK = Symbol("symlink");
      var HARDLINK = Symbol("hardlink");
      var HEADER = Symbol("header");
      var READ = Symbol("read");
      var LSTAT = Symbol("lstat");
      var ONLSTAT = Symbol("onlstat");
      var ONREAD = Symbol("onread");
      var ONREADLINK = Symbol("onreadlink");
      var OPENFILE = Symbol("openfile");
      var ONOPENFILE = Symbol("onopenfile");
      var CLOSE = Symbol("close");
      var MODE = Symbol("mode");
      var AWAITDRAIN = Symbol("awaitDrain");
      var ONDRAIN = Symbol("ondrain");
      var PREFIX = Symbol("prefix");
      var HAD_ERROR = Symbol("hadError");
      var warner = require_warn_mixin();
      var winchars = require_winchars();
      var stripAbsolutePath = require_strip_absolute_path();
      var modeFix = require_mode_fix();
      var WriteEntry = warner(class WriteEntry2 extends Minipass {
        constructor(p, opt) {
          opt = opt || {};
          super(opt);
          if (typeof p !== "string") {
            throw new TypeError("path is required");
          }
          this.path = normPath(p);
          this.portable = !!opt.portable;
          this.myuid = process.getuid && process.getuid() || 0;
          this.myuser = process.env.USER || "";
          this.maxReadSize = opt.maxReadSize || maxReadSize;
          this.linkCache = opt.linkCache || /* @__PURE__ */ new Map;
          this.statCache = opt.statCache || /* @__PURE__ */ new Map;
          this.preservePaths = !!opt.preservePaths;
          this.cwd = normPath(opt.cwd || process.cwd());
          this.strict = !!opt.strict;
          this.noPax = !!opt.noPax;
          this.noMtime = !!opt.noMtime;
          this.mtime = opt.mtime || null;
          this.prefix = opt.prefix ? normPath(opt.prefix) : null;
          this.fd = null;
          this.blockLen = null;
          this.blockRemain = null;
          this.buf = null;
          this.offset = null;
          this.length = null;
          this.pos = null;
          this.remain = null;
          if (typeof opt.onwarn === "function") {
            this.on("warn", opt.onwarn);
          }
          let pathWarn = false;
          if (!this.preservePaths) {
            const [root, stripped] = stripAbsolutePath(this.path);
            if (root) {
              this.path = stripped;
              pathWarn = root;
            }
          }
          this.win32 = !!opt.win32 || process.platform === "win32";
          if (this.win32) {
            this.path = winchars.decode(this.path.replace(/\\/g, "/"));
            p = p.replace(/\\/g, "/");
          }
          this.absolute = normPath(opt.absolute || path2.resolve(this.cwd, p));
          if (this.path === "") {
            this.path = "./";
          }
          if (pathWarn) {
            this.warn("TAR_ENTRY_INFO", `stripping ${pathWarn} from absolute path`, {
              entry: this,
              path: pathWarn + this.path
            });
          }
          if (this.statCache.has(this.absolute)) {
            this[ONLSTAT](this.statCache.get(this.absolute));
          } else {
            this[LSTAT]();
          }
        }
        emit(ev, ...data) {
          if (ev === "error") {
            this[HAD_ERROR] = true;
          }
          return super.emit(ev, ...data);
        }
        [LSTAT]() {
          fs.lstat(this.absolute, (er, stat) => {
            if (er) {
              return this.emit("error", er);
            }
            this[ONLSTAT](stat);
          });
        }
        [ONLSTAT](stat) {
          this.statCache.set(this.absolute, stat);
          this.stat = stat;
          if (!stat.isFile()) {
            stat.size = 0;
          }
          this.type = getType(stat);
          this.emit("stat", stat);
          this[PROCESS]();
        }
        [PROCESS]() {
          switch (this.type) {
            case "File":
              return this[FILE]();
            case "Directory":
              return this[DIRECTORY]();
            case "SymbolicLink":
              return this[SYMLINK]();
            default:
              return this.end();
          }
        }
        [MODE](mode) {
          return modeFix(mode, this.type === "Directory", this.portable);
        }
        [PREFIX](path3) {
          return prefixPath(path3, this.prefix);
        }
        [HEADER]() {
          if (this.type === "Directory" && this.portable) {
            this.noMtime = true;
          }
          this.header = new Header({
            path: this[PREFIX](this.path),
            linkpath: this.type === "Link" ? this[PREFIX](this.linkpath) : this.linkpath,
            mode: this[MODE](this.stat.mode),
            uid: this.portable ? null : this.stat.uid,
            gid: this.portable ? null : this.stat.gid,
            size: this.stat.size,
            mtime: this.noMtime ? null : this.mtime || this.stat.mtime,
            type: this.type,
            uname: this.portable ? null : this.stat.uid === this.myuid ? this.myuser : "",
            atime: this.portable ? null : this.stat.atime,
            ctime: this.portable ? null : this.stat.ctime
          });
          if (this.header.encode() && !this.noPax) {
            super.write(new Pax({
              atime: this.portable ? null : this.header.atime,
              ctime: this.portable ? null : this.header.ctime,
              gid: this.portable ? null : this.header.gid,
              mtime: this.noMtime ? null : this.mtime || this.header.mtime,
              path: this[PREFIX](this.path),
              linkpath: this.type === "Link" ? this[PREFIX](this.linkpath) : this.linkpath,
              size: this.header.size,
              uid: this.portable ? null : this.header.uid,
              uname: this.portable ? null : this.header.uname,
              dev: this.portable ? null : this.stat.dev,
              ino: this.portable ? null : this.stat.ino,
              nlink: this.portable ? null : this.stat.nlink
            }).encode());
          }
          super.write(this.header.block);
        }
        [DIRECTORY]() {
          if (this.path.slice(-1) !== "/") {
            this.path += "/";
          }
          this.stat.size = 0;
          this[HEADER]();
          this.end();
        }
        [SYMLINK]() {
          fs.readlink(this.absolute, (er, linkpath) => {
            if (er) {
              return this.emit("error", er);
            }
            this[ONREADLINK](linkpath);
          });
        }
        [ONREADLINK](linkpath) {
          this.linkpath = normPath(linkpath);
          this[HEADER]();
          this.end();
        }
        [HARDLINK](linkpath) {
          this.type = "Link";
          this.linkpath = normPath(path2.relative(this.cwd, linkpath));
          this.stat.size = 0;
          this[HEADER]();
          this.end();
        }
        [FILE]() {
          if (this.stat.nlink > 1) {
            const linkKey = this.stat.dev + ":" + this.stat.ino;
            if (this.linkCache.has(linkKey)) {
              const linkpath = this.linkCache.get(linkKey);
              if (linkpath.indexOf(this.cwd) === 0) {
                return this[HARDLINK](linkpath);
              }
            }
            this.linkCache.set(linkKey, this.absolute);
          }
          this[HEADER]();
          if (this.stat.size === 0) {
            return this.end();
          }
          this[OPENFILE]();
        }
        [OPENFILE]() {
          fs.open(this.absolute, "r", (er, fd) => {
            if (er) {
              return this.emit("error", er);
            }
            this[ONOPENFILE](fd);
          });
        }
        [ONOPENFILE](fd) {
          this.fd = fd;
          if (this[HAD_ERROR]) {
            return this[CLOSE]();
          }
          this.blockLen = 512 * Math.ceil(this.stat.size / 512);
          this.blockRemain = this.blockLen;
          const bufLen = Math.min(this.blockLen, this.maxReadSize);
          this.buf = Buffer.allocUnsafe(bufLen);
          this.offset = 0;
          this.pos = 0;
          this.remain = this.stat.size;
          this.length = this.buf.length;
          this[READ]();
        }
        [READ]() {
          const { fd, buf, offset, length, pos } = this;
          fs.read(fd, buf, offset, length, pos, (er, bytesRead) => {
            if (er) {
              return this[CLOSE](() => this.emit("error", er));
            }
            this[ONREAD](bytesRead);
          });
        }
        [CLOSE](cb) {
          fs.close(this.fd, cb);
        }
        [ONREAD](bytesRead) {
          if (bytesRead <= 0 && this.remain > 0) {
            const er = new Error("encountered unexpected EOF");
            er.path = this.absolute;
            er.syscall = "read";
            er.code = "EOF";
            return this[CLOSE](() => this.emit("error", er));
          }
          if (bytesRead > this.remain) {
            const er = new Error("did not encounter expected EOF");
            er.path = this.absolute;
            er.syscall = "read";
            er.code = "EOF";
            return this[CLOSE](() => this.emit("error", er));
          }
          if (bytesRead === this.remain) {
            for (let i = bytesRead;i < this.length && bytesRead < this.blockRemain; i++) {
              this.buf[i + this.offset] = 0;
              bytesRead++;
              this.remain++;
            }
          }
          const writeBuf = this.offset === 0 && bytesRead === this.buf.length ? this.buf : this.buf.slice(this.offset, this.offset + bytesRead);
          const flushed = this.write(writeBuf);
          if (!flushed) {
            this[AWAITDRAIN](() => this[ONDRAIN]());
          } else {
            this[ONDRAIN]();
          }
        }
        [AWAITDRAIN](cb) {
          this.once("drain", cb);
        }
        write(writeBuf) {
          if (this.blockRemain < writeBuf.length) {
            const er = new Error("writing more data than expected");
            er.path = this.absolute;
            return this.emit("error", er);
          }
          this.remain -= writeBuf.length;
          this.blockRemain -= writeBuf.length;
          this.pos += writeBuf.length;
          this.offset += writeBuf.length;
          return super.write(writeBuf);
        }
        [ONDRAIN]() {
          if (!this.remain) {
            if (this.blockRemain) {
              super.write(Buffer.alloc(this.blockRemain));
            }
            return this[CLOSE]((er) => er ? this.emit("error", er) : this.end());
          }
          if (this.offset >= this.length) {
            this.buf = Buffer.allocUnsafe(Math.min(this.blockRemain, this.buf.length));
            this.offset = 0;
          }
          this.length = this.buf.length - this.offset;
          this[READ]();
        }
      });
      var WriteEntrySync = class extends WriteEntry {
        [LSTAT]() {
          this[ONLSTAT](fs.lstatSync(this.absolute));
        }
        [SYMLINK]() {
          this[ONREADLINK](fs.readlinkSync(this.absolute));
        }
        [OPENFILE]() {
          this[ONOPENFILE](fs.openSync(this.absolute, "r"));
        }
        [READ]() {
          let threw = true;
          try {
            const { fd, buf, offset, length, pos } = this;
            const bytesRead = fs.readSync(fd, buf, offset, length, pos);
            this[ONREAD](bytesRead);
            threw = false;
          } finally {
            if (threw) {
              try {
                this[CLOSE](() => {
                });
              } catch (er) {
              }
            }
          }
        }
        [AWAITDRAIN](cb) {
          cb();
        }
        [CLOSE](cb) {
          fs.closeSync(this.fd);
          cb();
        }
      };
      var WriteEntryTar = warner(class WriteEntryTar2 extends Minipass {
        constructor(readEntry, opt) {
          opt = opt || {};
          super(opt);
          this.preservePaths = !!opt.preservePaths;
          this.portable = !!opt.portable;
          this.strict = !!opt.strict;
          this.noPax = !!opt.noPax;
          this.noMtime = !!opt.noMtime;
          this.readEntry = readEntry;
          this.type = readEntry.type;
          if (this.type === "Directory" && this.portable) {
            this.noMtime = true;
          }
          this.prefix = opt.prefix || null;
          this.path = normPath(readEntry.path);
          this.mode = this[MODE](readEntry.mode);
          this.uid = this.portable ? null : readEntry.uid;
          this.gid = this.portable ? null : readEntry.gid;
          this.uname = this.portable ? null : readEntry.uname;
          this.gname = this.portable ? null : readEntry.gname;
          this.size = readEntry.size;
          this.mtime = this.noMtime ? null : opt.mtime || readEntry.mtime;
          this.atime = this.portable ? null : readEntry.atime;
          this.ctime = this.portable ? null : readEntry.ctime;
          this.linkpath = normPath(readEntry.linkpath);
          if (typeof opt.onwarn === "function") {
            this.on("warn", opt.onwarn);
          }
          let pathWarn = false;
          if (!this.preservePaths) {
            const [root, stripped] = stripAbsolutePath(this.path);
            if (root) {
              this.path = stripped;
              pathWarn = root;
            }
          }
          this.remain = readEntry.size;
          this.blockRemain = readEntry.startBlockSize;
          this.header = new Header({
            path: this[PREFIX](this.path),
            linkpath: this.type === "Link" ? this[PREFIX](this.linkpath) : this.linkpath,
            mode: this.mode,
            uid: this.portable ? null : this.uid,
            gid: this.portable ? null : this.gid,
            size: this.size,
            mtime: this.noMtime ? null : this.mtime,
            type: this.type,
            uname: this.portable ? null : this.uname,
            atime: this.portable ? null : this.atime,
            ctime: this.portable ? null : this.ctime
          });
          if (pathWarn) {
            this.warn("TAR_ENTRY_INFO", `stripping ${pathWarn} from absolute path`, {
              entry: this,
              path: pathWarn + this.path
            });
          }
          if (this.header.encode() && !this.noPax) {
            super.write(new Pax({
              atime: this.portable ? null : this.atime,
              ctime: this.portable ? null : this.ctime,
              gid: this.portable ? null : this.gid,
              mtime: this.noMtime ? null : this.mtime,
              path: this[PREFIX](this.path),
              linkpath: this.type === "Link" ? this[PREFIX](this.linkpath) : this.linkpath,
              size: this.size,
              uid: this.portable ? null : this.uid,
              uname: this.portable ? null : this.uname,
              dev: this.portable ? null : this.readEntry.dev,
              ino: this.portable ? null : this.readEntry.ino,
              nlink: this.portable ? null : this.readEntry.nlink
            }).encode());
          }
          super.write(this.header.block);
          readEntry.pipe(this);
        }
        [PREFIX](path3) {
          return prefixPath(path3, this.prefix);
        }
        [MODE](mode) {
          return modeFix(mode, this.type === "Directory", this.portable);
        }
        write(data) {
          const writeLen = data.length;
          if (writeLen > this.blockRemain) {
            throw new Error("writing more to entry than is appropriate");
          }
          this.blockRemain -= writeLen;
          return super.write(data);
        }
        end() {
          if (this.blockRemain) {
            super.write(Buffer.alloc(this.blockRemain));
          }
          return super.end();
        }
      });
      WriteEntry.Sync = WriteEntrySync;
      WriteEntry.Tar = WriteEntryTar;
      var getType = (stat) => stat.isFile() ? "File" : stat.isDirectory() ? "Directory" : stat.isSymbolicLink() ? "SymbolicLink" : "Unsupported";
      module22.exports = WriteEntry;
    }
  });
  var require_iterator = __commonJS2({
    "../../node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/iterator.js"(exports22, module22) {
      module22.exports = function(Yallist) {
        Yallist.prototype[Symbol.iterator] = function* () {
          for (let walker = this.head;walker; walker = walker.next) {
            yield walker.value;
          }
        };
      };
    }
  });
  var require_yallist = __commonJS2({
    "../../node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/yallist.js"(exports22, module22) {
      module22.exports = Yallist;
      Yallist.Node = Node;
      Yallist.create = Yallist;
      function Yallist(list) {
        var self2 = this;
        if (!(self2 instanceof Yallist)) {
          self2 = new Yallist;
        }
        self2.tail = null;
        self2.head = null;
        self2.length = 0;
        if (list && typeof list.forEach === "function") {
          list.forEach(function(item) {
            self2.push(item);
          });
        } else if (arguments.length > 0) {
          for (var i = 0, l = arguments.length;i < l; i++) {
            self2.push(arguments[i]);
          }
        }
        return self2;
      }
      Yallist.prototype.removeNode = function(node) {
        if (node.list !== this) {
          throw new Error("removing node which does not belong to this list");
        }
        var next = node.next;
        var prev = node.prev;
        if (next) {
          next.prev = prev;
        }
        if (prev) {
          prev.next = next;
        }
        if (node === this.head) {
          this.head = next;
        }
        if (node === this.tail) {
          this.tail = prev;
        }
        node.list.length--;
        node.next = null;
        node.prev = null;
        node.list = null;
        return next;
      };
      Yallist.prototype.unshiftNode = function(node) {
        if (node === this.head) {
          return;
        }
        if (node.list) {
          node.list.removeNode(node);
        }
        var head = this.head;
        node.list = this;
        node.next = head;
        if (head) {
          head.prev = node;
        }
        this.head = node;
        if (!this.tail) {
          this.tail = node;
        }
        this.length++;
      };
      Yallist.prototype.pushNode = function(node) {
        if (node === this.tail) {
          return;
        }
        if (node.list) {
          node.list.removeNode(node);
        }
        var tail = this.tail;
        node.list = this;
        node.prev = tail;
        if (tail) {
          tail.next = node;
        }
        this.tail = node;
        if (!this.head) {
          this.head = node;
        }
        this.length++;
      };
      Yallist.prototype.push = function() {
        for (var i = 0, l = arguments.length;i < l; i++) {
          push(this, arguments[i]);
        }
        return this.length;
      };
      Yallist.prototype.unshift = function() {
        for (var i = 0, l = arguments.length;i < l; i++) {
          unshift(this, arguments[i]);
        }
        return this.length;
      };
      Yallist.prototype.pop = function() {
        if (!this.tail) {
          return;
        }
        var res = this.tail.value;
        this.tail = this.tail.prev;
        if (this.tail) {
          this.tail.next = null;
        } else {
          this.head = null;
        }
        this.length--;
        return res;
      };
      Yallist.prototype.shift = function() {
        if (!this.head) {
          return;
        }
        var res = this.head.value;
        this.head = this.head.next;
        if (this.head) {
          this.head.prev = null;
        } else {
          this.tail = null;
        }
        this.length--;
        return res;
      };
      Yallist.prototype.forEach = function(fn, thisp) {
        thisp = thisp || this;
        for (var walker = this.head, i = 0;walker !== null; i++) {
          fn.call(thisp, walker.value, i, this);
          walker = walker.next;
        }
      };
      Yallist.prototype.forEachReverse = function(fn, thisp) {
        thisp = thisp || this;
        for (var walker = this.tail, i = this.length - 1;walker !== null; i--) {
          fn.call(thisp, walker.value, i, this);
          walker = walker.prev;
        }
      };
      Yallist.prototype.get = function(n) {
        for (var i = 0, walker = this.head;walker !== null && i < n; i++) {
          walker = walker.next;
        }
        if (i === n && walker !== null) {
          return walker.value;
        }
      };
      Yallist.prototype.getReverse = function(n) {
        for (var i = 0, walker = this.tail;walker !== null && i < n; i++) {
          walker = walker.prev;
        }
        if (i === n && walker !== null) {
          return walker.value;
        }
      };
      Yallist.prototype.map = function(fn, thisp) {
        thisp = thisp || this;
        var res = new Yallist;
        for (var walker = this.head;walker !== null; ) {
          res.push(fn.call(thisp, walker.value, this));
          walker = walker.next;
        }
        return res;
      };
      Yallist.prototype.mapReverse = function(fn, thisp) {
        thisp = thisp || this;
        var res = new Yallist;
        for (var walker = this.tail;walker !== null; ) {
          res.push(fn.call(thisp, walker.value, this));
          walker = walker.prev;
        }
        return res;
      };
      Yallist.prototype.reduce = function(fn, initial) {
        var acc;
        var walker = this.head;
        if (arguments.length > 1) {
          acc = initial;
        } else if (this.head) {
          walker = this.head.next;
          acc = this.head.value;
        } else {
          throw new TypeError("Reduce of empty list with no initial value");
        }
        for (var i = 0;walker !== null; i++) {
          acc = fn(acc, walker.value, i);
          walker = walker.next;
        }
        return acc;
      };
      Yallist.prototype.reduceReverse = function(fn, initial) {
        var acc;
        var walker = this.tail;
        if (arguments.length > 1) {
          acc = initial;
        } else if (this.tail) {
          walker = this.tail.prev;
          acc = this.tail.value;
        } else {
          throw new TypeError("Reduce of empty list with no initial value");
        }
        for (var i = this.length - 1;walker !== null; i--) {
          acc = fn(acc, walker.value, i);
          walker = walker.prev;
        }
        return acc;
      };
      Yallist.prototype.toArray = function() {
        var arr = new Array(this.length);
        for (var i = 0, walker = this.head;walker !== null; i++) {
          arr[i] = walker.value;
          walker = walker.next;
        }
        return arr;
      };
      Yallist.prototype.toArrayReverse = function() {
        var arr = new Array(this.length);
        for (var i = 0, walker = this.tail;walker !== null; i++) {
          arr[i] = walker.value;
          walker = walker.prev;
        }
        return arr;
      };
      Yallist.prototype.slice = function(from, to) {
        to = to || this.length;
        if (to < 0) {
          to += this.length;
        }
        from = from || 0;
        if (from < 0) {
          from += this.length;
        }
        var ret = new Yallist;
        if (to < from || to < 0) {
          return ret;
        }
        if (from < 0) {
          from = 0;
        }
        if (to > this.length) {
          to = this.length;
        }
        for (var i = 0, walker = this.head;walker !== null && i < from; i++) {
          walker = walker.next;
        }
        for (;walker !== null && i < to; i++, walker = walker.next) {
          ret.push(walker.value);
        }
        return ret;
      };
      Yallist.prototype.sliceReverse = function(from, to) {
        to = to || this.length;
        if (to < 0) {
          to += this.length;
        }
        from = from || 0;
        if (from < 0) {
          from += this.length;
        }
        var ret = new Yallist;
        if (to < from || to < 0) {
          return ret;
        }
        if (from < 0) {
          from = 0;
        }
        if (to > this.length) {
          to = this.length;
        }
        for (var i = this.length, walker = this.tail;walker !== null && i > to; i--) {
          walker = walker.prev;
        }
        for (;walker !== null && i > from; i--, walker = walker.prev) {
          ret.push(walker.value);
        }
        return ret;
      };
      Yallist.prototype.splice = function(start, deleteCount, ...nodes) {
        if (start > this.length) {
          start = this.length - 1;
        }
        if (start < 0) {
          start = this.length + start;
        }
        for (var i = 0, walker = this.head;walker !== null && i < start; i++) {
          walker = walker.next;
        }
        var ret = [];
        for (var i = 0;walker && i < deleteCount; i++) {
          ret.push(walker.value);
          walker = this.removeNode(walker);
        }
        if (walker === null) {
          walker = this.tail;
        }
        if (walker !== this.head && walker !== this.tail) {
          walker = walker.prev;
        }
        for (var i = 0;i < nodes.length; i++) {
          walker = insert(this, walker, nodes[i]);
        }
        return ret;
      };
      Yallist.prototype.reverse = function() {
        var head = this.head;
        var tail = this.tail;
        for (var walker = head;walker !== null; walker = walker.prev) {
          var p = walker.prev;
          walker.prev = walker.next;
          walker.next = p;
        }
        this.head = tail;
        this.tail = head;
        return this;
      };
      function insert(self2, node, value) {
        var inserted = node === self2.head ? new Node(value, null, node, self2) : new Node(value, node, node.next, self2);
        if (inserted.next === null) {
          self2.tail = inserted;
        }
        if (inserted.prev === null) {
          self2.head = inserted;
        }
        self2.length++;
        return inserted;
      }
      function push(self2, item) {
        self2.tail = new Node(item, self2.tail, null, self2);
        if (!self2.head) {
          self2.head = self2.tail;
        }
        self2.length++;
      }
      function unshift(self2, item) {
        self2.head = new Node(item, null, self2.head, self2);
        if (!self2.tail) {
          self2.tail = self2.head;
        }
        self2.length++;
      }
      function Node(value, prev, next, list) {
        if (!(this instanceof Node)) {
          return new Node(value, prev, next, list);
        }
        this.list = list;
        this.value = value;
        if (prev) {
          prev.next = this;
          this.prev = prev;
        } else {
          this.prev = null;
        }
        if (next) {
          next.prev = this;
          this.next = next;
        } else {
          this.next = null;
        }
      }
      try {
        require_iterator()(Yallist);
      } catch (er) {
      }
    }
  });
  var require_pack = __commonJS2({
    "../../node_modules/.pnpm/tar@6.2.1/node_modules/tar/lib/pack.js"(exports22, module22) {
      var PackJob = class {
        constructor(path3, absolute) {
          this.path = path3 || "./";
          this.absolute = absolute;
          this.entry = null;
          this.stat = null;
          this.readdir = null;
          this.pending = false;
          this.ignore = false;
          this.piped = false;
        }
      };
      var { Minipass } = require_minipass();
      var zlib = require_minizlib();
      var ReadEntry = require_read_entry();
      var WriteEntry = require_write_entry();
      var WriteEntrySync = WriteEntry.Sync;
      var WriteEntryTar = WriteEntry.Tar;
      var Yallist = require_yallist();
      var EOF = Buffer.alloc(1024);
      var ONSTAT = Symbol("onStat");
      var ENDED = Symbol("ended");
      var QUEUE = Symbol("queue");
      var CURRENT = Symbol("current");
      var PROCESS = Symbol("process");
      var PROCESSING = Symbol("processing");
      var PROCESSJOB = Symbol("processJob");
      var JOBS = Symbol("jobs");
      var JOBDONE = Symbol("jobDone");
      var ADDFSENTRY = Symbol("addFSEntry");
      var ADDTARENTRY = Symbol("addTarEntry");
      var STAT = Symbol("stat");
      var READDIR = Symbol("readdir");
      var ONREADDIR = Symbol("onreaddir");
      var PIPE = Symbol("pipe");
      var ENTRY = Symbol("entry");
      var ENTRYOPT = Symbol("entryOpt");
      var WRITEENTRYCLASS = Symbol("writeEntryClass");
      var WRITE = Symbol("write");
      var ONDRAIN = Symbol("ondrain");
      var fs = __require("fs");
      var path2 = __require("path");
      var warner = require_warn_mixin();
      var normPath = require_normalize_windows_path();
      var Pack = warner(class Pack2 extends Minipass {
        constructor(opt) {
          super(opt);
          opt = opt || /* @__PURE__ */ Object.create(null);
          this.opt = opt;
          this.file = opt.file || "";
          this.cwd = opt.cwd || process.cwd();
          this.maxReadSize = opt.maxReadSize;
          this.preservePaths = !!opt.preservePaths;
          this.strict = !!opt.strict;
          this.noPax = !!opt.noPax;
          this.prefix = normPath(opt.prefix || "");
          this.linkCache = opt.linkCache || /* @__PURE__ */ new Map;
          this.statCache = opt.statCache || /* @__PURE__ */ new Map;
          this.readdirCache = opt.readdirCache || /* @__PURE__ */ new Map;
          this[WRITEENTRYCLASS] = WriteEntry;
          if (typeof opt.onwarn === "function") {
            this.on("warn", opt.onwarn);
          }
          this.portable = !!opt.portable;
          this.zip = null;
          if (opt.gzip || opt.brotli) {
            if (opt.gzip && opt.brotli) {
              throw new TypeError("gzip and brotli are mutually exclusive");
            }
            if (opt.gzip) {
              if (typeof opt.gzip !== "object") {
                opt.gzip = {};
              }
              if (this.portable) {
                opt.gzip.portable = true;
              }
              this.zip = new zlib.Gzip(opt.gzip);
            }
            if (opt.brotli) {
              if (typeof opt.brotli !== "object") {
                opt.brotli = {};
              }
              this.zip = new zlib.BrotliCompress(opt.brotli);
            }
            this.zip.on("data", (chunk) => super.write(chunk));
            this.zip.on("end", (_) => super.end());
            this.zip.on("drain", (_) => this[ONDRAIN]());
            this.on("resume", (_) => this.zip.resume());
          } else {
            this.on("drain", this[ONDRAIN]);
          }
          this.noDirRecurse = !!opt.noDirRecurse;
          this.follow = !!opt.follow;
          this.noMtime = !!opt.noMtime;
          this.mtime = opt.mtime || null;
          this.filter = typeof opt.filter === "function" ? opt.filter : (_) => true;
          this[QUEUE] = new Yallist;
          this[JOBS] = 0;
          this.jobs = +opt.jobs || 4;
          this[PROCESSING] = false;
          this[ENDED] = false;
        }
        [WRITE](chunk) {
          return super.write(chunk);
        }
        add(path3) {
          this.write(path3);
          return this;
        }
        end(path3) {
          if (path3) {
            this.write(path3);
          }
          this[ENDED] = true;
          this[PROCESS]();
          return this;
        }
        write(path3) {
          if (this[ENDED]) {
            throw new Error("write after end");
          }
          if (path3 instanceof ReadEntry) {
            this[ADDTARENTRY](path3);
          } else {
            this[ADDFSENTRY](path3);
          }
          return this.flowing;
        }
        [ADDTARENTRY](p) {
          const absolute = normPath(path2.resolve(this.cwd, p.path));
          if (!this.filter(p.path, p)) {
            p.resume();
          } else {
            const job = new PackJob(p.path, absolute, false);
            job.entry = new WriteEntryTar(p, this[ENTRYOPT](job));
            job.entry.on("end", (_) => this[JOBDONE](job));
            this[JOBS] += 1;
            this[QUEUE].push(job);
          }
          this[PROCESS]();
        }
        [ADDFSENTRY](p) {
          const absolute = normPath(path2.resolve(this.cwd, p));
          this[QUEUE].push(new PackJob(p, absolute));
          this[PROCESS]();
        }
        [STAT](job) {
          job.pending = true;
          this[JOBS] += 1;
          const stat = this.follow ? "stat" : "lstat";
          fs[stat](job.absolute, (er, stat2) => {
            job.pending = false;
            this[JOBS] -= 1;
            if (er) {
              this.emit("error", er);
            } else {
              this[ONSTAT](job, stat2);
            }
          });
        }
        [ONSTAT](job, stat) {
          this.statCache.set(job.absolute, stat);
          job.stat = stat;
          if (!this.filter(job.path, stat)) {
            job.ignore = true;
          }
          this[PROCESS]();
        }
        [READDIR](job) {
          job.pending = true;
          this[JOBS] += 1;
          fs.readdir(job.absolute, (er, entries) => {
            job.pending = false;
            this[JOBS] -= 1;
            if (er) {
              return this.emit("error", er);
            }
            this[ONREADDIR](job, entries);
          });
        }
        [ONREADDIR](job, entries) {
          this.readdirCache.set(job.absolute, entries);
          job.readdir = entries;
          this[PROCESS]();
        }
        [PROCESS]() {
          if (this[PROCESSING]) {
            return;
          }
          this[PROCESSING] = true;
          for (let w = this[QUEUE].head;w !== null && this[JOBS] < this.jobs; w = w.next) {
            this[PROCESSJOB](w.value);
            if (w.value.ignore) {
              const p = w.next;
              this[QUEUE].removeNode(w);
              w.next = p;
            }
          }
          this[PROCESSING] = false;
          if (this[ENDED] && !this[QUEUE].length && this[JOBS] === 0) {
            if (this.zip) {
              this.zip.end(EOF);
            } else {
              super.write(EOF);
              super.end();
            }
          }
        }
        get [CURRENT]() {
          return this[QUEUE] && this[QUEUE].head && this[QUEUE].head.value;
        }
        [JOBDONE](job) {
          this[QUEUE].shift();
          this[JOBS] -= 1;
          this[PROCESS]();
        }
        [PROCESSJOB](job) {
          if (job.pending) {
            return;
          }
          if (job.entry) {
            if (job === this[CURRENT] && !job.piped) {
              this[PIPE](job);
            }
            return;
          }
          if (!job.stat) {
            if (this.statCache.has(job.absolute)) {
              this[ONSTAT](job, this.statCache.get(job.absolute));
            } else {
              this[STAT](job);
            }
          }
          if (!job.stat) {
            return;
          }
          if (job.ignore) {
            return;
          }
          if (!this.noDirRecurse && job.stat.isDirectory() && !job.readdir) {
            if (this.readdirCache.has(job.absolute)) {
              this[ONREADDIR](job, this.readdirCache.get(job.absolute));
            } else {
              this[READDIR](job);
            }
            if (!job.readdir) {
              return;
            }
          }
          job.entry = this[ENTRY](job);
          if (!job.entry) {
            job.ignore = true;
            return;
          }
          if (job === this[CURRENT] && !job.piped) {
            this[PIPE](job);
          }
        }
        [ENTRYOPT](job) {
          return {
            onwarn: (code, msg, data) => this.warn(code, msg, data),
            noPax: this.noPax,
            cwd: this.cwd,
            absolute: job.absolute,
            preservePaths: this.preservePaths,
            maxReadSize: this.maxReadSize,
            strict: this.strict,
            portable: this.portable,
            linkCache: this.linkCache,
            statCache: this.statCache,
            noMtime: this.noMtime,
            mtime: this.mtime,
            prefix: this.prefix
          };
        }
        [ENTRY](job) {
          this[JOBS] += 1;
          try {
            return new this[WRITEENTRYCLASS](job.path, this[ENTRYOPT](job)).on("end", () => this[JOBDONE](job)).on("error", (er) => this.emit("error", er));
          } catch (er) {
            this.emit("error", er);
          }
        }
        [ONDRAIN]() {
          if (this[CURRENT] && this[CURRENT].entry) {
            this[CURRENT].entry.resume();
          }
        }
        [PIPE](job) {
          job.piped = true;
          if (job.readdir) {
            job.readdir.forEach((entry) => {
              const p = job.path;
              const base = p === "./" ? "" : p.replace(/\/*$/, "/");
              this[ADDFSENTRY](base + entry);
            });
          }
          const source = job.entry;
          const zip = this.zip;
          if (zip) {
            source.on("data", (chunk) => {
              if (!zip.write(chunk)) {
                source.pause();
              }
            });
          } else {
            source.on("data", (chunk) => {
              if (!super.write(chunk)) {
                source.pause();
              }
            });
          }
        }
        pause() {
          if (this.zip) {
            this.zip.pause();
          }
          return super.pause();
        }
      });
      var PackSync = class extends Pack {
        constructor(opt) {
          super(opt);
          this[WRITEENTRYCLASS] = WriteEntrySync;
        }
        pause() {
        }
        resume() {
        }
        [STAT](job) {
          const stat = this.follow ? "statSync" : "lstatSync";
          this[ONSTAT](job, fs[stat](job.absolute));
        }
        [READDIR](job, stat) {
          this[ONREADDIR](job, fs.readdirSync(job.absolute));
        }
        [PIPE](job) {
          const source = job.entry;
          const zip = this.zip;
          if (job.readdir) {
            job.readdir.forEach((entry) => {
              const p = job.path;
              const base = p === "./" ? "" : p.replace(/\/*$/, "/");
              this[ADDFSENTRY](base + entry);
            });
          }
          if (zip) {
            source.on("data", (chunk) => {
              zip.write(chunk);
            });
          } else {
            source.on("data", (chunk) => {
              super[WRITE](chunk);
            });
          }
        }
      };
      Pack.Sync = PackSync;
      module22.exports = Pack;
    }
  });
  var require_fs_minipass = __commonJS2({
    "../../node_modules/.pnpm/fs-minipass@2.1.0/node_modules/fs-minipass/index.js"(exports22) {
      var MiniPass = require_minipass2();
      var EE = __require("events").EventEmitter;
      var fs = __require("fs");
      var writev = fs.writev;
      if (!writev) {
        const binding = process.binding("fs");
        const FSReqWrap = binding.FSReqWrap || binding.FSReqCallback;
        writev = (fd, iovec, pos, cb) => {
          const done = (er, bw) => cb(er, bw, iovec);
          const req = new FSReqWrap;
          req.oncomplete = done;
          binding.writeBuffers(fd, iovec, pos, req);
        };
      }
      var _autoClose = Symbol("_autoClose");
      var _close = Symbol("_close");
      var _ended = Symbol("_ended");
      var _fd = Symbol("_fd");
      var _finished = Symbol("_finished");
      var _flags = Symbol("_flags");
      var _flush = Symbol("_flush");
      var _handleChunk = Symbol("_handleChunk");
      var _makeBuf = Symbol("_makeBuf");
      var _mode = Symbol("_mode");
      var _needDrain = Symbol("_needDrain");
      var _onerror = Symbol("_onerror");
      var _onopen = Symbol("_onopen");
      var _onread = Symbol("_onread");
      var _onwrite = Symbol("_onwrite");
      var _open = Symbol("_open");
      var _path = Symbol("_path");
      var _pos = Symbol("_pos");
      var _queue = Symbol("_queue");
      var _read = Symbol("_read");
      var _readSize = Symbol("_readSize");
      var _reading = Symbol("_reading");
      var _remain = Symbol("_remain");
      var _size = Symbol("_size");
      var _write = Symbol("_write");
      var _writing = Symbol("_writing");
      var _defaultFlag = Symbol("_defaultFlag");
      var _errored = Symbol("_errored");
      var ReadStream = class extends MiniPass {
        constructor(path2, opt) {
          opt = opt || {};
          super(opt);
          this.readable = true;
          this.writable = false;
          if (typeof path2 !== "string")
            throw new TypeError("path must be a string");
          this[_errored] = false;
          this[_fd] = typeof opt.fd === "number" ? opt.fd : null;
          this[_path] = path2;
          this[_readSize] = opt.readSize || 16 * 1024 * 1024;
          this[_reading] = false;
          this[_size] = typeof opt.size === "number" ? opt.size : Infinity;
          this[_remain] = this[_size];
          this[_autoClose] = typeof opt.autoClose === "boolean" ? opt.autoClose : true;
          if (typeof this[_fd] === "number")
            this[_read]();
          else
            this[_open]();
        }
        get fd() {
          return this[_fd];
        }
        get path() {
          return this[_path];
        }
        write() {
          throw new TypeError("this is a readable stream");
        }
        end() {
          throw new TypeError("this is a readable stream");
        }
        [_open]() {
          fs.open(this[_path], "r", (er, fd) => this[_onopen](er, fd));
        }
        [_onopen](er, fd) {
          if (er)
            this[_onerror](er);
          else {
            this[_fd] = fd;
            this.emit("open", fd);
            this[_read]();
          }
        }
        [_makeBuf]() {
          return Buffer.allocUnsafe(Math.min(this[_readSize], this[_remain]));
        }
        [_read]() {
          if (!this[_reading]) {
            this[_reading] = true;
            const buf = this[_makeBuf]();
            if (buf.length === 0)
              return process.nextTick(() => this[_onread](null, 0, buf));
            fs.read(this[_fd], buf, 0, buf.length, null, (er, br, buf2) => this[_onread](er, br, buf2));
          }
        }
        [_onread](er, br, buf) {
          this[_reading] = false;
          if (er)
            this[_onerror](er);
          else if (this[_handleChunk](br, buf))
            this[_read]();
        }
        [_close]() {
          if (this[_autoClose] && typeof this[_fd] === "number") {
            const fd = this[_fd];
            this[_fd] = null;
            fs.close(fd, (er) => er ? this.emit("error", er) : this.emit("close"));
          }
        }
        [_onerror](er) {
          this[_reading] = true;
          this[_close]();
          this.emit("error", er);
        }
        [_handleChunk](br, buf) {
          let ret = false;
          this[_remain] -= br;
          if (br > 0)
            ret = super.write(br < buf.length ? buf.slice(0, br) : buf);
          if (br === 0 || this[_remain] <= 0) {
            ret = false;
            this[_close]();
            super.end();
          }
          return ret;
        }
        emit(ev, data) {
          switch (ev) {
            case "prefinish":
            case "finish":
              break;
            case "drain":
              if (typeof this[_fd] === "number")
                this[_read]();
              break;
            case "error":
              if (this[_errored])
                return;
              this[_errored] = true;
              return super.emit(ev, data);
            default:
              return super.emit(ev, data);
          }
        }
      };
      var ReadStreamSync = class extends ReadStream {
        [_open]() {
          let threw = true;
          try {
            this[_onopen](null, fs.openSync(this[_path], "r"));
            threw = false;
          } finally {
            if (threw)
              this[_close]();
          }
        }
        [_read]() {
          let threw = true;
          try {
            if (!this[_reading]) {
              this[_reading] = true;
              do {
                const buf = this[_makeBuf]();
                const br = buf.length === 0 ? 0 : fs.readSync(this[_fd], buf, 0, buf.length, null);
                if (!this[_handleChunk](br, buf))
                  break;
              } while (true);
              this[_reading] = false;
            }
            threw = false;
          } finally {
            if (threw)
              this[_close]();
          }
        }
        [_close]() {
          if (this[_autoClose] && typeof this[_fd] === "number") {
            const fd = this[_fd];
            this[_fd] = null;
            fs.closeSync(fd);
            this.emit("close");
          }
        }
      };
      var WriteStream = class extends EE {
        constructor(path2, opt) {
          opt = opt || {};
          super(opt);
          this.readable = false;
          this.writable = true;
          this[_errored] = false;
          this[_writing] = false;
          this[_ended] = false;
          this[_needDrain] = false;
          this[_queue] = [];
          this[_path] = path2;
          this[_fd] = typeof opt.fd === "number" ? opt.fd : null;
          this[_mode] = opt.mode === undefined ? 438 : opt.mode;
          this[_pos] = typeof opt.start === "number" ? opt.start : null;
          this[_autoClose] = typeof opt.autoClose === "boolean" ? opt.autoClose : true;
          const defaultFlag = this[_pos] !== null ? "r+" : "w";
          this[_defaultFlag] = opt.flags === undefined;
          this[_flags] = this[_defaultFlag] ? defaultFlag : opt.flags;
          if (this[_fd] === null)
            this[_open]();
        }
        emit(ev, data) {
          if (ev === "error") {
            if (this[_errored])
              return;
            this[_errored] = true;
          }
          return super.emit(ev, data);
        }
        get fd() {
          return this[_fd];
        }
        get path() {
          return this[_path];
        }
        [_onerror](er) {
          this[_close]();
          this[_writing] = true;
          this.emit("error", er);
        }
        [_open]() {
          fs.open(this[_path], this[_flags], this[_mode], (er, fd) => this[_onopen](er, fd));
        }
        [_onopen](er, fd) {
          if (this[_defaultFlag] && this[_flags] === "r+" && er && er.code === "ENOENT") {
            this[_flags] = "w";
            this[_open]();
          } else if (er)
            this[_onerror](er);
          else {
            this[_fd] = fd;
            this.emit("open", fd);
            this[_flush]();
          }
        }
        end(buf, enc) {
          if (buf)
            this.write(buf, enc);
          this[_ended] = true;
          if (!this[_writing] && !this[_queue].length && typeof this[_fd] === "number")
            this[_onwrite](null, 0);
          return this;
        }
        write(buf, enc) {
          if (typeof buf === "string")
            buf = Buffer.from(buf, enc);
          if (this[_ended]) {
            this.emit("error", new Error("write() after end()"));
            return false;
          }
          if (this[_fd] === null || this[_writing] || this[_queue].length) {
            this[_queue].push(buf);
            this[_needDrain] = true;
            return false;
          }
          this[_writing] = true;
          this[_write](buf);
          return true;
        }
        [_write](buf) {
          fs.write(this[_fd], buf, 0, buf.length, this[_pos], (er, bw) => this[_onwrite](er, bw));
        }
        [_onwrite](er, bw) {
          if (er)
            this[_onerror](er);
          else {
            if (this[_pos] !== null)
              this[_pos] += bw;
            if (this[_queue].length)
              this[_flush]();
            else {
              this[_writing] = false;
              if (this[_ended] && !this[_finished]) {
                this[_finished] = true;
                this[_close]();
                this.emit("finish");
              } else if (this[_needDrain]) {
                this[_needDrain] = false;
                this.emit("drain");
              }
            }
          }
        }
        [_flush]() {
          if (this[_queue].length === 0) {
            if (this[_ended])
              this[_onwrite](null, 0);
          } else if (this[_queue].length === 1)
            this[_write](this[_queue].pop());
          else {
            const iovec = this[_queue];
            this[_queue] = [];
            writev(this[_fd], iovec, this[_pos], (er, bw) => this[_onwrite](er, bw));
          }
        }
        [_close]() {
          if (this[_autoClose] && typeof this[_fd] === "number") {
            const fd = this[_fd];
            this[_fd] = null;
            fs.close(fd, (er) => er ? this.emit("error", er) : this.emit("close"));
          }
        }
      };
      var WriteStreamSync = class extends WriteStream {
        [_open]() {
          let fd;
          if (this[_defaultFlag] && this[_flags] === "r+") {
            try {
              fd = fs.openSync(this[_path], this[_flags], this[_mode]);
            } catch (er) {
              if (er.code === "ENOENT") {
                this[_flags] = "w";
                return this[_open]();
              } else
                throw er;
            }
          } else
            fd = fs.openSync(this[_path], this[_flags], this[_mode]);
          this[_onopen](null, fd);
        }
        [_close]() {
          if (this[_autoClose] && typeof this[_fd] === "number") {
            const fd = this[_fd];
            this[_fd] = null;
            fs.closeSync(fd);
            this.emit("close");
          }
        }
        [_write](buf) {
          let threw = true;
          try {
            this[_onwrite](null, fs.writeSync(this[_fd], buf, 0, buf.length, this[_pos]));
            threw = false;
          } finally {
            if (threw)
              try {
                this[_close]();
              } catch (_) {
              }
          }
        }
      };
      exports22.ReadStream = ReadStream;
      exports22.ReadStreamSync = ReadStreamSync;
      exports22.WriteStream = WriteStream;
      exports22.WriteStreamSync = WriteStreamSync;
    }
  });
  var require_parse5 = __commonJS2({
    "../../node_modules/.pnpm/tar@6.2.1/node_modules/tar/lib/parse.js"(exports22, module22) {
      var warner = require_warn_mixin();
      var Header = require_header();
      var EE = __require("events");
      var Yallist = require_yallist();
      var maxMetaEntrySize = 1024 * 1024;
      var Entry = require_read_entry();
      var Pax = require_pax();
      var zlib = require_minizlib();
      var { nextTick } = __require("process");
      var gzipHeader = Buffer.from([31, 139]);
      var STATE = Symbol("state");
      var WRITEENTRY = Symbol("writeEntry");
      var READENTRY = Symbol("readEntry");
      var NEXTENTRY = Symbol("nextEntry");
      var PROCESSENTRY = Symbol("processEntry");
      var EX = Symbol("extendedHeader");
      var GEX = Symbol("globalExtendedHeader");
      var META = Symbol("meta");
      var EMITMETA = Symbol("emitMeta");
      var BUFFER = Symbol("buffer");
      var QUEUE = Symbol("queue");
      var ENDED = Symbol("ended");
      var EMITTEDEND = Symbol("emittedEnd");
      var EMIT = Symbol("emit");
      var UNZIP = Symbol("unzip");
      var CONSUMECHUNK = Symbol("consumeChunk");
      var CONSUMECHUNKSUB = Symbol("consumeChunkSub");
      var CONSUMEBODY = Symbol("consumeBody");
      var CONSUMEMETA = Symbol("consumeMeta");
      var CONSUMEHEADER = Symbol("consumeHeader");
      var CONSUMING = Symbol("consuming");
      var BUFFERCONCAT = Symbol("bufferConcat");
      var MAYBEEND = Symbol("maybeEnd");
      var WRITING = Symbol("writing");
      var ABORTED = Symbol("aborted");
      var DONE = Symbol("onDone");
      var SAW_VALID_ENTRY = Symbol("sawValidEntry");
      var SAW_NULL_BLOCK = Symbol("sawNullBlock");
      var SAW_EOF = Symbol("sawEOF");
      var CLOSESTREAM = Symbol("closeStream");
      var noop = (_) => true;
      module22.exports = warner(class Parser extends EE {
        constructor(opt) {
          opt = opt || {};
          super(opt);
          this.file = opt.file || "";
          this[SAW_VALID_ENTRY] = null;
          this.on(DONE, (_) => {
            if (this[STATE] === "begin" || this[SAW_VALID_ENTRY] === false) {
              this.warn("TAR_BAD_ARCHIVE", "Unrecognized archive format");
            }
          });
          if (opt.ondone) {
            this.on(DONE, opt.ondone);
          } else {
            this.on(DONE, (_) => {
              this.emit("prefinish");
              this.emit("finish");
              this.emit("end");
            });
          }
          this.strict = !!opt.strict;
          this.maxMetaEntrySize = opt.maxMetaEntrySize || maxMetaEntrySize;
          this.filter = typeof opt.filter === "function" ? opt.filter : noop;
          const isTBR = opt.file && (opt.file.endsWith(".tar.br") || opt.file.endsWith(".tbr"));
          this.brotli = !opt.gzip && opt.brotli !== undefined ? opt.brotli : isTBR ? undefined : false;
          this.writable = true;
          this.readable = false;
          this[QUEUE] = new Yallist;
          this[BUFFER] = null;
          this[READENTRY] = null;
          this[WRITEENTRY] = null;
          this[STATE] = "begin";
          this[META] = "";
          this[EX] = null;
          this[GEX] = null;
          this[ENDED] = false;
          this[UNZIP] = null;
          this[ABORTED] = false;
          this[SAW_NULL_BLOCK] = false;
          this[SAW_EOF] = false;
          this.on("end", () => this[CLOSESTREAM]());
          if (typeof opt.onwarn === "function") {
            this.on("warn", opt.onwarn);
          }
          if (typeof opt.onentry === "function") {
            this.on("entry", opt.onentry);
          }
        }
        [CONSUMEHEADER](chunk, position) {
          if (this[SAW_VALID_ENTRY] === null) {
            this[SAW_VALID_ENTRY] = false;
          }
          let header;
          try {
            header = new Header(chunk, position, this[EX], this[GEX]);
          } catch (er) {
            return this.warn("TAR_ENTRY_INVALID", er);
          }
          if (header.nullBlock) {
            if (this[SAW_NULL_BLOCK]) {
              this[SAW_EOF] = true;
              if (this[STATE] === "begin") {
                this[STATE] = "header";
              }
              this[EMIT]("eof");
            } else {
              this[SAW_NULL_BLOCK] = true;
              this[EMIT]("nullBlock");
            }
          } else {
            this[SAW_NULL_BLOCK] = false;
            if (!header.cksumValid) {
              this.warn("TAR_ENTRY_INVALID", "checksum failure", { header });
            } else if (!header.path) {
              this.warn("TAR_ENTRY_INVALID", "path is required", { header });
            } else {
              const type = header.type;
              if (/^(Symbolic)?Link$/.test(type) && !header.linkpath) {
                this.warn("TAR_ENTRY_INVALID", "linkpath required", { header });
              } else if (!/^(Symbolic)?Link$/.test(type) && header.linkpath) {
                this.warn("TAR_ENTRY_INVALID", "linkpath forbidden", { header });
              } else {
                const entry = this[WRITEENTRY] = new Entry(header, this[EX], this[GEX]);
                if (!this[SAW_VALID_ENTRY]) {
                  if (entry.remain) {
                    const onend = () => {
                      if (!entry.invalid) {
                        this[SAW_VALID_ENTRY] = true;
                      }
                    };
                    entry.on("end", onend);
                  } else {
                    this[SAW_VALID_ENTRY] = true;
                  }
                }
                if (entry.meta) {
                  if (entry.size > this.maxMetaEntrySize) {
                    entry.ignore = true;
                    this[EMIT]("ignoredEntry", entry);
                    this[STATE] = "ignore";
                    entry.resume();
                  } else if (entry.size > 0) {
                    this[META] = "";
                    entry.on("data", (c) => this[META] += c);
                    this[STATE] = "meta";
                  }
                } else {
                  this[EX] = null;
                  entry.ignore = entry.ignore || !this.filter(entry.path, entry);
                  if (entry.ignore) {
                    this[EMIT]("ignoredEntry", entry);
                    this[STATE] = entry.remain ? "ignore" : "header";
                    entry.resume();
                  } else {
                    if (entry.remain) {
                      this[STATE] = "body";
                    } else {
                      this[STATE] = "header";
                      entry.end();
                    }
                    if (!this[READENTRY]) {
                      this[QUEUE].push(entry);
                      this[NEXTENTRY]();
                    } else {
                      this[QUEUE].push(entry);
                    }
                  }
                }
              }
            }
          }
        }
        [CLOSESTREAM]() {
          nextTick(() => this.emit("close"));
        }
        [PROCESSENTRY](entry) {
          let go = true;
          if (!entry) {
            this[READENTRY] = null;
            go = false;
          } else if (Array.isArray(entry)) {
            this.emit.apply(this, entry);
          } else {
            this[READENTRY] = entry;
            this.emit("entry", entry);
            if (!entry.emittedEnd) {
              entry.on("end", (_) => this[NEXTENTRY]());
              go = false;
            }
          }
          return go;
        }
        [NEXTENTRY]() {
          do {
          } while (this[PROCESSENTRY](this[QUEUE].shift()));
          if (!this[QUEUE].length) {
            const re = this[READENTRY];
            const drainNow = !re || re.flowing || re.size === re.remain;
            if (drainNow) {
              if (!this[WRITING]) {
                this.emit("drain");
              }
            } else {
              re.once("drain", (_) => this.emit("drain"));
            }
          }
        }
        [CONSUMEBODY](chunk, position) {
          const entry = this[WRITEENTRY];
          const br = entry.blockRemain;
          const c = br >= chunk.length && position === 0 ? chunk : chunk.slice(position, position + br);
          entry.write(c);
          if (!entry.blockRemain) {
            this[STATE] = "header";
            this[WRITEENTRY] = null;
            entry.end();
          }
          return c.length;
        }
        [CONSUMEMETA](chunk, position) {
          const entry = this[WRITEENTRY];
          const ret = this[CONSUMEBODY](chunk, position);
          if (!this[WRITEENTRY]) {
            this[EMITMETA](entry);
          }
          return ret;
        }
        [EMIT](ev, data, extra) {
          if (!this[QUEUE].length && !this[READENTRY]) {
            this.emit(ev, data, extra);
          } else {
            this[QUEUE].push([ev, data, extra]);
          }
        }
        [EMITMETA](entry) {
          this[EMIT]("meta", this[META]);
          switch (entry.type) {
            case "ExtendedHeader":
            case "OldExtendedHeader":
              this[EX] = Pax.parse(this[META], this[EX], false);
              break;
            case "GlobalExtendedHeader":
              this[GEX] = Pax.parse(this[META], this[GEX], true);
              break;
            case "NextFileHasLongPath":
            case "OldGnuLongPath":
              this[EX] = this[EX] || /* @__PURE__ */ Object.create(null);
              this[EX].path = this[META].replace(/\0.*/, "");
              break;
            case "NextFileHasLongLinkpath":
              this[EX] = this[EX] || /* @__PURE__ */ Object.create(null);
              this[EX].linkpath = this[META].replace(/\0.*/, "");
              break;
            default:
              throw new Error("unknown meta: " + entry.type);
          }
        }
        abort(error) {
          this[ABORTED] = true;
          this.emit("abort", error);
          this.warn("TAR_ABORT", error, { recoverable: false });
        }
        write(chunk) {
          if (this[ABORTED]) {
            return;
          }
          const needSniff = this[UNZIP] === null || this.brotli === undefined && this[UNZIP] === false;
          if (needSniff && chunk) {
            if (this[BUFFER]) {
              chunk = Buffer.concat([this[BUFFER], chunk]);
              this[BUFFER] = null;
            }
            if (chunk.length < gzipHeader.length) {
              this[BUFFER] = chunk;
              return true;
            }
            for (let i = 0;this[UNZIP] === null && i < gzipHeader.length; i++) {
              if (chunk[i] !== gzipHeader[i]) {
                this[UNZIP] = false;
              }
            }
            const maybeBrotli = this.brotli === undefined;
            if (this[UNZIP] === false && maybeBrotli) {
              if (chunk.length < 512) {
                if (this[ENDED]) {
                  this.brotli = true;
                } else {
                  this[BUFFER] = chunk;
                  return true;
                }
              } else {
                try {
                  new Header(chunk.slice(0, 512));
                  this.brotli = false;
                } catch (_) {
                  this.brotli = true;
                }
              }
            }
            if (this[UNZIP] === null || this[UNZIP] === false && this.brotli) {
              const ended = this[ENDED];
              this[ENDED] = false;
              this[UNZIP] = this[UNZIP] === null ? new zlib.Unzip : new zlib.BrotliDecompress;
              this[UNZIP].on("data", (chunk2) => this[CONSUMECHUNK](chunk2));
              this[UNZIP].on("error", (er) => this.abort(er));
              this[UNZIP].on("end", (_) => {
                this[ENDED] = true;
                this[CONSUMECHUNK]();
              });
              this[WRITING] = true;
              const ret2 = this[UNZIP][ended ? "end" : "write"](chunk);
              this[WRITING] = false;
              return ret2;
            }
          }
          this[WRITING] = true;
          if (this[UNZIP]) {
            this[UNZIP].write(chunk);
          } else {
            this[CONSUMECHUNK](chunk);
          }
          this[WRITING] = false;
          const ret = this[QUEUE].length ? false : this[READENTRY] ? this[READENTRY].flowing : true;
          if (!ret && !this[QUEUE].length) {
            this[READENTRY].once("drain", (_) => this.emit("drain"));
          }
          return ret;
        }
        [BUFFERCONCAT](c) {
          if (c && !this[ABORTED]) {
            this[BUFFER] = this[BUFFER] ? Buffer.concat([this[BUFFER], c]) : c;
          }
        }
        [MAYBEEND]() {
          if (this[ENDED] && !this[EMITTEDEND] && !this[ABORTED] && !this[CONSUMING]) {
            this[EMITTEDEND] = true;
            const entry = this[WRITEENTRY];
            if (entry && entry.blockRemain) {
              const have = this[BUFFER] ? this[BUFFER].length : 0;
              this.warn("TAR_BAD_ARCHIVE", `Truncated input (needed ${entry.blockRemain} more bytes, only ${have} available)`, { entry });
              if (this[BUFFER]) {
                entry.write(this[BUFFER]);
              }
              entry.end();
            }
            this[EMIT](DONE);
          }
        }
        [CONSUMECHUNK](chunk) {
          if (this[CONSUMING]) {
            this[BUFFERCONCAT](chunk);
          } else if (!chunk && !this[BUFFER]) {
            this[MAYBEEND]();
          } else {
            this[CONSUMING] = true;
            if (this[BUFFER]) {
              this[BUFFERCONCAT](chunk);
              const c = this[BUFFER];
              this[BUFFER] = null;
              this[CONSUMECHUNKSUB](c);
            } else {
              this[CONSUMECHUNKSUB](chunk);
            }
            while (this[BUFFER] && this[BUFFER].length >= 512 && !this[ABORTED] && !this[SAW_EOF]) {
              const c = this[BUFFER];
              this[BUFFER] = null;
              this[CONSUMECHUNKSUB](c);
            }
            this[CONSUMING] = false;
          }
          if (!this[BUFFER] || this[ENDED]) {
            this[MAYBEEND]();
          }
        }
        [CONSUMECHUNKSUB](chunk) {
          let position = 0;
          const length = chunk.length;
          while (position + 512 <= length && !this[ABORTED] && !this[SAW_EOF]) {
            switch (this[STATE]) {
              case "begin":
              case "header":
                this[CONSUMEHEADER](chunk, position);
                position += 512;
                break;
              case "ignore":
              case "body":
                position += this[CONSUMEBODY](chunk, position);
                break;
              case "meta":
                position += this[CONSUMEMETA](chunk, position);
                break;
              default:
                throw new Error("invalid state: " + this[STATE]);
            }
          }
          if (position < length) {
            if (this[BUFFER]) {
              this[BUFFER] = Buffer.concat([chunk.slice(position), this[BUFFER]]);
            } else {
              this[BUFFER] = chunk.slice(position);
            }
          }
        }
        end(chunk) {
          if (!this[ABORTED]) {
            if (this[UNZIP]) {
              this[UNZIP].end(chunk);
            } else {
              this[ENDED] = true;
              if (this.brotli === undefined)
                chunk = chunk || Buffer.alloc(0);
              this.write(chunk);
            }
          }
        }
      });
    }
  });
  var require_list = __commonJS2({
    "../../node_modules/.pnpm/tar@6.2.1/node_modules/tar/lib/list.js"(exports22, module22) {
      var hlo = require_high_level_opt();
      var Parser = require_parse5();
      var fs = __require("fs");
      var fsm = require_fs_minipass();
      var path2 = __require("path");
      var stripSlash = require_strip_trailing_slashes();
      module22.exports = (opt_, files, cb) => {
        if (typeof opt_ === "function") {
          cb = opt_, files = null, opt_ = {};
        } else if (Array.isArray(opt_)) {
          files = opt_, opt_ = {};
        }
        if (typeof files === "function") {
          cb = files, files = null;
        }
        if (!files) {
          files = [];
        } else {
          files = Array.from(files);
        }
        const opt = hlo(opt_);
        if (opt.sync && typeof cb === "function") {
          throw new TypeError("callback not supported for sync tar functions");
        }
        if (!opt.file && typeof cb === "function") {
          throw new TypeError("callback only supported with file option");
        }
        if (files.length) {
          filesFilter(opt, files);
        }
        if (!opt.noResume) {
          onentryFunction(opt);
        }
        return opt.file && opt.sync ? listFileSync(opt) : opt.file ? listFile(opt, cb) : list(opt);
      };
      var onentryFunction = (opt) => {
        const onentry = opt.onentry;
        opt.onentry = onentry ? (e) => {
          onentry(e);
          e.resume();
        } : (e) => e.resume();
      };
      var filesFilter = (opt, files) => {
        const map = new Map(files.map((f) => [stripSlash(f), true]));
        const filter = opt.filter;
        const mapHas = (file, r) => {
          const root = r || path2.parse(file).root || ".";
          const ret = file === root ? false : map.has(file) ? map.get(file) : mapHas(path2.dirname(file), root);
          map.set(file, ret);
          return ret;
        };
        opt.filter = filter ? (file, entry) => filter(file, entry) && mapHas(stripSlash(file)) : (file) => mapHas(stripSlash(file));
      };
      var listFileSync = (opt) => {
        const p = list(opt);
        const file = opt.file;
        let threw = true;
        let fd;
        try {
          const stat = fs.statSync(file);
          const readSize = opt.maxReadSize || 16 * 1024 * 1024;
          if (stat.size < readSize) {
            p.end(fs.readFileSync(file));
          } else {
            let pos = 0;
            const buf = Buffer.allocUnsafe(readSize);
            fd = fs.openSync(file, "r");
            while (pos < stat.size) {
              const bytesRead = fs.readSync(fd, buf, 0, readSize, pos);
              pos += bytesRead;
              p.write(buf.slice(0, bytesRead));
            }
            p.end();
          }
          threw = false;
        } finally {
          if (threw && fd) {
            try {
              fs.closeSync(fd);
            } catch (er) {
            }
          }
        }
      };
      var listFile = (opt, cb) => {
        const parse = new Parser(opt);
        const readSize = opt.maxReadSize || 16 * 1024 * 1024;
        const file = opt.file;
        const p = new Promise((resolve, reject) => {
          parse.on("error", reject);
          parse.on("end", resolve);
          fs.stat(file, (er, stat) => {
            if (er) {
              reject(er);
            } else {
              const stream = new fsm.ReadStream(file, {
                readSize,
                size: stat.size
              });
              stream.on("error", reject);
              stream.pipe(parse);
            }
          });
        });
        return cb ? p.then(cb, cb) : p;
      };
      var list = (opt) => new Parser(opt);
    }
  });
  var require_create2 = __commonJS2({
    "../../node_modules/.pnpm/tar@6.2.1/node_modules/tar/lib/create.js"(exports22, module22) {
      var hlo = require_high_level_opt();
      var Pack = require_pack();
      var fsm = require_fs_minipass();
      var t = require_list();
      var path2 = __require("path");
      module22.exports = (opt_, files, cb) => {
        if (typeof files === "function") {
          cb = files;
        }
        if (Array.isArray(opt_)) {
          files = opt_, opt_ = {};
        }
        if (!files || !Array.isArray(files) || !files.length) {
          throw new TypeError("no files or directories specified");
        }
        files = Array.from(files);
        const opt = hlo(opt_);
        if (opt.sync && typeof cb === "function") {
          throw new TypeError("callback not supported for sync tar functions");
        }
        if (!opt.file && typeof cb === "function") {
          throw new TypeError("callback only supported with file option");
        }
        return opt.file && opt.sync ? createFileSync(opt, files) : opt.file ? createFile(opt, files, cb) : opt.sync ? createSync(opt, files) : create(opt, files);
      };
      var createFileSync = (opt, files) => {
        const p = new Pack.Sync(opt);
        const stream = new fsm.WriteStreamSync(opt.file, {
          mode: opt.mode || 438
        });
        p.pipe(stream);
        addFilesSync(p, files);
      };
      var createFile = (opt, files, cb) => {
        const p = new Pack(opt);
        const stream = new fsm.WriteStream(opt.file, {
          mode: opt.mode || 438
        });
        p.pipe(stream);
        const promise = new Promise((res, rej) => {
          stream.on("error", rej);
          stream.on("close", res);
          p.on("error", rej);
        });
        addFilesAsync(p, files);
        return cb ? promise.then(cb, cb) : promise;
      };
      var addFilesSync = (p, files) => {
        files.forEach((file) => {
          if (file.charAt(0) === "@") {
            t({
              file: path2.resolve(p.cwd, file.slice(1)),
              sync: true,
              noResume: true,
              onentry: (entry) => p.add(entry)
            });
          } else {
            p.add(file);
          }
        });
        p.end();
      };
      var addFilesAsync = (p, files) => {
        while (files.length) {
          const file = files.shift();
          if (file.charAt(0) === "@") {
            return t({
              file: path2.resolve(p.cwd, file.slice(1)),
              noResume: true,
              onentry: (entry) => p.add(entry)
            }).then((_) => addFilesAsync(p, files));
          } else {
            p.add(file);
          }
        }
        p.end();
      };
      var createSync = (opt, files) => {
        const p = new Pack.Sync(opt);
        addFilesSync(p, files);
        return p;
      };
      var create = (opt, files) => {
        const p = new Pack(opt);
        addFilesAsync(p, files);
        return p;
      };
    }
  });
  var require_replace = __commonJS2({
    "../../node_modules/.pnpm/tar@6.2.1/node_modules/tar/lib/replace.js"(exports22, module22) {
      var hlo = require_high_level_opt();
      var Pack = require_pack();
      var fs = __require("fs");
      var fsm = require_fs_minipass();
      var t = require_list();
      var path2 = __require("path");
      var Header = require_header();
      module22.exports = (opt_, files, cb) => {
        const opt = hlo(opt_);
        if (!opt.file) {
          throw new TypeError("file is required");
        }
        if (opt.gzip || opt.brotli || opt.file.endsWith(".br") || opt.file.endsWith(".tbr")) {
          throw new TypeError("cannot append to compressed archives");
        }
        if (!files || !Array.isArray(files) || !files.length) {
          throw new TypeError("no files or directories specified");
        }
        files = Array.from(files);
        return opt.sync ? replaceSync(opt, files) : replace(opt, files, cb);
      };
      var replaceSync = (opt, files) => {
        const p = new Pack.Sync(opt);
        let threw = true;
        let fd;
        let position;
        try {
          try {
            fd = fs.openSync(opt.file, "r+");
          } catch (er) {
            if (er.code === "ENOENT") {
              fd = fs.openSync(opt.file, "w+");
            } else {
              throw er;
            }
          }
          const st = fs.fstatSync(fd);
          const headBuf = Buffer.alloc(512);
          POSITION:
            for (position = 0;position < st.size; position += 512) {
              for (let bufPos = 0, bytes = 0;bufPos < 512; bufPos += bytes) {
                bytes = fs.readSync(fd, headBuf, bufPos, headBuf.length - bufPos, position + bufPos);
                if (position === 0 && headBuf[0] === 31 && headBuf[1] === 139) {
                  throw new Error("cannot append to compressed archives");
                }
                if (!bytes) {
                  break POSITION;
                }
              }
              const h = new Header(headBuf);
              if (!h.cksumValid) {
                break;
              }
              const entryBlockSize = 512 * Math.ceil(h.size / 512);
              if (position + entryBlockSize + 512 > st.size) {
                break;
              }
              position += entryBlockSize;
              if (opt.mtimeCache) {
                opt.mtimeCache.set(h.path, h.mtime);
              }
            }
          threw = false;
          streamSync(opt, p, position, fd, files);
        } finally {
          if (threw) {
            try {
              fs.closeSync(fd);
            } catch (er) {
            }
          }
        }
      };
      var streamSync = (opt, p, position, fd, files) => {
        const stream = new fsm.WriteStreamSync(opt.file, {
          fd,
          start: position
        });
        p.pipe(stream);
        addFilesSync(p, files);
      };
      var replace = (opt, files, cb) => {
        files = Array.from(files);
        const p = new Pack(opt);
        const getPos = (fd, size, cb_) => {
          const cb2 = (er, pos) => {
            if (er) {
              fs.close(fd, (_) => cb_(er));
            } else {
              cb_(null, pos);
            }
          };
          let position = 0;
          if (size === 0) {
            return cb2(null, 0);
          }
          let bufPos = 0;
          const headBuf = Buffer.alloc(512);
          const onread = (er, bytes) => {
            if (er) {
              return cb2(er);
            }
            bufPos += bytes;
            if (bufPos < 512 && bytes) {
              return fs.read(fd, headBuf, bufPos, headBuf.length - bufPos, position + bufPos, onread);
            }
            if (position === 0 && headBuf[0] === 31 && headBuf[1] === 139) {
              return cb2(new Error("cannot append to compressed archives"));
            }
            if (bufPos < 512) {
              return cb2(null, position);
            }
            const h = new Header(headBuf);
            if (!h.cksumValid) {
              return cb2(null, position);
            }
            const entryBlockSize = 512 * Math.ceil(h.size / 512);
            if (position + entryBlockSize + 512 > size) {
              return cb2(null, position);
            }
            position += entryBlockSize + 512;
            if (position >= size) {
              return cb2(null, position);
            }
            if (opt.mtimeCache) {
              opt.mtimeCache.set(h.path, h.mtime);
            }
            bufPos = 0;
            fs.read(fd, headBuf, 0, 512, position, onread);
          };
          fs.read(fd, headBuf, 0, 512, position, onread);
        };
        const promise = new Promise((resolve, reject) => {
          p.on("error", reject);
          let flag = "r+";
          const onopen = (er, fd) => {
            if (er && er.code === "ENOENT" && flag === "r+") {
              flag = "w+";
              return fs.open(opt.file, flag, onopen);
            }
            if (er) {
              return reject(er);
            }
            fs.fstat(fd, (er2, st) => {
              if (er2) {
                return fs.close(fd, () => reject(er2));
              }
              getPos(fd, st.size, (er3, position) => {
                if (er3) {
                  return reject(er3);
                }
                const stream = new fsm.WriteStream(opt.file, {
                  fd,
                  start: position
                });
                p.pipe(stream);
                stream.on("error", reject);
                stream.on("close", resolve);
                addFilesAsync(p, files);
              });
            });
          };
          fs.open(opt.file, flag, onopen);
        });
        return cb ? promise.then(cb, cb) : promise;
      };
      var addFilesSync = (p, files) => {
        files.forEach((file) => {
          if (file.charAt(0) === "@") {
            t({
              file: path2.resolve(p.cwd, file.slice(1)),
              sync: true,
              noResume: true,
              onentry: (entry) => p.add(entry)
            });
          } else {
            p.add(file);
          }
        });
        p.end();
      };
      var addFilesAsync = (p, files) => {
        while (files.length) {
          const file = files.shift();
          if (file.charAt(0) === "@") {
            return t({
              file: path2.resolve(p.cwd, file.slice(1)),
              noResume: true,
              onentry: (entry) => p.add(entry)
            }).then((_) => addFilesAsync(p, files));
          } else {
            p.add(file);
          }
        }
        p.end();
      };
    }
  });
  var require_update = __commonJS2({
    "../../node_modules/.pnpm/tar@6.2.1/node_modules/tar/lib/update.js"(exports22, module22) {
      var hlo = require_high_level_opt();
      var r = require_replace();
      module22.exports = (opt_, files, cb) => {
        const opt = hlo(opt_);
        if (!opt.file) {
          throw new TypeError("file is required");
        }
        if (opt.gzip || opt.brotli || opt.file.endsWith(".br") || opt.file.endsWith(".tbr")) {
          throw new TypeError("cannot append to compressed archives");
        }
        if (!files || !Array.isArray(files) || !files.length) {
          throw new TypeError("no files or directories specified");
        }
        files = Array.from(files);
        mtimeFilter(opt);
        return r(opt, files, cb);
      };
      var mtimeFilter = (opt) => {
        const filter = opt.filter;
        if (!opt.mtimeCache) {
          opt.mtimeCache = /* @__PURE__ */ new Map;
        }
        opt.filter = filter ? (path2, stat) => filter(path2, stat) && !(opt.mtimeCache.get(path2) > stat.mtime) : (path2, stat) => !(opt.mtimeCache.get(path2) > stat.mtime);
      };
    }
  });
  var require_opts_arg = __commonJS2({
    "../../node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/opts-arg.js"(exports22, module22) {
      var { promisify } = __require("util");
      var fs = __require("fs");
      var optsArg = (opts) => {
        if (!opts)
          opts = { mode: 511, fs };
        else if (typeof opts === "object")
          opts = { mode: 511, fs, ...opts };
        else if (typeof opts === "number")
          opts = { mode: opts, fs };
        else if (typeof opts === "string")
          opts = { mode: parseInt(opts, 8), fs };
        else
          throw new TypeError("invalid options argument");
        opts.mkdir = opts.mkdir || opts.fs.mkdir || fs.mkdir;
        opts.mkdirAsync = promisify(opts.mkdir);
        opts.stat = opts.stat || opts.fs.stat || fs.stat;
        opts.statAsync = promisify(opts.stat);
        opts.statSync = opts.statSync || opts.fs.statSync || fs.statSync;
        opts.mkdirSync = opts.mkdirSync || opts.fs.mkdirSync || fs.mkdirSync;
        return opts;
      };
      module22.exports = optsArg;
    }
  });
  var require_path_arg = __commonJS2({
    "../../node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/path-arg.js"(exports22, module22) {
      var platform = process.env.__TESTING_MKDIRP_PLATFORM__ || process.platform;
      var { resolve, parse } = __require("path");
      var pathArg = (path2) => {
        if (/\0/.test(path2)) {
          throw Object.assign(new TypeError("path must be a string without null bytes"), {
            path: path2,
            code: "ERR_INVALID_ARG_VALUE"
          });
        }
        path2 = resolve(path2);
        if (platform === "win32") {
          const badWinChars = /[*|"<>?:]/;
          const { root } = parse(path2);
          if (badWinChars.test(path2.substr(root.length))) {
            throw Object.assign(new Error("Illegal characters in path."), {
              path: path2,
              code: "EINVAL"
            });
          }
        }
        return path2;
      };
      module22.exports = pathArg;
    }
  });
  var require_find_made = __commonJS2({
    "../../node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/find-made.js"(exports22, module22) {
      var { dirname } = __require("path");
      var findMade = (opts, parent, path2 = undefined) => {
        if (path2 === parent)
          return Promise.resolve();
        return opts.statAsync(parent).then((st) => st.isDirectory() ? path2 : undefined, (er) => er.code === "ENOENT" ? findMade(opts, dirname(parent), parent) : undefined);
      };
      var findMadeSync = (opts, parent, path2 = undefined) => {
        if (path2 === parent)
          return;
        try {
          return opts.statSync(parent).isDirectory() ? path2 : undefined;
        } catch (er) {
          return er.code === "ENOENT" ? findMadeSync(opts, dirname(parent), parent) : undefined;
        }
      };
      module22.exports = { findMade, findMadeSync };
    }
  });
  var require_mkdirp_manual = __commonJS2({
    "../../node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/mkdirp-manual.js"(exports22, module22) {
      var { dirname } = __require("path");
      var mkdirpManual = (path2, opts, made) => {
        opts.recursive = false;
        const parent = dirname(path2);
        if (parent === path2) {
          return opts.mkdirAsync(path2, opts).catch((er) => {
            if (er.code !== "EISDIR")
              throw er;
          });
        }
        return opts.mkdirAsync(path2, opts).then(() => made || path2, (er) => {
          if (er.code === "ENOENT")
            return mkdirpManual(parent, opts).then((made2) => mkdirpManual(path2, opts, made2));
          if (er.code !== "EEXIST" && er.code !== "EROFS")
            throw er;
          return opts.statAsync(path2).then((st) => {
            if (st.isDirectory())
              return made;
            else
              throw er;
          }, () => {
            throw er;
          });
        });
      };
      var mkdirpManualSync = (path2, opts, made) => {
        const parent = dirname(path2);
        opts.recursive = false;
        if (parent === path2) {
          try {
            return opts.mkdirSync(path2, opts);
          } catch (er) {
            if (er.code !== "EISDIR")
              throw er;
            else
              return;
          }
        }
        try {
          opts.mkdirSync(path2, opts);
          return made || path2;
        } catch (er) {
          if (er.code === "ENOENT")
            return mkdirpManualSync(path2, opts, mkdirpManualSync(parent, opts, made));
          if (er.code !== "EEXIST" && er.code !== "EROFS")
            throw er;
          try {
            if (!opts.statSync(path2).isDirectory())
              throw er;
          } catch (_) {
            throw er;
          }
        }
      };
      module22.exports = { mkdirpManual, mkdirpManualSync };
    }
  });
  var require_mkdirp_native = __commonJS2({
    "../../node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/mkdirp-native.js"(exports22, module22) {
      var { dirname } = __require("path");
      var { findMade, findMadeSync } = require_find_made();
      var { mkdirpManual, mkdirpManualSync } = require_mkdirp_manual();
      var mkdirpNative = (path2, opts) => {
        opts.recursive = true;
        const parent = dirname(path2);
        if (parent === path2)
          return opts.mkdirAsync(path2, opts);
        return findMade(opts, path2).then((made) => opts.mkdirAsync(path2, opts).then(() => made).catch((er) => {
          if (er.code === "ENOENT")
            return mkdirpManual(path2, opts);
          else
            throw er;
        }));
      };
      var mkdirpNativeSync = (path2, opts) => {
        opts.recursive = true;
        const parent = dirname(path2);
        if (parent === path2)
          return opts.mkdirSync(path2, opts);
        const made = findMadeSync(opts, path2);
        try {
          opts.mkdirSync(path2, opts);
          return made;
        } catch (er) {
          if (er.code === "ENOENT")
            return mkdirpManualSync(path2, opts);
          else
            throw er;
        }
      };
      module22.exports = { mkdirpNative, mkdirpNativeSync };
    }
  });
  var require_use_native = __commonJS2({
    "../../node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/use-native.js"(exports22, module22) {
      var fs = __require("fs");
      var version = process.env.__TESTING_MKDIRP_NODE_VERSION__ || process.version;
      var versArr = version.replace(/^v/, "").split(".");
      var hasNative = +versArr[0] > 10 || +versArr[0] === 10 && +versArr[1] >= 12;
      var useNative = !hasNative ? () => false : (opts) => opts.mkdir === fs.mkdir;
      var useNativeSync = !hasNative ? () => false : (opts) => opts.mkdirSync === fs.mkdirSync;
      module22.exports = { useNative, useNativeSync };
    }
  });
  var require_mkdirp = __commonJS2({
    "../../node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/index.js"(exports22, module22) {
      var optsArg = require_opts_arg();
      var pathArg = require_path_arg();
      var { mkdirpNative, mkdirpNativeSync } = require_mkdirp_native();
      var { mkdirpManual, mkdirpManualSync } = require_mkdirp_manual();
      var { useNative, useNativeSync } = require_use_native();
      var mkdirp = (path2, opts) => {
        path2 = pathArg(path2);
        opts = optsArg(opts);
        return useNative(opts) ? mkdirpNative(path2, opts) : mkdirpManual(path2, opts);
      };
      var mkdirpSync = (path2, opts) => {
        path2 = pathArg(path2);
        opts = optsArg(opts);
        return useNativeSync(opts) ? mkdirpNativeSync(path2, opts) : mkdirpManualSync(path2, opts);
      };
      mkdirp.sync = mkdirpSync;
      mkdirp.native = (path2, opts) => mkdirpNative(pathArg(path2), optsArg(opts));
      mkdirp.manual = (path2, opts) => mkdirpManual(pathArg(path2), optsArg(opts));
      mkdirp.nativeSync = (path2, opts) => mkdirpNativeSync(pathArg(path2), optsArg(opts));
      mkdirp.manualSync = (path2, opts) => mkdirpManualSync(pathArg(path2), optsArg(opts));
      module22.exports = mkdirp;
    }
  });
  var require_chownr = __commonJS2({
    "../../node_modules/.pnpm/chownr@2.0.0/node_modules/chownr/chownr.js"(exports22, module22) {
      var fs = __require("fs");
      var path2 = __require("path");
      var LCHOWN = fs.lchown ? "lchown" : "chown";
      var LCHOWNSYNC = fs.lchownSync ? "lchownSync" : "chownSync";
      var needEISDIRHandled = fs.lchown && !process.version.match(/v1[1-9]+\./) && !process.version.match(/v10\.[6-9]/);
      var lchownSync = (path3, uid, gid) => {
        try {
          return fs[LCHOWNSYNC](path3, uid, gid);
        } catch (er) {
          if (er.code !== "ENOENT")
            throw er;
        }
      };
      var chownSync = (path3, uid, gid) => {
        try {
          return fs.chownSync(path3, uid, gid);
        } catch (er) {
          if (er.code !== "ENOENT")
            throw er;
        }
      };
      var handleEISDIR = needEISDIRHandled ? (path3, uid, gid, cb) => (er) => {
        if (!er || er.code !== "EISDIR")
          cb(er);
        else
          fs.chown(path3, uid, gid, cb);
      } : (_, __, ___, cb) => cb;
      var handleEISDirSync = needEISDIRHandled ? (path3, uid, gid) => {
        try {
          return lchownSync(path3, uid, gid);
        } catch (er) {
          if (er.code !== "EISDIR")
            throw er;
          chownSync(path3, uid, gid);
        }
      } : (path3, uid, gid) => lchownSync(path3, uid, gid);
      var nodeVersion = process.version;
      var readdir = (path3, options, cb) => fs.readdir(path3, options, cb);
      var readdirSync = (path3, options) => fs.readdirSync(path3, options);
      if (/^v4\./.test(nodeVersion))
        readdir = (path3, options, cb) => fs.readdir(path3, cb);
      var chown = (cpath, uid, gid, cb) => {
        fs[LCHOWN](cpath, uid, gid, handleEISDIR(cpath, uid, gid, (er) => {
          cb(er && er.code !== "ENOENT" ? er : null);
        }));
      };
      var chownrKid = (p, child, uid, gid, cb) => {
        if (typeof child === "string")
          return fs.lstat(path2.resolve(p, child), (er, stats) => {
            if (er)
              return cb(er.code !== "ENOENT" ? er : null);
            stats.name = child;
            chownrKid(p, stats, uid, gid, cb);
          });
        if (child.isDirectory()) {
          chownr(path2.resolve(p, child.name), uid, gid, (er) => {
            if (er)
              return cb(er);
            const cpath = path2.resolve(p, child.name);
            chown(cpath, uid, gid, cb);
          });
        } else {
          const cpath = path2.resolve(p, child.name);
          chown(cpath, uid, gid, cb);
        }
      };
      var chownr = (p, uid, gid, cb) => {
        readdir(p, { withFileTypes: true }, (er, children) => {
          if (er) {
            if (er.code === "ENOENT")
              return cb();
            else if (er.code !== "ENOTDIR" && er.code !== "ENOTSUP")
              return cb(er);
          }
          if (er || !children.length)
            return chown(p, uid, gid, cb);
          let len = children.length;
          let errState = null;
          const then = (er2) => {
            if (errState)
              return;
            if (er2)
              return cb(errState = er2);
            if (--len === 0)
              return chown(p, uid, gid, cb);
          };
          children.forEach((child) => chownrKid(p, child, uid, gid, then));
        });
      };
      var chownrKidSync = (p, child, uid, gid) => {
        if (typeof child === "string") {
          try {
            const stats = fs.lstatSync(path2.resolve(p, child));
            stats.name = child;
            child = stats;
          } catch (er) {
            if (er.code === "ENOENT")
              return;
            else
              throw er;
          }
        }
        if (child.isDirectory())
          chownrSync(path2.resolve(p, child.name), uid, gid);
        handleEISDirSync(path2.resolve(p, child.name), uid, gid);
      };
      var chownrSync = (p, uid, gid) => {
        let children;
        try {
          children = readdirSync(p, { withFileTypes: true });
        } catch (er) {
          if (er.code === "ENOENT")
            return;
          else if (er.code === "ENOTDIR" || er.code === "ENOTSUP")
            return handleEISDirSync(p, uid, gid);
          else
            throw er;
        }
        if (children && children.length)
          children.forEach((child) => chownrKidSync(p, child, uid, gid));
        return handleEISDirSync(p, uid, gid);
      };
      module22.exports = chownr;
      chownr.sync = chownrSync;
    }
  });
  var require_mkdir = __commonJS2({
    "../../node_modules/.pnpm/tar@6.2.1/node_modules/tar/lib/mkdir.js"(exports22, module22) {
      var mkdirp = require_mkdirp();
      var fs = __require("fs");
      var path2 = __require("path");
      var chownr = require_chownr();
      var normPath = require_normalize_windows_path();
      var SymlinkError = class extends Error {
        constructor(symlink, path3) {
          super("Cannot extract through symbolic link");
          this.path = path3;
          this.symlink = symlink;
        }
        get name() {
          return "SylinkError";
        }
      };
      var CwdError = class extends Error {
        constructor(path3, code) {
          super(code + ": Cannot cd into '" + path3 + "'");
          this.path = path3;
          this.code = code;
        }
        get name() {
          return "CwdError";
        }
      };
      var cGet = (cache, key) => cache.get(normPath(key));
      var cSet = (cache, key, val) => cache.set(normPath(key), val);
      var checkCwd = (dir, cb) => {
        fs.stat(dir, (er, st) => {
          if (er || !st.isDirectory()) {
            er = new CwdError(dir, er && er.code || "ENOTDIR");
          }
          cb(er);
        });
      };
      module22.exports = (dir, opt, cb) => {
        dir = normPath(dir);
        const umask = opt.umask;
        const mode = opt.mode | 448;
        const needChmod = (mode & umask) !== 0;
        const uid = opt.uid;
        const gid = opt.gid;
        const doChown = typeof uid === "number" && typeof gid === "number" && (uid !== opt.processUid || gid !== opt.processGid);
        const preserve = opt.preserve;
        const unlink = opt.unlink;
        const cache = opt.cache;
        const cwd = normPath(opt.cwd);
        const done = (er, created) => {
          if (er) {
            cb(er);
          } else {
            cSet(cache, dir, true);
            if (created && doChown) {
              chownr(created, uid, gid, (er2) => done(er2));
            } else if (needChmod) {
              fs.chmod(dir, mode, cb);
            } else {
              cb();
            }
          }
        };
        if (cache && cGet(cache, dir) === true) {
          return done();
        }
        if (dir === cwd) {
          return checkCwd(dir, done);
        }
        if (preserve) {
          return mkdirp(dir, { mode }).then((made) => done(null, made), done);
        }
        const sub = normPath(path2.relative(cwd, dir));
        const parts = sub.split("/");
        mkdir_(cwd, parts, mode, cache, unlink, cwd, null, done);
      };
      var mkdir_ = (base, parts, mode, cache, unlink, cwd, created, cb) => {
        if (!parts.length) {
          return cb(null, created);
        }
        const p = parts.shift();
        const part = normPath(path2.resolve(base + "/" + p));
        if (cGet(cache, part)) {
          return mkdir_(part, parts, mode, cache, unlink, cwd, created, cb);
        }
        fs.mkdir(part, mode, onmkdir(part, parts, mode, cache, unlink, cwd, created, cb));
      };
      var onmkdir = (part, parts, mode, cache, unlink, cwd, created, cb) => (er) => {
        if (er) {
          fs.lstat(part, (statEr, st) => {
            if (statEr) {
              statEr.path = statEr.path && normPath(statEr.path);
              cb(statEr);
            } else if (st.isDirectory()) {
              mkdir_(part, parts, mode, cache, unlink, cwd, created, cb);
            } else if (unlink) {
              fs.unlink(part, (er2) => {
                if (er2) {
                  return cb(er2);
                }
                fs.mkdir(part, mode, onmkdir(part, parts, mode, cache, unlink, cwd, created, cb));
              });
            } else if (st.isSymbolicLink()) {
              return cb(new SymlinkError(part, part + "/" + parts.join("/")));
            } else {
              cb(er);
            }
          });
        } else {
          created = created || part;
          mkdir_(part, parts, mode, cache, unlink, cwd, created, cb);
        }
      };
      var checkCwdSync = (dir) => {
        let ok = false;
        let code = "ENOTDIR";
        try {
          ok = fs.statSync(dir).isDirectory();
        } catch (er) {
          code = er.code;
        } finally {
          if (!ok) {
            throw new CwdError(dir, code);
          }
        }
      };
      module22.exports.sync = (dir, opt) => {
        dir = normPath(dir);
        const umask = opt.umask;
        const mode = opt.mode | 448;
        const needChmod = (mode & umask) !== 0;
        const uid = opt.uid;
        const gid = opt.gid;
        const doChown = typeof uid === "number" && typeof gid === "number" && (uid !== opt.processUid || gid !== opt.processGid);
        const preserve = opt.preserve;
        const unlink = opt.unlink;
        const cache = opt.cache;
        const cwd = normPath(opt.cwd);
        const done = (created2) => {
          cSet(cache, dir, true);
          if (created2 && doChown) {
            chownr.sync(created2, uid, gid);
          }
          if (needChmod) {
            fs.chmodSync(dir, mode);
          }
        };
        if (cache && cGet(cache, dir) === true) {
          return done();
        }
        if (dir === cwd) {
          checkCwdSync(cwd);
          return done();
        }
        if (preserve) {
          return done(mkdirp.sync(dir, mode));
        }
        const sub = normPath(path2.relative(cwd, dir));
        const parts = sub.split("/");
        let created = null;
        for (let p = parts.shift(), part = cwd;p && (part += "/" + p); p = parts.shift()) {
          part = normPath(path2.resolve(part));
          if (cGet(cache, part)) {
            continue;
          }
          try {
            fs.mkdirSync(part, mode);
            created = created || part;
            cSet(cache, part, true);
          } catch (er) {
            const st = fs.lstatSync(part);
            if (st.isDirectory()) {
              cSet(cache, part, true);
              continue;
            } else if (unlink) {
              fs.unlinkSync(part);
              fs.mkdirSync(part, mode);
              created = created || part;
              cSet(cache, part, true);
              continue;
            } else if (st.isSymbolicLink()) {
              return new SymlinkError(part, part + "/" + parts.join("/"));
            }
          }
        }
        return done(created);
      };
    }
  });
  var require_normalize_unicode = __commonJS2({
    "../../node_modules/.pnpm/tar@6.2.1/node_modules/tar/lib/normalize-unicode.js"(exports22, module22) {
      var normalizeCache = /* @__PURE__ */ Object.create(null);
      var { hasOwnProperty: hasOwnProperty2 } = Object.prototype;
      module22.exports = (s) => {
        if (!hasOwnProperty2.call(normalizeCache, s)) {
          normalizeCache[s] = s.normalize("NFD");
        }
        return normalizeCache[s];
      };
    }
  });
  var require_path_reservations = __commonJS2({
    "../../node_modules/.pnpm/tar@6.2.1/node_modules/tar/lib/path-reservations.js"(exports22, module22) {
      var assert = __require("assert");
      var normalize = require_normalize_unicode();
      var stripSlashes = require_strip_trailing_slashes();
      var { join } = __require("path");
      var platform = process.env.TESTING_TAR_FAKE_PLATFORM || process.platform;
      var isWindows = platform === "win32";
      module22.exports = () => {
        const queues = /* @__PURE__ */ new Map;
        const reservations = /* @__PURE__ */ new Map;
        const getDirs = (path2) => {
          const dirs = path2.split("/").slice(0, -1).reduce((set, path3) => {
            if (set.length) {
              path3 = join(set[set.length - 1], path3);
            }
            set.push(path3 || "/");
            return set;
          }, []);
          return dirs;
        };
        const running = /* @__PURE__ */ new Set;
        const getQueues = (fn) => {
          const res = reservations.get(fn);
          if (!res) {
            throw new Error("function does not have any path reservations");
          }
          return {
            paths: res.paths.map((path2) => queues.get(path2)),
            dirs: [...res.dirs].map((path2) => queues.get(path2))
          };
        };
        const check = (fn) => {
          const { paths, dirs } = getQueues(fn);
          return paths.every((q) => q[0] === fn) && dirs.every((q) => q[0] instanceof Set && q[0].has(fn));
        };
        const run = (fn) => {
          if (running.has(fn) || !check(fn)) {
            return false;
          }
          running.add(fn);
          fn(() => clear(fn));
          return true;
        };
        const clear = (fn) => {
          if (!running.has(fn)) {
            return false;
          }
          const { paths, dirs } = reservations.get(fn);
          const next = /* @__PURE__ */ new Set;
          paths.forEach((path2) => {
            const q = queues.get(path2);
            assert.equal(q[0], fn);
            if (q.length === 1) {
              queues.delete(path2);
            } else {
              q.shift();
              if (typeof q[0] === "function") {
                next.add(q[0]);
              } else {
                q[0].forEach((fn2) => next.add(fn2));
              }
            }
          });
          dirs.forEach((dir) => {
            const q = queues.get(dir);
            assert(q[0] instanceof Set);
            if (q[0].size === 1 && q.length === 1) {
              queues.delete(dir);
            } else if (q[0].size === 1) {
              q.shift();
              next.add(q[0]);
            } else {
              q[0].delete(fn);
            }
          });
          running.delete(fn);
          next.forEach((fn2) => run(fn2));
          return true;
        };
        const reserve = (paths, fn) => {
          paths = isWindows ? ["win32 parallelization disabled"] : paths.map((p) => {
            return stripSlashes(join(normalize(p))).toLowerCase();
          });
          const dirs = new Set(paths.map((path2) => getDirs(path2)).reduce((a, b) => a.concat(b)));
          reservations.set(fn, { dirs, paths });
          paths.forEach((path2) => {
            const q = queues.get(path2);
            if (!q) {
              queues.set(path2, [fn]);
            } else {
              q.push(fn);
            }
          });
          dirs.forEach((dir) => {
            const q = queues.get(dir);
            if (!q) {
              queues.set(dir, [/* @__PURE__ */ new Set([fn])]);
            } else if (q[q.length - 1] instanceof Set) {
              q[q.length - 1].add(fn);
            } else {
              q.push(/* @__PURE__ */ new Set([fn]));
            }
          });
          return run(fn);
        };
        return { check, reserve };
      };
    }
  });
  var require_get_write_flag = __commonJS2({
    "../../node_modules/.pnpm/tar@6.2.1/node_modules/tar/lib/get-write-flag.js"(exports22, module22) {
      var platform = process.env.__FAKE_PLATFORM__ || process.platform;
      var isWindows = platform === "win32";
      var fs = global.__FAKE_TESTING_FS__ || __require("fs");
      var { O_CREAT, O_TRUNC, O_WRONLY, UV_FS_O_FILEMAP = 0 } = fs.constants;
      var fMapEnabled = isWindows && !!UV_FS_O_FILEMAP;
      var fMapLimit = 512 * 1024;
      var fMapFlag = UV_FS_O_FILEMAP | O_TRUNC | O_CREAT | O_WRONLY;
      module22.exports = !fMapEnabled ? () => "w" : (size) => size < fMapLimit ? fMapFlag : "w";
    }
  });
  var require_unpack = __commonJS2({
    "../../node_modules/.pnpm/tar@6.2.1/node_modules/tar/lib/unpack.js"(exports22, module22) {
      var assert = __require("assert");
      var Parser = require_parse5();
      var fs = __require("fs");
      var fsm = require_fs_minipass();
      var path2 = __require("path");
      var mkdir2 = require_mkdir();
      var wc = require_winchars();
      var pathReservations = require_path_reservations();
      var stripAbsolutePath = require_strip_absolute_path();
      var normPath = require_normalize_windows_path();
      var stripSlash = require_strip_trailing_slashes();
      var normalize = require_normalize_unicode();
      var ONENTRY = Symbol("onEntry");
      var CHECKFS = Symbol("checkFs");
      var CHECKFS2 = Symbol("checkFs2");
      var PRUNECACHE = Symbol("pruneCache");
      var ISREUSABLE = Symbol("isReusable");
      var MAKEFS = Symbol("makeFs");
      var FILE = Symbol("file");
      var DIRECTORY = Symbol("directory");
      var LINK = Symbol("link");
      var SYMLINK = Symbol("symlink");
      var HARDLINK = Symbol("hardlink");
      var UNSUPPORTED = Symbol("unsupported");
      var CHECKPATH = Symbol("checkPath");
      var MKDIR = Symbol("mkdir");
      var ONERROR = Symbol("onError");
      var PENDING = Symbol("pending");
      var PEND = Symbol("pend");
      var UNPEND = Symbol("unpend");
      var ENDED = Symbol("ended");
      var MAYBECLOSE = Symbol("maybeClose");
      var SKIP = Symbol("skip");
      var DOCHOWN = Symbol("doChown");
      var UID = Symbol("uid");
      var GID = Symbol("gid");
      var CHECKED_CWD = Symbol("checkedCwd");
      var crypto = __require("crypto");
      var getFlag = require_get_write_flag();
      var platform = process.env.TESTING_TAR_FAKE_PLATFORM || process.platform;
      var isWindows = platform === "win32";
      var DEFAULT_MAX_DEPTH = 1024;
      var unlinkFile = (path3, cb) => {
        if (!isWindows) {
          return fs.unlink(path3, cb);
        }
        const name = path3 + ".DELETE." + crypto.randomBytes(16).toString("hex");
        fs.rename(path3, name, (er) => {
          if (er) {
            return cb(er);
          }
          fs.unlink(name, cb);
        });
      };
      var unlinkFileSync = (path3) => {
        if (!isWindows) {
          return fs.unlinkSync(path3);
        }
        const name = path3 + ".DELETE." + crypto.randomBytes(16).toString("hex");
        fs.renameSync(path3, name);
        fs.unlinkSync(name);
      };
      var uint32 = (a, b, c) => a === a >>> 0 ? a : b === b >>> 0 ? b : c;
      var cacheKeyNormalize = (path3) => stripSlash(normPath(normalize(path3))).toLowerCase();
      var pruneCache = (cache, abs) => {
        abs = cacheKeyNormalize(abs);
        for (const path3 of cache.keys()) {
          const pnorm = cacheKeyNormalize(path3);
          if (pnorm === abs || pnorm.indexOf(abs + "/") === 0) {
            cache.delete(path3);
          }
        }
      };
      var dropCache = (cache) => {
        for (const key of cache.keys()) {
          cache.delete(key);
        }
      };
      var Unpack = class extends Parser {
        constructor(opt) {
          if (!opt) {
            opt = {};
          }
          opt.ondone = (_) => {
            this[ENDED] = true;
            this[MAYBECLOSE]();
          };
          super(opt);
          this[CHECKED_CWD] = false;
          this.reservations = pathReservations();
          this.transform = typeof opt.transform === "function" ? opt.transform : null;
          this.writable = true;
          this.readable = false;
          this[PENDING] = 0;
          this[ENDED] = false;
          this.dirCache = opt.dirCache || /* @__PURE__ */ new Map;
          if (typeof opt.uid === "number" || typeof opt.gid === "number") {
            if (typeof opt.uid !== "number" || typeof opt.gid !== "number") {
              throw new TypeError("cannot set owner without number uid and gid");
            }
            if (opt.preserveOwner) {
              throw new TypeError("cannot preserve owner in archive and also set owner explicitly");
            }
            this.uid = opt.uid;
            this.gid = opt.gid;
            this.setOwner = true;
          } else {
            this.uid = null;
            this.gid = null;
            this.setOwner = false;
          }
          if (opt.preserveOwner === undefined && typeof opt.uid !== "number") {
            this.preserveOwner = process.getuid && process.getuid() === 0;
          } else {
            this.preserveOwner = !!opt.preserveOwner;
          }
          this.processUid = (this.preserveOwner || this.setOwner) && process.getuid ? process.getuid() : null;
          this.processGid = (this.preserveOwner || this.setOwner) && process.getgid ? process.getgid() : null;
          this.maxDepth = typeof opt.maxDepth === "number" ? opt.maxDepth : DEFAULT_MAX_DEPTH;
          this.forceChown = opt.forceChown === true;
          this.win32 = !!opt.win32 || isWindows;
          this.newer = !!opt.newer;
          this.keep = !!opt.keep;
          this.noMtime = !!opt.noMtime;
          this.preservePaths = !!opt.preservePaths;
          this.unlink = !!opt.unlink;
          this.cwd = normPath(path2.resolve(opt.cwd || process.cwd()));
          this.strip = +opt.strip || 0;
          this.processUmask = opt.noChmod ? 0 : process.umask();
          this.umask = typeof opt.umask === "number" ? opt.umask : this.processUmask;
          this.dmode = opt.dmode || 511 & ~this.umask;
          this.fmode = opt.fmode || 438 & ~this.umask;
          this.on("entry", (entry) => this[ONENTRY](entry));
        }
        warn(code, msg, data = {}) {
          if (code === "TAR_BAD_ARCHIVE" || code === "TAR_ABORT") {
            data.recoverable = false;
          }
          return super.warn(code, msg, data);
        }
        [MAYBECLOSE]() {
          if (this[ENDED] && this[PENDING] === 0) {
            this.emit("prefinish");
            this.emit("finish");
            this.emit("end");
          }
        }
        [CHECKPATH](entry) {
          const p = normPath(entry.path);
          const parts = p.split("/");
          if (this.strip) {
            if (parts.length < this.strip) {
              return false;
            }
            if (entry.type === "Link") {
              const linkparts = normPath(entry.linkpath).split("/");
              if (linkparts.length >= this.strip) {
                entry.linkpath = linkparts.slice(this.strip).join("/");
              } else {
                return false;
              }
            }
            parts.splice(0, this.strip);
            entry.path = parts.join("/");
          }
          if (isFinite(this.maxDepth) && parts.length > this.maxDepth) {
            this.warn("TAR_ENTRY_ERROR", "path excessively deep", {
              entry,
              path: p,
              depth: parts.length,
              maxDepth: this.maxDepth
            });
            return false;
          }
          if (!this.preservePaths) {
            if (parts.includes("..") || isWindows && /^[a-z]:\.\.$/i.test(parts[0])) {
              this.warn("TAR_ENTRY_ERROR", `path contains '..'`, {
                entry,
                path: p
              });
              return false;
            }
            const [root, stripped] = stripAbsolutePath(p);
            if (root) {
              entry.path = stripped;
              this.warn("TAR_ENTRY_INFO", `stripping ${root} from absolute path`, {
                entry,
                path: p
              });
            }
          }
          if (path2.isAbsolute(entry.path)) {
            entry.absolute = normPath(path2.resolve(entry.path));
          } else {
            entry.absolute = normPath(path2.resolve(this.cwd, entry.path));
          }
          if (!this.preservePaths && entry.absolute.indexOf(this.cwd + "/") !== 0 && entry.absolute !== this.cwd) {
            this.warn("TAR_ENTRY_ERROR", "path escaped extraction target", {
              entry,
              path: normPath(entry.path),
              resolvedPath: entry.absolute,
              cwd: this.cwd
            });
            return false;
          }
          if (entry.absolute === this.cwd && entry.type !== "Directory" && entry.type !== "GNUDumpDir") {
            return false;
          }
          if (this.win32) {
            const { root: aRoot } = path2.win32.parse(entry.absolute);
            entry.absolute = aRoot + wc.encode(entry.absolute.slice(aRoot.length));
            const { root: pRoot } = path2.win32.parse(entry.path);
            entry.path = pRoot + wc.encode(entry.path.slice(pRoot.length));
          }
          return true;
        }
        [ONENTRY](entry) {
          if (!this[CHECKPATH](entry)) {
            return entry.resume();
          }
          assert.equal(typeof entry.absolute, "string");
          switch (entry.type) {
            case "Directory":
            case "GNUDumpDir":
              if (entry.mode) {
                entry.mode = entry.mode | 448;
              }
            case "File":
            case "OldFile":
            case "ContiguousFile":
            case "Link":
            case "SymbolicLink":
              return this[CHECKFS](entry);
            case "CharacterDevice":
            case "BlockDevice":
            case "FIFO":
            default:
              return this[UNSUPPORTED](entry);
          }
        }
        [ONERROR](er, entry) {
          if (er.name === "CwdError") {
            this.emit("error", er);
          } else {
            this.warn("TAR_ENTRY_ERROR", er, { entry });
            this[UNPEND]();
            entry.resume();
          }
        }
        [MKDIR](dir, mode, cb) {
          mkdir2(normPath(dir), {
            uid: this.uid,
            gid: this.gid,
            processUid: this.processUid,
            processGid: this.processGid,
            umask: this.processUmask,
            preserve: this.preservePaths,
            unlink: this.unlink,
            cache: this.dirCache,
            cwd: this.cwd,
            mode,
            noChmod: this.noChmod
          }, cb);
        }
        [DOCHOWN](entry) {
          return this.forceChown || this.preserveOwner && (typeof entry.uid === "number" && entry.uid !== this.processUid || typeof entry.gid === "number" && entry.gid !== this.processGid) || (typeof this.uid === "number" && this.uid !== this.processUid || typeof this.gid === "number" && this.gid !== this.processGid);
        }
        [UID](entry) {
          return uint32(this.uid, entry.uid, this.processUid);
        }
        [GID](entry) {
          return uint32(this.gid, entry.gid, this.processGid);
        }
        [FILE](entry, fullyDone) {
          const mode = entry.mode & 4095 || this.fmode;
          const stream = new fsm.WriteStream(entry.absolute, {
            flags: getFlag(entry.size),
            mode,
            autoClose: false
          });
          stream.on("error", (er) => {
            if (stream.fd) {
              fs.close(stream.fd, () => {
              });
            }
            stream.write = () => true;
            this[ONERROR](er, entry);
            fullyDone();
          });
          let actions = 1;
          const done = (er) => {
            if (er) {
              if (stream.fd) {
                fs.close(stream.fd, () => {
                });
              }
              this[ONERROR](er, entry);
              fullyDone();
              return;
            }
            if (--actions === 0) {
              fs.close(stream.fd, (er2) => {
                if (er2) {
                  this[ONERROR](er2, entry);
                } else {
                  this[UNPEND]();
                }
                fullyDone();
              });
            }
          };
          stream.on("finish", (_) => {
            const abs = entry.absolute;
            const fd = stream.fd;
            if (entry.mtime && !this.noMtime) {
              actions++;
              const atime = entry.atime || /* @__PURE__ */ new Date;
              const mtime = entry.mtime;
              fs.futimes(fd, atime, mtime, (er) => er ? fs.utimes(abs, atime, mtime, (er2) => done(er2 && er)) : done());
            }
            if (this[DOCHOWN](entry)) {
              actions++;
              const uid = this[UID](entry);
              const gid = this[GID](entry);
              fs.fchown(fd, uid, gid, (er) => er ? fs.chown(abs, uid, gid, (er2) => done(er2 && er)) : done());
            }
            done();
          });
          const tx = this.transform ? this.transform(entry) || entry : entry;
          if (tx !== entry) {
            tx.on("error", (er) => {
              this[ONERROR](er, entry);
              fullyDone();
            });
            entry.pipe(tx);
          }
          tx.pipe(stream);
        }
        [DIRECTORY](entry, fullyDone) {
          const mode = entry.mode & 4095 || this.dmode;
          this[MKDIR](entry.absolute, mode, (er) => {
            if (er) {
              this[ONERROR](er, entry);
              fullyDone();
              return;
            }
            let actions = 1;
            const done = (_) => {
              if (--actions === 0) {
                fullyDone();
                this[UNPEND]();
                entry.resume();
              }
            };
            if (entry.mtime && !this.noMtime) {
              actions++;
              fs.utimes(entry.absolute, entry.atime || /* @__PURE__ */ new Date, entry.mtime, done);
            }
            if (this[DOCHOWN](entry)) {
              actions++;
              fs.chown(entry.absolute, this[UID](entry), this[GID](entry), done);
            }
            done();
          });
        }
        [UNSUPPORTED](entry) {
          entry.unsupported = true;
          this.warn("TAR_ENTRY_UNSUPPORTED", `unsupported entry type: ${entry.type}`, { entry });
          entry.resume();
        }
        [SYMLINK](entry, done) {
          this[LINK](entry, entry.linkpath, "symlink", done);
        }
        [HARDLINK](entry, done) {
          const linkpath = normPath(path2.resolve(this.cwd, entry.linkpath));
          this[LINK](entry, linkpath, "link", done);
        }
        [PEND]() {
          this[PENDING]++;
        }
        [UNPEND]() {
          this[PENDING]--;
          this[MAYBECLOSE]();
        }
        [SKIP](entry) {
          this[UNPEND]();
          entry.resume();
        }
        [ISREUSABLE](entry, st) {
          return entry.type === "File" && !this.unlink && st.isFile() && st.nlink <= 1 && !isWindows;
        }
        [CHECKFS](entry) {
          this[PEND]();
          const paths = [entry.path];
          if (entry.linkpath) {
            paths.push(entry.linkpath);
          }
          this.reservations.reserve(paths, (done) => this[CHECKFS2](entry, done));
        }
        [PRUNECACHE](entry) {
          if (entry.type === "SymbolicLink") {
            dropCache(this.dirCache);
          } else if (entry.type !== "Directory") {
            pruneCache(this.dirCache, entry.absolute);
          }
        }
        [CHECKFS2](entry, fullyDone) {
          this[PRUNECACHE](entry);
          const done = (er) => {
            this[PRUNECACHE](entry);
            fullyDone(er);
          };
          const checkCwd = () => {
            this[MKDIR](this.cwd, this.dmode, (er) => {
              if (er) {
                this[ONERROR](er, entry);
                done();
                return;
              }
              this[CHECKED_CWD] = true;
              start();
            });
          };
          const start = () => {
            if (entry.absolute !== this.cwd) {
              const parent = normPath(path2.dirname(entry.absolute));
              if (parent !== this.cwd) {
                return this[MKDIR](parent, this.dmode, (er) => {
                  if (er) {
                    this[ONERROR](er, entry);
                    done();
                    return;
                  }
                  afterMakeParent();
                });
              }
            }
            afterMakeParent();
          };
          const afterMakeParent = () => {
            fs.lstat(entry.absolute, (lstatEr, st) => {
              if (st && (this.keep || this.newer && st.mtime > entry.mtime)) {
                this[SKIP](entry);
                done();
                return;
              }
              if (lstatEr || this[ISREUSABLE](entry, st)) {
                return this[MAKEFS](null, entry, done);
              }
              if (st.isDirectory()) {
                if (entry.type === "Directory") {
                  const needChmod = !this.noChmod && entry.mode && (st.mode & 4095) !== entry.mode;
                  const afterChmod = (er) => this[MAKEFS](er, entry, done);
                  if (!needChmod) {
                    return afterChmod();
                  }
                  return fs.chmod(entry.absolute, entry.mode, afterChmod);
                }
                if (entry.absolute !== this.cwd) {
                  return fs.rmdir(entry.absolute, (er) => this[MAKEFS](er, entry, done));
                }
              }
              if (entry.absolute === this.cwd) {
                return this[MAKEFS](null, entry, done);
              }
              unlinkFile(entry.absolute, (er) => this[MAKEFS](er, entry, done));
            });
          };
          if (this[CHECKED_CWD]) {
            start();
          } else {
            checkCwd();
          }
        }
        [MAKEFS](er, entry, done) {
          if (er) {
            this[ONERROR](er, entry);
            done();
            return;
          }
          switch (entry.type) {
            case "File":
            case "OldFile":
            case "ContiguousFile":
              return this[FILE](entry, done);
            case "Link":
              return this[HARDLINK](entry, done);
            case "SymbolicLink":
              return this[SYMLINK](entry, done);
            case "Directory":
            case "GNUDumpDir":
              return this[DIRECTORY](entry, done);
          }
        }
        [LINK](entry, linkpath, link, done) {
          fs[link](linkpath, entry.absolute, (er) => {
            if (er) {
              this[ONERROR](er, entry);
            } else {
              this[UNPEND]();
              entry.resume();
            }
            done();
          });
        }
      };
      var callSync = (fn) => {
        try {
          return [null, fn()];
        } catch (er) {
          return [er, null];
        }
      };
      var UnpackSync = class extends Unpack {
        [MAKEFS](er, entry) {
          return super[MAKEFS](er, entry, () => {
          });
        }
        [CHECKFS](entry) {
          this[PRUNECACHE](entry);
          if (!this[CHECKED_CWD]) {
            const er2 = this[MKDIR](this.cwd, this.dmode);
            if (er2) {
              return this[ONERROR](er2, entry);
            }
            this[CHECKED_CWD] = true;
          }
          if (entry.absolute !== this.cwd) {
            const parent = normPath(path2.dirname(entry.absolute));
            if (parent !== this.cwd) {
              const mkParent = this[MKDIR](parent, this.dmode);
              if (mkParent) {
                return this[ONERROR](mkParent, entry);
              }
            }
          }
          const [lstatEr, st] = callSync(() => fs.lstatSync(entry.absolute));
          if (st && (this.keep || this.newer && st.mtime > entry.mtime)) {
            return this[SKIP](entry);
          }
          if (lstatEr || this[ISREUSABLE](entry, st)) {
            return this[MAKEFS](null, entry);
          }
          if (st.isDirectory()) {
            if (entry.type === "Directory") {
              const needChmod = !this.noChmod && entry.mode && (st.mode & 4095) !== entry.mode;
              const [er3] = needChmod ? callSync(() => {
                fs.chmodSync(entry.absolute, entry.mode);
              }) : [];
              return this[MAKEFS](er3, entry);
            }
            const [er2] = callSync(() => fs.rmdirSync(entry.absolute));
            this[MAKEFS](er2, entry);
          }
          const [er] = entry.absolute === this.cwd ? [] : callSync(() => unlinkFileSync(entry.absolute));
          this[MAKEFS](er, entry);
        }
        [FILE](entry, done) {
          const mode = entry.mode & 4095 || this.fmode;
          const oner = (er) => {
            let closeError;
            try {
              fs.closeSync(fd);
            } catch (e) {
              closeError = e;
            }
            if (er || closeError) {
              this[ONERROR](er || closeError, entry);
            }
            done();
          };
          let fd;
          try {
            fd = fs.openSync(entry.absolute, getFlag(entry.size), mode);
          } catch (er) {
            return oner(er);
          }
          const tx = this.transform ? this.transform(entry) || entry : entry;
          if (tx !== entry) {
            tx.on("error", (er) => this[ONERROR](er, entry));
            entry.pipe(tx);
          }
          tx.on("data", (chunk) => {
            try {
              fs.writeSync(fd, chunk, 0, chunk.length);
            } catch (er) {
              oner(er);
            }
          });
          tx.on("end", (_) => {
            let er = null;
            if (entry.mtime && !this.noMtime) {
              const atime = entry.atime || /* @__PURE__ */ new Date;
              const mtime = entry.mtime;
              try {
                fs.futimesSync(fd, atime, mtime);
              } catch (futimeser) {
                try {
                  fs.utimesSync(entry.absolute, atime, mtime);
                } catch (utimeser) {
                  er = futimeser;
                }
              }
            }
            if (this[DOCHOWN](entry)) {
              const uid = this[UID](entry);
              const gid = this[GID](entry);
              try {
                fs.fchownSync(fd, uid, gid);
              } catch (fchowner) {
                try {
                  fs.chownSync(entry.absolute, uid, gid);
                } catch (chowner) {
                  er = er || fchowner;
                }
              }
            }
            oner(er);
          });
        }
        [DIRECTORY](entry, done) {
          const mode = entry.mode & 4095 || this.dmode;
          const er = this[MKDIR](entry.absolute, mode);
          if (er) {
            this[ONERROR](er, entry);
            done();
            return;
          }
          if (entry.mtime && !this.noMtime) {
            try {
              fs.utimesSync(entry.absolute, entry.atime || /* @__PURE__ */ new Date, entry.mtime);
            } catch (er2) {
            }
          }
          if (this[DOCHOWN](entry)) {
            try {
              fs.chownSync(entry.absolute, this[UID](entry), this[GID](entry));
            } catch (er2) {
            }
          }
          done();
          entry.resume();
        }
        [MKDIR](dir, mode) {
          try {
            return mkdir2.sync(normPath(dir), {
              uid: this.uid,
              gid: this.gid,
              processUid: this.processUid,
              processGid: this.processGid,
              umask: this.processUmask,
              preserve: this.preservePaths,
              unlink: this.unlink,
              cache: this.dirCache,
              cwd: this.cwd,
              mode
            });
          } catch (er) {
            return er;
          }
        }
        [LINK](entry, linkpath, link, done) {
          try {
            fs[link + "Sync"](linkpath, entry.absolute);
            done();
            entry.resume();
          } catch (er) {
            return this[ONERROR](er, entry);
          }
        }
      };
      Unpack.Sync = UnpackSync;
      module22.exports = Unpack;
    }
  });
  var require_extract = __commonJS2({
    "../../node_modules/.pnpm/tar@6.2.1/node_modules/tar/lib/extract.js"(exports22, module22) {
      var hlo = require_high_level_opt();
      var Unpack = require_unpack();
      var fs = __require("fs");
      var fsm = require_fs_minipass();
      var path2 = __require("path");
      var stripSlash = require_strip_trailing_slashes();
      module22.exports = (opt_, files, cb) => {
        if (typeof opt_ === "function") {
          cb = opt_, files = null, opt_ = {};
        } else if (Array.isArray(opt_)) {
          files = opt_, opt_ = {};
        }
        if (typeof files === "function") {
          cb = files, files = null;
        }
        if (!files) {
          files = [];
        } else {
          files = Array.from(files);
        }
        const opt = hlo(opt_);
        if (opt.sync && typeof cb === "function") {
          throw new TypeError("callback not supported for sync tar functions");
        }
        if (!opt.file && typeof cb === "function") {
          throw new TypeError("callback only supported with file option");
        }
        if (files.length) {
          filesFilter(opt, files);
        }
        return opt.file && opt.sync ? extractFileSync(opt) : opt.file ? extractFile(opt, cb) : opt.sync ? extractSync(opt) : extract(opt);
      };
      var filesFilter = (opt, files) => {
        const map = new Map(files.map((f) => [stripSlash(f), true]));
        const filter = opt.filter;
        const mapHas = (file, r) => {
          const root = r || path2.parse(file).root || ".";
          const ret = file === root ? false : map.has(file) ? map.get(file) : mapHas(path2.dirname(file), root);
          map.set(file, ret);
          return ret;
        };
        opt.filter = filter ? (file, entry) => filter(file, entry) && mapHas(stripSlash(file)) : (file) => mapHas(stripSlash(file));
      };
      var extractFileSync = (opt) => {
        const u = new Unpack.Sync(opt);
        const file = opt.file;
        const stat = fs.statSync(file);
        const readSize = opt.maxReadSize || 16 * 1024 * 1024;
        const stream = new fsm.ReadStreamSync(file, {
          readSize,
          size: stat.size
        });
        stream.pipe(u);
      };
      var extractFile = (opt, cb) => {
        const u = new Unpack(opt);
        const readSize = opt.maxReadSize || 16 * 1024 * 1024;
        const file = opt.file;
        const p = new Promise((resolve, reject) => {
          u.on("error", reject);
          u.on("close", resolve);
          fs.stat(file, (er, stat) => {
            if (er) {
              reject(er);
            } else {
              const stream = new fsm.ReadStream(file, {
                readSize,
                size: stat.size
              });
              stream.on("error", reject);
              stream.pipe(u);
            }
          });
        });
        return cb ? p.then(cb, cb) : p;
      };
      var extractSync = (opt) => new Unpack.Sync(opt);
      var extract = (opt) => new Unpack(opt);
    }
  });
  var require_tar = __commonJS2({
    "../../node_modules/.pnpm/tar@6.2.1/node_modules/tar/index.js"(exports22) {
      exports22.c = exports22.create = require_create2();
      exports22.r = exports22.replace = require_replace();
      exports22.t = exports22.list = require_list();
      exports22.u = exports22.update = require_update();
      exports22.x = exports22.extract = require_extract();
      exports22.Pack = require_pack();
      exports22.Unpack = require_unpack();
      exports22.Parse = require_parse5();
      exports22.ReadEntry = require_read_entry();
      exports22.WriteEntry = require_write_entry();
      exports22.Header = require_header();
      exports22.Pax = require_pax();
      exports22.types = require_types4();
    }
  });
  var require_TaskPool = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/TaskPool.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.WorkerPool = exports22.AsyncPool = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var p_limit_12 = tslib_12.__importDefault(require_p_limit());
      var worker_threads_1 = __require("worker_threads");
      var kTaskInfo = Symbol(`kTaskInfo`);
      var AsyncPool = class {
        constructor(fn, opts) {
          this.fn = fn;
          this.limit = (0, p_limit_12.default)(opts.poolSize);
        }
        run(data) {
          return this.limit(() => this.fn(data));
        }
      };
      exports22.AsyncPool = AsyncPool;
      var WorkerPool = class {
        constructor(source, opts) {
          this.source = source;
          this.workers = [];
          this.limit = (0, p_limit_12.default)(opts.poolSize);
          this.cleanupInterval = setInterval(() => {
            if (this.limit.pendingCount === 0 && this.limit.activeCount === 0) {
              const worker = this.workers.pop();
              if (worker) {
                worker.terminate();
              } else {
                clearInterval(this.cleanupInterval);
              }
            }
          }, 5000).unref();
        }
        createWorker() {
          this.cleanupInterval.refresh();
          const worker = new worker_threads_1.Worker(this.source, {
            eval: true,
            execArgv: [...process.execArgv, `--unhandled-rejections=strict`]
          });
          worker.on(`message`, (result2) => {
            if (!worker[kTaskInfo])
              throw new Error(`Assertion failed: Worker sent a result without having a task assigned`);
            worker[kTaskInfo].resolve(result2);
            worker[kTaskInfo] = null;
            worker.unref();
            this.workers.push(worker);
          });
          worker.on(`error`, (err) => {
            worker[kTaskInfo]?.reject(err);
            worker[kTaskInfo] = null;
          });
          worker.on(`exit`, (code) => {
            if (code !== 0)
              worker[kTaskInfo]?.reject(new Error(`Worker exited with code ${code}`));
            worker[kTaskInfo] = null;
          });
          return worker;
        }
        run(data) {
          return this.limit(() => {
            const worker = this.workers.pop() ?? this.createWorker();
            worker.ref();
            return new Promise((resolve, reject) => {
              worker[kTaskInfo] = { resolve, reject };
              worker.postMessage(data);
            });
          });
        }
      };
      exports22.WorkerPool = WorkerPool;
    }
  });
  var require_worker_zip = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/worker-zip/index.js"(exports22, module22) {
      var hook;
      module22.exports.getContent = () => {
        if (typeof hook === `undefined`)
          hook = __require("zlib").brotliDecompressSync(Buffer.from("", "base64")).toString();
        return hook;
      };
    }
  });
  var require_tgzUtils = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/tgzUtils.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.getDefaultTaskPool = getDefaultTaskPool;
      exports22.getTaskPoolForConfiguration = getTaskPoolForConfiguration;
      exports22.convertToZipWorker = convertToZipWorker;
      exports22.makeArchiveFromDirectory = makeArchiveFromDirectory;
      exports22.convertToZip = convertToZip;
      exports22.extractArchiveTo = extractArchiveTo;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var core_1 = require_lib6();
      var fslib_12 = require_lib();
      var libzip_1 = require_sync7();
      var stream_12 = __require("stream");
      var tar_1 = tslib_12.__importDefault(require_tar());
      var TaskPool_1 = require_TaskPool();
      var miscUtils = tslib_12.__importStar(require_miscUtils());
      var worker_zip_1 = require_worker_zip();
      function createTaskPool(poolMode, poolSize) {
        switch (poolMode) {
          case `async`:
            return new TaskPool_1.AsyncPool(convertToZipWorker, { poolSize });
          case `workers`:
            return new TaskPool_1.WorkerPool((0, worker_zip_1.getContent)(), { poolSize });
          default: {
            throw new Error(`Assertion failed: Unknown value ${poolMode} for taskPoolMode`);
          }
        }
      }
      var defaultWorkerPool;
      function getDefaultTaskPool() {
        if (typeof defaultWorkerPool === `undefined`)
          defaultWorkerPool = createTaskPool(`workers`, core_1.nodeUtils.availableParallelism());
        return defaultWorkerPool;
      }
      var workerPools = /* @__PURE__ */ new WeakMap;
      function getTaskPoolForConfiguration(configuration) {
        if (typeof configuration === `undefined`)
          return getDefaultTaskPool();
        return miscUtils.getFactoryWithDefault(workerPools, configuration, () => {
          const poolMode = configuration.get(`taskPoolMode`);
          const poolSize = configuration.get(`taskPoolConcurrency`);
          switch (poolMode) {
            case `async`:
              return new TaskPool_1.AsyncPool(convertToZipWorker, { poolSize });
            case `workers`:
              return new TaskPool_1.WorkerPool((0, worker_zip_1.getContent)(), { poolSize });
            default: {
              throw new Error(`Assertion failed: Unknown value ${poolMode} for taskPoolMode`);
            }
          }
        });
      }
      async function convertToZipWorker(data) {
        const { tmpFile, tgz, compressionLevel, extractBufferOpts } = data;
        const zipFs = new libzip_1.ZipFS(tmpFile, { create: true, level: compressionLevel, stats: fslib_12.statUtils.makeDefaultStats() });
        const tgzBuffer = Buffer.from(tgz.buffer, tgz.byteOffset, tgz.byteLength);
        await extractArchiveTo(tgzBuffer, zipFs, extractBufferOpts);
        zipFs.saveAndClose();
        return tmpFile;
      }
      async function makeArchiveFromDirectory(source, { baseFs = new fslib_12.NodeFS, prefixPath = fslib_12.PortablePath.root, compressionLevel, inMemory = false } = {}) {
        let zipFs;
        if (inMemory) {
          zipFs = new libzip_1.ZipFS(null, { level: compressionLevel });
        } else {
          const tmpFolder = await fslib_12.xfs.mktempPromise();
          const tmpFile = fslib_12.ppath.join(tmpFolder, `archive.zip`);
          zipFs = new libzip_1.ZipFS(tmpFile, { create: true, level: compressionLevel });
        }
        const target = fslib_12.ppath.resolve(fslib_12.PortablePath.root, prefixPath);
        await zipFs.copyPromise(target, source, { baseFs, stableTime: true, stableSort: true });
        return zipFs;
      }
      async function convertToZip(tgz, opts = {}) {
        const tmpFolder = await fslib_12.xfs.mktempPromise();
        const tmpFile = fslib_12.ppath.join(tmpFolder, `archive.zip`);
        const compressionLevel = opts.compressionLevel ?? opts.configuration?.get(`compressionLevel`) ?? `mixed`;
        const extractBufferOpts = {
          prefixPath: opts.prefixPath,
          stripComponents: opts.stripComponents
        };
        const taskPool = opts.taskPool ?? getTaskPoolForConfiguration(opts.configuration);
        await taskPool.run({ tmpFile, tgz, compressionLevel, extractBufferOpts });
        return new libzip_1.ZipFS(tmpFile, { level: opts.compressionLevel });
      }
      async function* parseTar(tgz) {
        const parser = new tar_1.default.Parse;
        const passthrough = new stream_12.PassThrough({ objectMode: true, autoDestroy: true, emitClose: true });
        parser.on(`entry`, (entry) => {
          passthrough.write(entry);
        });
        parser.on(`error`, (error) => {
          passthrough.destroy(error);
        });
        parser.on(`close`, () => {
          if (!passthrough.destroyed) {
            passthrough.end();
          }
        });
        parser.end(tgz);
        for await (const entry of passthrough) {
          const it = entry;
          yield it;
          it.resume();
        }
      }
      async function extractArchiveTo(tgz, targetFs, { stripComponents = 0, prefixPath = fslib_12.PortablePath.dot } = {}) {
        function ignore(entry) {
          if (entry.path[0] === `/`)
            return true;
          const parts = entry.path.split(/\//g);
          if (parts.some((part) => part === `..`))
            return true;
          if (parts.length <= stripComponents)
            return true;
          return false;
        }
        for await (const entry of parseTar(tgz)) {
          if (ignore(entry))
            continue;
          const parts = fslib_12.ppath.normalize(fslib_12.npath.toPortablePath(entry.path)).replace(/\/$/, ``).split(/\//g);
          if (parts.length <= stripComponents)
            continue;
          const slicePath = parts.slice(stripComponents).join(`/`);
          const mappedPath = fslib_12.ppath.join(prefixPath, slicePath);
          let mode = 420;
          if (entry.type === `Directory` || ((entry.mode ?? 0) & 73) !== 0)
            mode |= 73;
          switch (entry.type) {
            case `Directory`:
              {
                targetFs.mkdirpSync(fslib_12.ppath.dirname(mappedPath), { chmod: 493, utimes: [fslib_12.constants.SAFE_TIME, fslib_12.constants.SAFE_TIME] });
                targetFs.mkdirSync(mappedPath, { mode });
                targetFs.utimesSync(mappedPath, fslib_12.constants.SAFE_TIME, fslib_12.constants.SAFE_TIME);
              }
              break;
            case `OldFile`:
            case `File`:
              {
                targetFs.mkdirpSync(fslib_12.ppath.dirname(mappedPath), { chmod: 493, utimes: [fslib_12.constants.SAFE_TIME, fslib_12.constants.SAFE_TIME] });
                targetFs.writeFileSync(mappedPath, await miscUtils.bufferStream(entry), { mode });
                targetFs.utimesSync(mappedPath, fslib_12.constants.SAFE_TIME, fslib_12.constants.SAFE_TIME);
              }
              break;
            case `SymbolicLink`:
              {
                targetFs.mkdirpSync(fslib_12.ppath.dirname(mappedPath), { chmod: 493, utimes: [fslib_12.constants.SAFE_TIME, fslib_12.constants.SAFE_TIME] });
                targetFs.symlinkSync(entry.linkpath, mappedPath);
                targetFs.lutimesSync(mappedPath, fslib_12.constants.SAFE_TIME, fslib_12.constants.SAFE_TIME);
              }
              break;
          }
        }
        return targetFs;
      }
    }
  });
  var require_treeify = __commonJS2({
    "../../node_modules/.pnpm/treeify@1.1.0/node_modules/treeify/treeify.js"(exports22, module22) {
      (function(root, factory) {
        if (typeof exports22 === "object") {
          module22.exports = factory();
        } else if (typeof define === "function" && define.amd) {
          define(factory);
        } else {
          root.treeify = factory();
        }
      })(exports22, function() {
        function makePrefix(key, last) {
          var str = last ? "\u2514" : "\u251C";
          if (key) {
            str += "\u2500 ";
          } else {
            str += "\u2500\u2500\u2510";
          }
          return str;
        }
        function filterKeys(obj, hideFunctions) {
          var keys = [];
          for (var branch in obj) {
            if (!obj.hasOwnProperty(branch)) {
              continue;
            }
            if (hideFunctions && typeof obj[branch] === "function") {
              continue;
            }
            keys.push(branch);
          }
          return keys;
        }
        function growBranch(key, root, last, lastStates, showValues, hideFunctions, callback) {
          var line = "", index = 0, lastKey, circular, lastStatesCopy = lastStates.slice(0);
          if (lastStatesCopy.push([root, last]) && lastStates.length > 0) {
            lastStates.forEach(function(lastState, idx) {
              if (idx > 0) {
                line += (lastState[1] ? " " : "\u2502") + "  ";
              }
              if (!circular && lastState[0] === root) {
                circular = true;
              }
            });
            line += makePrefix(key, last) + key;
            showValues && (typeof root !== "object" || root instanceof Date) && (line += ": " + root);
            circular && (line += " (circular ref.)");
            callback(line);
          }
          if (!circular && typeof root === "object") {
            var keys = filterKeys(root, hideFunctions);
            keys.forEach(function(branch) {
              lastKey = ++index === keys.length;
              growBranch(branch, root[branch], lastKey, lastStatesCopy, showValues, hideFunctions, callback);
            });
          }
        }
        var Treeify = {};
        Treeify.asLines = function(obj, showValues, hideFunctions, lineCallback) {
          var hideFunctionsArg = typeof hideFunctions !== "function" ? hideFunctions : false;
          growBranch(".", obj, false, [], showValues, hideFunctionsArg, lineCallback || hideFunctions);
        };
        Treeify.asTree = function(obj, showValues, hideFunctions) {
          var tree = "";
          growBranch(".", obj, false, [], showValues, hideFunctions, function(line) {
            tree += line + `
`;
          });
          return tree;
        };
        return Treeify;
      });
    }
  });
  var require_treeUtils = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/treeUtils.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.treeNodeToTreeify = treeNodeToTreeify;
      exports22.treeNodeToJson = treeNodeToJson;
      exports22.emitList = emitList;
      exports22.emitTree = emitTree;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var treeify_1 = require_treeify();
      var formatUtils = tslib_12.__importStar(require_formatUtils());
      function treeNodeToTreeify(printTree, { configuration }) {
        const target = {};
        let n = 0;
        const copyTree = (printNode, targetNode) => {
          const iterator = Array.isArray(printNode) ? printNode.entries() : Object.entries(printNode);
          for (const [key, child] of iterator) {
            if (!child)
              continue;
            const { label, value, children } = child;
            const finalParts = [];
            if (typeof label !== `undefined`)
              finalParts.push(formatUtils.applyStyle(configuration, label, formatUtils.Style.BOLD));
            if (typeof value !== `undefined`)
              finalParts.push(formatUtils.pretty(configuration, value[0], value[1]));
            if (finalParts.length === 0)
              finalParts.push(formatUtils.applyStyle(configuration, `${key}`, formatUtils.Style.BOLD));
            const finalLabel = finalParts.join(`: `).trim();
            const uniquePrefix = `\x00${n++}\x00`;
            const createdNode = targetNode[`${uniquePrefix}${finalLabel}`] = {};
            if (typeof children !== `undefined`) {
              copyTree(children, createdNode);
            }
          }
        };
        if (typeof printTree.children === `undefined`)
          throw new Error(`The root node must only contain children`);
        copyTree(printTree.children, target);
        return target;
      }
      function treeNodeToJson(printTree) {
        const copyTree = (printNode) => {
          if (typeof printNode.children === `undefined`) {
            if (typeof printNode.value === `undefined`)
              throw new Error(`Assertion failed: Expected a value to be set if the children are missing`);
            return formatUtils.json(printNode.value[0], printNode.value[1]);
          }
          const iterator = Array.isArray(printNode.children) ? printNode.children.entries() : Object.entries(printNode.children ?? {});
          const targetChildren = Array.isArray(printNode.children) ? [] : {};
          for (const [key, child] of iterator)
            if (child)
              targetChildren[cleanKey(key)] = copyTree(child);
          if (typeof printNode.value === `undefined`)
            return targetChildren;
          return {
            value: formatUtils.json(printNode.value[0], printNode.value[1]),
            children: targetChildren
          };
        };
        return copyTree(printTree);
      }
      function emitList(values, { configuration, stdout, json }) {
        const children = values.map((value) => ({ value }));
        emitTree({ children }, { configuration, stdout, json });
      }
      function emitTree(tree, { configuration, stdout, json, separators = 0 }) {
        if (json) {
          const iterator = Array.isArray(tree.children) ? tree.children.values() : Object.values(tree.children ?? {});
          for (const child of iterator)
            if (child)
              stdout.write(`${JSON.stringify(treeNodeToJson(child))}
`);
          return;
        }
        let treeOutput = (0, treeify_1.asTree)(treeNodeToTreeify(tree, { configuration }), false, false);
        treeOutput = treeOutput.replace(/\0[0-9]+\0/g, ``);
        if (separators >= 1)
          treeOutput = treeOutput.replace(/^([\u251C\u2514]\u2500)/gm, `\u2502
$1`).replace(/^\u2502\n/, ``);
        if (separators >= 2)
          for (let t = 0;t < 2; ++t)
            treeOutput = treeOutput.replace(/^([\u2502 ].{2}[\u251C\u2502 ].{2}[^\n]+\n)(([\u2502 ]).{2}[\u251C\u2514].{2}[^\n]*\n[\u2502 ].{2}[\u2502 ].{2}[\u251C\u2514]\u2500)/gm, `$1$3  \u2502 
$2`).replace(/^\u2502\n/, ``);
        if (separators >= 3)
          throw new Error(`Only the first two levels are accepted by treeUtils.emitTree`);
        stdout.write(treeOutput);
      }
      function cleanKey(key) {
        return typeof key === `string` ? key.replace(/^\0[0-9]+\0/, ``) : key;
      }
    }
  });
  var require_Cache = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/Cache.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.Cache = exports22.CACHE_VERSION = exports22.CACHE_CHECKPOINT = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var core_1 = require_lib6();
      var fslib_12 = require_lib();
      var fslib_2 = require_lib();
      var libzip_1 = require_sync7();
      var crypto_1 = __require("crypto");
      var fs_1 = tslib_12.__importDefault(__require("fs"));
      var MessageName_1 = require_MessageName();
      var Report_1 = require_Report();
      var hashUtils = tslib_12.__importStar(require_hashUtils());
      var miscUtils = tslib_12.__importStar(require_miscUtils());
      var structUtils = tslib_12.__importStar(require_structUtils());
      exports22.CACHE_CHECKPOINT = miscUtils.parseInt(process.env.YARN_CACHE_CHECKPOINT_OVERRIDE ?? process.env.YARN_CACHE_VERSION_OVERRIDE ?? 9);
      exports22.CACHE_VERSION = miscUtils.parseInt(process.env.YARN_CACHE_VERSION_OVERRIDE ?? 10);
      var Cache2 = class _Cache {
        static async find(configuration, { immutable, check } = {}) {
          const cache = new _Cache(configuration.get(`cacheFolder`), { configuration, immutable, check });
          await cache.setup();
          return cache;
        }
        static getCacheKey(configuration) {
          const compressionLevel = configuration.get(`compressionLevel`);
          const cacheSpec = compressionLevel !== `mixed` ? `c${compressionLevel}` : ``;
          const cacheKey = [
            exports22.CACHE_VERSION,
            cacheSpec
          ].join(``);
          return {
            cacheKey,
            cacheSpec
          };
        }
        constructor(cacheCwd, { configuration, immutable = configuration.get(`enableImmutableCache`), check = false }) {
          this.markedFiles = /* @__PURE__ */ new Set;
          this.mutexes = /* @__PURE__ */ new Map;
          this.cacheId = `-${(0, crypto_1.randomBytes)(8).toString(`hex`)}.tmp`;
          this.configuration = configuration;
          this.cwd = cacheCwd;
          this.immutable = immutable;
          this.check = check;
          const { cacheSpec, cacheKey } = _Cache.getCacheKey(configuration);
          this.cacheSpec = cacheSpec;
          this.cacheKey = cacheKey;
        }
        get mirrorCwd() {
          if (!this.configuration.get(`enableMirror`))
            return null;
          const mirrorCwd = `${this.configuration.get(`globalFolder`)}/cache`;
          return mirrorCwd !== this.cwd ? mirrorCwd : null;
        }
        getVersionFilename(locator) {
          return `${structUtils.slugifyLocator(locator)}-${this.cacheKey}.zip`;
        }
        getChecksumFilename(locator, checksum) {
          const contentChecksum = splitChecksumComponents(checksum).hash;
          const significantChecksum = contentChecksum.slice(0, 10);
          return `${structUtils.slugifyLocator(locator)}-${significantChecksum}.zip`;
        }
        isChecksumCompatible(checksum) {
          if (checksum === null)
            return false;
          const { cacheVersion, cacheSpec } = splitChecksumComponents(checksum);
          if (cacheVersion === null)
            return false;
          if (cacheVersion < exports22.CACHE_CHECKPOINT)
            return false;
          const migrationMode = this.configuration.get(`cacheMigrationMode`);
          if (cacheVersion < exports22.CACHE_VERSION && migrationMode === `always`)
            return false;
          if (cacheSpec !== this.cacheSpec && migrationMode !== `required-only`)
            return false;
          return true;
        }
        getLocatorPath(locator, expectedChecksum) {
          if (this.mirrorCwd === null)
            return fslib_2.ppath.resolve(this.cwd, this.getVersionFilename(locator));
          if (expectedChecksum === null)
            return fslib_2.ppath.resolve(this.cwd, this.getVersionFilename(locator));
          return fslib_2.ppath.resolve(this.cwd, this.getChecksumFilename(locator, expectedChecksum));
        }
        getLocatorMirrorPath(locator) {
          const mirrorCwd = this.mirrorCwd;
          return mirrorCwd !== null ? fslib_2.ppath.resolve(mirrorCwd, this.getVersionFilename(locator)) : null;
        }
        async setup() {
          if (!this.configuration.get(`enableGlobalCache`)) {
            if (this.immutable) {
              if (!await fslib_2.xfs.existsPromise(this.cwd)) {
                throw new Report_1.ReportError(MessageName_1.MessageName.IMMUTABLE_CACHE, `Cache path does not exist.`);
              }
            } else {
              await fslib_2.xfs.mkdirPromise(this.cwd, { recursive: true });
              const gitignorePath = fslib_2.ppath.resolve(this.cwd, `.gitignore`);
              await fslib_2.xfs.changeFilePromise(gitignorePath, `/.gitignore
*.flock
*.tmp
`);
            }
          }
          if (this.mirrorCwd || !this.immutable) {
            await fslib_2.xfs.mkdirPromise(this.mirrorCwd || this.cwd, { recursive: true });
          }
        }
        async fetchPackageFromCache(locator, expectedChecksum, { onHit, onMiss, loader, ...opts }) {
          const mirrorPath = this.getLocatorMirrorPath(locator);
          const baseFs = new fslib_12.NodeFS;
          const makeMockPackage = () => {
            const zipFs2 = new libzip_1.ZipFS;
            const rootPackageDir = fslib_2.ppath.join(fslib_12.PortablePath.root, structUtils.getIdentVendorPath(locator));
            zipFs2.mkdirSync(rootPackageDir, { recursive: true });
            zipFs2.writeJsonSync(fslib_2.ppath.join(rootPackageDir, fslib_12.Filename.manifest), {
              name: structUtils.stringifyIdent(locator),
              mocked: true
            });
            return zipFs2;
          };
          const validateFile = async (path2, { isColdHit, controlPath = null }) => {
            if (controlPath === null && opts.unstablePackages?.has(locator.locatorHash))
              return { isValid: true, hash: null };
            const actualCacheKey = expectedChecksum && !isColdHit ? splitChecksumComponents(expectedChecksum).cacheKey : this.cacheKey;
            const actualChecksum = !opts.skipIntegrityCheck || !expectedChecksum ? `${actualCacheKey}/${await hashUtils.checksumFile(path2)}` : expectedChecksum;
            if (controlPath !== null) {
              const previousChecksum = !opts.skipIntegrityCheck || !expectedChecksum ? `${this.cacheKey}/${await hashUtils.checksumFile(controlPath)}` : expectedChecksum;
              if (actualChecksum !== previousChecksum) {
                throw new Report_1.ReportError(MessageName_1.MessageName.CACHE_CHECKSUM_MISMATCH, `The remote archive doesn't match the local checksum - has the local cache been corrupted?`);
              }
            }
            let checksumBehavior = null;
            if (expectedChecksum !== null && actualChecksum !== expectedChecksum) {
              if (this.check) {
                checksumBehavior = `throw`;
              } else if (splitChecksumComponents(expectedChecksum).cacheKey !== splitChecksumComponents(actualChecksum).cacheKey) {
                checksumBehavior = `update`;
              } else {
                checksumBehavior = this.configuration.get(`checksumBehavior`);
              }
            }
            switch (checksumBehavior) {
              case null:
              case `update`:
                return { isValid: true, hash: actualChecksum };
              case `ignore`:
                return { isValid: true, hash: expectedChecksum };
              case `reset`:
                return { isValid: false, hash: expectedChecksum };
              default:
              case `throw`: {
                throw new Report_1.ReportError(MessageName_1.MessageName.CACHE_CHECKSUM_MISMATCH, `The remote archive doesn't match the expected checksum`);
              }
            }
          };
          const validateFileAgainstRemote = async (cachePath2) => {
            if (!loader)
              throw new Error(`Cache check required but no loader configured for ${structUtils.prettyLocator(this.configuration, locator)}`);
            const zipFs2 = await loader();
            const controlPath = zipFs2.getRealPath();
            zipFs2.saveAndClose();
            await fslib_2.xfs.chmodPromise(controlPath, 420);
            const result2 = await validateFile(cachePath2, {
              controlPath,
              isColdHit: false
            });
            if (!result2.isValid)
              throw new Error(`Assertion failed: Expected a valid checksum`);
            return result2.hash;
          };
          const loadPackageThroughMirror = async () => {
            if (mirrorPath === null || !await fslib_2.xfs.existsPromise(mirrorPath)) {
              const zipFs2 = await loader();
              const realPath = zipFs2.getRealPath();
              zipFs2.saveAndClose();
              return { source: `loader`, path: realPath };
            }
            return { source: `mirror`, path: mirrorPath };
          };
          const loadPackage = async () => {
            if (!loader)
              throw new Error(`Cache entry required but missing for ${structUtils.prettyLocator(this.configuration, locator)}`);
            if (this.immutable)
              throw new Report_1.ReportError(MessageName_1.MessageName.IMMUTABLE_CACHE, `Cache entry required but missing for ${structUtils.prettyLocator(this.configuration, locator)}`);
            const { path: packagePath, source: packageSource } = await loadPackageThroughMirror();
            const { hash: checksum2 } = await validateFile(packagePath, {
              isColdHit: true
            });
            const cachePath2 = this.getLocatorPath(locator, checksum2);
            const copyProcess = [];
            if (packageSource !== `mirror` && mirrorPath !== null) {
              copyProcess.push(async () => {
                const mirrorPathTemp = `${mirrorPath}${this.cacheId}`;
                await fslib_2.xfs.copyFilePromise(packagePath, mirrorPathTemp, fs_1.default.constants.COPYFILE_FICLONE);
                await fslib_2.xfs.chmodPromise(mirrorPathTemp, 420);
                await fslib_2.xfs.renamePromise(mirrorPathTemp, mirrorPath);
              });
            }
            if (!opts.mirrorWriteOnly || mirrorPath === null) {
              copyProcess.push(async () => {
                const cachePathTemp = `${cachePath2}${this.cacheId}`;
                await fslib_2.xfs.copyFilePromise(packagePath, cachePathTemp, fs_1.default.constants.COPYFILE_FICLONE);
                await fslib_2.xfs.chmodPromise(cachePathTemp, 420);
                await fslib_2.xfs.renamePromise(cachePathTemp, cachePath2);
              });
            }
            const finalPath = opts.mirrorWriteOnly ? mirrorPath ?? cachePath2 : cachePath2;
            await Promise.all(copyProcess.map((copy) => copy()));
            return [false, finalPath, checksum2];
          };
          const loadPackageThroughMutex = async () => {
            const mutexedLoad = async () => {
              const isUnstablePackage = opts.unstablePackages?.has(locator.locatorHash);
              const tentativeCachePath = isUnstablePackage || !expectedChecksum || this.isChecksumCompatible(expectedChecksum) ? this.getLocatorPath(locator, expectedChecksum) : null;
              const cacheFileExists = tentativeCachePath !== null ? this.markedFiles.has(tentativeCachePath) || await baseFs.existsPromise(tentativeCachePath) : false;
              const shouldMock2 = !!opts.mockedPackages?.has(locator.locatorHash) && (!this.check || !cacheFileExists);
              const isCacheHit = shouldMock2 || cacheFileExists;
              const action = isCacheHit ? onHit : onMiss;
              if (action)
                action();
              if (!isCacheHit) {
                if (this.immutable && isUnstablePackage)
                  throw new Report_1.ReportError(MessageName_1.MessageName.IMMUTABLE_CACHE, `Cache entry required but missing for ${structUtils.prettyLocator(this.configuration, locator)}; consider defining ${core_1.formatUtils.pretty(this.configuration, `supportedArchitectures`, core_1.formatUtils.Type.CODE)} to cache packages for multiple systems`);
                return loadPackage();
              } else {
                let checksum2 = null;
                const cachePath2 = tentativeCachePath;
                if (!shouldMock2) {
                  if (this.check) {
                    checksum2 = await validateFileAgainstRemote(cachePath2);
                  } else {
                    const maybeChecksum = await validateFile(cachePath2, {
                      isColdHit: false
                    });
                    if (maybeChecksum.isValid) {
                      checksum2 = maybeChecksum.hash;
                    } else {
                      return loadPackage();
                    }
                  }
                }
                return [shouldMock2, cachePath2, checksum2];
              }
            };
            const mutex = mutexedLoad();
            this.mutexes.set(locator.locatorHash, mutex);
            try {
              return await mutex;
            } finally {
              this.mutexes.delete(locator.locatorHash);
            }
          };
          for (let mutex;mutex = this.mutexes.get(locator.locatorHash); )
            await mutex;
          const [shouldMock, cachePath, checksum] = await loadPackageThroughMutex();
          if (!shouldMock)
            this.markedFiles.add(cachePath);
          let zipFs;
          const zipFsBuilder = shouldMock ? () => makeMockPackage() : () => new libzip_1.ZipFS(cachePath, { baseFs, readOnly: true });
          const lazyFs = new fslib_12.LazyFS(() => miscUtils.prettifySyncErrors(() => {
            return zipFs = zipFsBuilder();
          }, (message) => {
            return `Failed to open the cache entry for ${structUtils.prettyLocator(this.configuration, locator)}: ${message}`;
          }), fslib_2.ppath);
          const aliasFs = new fslib_12.AliasFS(cachePath, { baseFs: lazyFs, pathUtils: fslib_2.ppath });
          const releaseFs = () => {
            zipFs?.discardAndClose();
          };
          const exposedChecksum = !opts.unstablePackages?.has(locator.locatorHash) ? checksum : null;
          return [aliasFs, releaseFs, exposedChecksum];
        }
      };
      exports22.Cache = Cache2;
      var CHECKSUM_REGEX = /^(?:(?<cacheKey>(?<cacheVersion>[0-9]+)(?<cacheSpec>.*))\/)?(?<hash>.*)$/;
      function splitChecksumComponents(checksum) {
        const match = checksum.match(CHECKSUM_REGEX);
        if (!match?.groups)
          throw new Error(`Assertion failed: Expected the checksum to match the requested pattern`);
        const cacheVersion = match.groups.cacheVersion ? parseInt(match.groups.cacheVersion) : null;
        return {
          cacheKey: match.groups.cacheKey ?? null,
          cacheVersion,
          cacheSpec: match.groups.cacheSpec ?? null,
          hash: match.groups.hash
        };
      }
    }
  });
  var require_Installer = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/Installer.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.BuildDirectiveType = undefined;
      var BuildDirectiveType;
      (function(BuildDirectiveType2) {
        BuildDirectiveType2[BuildDirectiveType2["SCRIPT"] = 0] = "SCRIPT";
        BuildDirectiveType2[BuildDirectiveType2["SHELLCODE"] = 1] = "SHELLCODE";
      })(BuildDirectiveType || (exports22.BuildDirectiveType = BuildDirectiveType = {}));
    }
  });
  var require_LegacyMigrationResolver = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/LegacyMigrationResolver.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.LegacyMigrationResolver = exports22.IMPORTED_PATTERNS = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var fslib_12 = require_lib();
      var parsers_1 = require_lib2();
      var MessageName_1 = require_MessageName();
      var semverUtils = tslib_12.__importStar(require_semverUtils());
      var structUtils = tslib_12.__importStar(require_structUtils());
      exports22.IMPORTED_PATTERNS = [
        [/^(git(?:\+(?:https|ssh))?:\/\/.*(?:\.git)?)#(.*)$/, (version, $0, $1, $2) => `${$1}#commit=${$2}`],
        [/^https:\/\/((?:[^/]+?)@)?codeload\.github\.com\/([^/]+\/[^/]+)\/tar\.gz\/([0-9a-f]+)$/, (version, $0, $1 = ``, $2, $3) => `https://${$1}github.com/${$2}.git#commit=${$3}`],
        [/^https:\/\/((?:[^/]+?)@)?github\.com\/([^/]+\/[^/]+?)(?:\.git)?#([0-9a-f]+)$/, (version, $0, $1 = ``, $2, $3) => `https://${$1}github.com/${$2}.git#commit=${$3}`],
        [/^https?:\/\/[^/]+\/(?:[^/]+\/)*(?:@.+(?:\/|(?:%2f)))?([^/]+)\/(?:-|download)\/\1-[^/]+\.tgz(?:#|$)/, (version) => `npm:${version}`],
        [/^https:\/\/npm\.pkg\.github\.com\/download\/(?:@[^/]+)\/(?:[^/]+)\/(?:[^/]+)\/(?:[0-9a-f]+)(?:#|$)/, (version) => `npm:${version}`],
        [/^https:\/\/npm\.fontawesome\.com\/(?:@[^/]+)\/([^/]+)\/-\/([^/]+)\/\1-\2.tgz(?:#|$)/, (version) => `npm:${version}`],
        [/^https?:\/\/[^/]+\/.*\/(@[^/]+)\/([^/]+)\/-\/\1\/\2-(?:[.\d\w-]+)\.tgz(?:#|$)/, (version, $0) => structUtils.makeRange({ protocol: `npm:`, source: null, selector: version, params: { __archiveUrl: $0 } })],
        [/^[^/]+\.tgz#[0-9a-f]+$/, (version) => `npm:${version}`]
      ];
      var LegacyMigrationResolver = class {
        constructor(resolver) {
          this.resolver = resolver;
          this.resolutions = null;
        }
        async setup(project, { report }) {
          const lockfilePath = fslib_12.ppath.join(project.cwd, fslib_12.Filename.lockfile);
          if (!fslib_12.xfs.existsSync(lockfilePath))
            return;
          const content = await fslib_12.xfs.readFilePromise(lockfilePath, `utf8`);
          const parsed = (0, parsers_1.parseSyml)(content);
          if (Object.hasOwn(parsed, `__metadata`))
            return;
          const resolutions = this.resolutions = /* @__PURE__ */ new Map;
          for (const key of Object.keys(parsed)) {
            const parsedDescriptor = structUtils.tryParseDescriptor(key);
            if (!parsedDescriptor) {
              report.reportWarning(MessageName_1.MessageName.YARN_IMPORT_FAILED, `Failed to parse the string "${key}" into a proper descriptor`);
              continue;
            }
            const descriptor = semverUtils.validRange(parsedDescriptor.range) ? structUtils.makeDescriptor(parsedDescriptor, `npm:${parsedDescriptor.range}`) : parsedDescriptor;
            const { version, resolved } = parsed[key];
            if (!resolved)
              continue;
            let reference;
            for (const [pattern, matcher] of exports22.IMPORTED_PATTERNS) {
              const match = resolved.match(pattern);
              if (match) {
                reference = matcher(version, ...match);
                break;
              }
            }
            if (!reference) {
              report.reportWarning(MessageName_1.MessageName.YARN_IMPORT_FAILED, `${structUtils.prettyDescriptor(project.configuration, descriptor)}: Only some patterns can be imported from legacy lockfiles (not "${resolved}")`);
              continue;
            }
            let actualDescriptor = descriptor;
            try {
              const parsedRange = structUtils.parseRange(descriptor.range);
              const potentialDescriptor = structUtils.tryParseDescriptor(parsedRange.selector, true);
              if (potentialDescriptor) {
                actualDescriptor = potentialDescriptor;
              }
            } catch {
            }
            resolutions.set(descriptor.descriptorHash, structUtils.makeLocator(actualDescriptor, reference));
          }
        }
        supportsDescriptor(descriptor, opts) {
          if (!this.resolutions)
            return false;
          return this.resolutions.has(descriptor.descriptorHash);
        }
        supportsLocator(locator, opts) {
          return false;
        }
        shouldPersistResolution(locator, opts) {
          throw new Error(`Assertion failed: This resolver doesn't support resolving locators to packages`);
        }
        bindDescriptor(descriptor, fromLocator, opts) {
          return descriptor;
        }
        getResolutionDependencies(descriptor, opts) {
          return {};
        }
        async getCandidates(descriptor, dependencies, opts) {
          if (!this.resolutions)
            throw new Error(`Assertion failed: The resolution store should have been setup`);
          const resolution = this.resolutions.get(descriptor.descriptorHash);
          if (!resolution)
            throw new Error(`Assertion failed: The resolution should have been registered`);
          const importedDescriptor = structUtils.convertLocatorToDescriptor(resolution);
          const normalizedDescriptor = opts.project.configuration.normalizeDependency(importedDescriptor);
          return await this.resolver.getCandidates(normalizedDescriptor, dependencies, opts);
        }
        async getSatisfying(descriptor, dependencies, locators, opts) {
          const [locator] = await this.getCandidates(descriptor, dependencies, opts);
          return {
            locators: locators.filter((candidate) => candidate.locatorHash === locator.locatorHash),
            sorted: false
          };
        }
        async resolve(locator, opts) {
          throw new Error(`Assertion failed: This resolver doesn't support resolving locators to packages`);
        }
      };
      exports22.LegacyMigrationResolver = LegacyMigrationResolver;
    }
  });
  var require_LightReport = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/LightReport.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.LightReport = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var Report_1 = require_Report();
      var StreamReport_1 = require_StreamReport();
      var formatUtils = tslib_12.__importStar(require_formatUtils());
      var LightReport2 = class extends Report_1.Report {
        static async start(opts, cb) {
          const report = new this(opts);
          try {
            await cb(report);
          } catch (error) {
            report.reportExceptionOnce(error);
          } finally {
            await report.finalize();
          }
          return report;
        }
        constructor({ configuration, stdout, suggestInstall = true }) {
          super();
          this.errorCount = 0;
          formatUtils.addLogFilterSupport(this, { configuration });
          this.configuration = configuration;
          this.stdout = stdout;
          this.suggestInstall = suggestInstall;
        }
        hasErrors() {
          return this.errorCount > 0;
        }
        exitCode() {
          return this.hasErrors() ? 1 : 0;
        }
        reportCacheHit(locator) {
        }
        reportCacheMiss(locator) {
        }
        startSectionSync(opts, cb) {
          return cb();
        }
        async startSectionPromise(opts, cb) {
          return await cb();
        }
        startTimerSync(what, opts, cb) {
          const realCb = typeof opts === `function` ? opts : cb;
          return realCb();
        }
        async startTimerPromise(what, opts, cb) {
          const realCb = typeof opts === `function` ? opts : cb;
          return await realCb();
        }
        reportSeparator() {
        }
        reportInfo(name, text) {
        }
        reportWarning(name, text) {
        }
        reportError(name, text) {
          this.errorCount += 1;
          this.stdout.write(`${formatUtils.pretty(this.configuration, `\u27A4`, `redBright`)} ${this.formatNameWithHyperlink(name)}: ${text}
`);
        }
        reportProgress(progress) {
          const promise = Promise.resolve().then(async () => {
            for await (const {} of progress) {
            }
          });
          const stop = () => {
          };
          return { ...promise, stop };
        }
        reportJson(data) {
        }
        reportFold(title, text) {
        }
        async finalize() {
          if (this.errorCount > 0) {
            this.stdout.write(`
`);
            this.stdout.write(`${formatUtils.pretty(this.configuration, `\u27A4`, `redBright`)} Errors happened when preparing the environment required to run this command.
`);
            if (this.suggestInstall) {
              this.stdout.write(`${formatUtils.pretty(this.configuration, `\u27A4`, `redBright`)} This might be caused by packages being missing from the lockfile, in which case running "yarn install" might help.
`);
            }
          }
        }
        formatNameWithHyperlink(name) {
          return (0, StreamReport_1.formatNameWithHyperlink)(name, {
            configuration: this.configuration,
            json: false
          });
        }
      };
      exports22.LightReport = LightReport2;
    }
  });
  var require_LockfileResolver = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/LockfileResolver.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.LockfileResolver = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var structUtils = tslib_12.__importStar(require_structUtils());
      var LockfileResolver = class {
        constructor(resolver) {
          this.resolver = resolver;
        }
        supportsDescriptor(descriptor, opts) {
          const resolution = opts.project.storedResolutions.get(descriptor.descriptorHash);
          if (resolution)
            return true;
          if (opts.project.originalPackages.has(structUtils.convertDescriptorToLocator(descriptor).locatorHash))
            return true;
          return false;
        }
        supportsLocator(locator, opts) {
          if (opts.project.originalPackages.has(locator.locatorHash) && !opts.project.lockfileNeedsRefresh)
            return true;
          return false;
        }
        shouldPersistResolution(locator, opts) {
          throw new Error(`The shouldPersistResolution method shouldn't be called on the lockfile resolver, which would always answer yes`);
        }
        bindDescriptor(descriptor, fromLocator, opts) {
          return descriptor;
        }
        getResolutionDependencies(descriptor, opts) {
          return this.resolver.getResolutionDependencies(descriptor, opts);
        }
        async getCandidates(descriptor, dependencies, opts) {
          const resolution = opts.project.storedResolutions.get(descriptor.descriptorHash);
          if (resolution) {
            const resolvedPkg = opts.project.originalPackages.get(resolution);
            if (resolvedPkg) {
              return [resolvedPkg];
            }
          }
          const originalPkg = opts.project.originalPackages.get(structUtils.convertDescriptorToLocator(descriptor).locatorHash);
          if (originalPkg)
            return [originalPkg];
          throw new Error(`Resolution expected from the lockfile data`);
        }
        async getSatisfying(descriptor, dependencies, locators, opts) {
          const [locator] = await this.getCandidates(descriptor, dependencies, opts);
          return {
            locators: locators.filter((candidate) => candidate.locatorHash === locator.locatorHash),
            sorted: false
          };
        }
        async resolve(locator, opts) {
          const pkg = opts.project.originalPackages.get(locator.locatorHash);
          if (!pkg)
            throw new Error(`The lockfile resolver isn't meant to resolve packages - they should already have been stored into a cache`);
          return pkg;
        }
      };
      exports22.LockfileResolver = LockfileResolver;
    }
  });
  var require_base = __commonJS2({
    "../../node_modules/.pnpm/diff@5.2.0/node_modules/diff/lib/diff/base.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", {
        value: true
      });
      exports22["default"] = Diff;
      function Diff() {
      }
      Diff.prototype = {
        diff: function diff(oldString, newString) {
          var _options$timeout;
          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          var callback = options.callback;
          if (typeof options === "function") {
            callback = options;
            options = {};
          }
          this.options = options;
          var self2 = this;
          function done(value) {
            if (callback) {
              setTimeout(function() {
                callback(undefined, value);
              }, 0);
              return true;
            } else {
              return value;
            }
          }
          oldString = this.castInput(oldString);
          newString = this.castInput(newString);
          oldString = this.removeEmpty(this.tokenize(oldString));
          newString = this.removeEmpty(this.tokenize(newString));
          var newLen = newString.length, oldLen = oldString.length;
          var editLength = 1;
          var maxEditLength = newLen + oldLen;
          if (options.maxEditLength) {
            maxEditLength = Math.min(maxEditLength, options.maxEditLength);
          }
          var maxExecutionTime = (_options$timeout = options.timeout) !== null && _options$timeout !== undefined ? _options$timeout : Infinity;
          var abortAfterTimestamp = Date.now() + maxExecutionTime;
          var bestPath = [{
            oldPos: -1,
            lastComponent: undefined
          }];
          var newPos = this.extractCommon(bestPath[0], newString, oldString, 0);
          if (bestPath[0].oldPos + 1 >= oldLen && newPos + 1 >= newLen) {
            return done([{
              value: this.join(newString),
              count: newString.length
            }]);
          }
          var minDiagonalToConsider = -Infinity, maxDiagonalToConsider = Infinity;
          function execEditLength() {
            for (var diagonalPath = Math.max(minDiagonalToConsider, -editLength);diagonalPath <= Math.min(maxDiagonalToConsider, editLength); diagonalPath += 2) {
              var basePath = undefined;
              var removePath = bestPath[diagonalPath - 1], addPath = bestPath[diagonalPath + 1];
              if (removePath) {
                bestPath[diagonalPath - 1] = undefined;
              }
              var canAdd = false;
              if (addPath) {
                var addPathNewPos = addPath.oldPos - diagonalPath;
                canAdd = addPath && 0 <= addPathNewPos && addPathNewPos < newLen;
              }
              var canRemove = removePath && removePath.oldPos + 1 < oldLen;
              if (!canAdd && !canRemove) {
                bestPath[diagonalPath] = undefined;
                continue;
              }
              if (!canRemove || canAdd && removePath.oldPos + 1 < addPath.oldPos) {
                basePath = self2.addToPath(addPath, true, undefined, 0);
              } else {
                basePath = self2.addToPath(removePath, undefined, true, 1);
              }
              newPos = self2.extractCommon(basePath, newString, oldString, diagonalPath);
              if (basePath.oldPos + 1 >= oldLen && newPos + 1 >= newLen) {
                return done(buildValues(self2, basePath.lastComponent, newString, oldString, self2.useLongestToken));
              } else {
                bestPath[diagonalPath] = basePath;
                if (basePath.oldPos + 1 >= oldLen) {
                  maxDiagonalToConsider = Math.min(maxDiagonalToConsider, diagonalPath - 1);
                }
                if (newPos + 1 >= newLen) {
                  minDiagonalToConsider = Math.max(minDiagonalToConsider, diagonalPath + 1);
                }
              }
            }
            editLength++;
          }
          if (callback) {
            (function exec() {
              setTimeout(function() {
                if (editLength > maxEditLength || Date.now() > abortAfterTimestamp) {
                  return callback();
                }
                if (!execEditLength()) {
                  exec();
                }
              }, 0);
            })();
          } else {
            while (editLength <= maxEditLength && Date.now() <= abortAfterTimestamp) {
              var ret = execEditLength();
              if (ret) {
                return ret;
              }
            }
          }
        },
        addToPath: function addToPath(path2, added, removed, oldPosInc) {
          var last = path2.lastComponent;
          if (last && last.added === added && last.removed === removed) {
            return {
              oldPos: path2.oldPos + oldPosInc,
              lastComponent: {
                count: last.count + 1,
                added,
                removed,
                previousComponent: last.previousComponent
              }
            };
          } else {
            return {
              oldPos: path2.oldPos + oldPosInc,
              lastComponent: {
                count: 1,
                added,
                removed,
                previousComponent: last
              }
            };
          }
        },
        extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath) {
          var newLen = newString.length, oldLen = oldString.length, oldPos = basePath.oldPos, newPos = oldPos - diagonalPath, commonCount = 0;
          while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {
            newPos++;
            oldPos++;
            commonCount++;
          }
          if (commonCount) {
            basePath.lastComponent = {
              count: commonCount,
              previousComponent: basePath.lastComponent
            };
          }
          basePath.oldPos = oldPos;
          return newPos;
        },
        equals: function equals(left, right) {
          if (this.options.comparator) {
            return this.options.comparator(left, right);
          } else {
            return left === right || this.options.ignoreCase && left.toLowerCase() === right.toLowerCase();
          }
        },
        removeEmpty: function removeEmpty(array) {
          var ret = [];
          for (var i = 0;i < array.length; i++) {
            if (array[i]) {
              ret.push(array[i]);
            }
          }
          return ret;
        },
        castInput: function castInput(value) {
          return value;
        },
        tokenize: function tokenize(value) {
          return value.split("");
        },
        join: function join(chars) {
          return chars.join("");
        }
      };
      function buildValues(diff, lastComponent, newString, oldString, useLongestToken) {
        var components = [];
        var nextComponent;
        while (lastComponent) {
          components.push(lastComponent);
          nextComponent = lastComponent.previousComponent;
          delete lastComponent.previousComponent;
          lastComponent = nextComponent;
        }
        components.reverse();
        var componentPos = 0, componentLen = components.length, newPos = 0, oldPos = 0;
        for (;componentPos < componentLen; componentPos++) {
          var component = components[componentPos];
          if (!component.removed) {
            if (!component.added && useLongestToken) {
              var value = newString.slice(newPos, newPos + component.count);
              value = value.map(function(value2, i) {
                var oldValue = oldString[oldPos + i];
                return oldValue.length > value2.length ? oldValue : value2;
              });
              component.value = diff.join(value);
            } else {
              component.value = diff.join(newString.slice(newPos, newPos + component.count));
            }
            newPos += component.count;
            if (!component.added) {
              oldPos += component.count;
            }
          } else {
            component.value = diff.join(oldString.slice(oldPos, oldPos + component.count));
            oldPos += component.count;
            if (componentPos && components[componentPos - 1].added) {
              var tmp = components[componentPos - 1];
              components[componentPos - 1] = components[componentPos];
              components[componentPos] = tmp;
            }
          }
        }
        var finalComponent = components[componentLen - 1];
        if (componentLen > 1 && typeof finalComponent.value === "string" && (finalComponent.added || finalComponent.removed) && diff.equals("", finalComponent.value)) {
          components[componentLen - 2].value += finalComponent.value;
          components.pop();
        }
        return components;
      }
    }
  });
  var require_character = __commonJS2({
    "../../node_modules/.pnpm/diff@5.2.0/node_modules/diff/lib/diff/character.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", {
        value: true
      });
      exports22.diffChars = diffChars;
      exports22.characterDiff = undefined;
      var _base = _interopRequireDefault(require_base());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var characterDiff = new _base["default"];
      exports22.characterDiff = characterDiff;
      function diffChars(oldStr, newStr, options) {
        return characterDiff.diff(oldStr, newStr, options);
      }
    }
  });
  var require_params = __commonJS2({
    "../../node_modules/.pnpm/diff@5.2.0/node_modules/diff/lib/util/params.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", {
        value: true
      });
      exports22.generateOptions = generateOptions;
      function generateOptions(options, defaults) {
        if (typeof options === "function") {
          defaults.callback = options;
        } else if (options) {
          for (var name in options) {
            if (options.hasOwnProperty(name)) {
              defaults[name] = options[name];
            }
          }
        }
        return defaults;
      }
    }
  });
  var require_word = __commonJS2({
    "../../node_modules/.pnpm/diff@5.2.0/node_modules/diff/lib/diff/word.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", {
        value: true
      });
      exports22.diffWords = diffWords;
      exports22.diffWordsWithSpace = diffWordsWithSpace;
      exports22.wordDiff = undefined;
      var _base = _interopRequireDefault(require_base());
      var _params = require_params();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var extendedWordChars = /^[A-Za-z\xC0-\u02C6\u02C8-\u02D7\u02DE-\u02FF\u1E00-\u1EFF]+$/;
      var reWhitespace = /\S/;
      var wordDiff = new _base["default"];
      exports22.wordDiff = wordDiff;
      wordDiff.equals = function(left, right) {
        if (this.options.ignoreCase) {
          left = left.toLowerCase();
          right = right.toLowerCase();
        }
        return left === right || this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right);
      };
      wordDiff.tokenize = function(value) {
        var tokens = value.split(/([^\S\r\n]+|[()[\]{}'"\r\n]|\b)/);
        for (var i = 0;i < tokens.length - 1; i++) {
          if (!tokens[i + 1] && tokens[i + 2] && extendedWordChars.test(tokens[i]) && extendedWordChars.test(tokens[i + 2])) {
            tokens[i] += tokens[i + 2];
            tokens.splice(i + 1, 2);
            i--;
          }
        }
        return tokens;
      };
      function diffWords(oldStr, newStr, options) {
        options = (0, _params.generateOptions)(options, {
          ignoreWhitespace: true
        });
        return wordDiff.diff(oldStr, newStr, options);
      }
      function diffWordsWithSpace(oldStr, newStr, options) {
        return wordDiff.diff(oldStr, newStr, options);
      }
    }
  });
  var require_line = __commonJS2({
    "../../node_modules/.pnpm/diff@5.2.0/node_modules/diff/lib/diff/line.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", {
        value: true
      });
      exports22.diffLines = diffLines;
      exports22.diffTrimmedLines = diffTrimmedLines;
      exports22.lineDiff = undefined;
      var _base = _interopRequireDefault(require_base());
      var _params = require_params();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var lineDiff = new _base["default"];
      exports22.lineDiff = lineDiff;
      lineDiff.tokenize = function(value) {
        if (this.options.stripTrailingCr) {
          value = value.replace(/\r\n/g, `
`);
        }
        var retLines = [], linesAndNewlines = value.split(/(\n|\r\n)/);
        if (!linesAndNewlines[linesAndNewlines.length - 1]) {
          linesAndNewlines.pop();
        }
        for (var i = 0;i < linesAndNewlines.length; i++) {
          var line = linesAndNewlines[i];
          if (i % 2 && !this.options.newlineIsToken) {
            retLines[retLines.length - 1] += line;
          } else {
            if (this.options.ignoreWhitespace) {
              line = line.trim();
            }
            retLines.push(line);
          }
        }
        return retLines;
      };
      function diffLines(oldStr, newStr, callback) {
        return lineDiff.diff(oldStr, newStr, callback);
      }
      function diffTrimmedLines(oldStr, newStr, callback) {
        var options = (0, _params.generateOptions)(callback, {
          ignoreWhitespace: true
        });
        return lineDiff.diff(oldStr, newStr, options);
      }
    }
  });
  var require_sentence = __commonJS2({
    "../../node_modules/.pnpm/diff@5.2.0/node_modules/diff/lib/diff/sentence.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", {
        value: true
      });
      exports22.diffSentences = diffSentences;
      exports22.sentenceDiff = undefined;
      var _base = _interopRequireDefault(require_base());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var sentenceDiff = new _base["default"];
      exports22.sentenceDiff = sentenceDiff;
      sentenceDiff.tokenize = function(value) {
        return value.split(/(\S.+?[.!?])(?=\s+|$)/);
      };
      function diffSentences(oldStr, newStr, callback) {
        return sentenceDiff.diff(oldStr, newStr, callback);
      }
    }
  });
  var require_css = __commonJS2({
    "../../node_modules/.pnpm/diff@5.2.0/node_modules/diff/lib/diff/css.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", {
        value: true
      });
      exports22.diffCss = diffCss;
      exports22.cssDiff = undefined;
      var _base = _interopRequireDefault(require_base());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var cssDiff = new _base["default"];
      exports22.cssDiff = cssDiff;
      cssDiff.tokenize = function(value) {
        return value.split(/([{}:;,]|\s+)/);
      };
      function diffCss(oldStr, newStr, callback) {
        return cssDiff.diff(oldStr, newStr, callback);
      }
    }
  });
  var require_json2 = __commonJS2({
    "../../node_modules/.pnpm/diff@5.2.0/node_modules/diff/lib/diff/json.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", {
        value: true
      });
      exports22.diffJson = diffJson;
      exports22.canonicalize = canonicalize;
      exports22.jsonDiff = undefined;
      var _base = _interopRequireDefault(require_base());
      var _line = require_line();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _typeof(obj) {
        "@babel/helpers - typeof";
        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof2(obj2) {
            return typeof obj2;
          };
        } else {
          _typeof = function _typeof2(obj2) {
            return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
          };
        }
        return _typeof(obj);
      }
      var objectPrototypeToString = Object.prototype.toString;
      var jsonDiff = new _base["default"];
      exports22.jsonDiff = jsonDiff;
      jsonDiff.useLongestToken = true;
      jsonDiff.tokenize = _line.lineDiff.tokenize;
      jsonDiff.castInput = function(value) {
        var _this$options = this.options, undefinedReplacement = _this$options.undefinedReplacement, _this$options$stringi = _this$options.stringifyReplacer, stringifyReplacer = _this$options$stringi === undefined ? function(k, v) {
          return typeof v === "undefined" ? undefinedReplacement : v;
        } : _this$options$stringi;
        return typeof value === "string" ? value : JSON.stringify(canonicalize(value, null, null, stringifyReplacer), stringifyReplacer, "  ");
      };
      jsonDiff.equals = function(left, right) {
        return _base["default"].prototype.equals.call(jsonDiff, left.replace(/,([\r\n])/g, "$1"), right.replace(/,([\r\n])/g, "$1"));
      };
      function diffJson(oldObj, newObj, options) {
        return jsonDiff.diff(oldObj, newObj, options);
      }
      function canonicalize(obj, stack, replacementStack, replacer, key) {
        stack = stack || [];
        replacementStack = replacementStack || [];
        if (replacer) {
          obj = replacer(key, obj);
        }
        var i;
        for (i = 0;i < stack.length; i += 1) {
          if (stack[i] === obj) {
            return replacementStack[i];
          }
        }
        var canonicalizedObj;
        if (objectPrototypeToString.call(obj) === "[object Array]") {
          stack.push(obj);
          canonicalizedObj = new Array(obj.length);
          replacementStack.push(canonicalizedObj);
          for (i = 0;i < obj.length; i += 1) {
            canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key);
          }
          stack.pop();
          replacementStack.pop();
          return canonicalizedObj;
        }
        if (obj && obj.toJSON) {
          obj = obj.toJSON();
        }
        if (_typeof(obj) === "object" && obj !== null) {
          stack.push(obj);
          canonicalizedObj = {};
          replacementStack.push(canonicalizedObj);
          var sortedKeys = [], _key;
          for (_key in obj) {
            if (obj.hasOwnProperty(_key)) {
              sortedKeys.push(_key);
            }
          }
          sortedKeys.sort();
          for (i = 0;i < sortedKeys.length; i += 1) {
            _key = sortedKeys[i];
            canonicalizedObj[_key] = canonicalize(obj[_key], stack, replacementStack, replacer, _key);
          }
          stack.pop();
          replacementStack.pop();
        } else {
          canonicalizedObj = obj;
        }
        return canonicalizedObj;
      }
    }
  });
  var require_array2 = __commonJS2({
    "../../node_modules/.pnpm/diff@5.2.0/node_modules/diff/lib/diff/array.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", {
        value: true
      });
      exports22.diffArrays = diffArrays;
      exports22.arrayDiff = undefined;
      var _base = _interopRequireDefault(require_base());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var arrayDiff = new _base["default"];
      exports22.arrayDiff = arrayDiff;
      arrayDiff.tokenize = function(value) {
        return value.slice();
      };
      arrayDiff.join = arrayDiff.removeEmpty = function(value) {
        return value;
      };
      function diffArrays(oldArr, newArr, callback) {
        return arrayDiff.diff(oldArr, newArr, callback);
      }
    }
  });
  var require_parse6 = __commonJS2({
    "../../node_modules/.pnpm/diff@5.2.0/node_modules/diff/lib/patch/parse.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", {
        value: true
      });
      exports22.parsePatch = parsePatch;
      function parsePatch(uniDiff) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var diffstr = uniDiff.split(/\r\n|[\n\v\f\r\x85]/), delimiters = uniDiff.match(/\r\n|[\n\v\f\r\x85]/g) || [], list = [], i = 0;
        function parseIndex() {
          var index = {};
          list.push(index);
          while (i < diffstr.length) {
            var line = diffstr[i];
            if (/^(\-\-\-|\+\+\+|@@)\s/.test(line)) {
              break;
            }
            var header = /^(?:Index:|diff(?: -r \w+)+)\s+(.+?)\s*$/.exec(line);
            if (header) {
              index.index = header[1];
            }
            i++;
          }
          parseFileHeader(index);
          parseFileHeader(index);
          index.hunks = [];
          while (i < diffstr.length) {
            var _line = diffstr[i];
            if (/^(Index:|diff|\-\-\-|\+\+\+)\s/.test(_line)) {
              break;
            } else if (/^@@/.test(_line)) {
              index.hunks.push(parseHunk());
            } else if (_line && options.strict) {
              throw new Error("Unknown line " + (i + 1) + " " + JSON.stringify(_line));
            } else {
              i++;
            }
          }
        }
        function parseFileHeader(index) {
          var fileHeader = /^(---|\+\+\+)\s+(.*)$/.exec(diffstr[i]);
          if (fileHeader) {
            var keyPrefix = fileHeader[1] === "---" ? "old" : "new";
            var data = fileHeader[2].split("\t", 2);
            var fileName = data[0].replace(/\\\\/g, "\\");
            if (/^".*"$/.test(fileName)) {
              fileName = fileName.substr(1, fileName.length - 2);
            }
            index[keyPrefix + "FileName"] = fileName;
            index[keyPrefix + "Header"] = (data[1] || "").trim();
            i++;
          }
        }
        function parseHunk() {
          var chunkHeaderIndex = i, chunkHeaderLine = diffstr[i++], chunkHeader = chunkHeaderLine.split(/@@ -(\d+)(?:,(\d+))? \+(\d+)(?:,(\d+))? @@/);
          var hunk = {
            oldStart: +chunkHeader[1],
            oldLines: typeof chunkHeader[2] === "undefined" ? 1 : +chunkHeader[2],
            newStart: +chunkHeader[3],
            newLines: typeof chunkHeader[4] === "undefined" ? 1 : +chunkHeader[4],
            lines: [],
            linedelimiters: []
          };
          if (hunk.oldLines === 0) {
            hunk.oldStart += 1;
          }
          if (hunk.newLines === 0) {
            hunk.newStart += 1;
          }
          var addCount = 0, removeCount = 0;
          for (;i < diffstr.length; i++) {
            if (diffstr[i].indexOf("--- ") === 0 && i + 2 < diffstr.length && diffstr[i + 1].indexOf("+++ ") === 0 && diffstr[i + 2].indexOf("@@") === 0) {
              break;
            }
            var operation = diffstr[i].length == 0 && i != diffstr.length - 1 ? " " : diffstr[i][0];
            if (operation === "+" || operation === "-" || operation === " " || operation === "\\") {
              hunk.lines.push(diffstr[i]);
              hunk.linedelimiters.push(delimiters[i] || `
`);
              if (operation === "+") {
                addCount++;
              } else if (operation === "-") {
                removeCount++;
              } else if (operation === " ") {
                addCount++;
                removeCount++;
              }
            } else {
              break;
            }
          }
          if (!addCount && hunk.newLines === 1) {
            hunk.newLines = 0;
          }
          if (!removeCount && hunk.oldLines === 1) {
            hunk.oldLines = 0;
          }
          if (options.strict) {
            if (addCount !== hunk.newLines) {
              throw new Error("Added line count did not match for hunk at line " + (chunkHeaderIndex + 1));
            }
            if (removeCount !== hunk.oldLines) {
              throw new Error("Removed line count did not match for hunk at line " + (chunkHeaderIndex + 1));
            }
          }
          return hunk;
        }
        while (i < diffstr.length) {
          parseIndex();
        }
        return list;
      }
    }
  });
  var require_distance_iterator = __commonJS2({
    "../../node_modules/.pnpm/diff@5.2.0/node_modules/diff/lib/util/distance-iterator.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", {
        value: true
      });
      exports22["default"] = _default;
      function _default(start, minLine, maxLine) {
        var wantForward = true, backwardExhausted = false, forwardExhausted = false, localOffset = 1;
        return function iterator() {
          if (wantForward && !forwardExhausted) {
            if (backwardExhausted) {
              localOffset++;
            } else {
              wantForward = false;
            }
            if (start + localOffset <= maxLine) {
              return localOffset;
            }
            forwardExhausted = true;
          }
          if (!backwardExhausted) {
            if (!forwardExhausted) {
              wantForward = true;
            }
            if (minLine <= start - localOffset) {
              return -localOffset++;
            }
            backwardExhausted = true;
            return iterator();
          }
        };
      }
    }
  });
  var require_apply2 = __commonJS2({
    "../../node_modules/.pnpm/diff@5.2.0/node_modules/diff/lib/patch/apply.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", {
        value: true
      });
      exports22.applyPatch = applyPatch;
      exports22.applyPatches = applyPatches;
      var _parse = require_parse6();
      var _distanceIterator = _interopRequireDefault(require_distance_iterator());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function applyPatch(source, uniDiff) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        if (typeof uniDiff === "string") {
          uniDiff = (0, _parse.parsePatch)(uniDiff);
        }
        if (Array.isArray(uniDiff)) {
          if (uniDiff.length > 1) {
            throw new Error("applyPatch only works with a single input.");
          }
          uniDiff = uniDiff[0];
        }
        var lines = source.split(/\r\n|[\n\v\f\r\x85]/), delimiters = source.match(/\r\n|[\n\v\f\r\x85]/g) || [], hunks = uniDiff.hunks, compareLine = options.compareLine || function(lineNumber, line2, operation2, patchContent) {
          return line2 === patchContent;
        }, errorCount = 0, fuzzFactor = options.fuzzFactor || 0, minLine = 0, offset = 0, removeEOFNL, addEOFNL;
        function hunkFits(hunk2, toPos2) {
          for (var j2 = 0;j2 < hunk2.lines.length; j2++) {
            var line2 = hunk2.lines[j2], operation2 = line2.length > 0 ? line2[0] : " ", content2 = line2.length > 0 ? line2.substr(1) : line2;
            if (operation2 === " " || operation2 === "-") {
              if (!compareLine(toPos2 + 1, lines[toPos2], operation2, content2)) {
                errorCount++;
                if (errorCount > fuzzFactor) {
                  return false;
                }
              }
              toPos2++;
            }
          }
          return true;
        }
        for (var i = 0;i < hunks.length; i++) {
          var hunk = hunks[i], maxLine = lines.length - hunk.oldLines, localOffset = 0, toPos = offset + hunk.oldStart - 1;
          var iterator = (0, _distanceIterator["default"])(toPos, minLine, maxLine);
          for (;localOffset !== undefined; localOffset = iterator()) {
            if (hunkFits(hunk, toPos + localOffset)) {
              hunk.offset = offset += localOffset;
              break;
            }
          }
          if (localOffset === undefined) {
            return false;
          }
          minLine = hunk.offset + hunk.oldStart + hunk.oldLines;
        }
        var diffOffset = 0;
        for (var _i = 0;_i < hunks.length; _i++) {
          var _hunk = hunks[_i], _toPos = _hunk.oldStart + _hunk.offset + diffOffset - 1;
          diffOffset += _hunk.newLines - _hunk.oldLines;
          for (var j = 0;j < _hunk.lines.length; j++) {
            var line = _hunk.lines[j], operation = line.length > 0 ? line[0] : " ", content = line.length > 0 ? line.substr(1) : line, delimiter = _hunk.linedelimiters && _hunk.linedelimiters[j] || `
`;
            if (operation === " ") {
              _toPos++;
            } else if (operation === "-") {
              lines.splice(_toPos, 1);
              delimiters.splice(_toPos, 1);
            } else if (operation === "+") {
              lines.splice(_toPos, 0, content);
              delimiters.splice(_toPos, 0, delimiter);
              _toPos++;
            } else if (operation === "\\") {
              var previousOperation = _hunk.lines[j - 1] ? _hunk.lines[j - 1][0] : null;
              if (previousOperation === "+") {
                removeEOFNL = true;
              } else if (previousOperation === "-") {
                addEOFNL = true;
              }
            }
          }
        }
        if (removeEOFNL) {
          while (!lines[lines.length - 1]) {
            lines.pop();
            delimiters.pop();
          }
        } else if (addEOFNL) {
          lines.push("");
          delimiters.push(`
`);
        }
        for (var _k = 0;_k < lines.length - 1; _k++) {
          lines[_k] = lines[_k] + delimiters[_k];
        }
        return lines.join("");
      }
      function applyPatches(uniDiff, options) {
        if (typeof uniDiff === "string") {
          uniDiff = (0, _parse.parsePatch)(uniDiff);
        }
        var currentIndex = 0;
        function processIndex() {
          var index = uniDiff[currentIndex++];
          if (!index) {
            return options.complete();
          }
          options.loadFile(index, function(err, data) {
            if (err) {
              return options.complete(err);
            }
            var updatedContent = applyPatch(data, index, options);
            options.patched(index, updatedContent, function(err2) {
              if (err2) {
                return options.complete(err2);
              }
              processIndex();
            });
          });
        }
        processIndex();
      }
    }
  });
  var require_create3 = __commonJS2({
    "../../node_modules/.pnpm/diff@5.2.0/node_modules/diff/lib/patch/create.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", {
        value: true
      });
      exports22.structuredPatch = structuredPatch;
      exports22.formatPatch = formatPatch;
      exports22.createTwoFilesPatch = createTwoFilesPatch;
      exports22.createPatch = createPatch;
      var _line = require_line();
      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
      }
      function _nonIterableSpread() {
        throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (!o)
          return;
        if (typeof o === "string")
          return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor)
          n = o.constructor.name;
        if (n === "Map" || n === "Set")
          return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
          return _arrayLikeToArray(o, minLen);
      }
      function _iterableToArray(iter) {
        if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
          return Array.from(iter);
      }
      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr))
          return _arrayLikeToArray(arr);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i = 0, arr2 = new Array(len);i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
      function structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {
        if (!options) {
          options = {};
        }
        if (typeof options.context === "undefined") {
          options.context = 4;
        }
        var diff = (0, _line.diffLines)(oldStr, newStr, options);
        if (!diff) {
          return;
        }
        diff.push({
          value: "",
          lines: []
        });
        function contextLines(lines) {
          return lines.map(function(entry) {
            return " " + entry;
          });
        }
        var hunks = [];
        var oldRangeStart = 0, newRangeStart = 0, curRange = [], oldLine = 1, newLine = 1;
        var _loop = function _loop2(i2) {
          var current = diff[i2], lines = current.lines || current.value.replace(/\n$/, "").split(`
`);
          current.lines = lines;
          if (current.added || current.removed) {
            var _curRange;
            if (!oldRangeStart) {
              var prev = diff[i2 - 1];
              oldRangeStart = oldLine;
              newRangeStart = newLine;
              if (prev) {
                curRange = options.context > 0 ? contextLines(prev.lines.slice(-options.context)) : [];
                oldRangeStart -= curRange.length;
                newRangeStart -= curRange.length;
              }
            }
            (_curRange = curRange).push.apply(_curRange, _toConsumableArray(lines.map(function(entry) {
              return (current.added ? "+" : "-") + entry;
            })));
            if (current.added) {
              newLine += lines.length;
            } else {
              oldLine += lines.length;
            }
          } else {
            if (oldRangeStart) {
              if (lines.length <= options.context * 2 && i2 < diff.length - 2) {
                var _curRange2;
                (_curRange2 = curRange).push.apply(_curRange2, _toConsumableArray(contextLines(lines)));
              } else {
                var _curRange3;
                var contextSize = Math.min(lines.length, options.context);
                (_curRange3 = curRange).push.apply(_curRange3, _toConsumableArray(contextLines(lines.slice(0, contextSize))));
                var hunk = {
                  oldStart: oldRangeStart,
                  oldLines: oldLine - oldRangeStart + contextSize,
                  newStart: newRangeStart,
                  newLines: newLine - newRangeStart + contextSize,
                  lines: curRange
                };
                if (i2 >= diff.length - 2 && lines.length <= options.context) {
                  var oldEOFNewline = /\n$/.test(oldStr);
                  var newEOFNewline = /\n$/.test(newStr);
                  var noNlBeforeAdds = lines.length == 0 && curRange.length > hunk.oldLines;
                  if (!oldEOFNewline && noNlBeforeAdds && oldStr.length > 0) {
                    curRange.splice(hunk.oldLines, 0, "\\ No newline at end of file");
                  }
                  if (!oldEOFNewline && !noNlBeforeAdds || !newEOFNewline) {
                    curRange.push("\\ No newline at end of file");
                  }
                }
                hunks.push(hunk);
                oldRangeStart = 0;
                newRangeStart = 0;
                curRange = [];
              }
            }
            oldLine += lines.length;
            newLine += lines.length;
          }
        };
        for (var i = 0;i < diff.length; i++) {
          _loop(i);
        }
        return {
          oldFileName,
          newFileName,
          oldHeader,
          newHeader,
          hunks
        };
      }
      function formatPatch(diff) {
        if (Array.isArray(diff)) {
          return diff.map(formatPatch).join(`
`);
        }
        var ret = [];
        if (diff.oldFileName == diff.newFileName) {
          ret.push("Index: " + diff.oldFileName);
        }
        ret.push("===================================================================");
        ret.push("--- " + diff.oldFileName + (typeof diff.oldHeader === "undefined" ? "" : "\t" + diff.oldHeader));
        ret.push("+++ " + diff.newFileName + (typeof diff.newHeader === "undefined" ? "" : "\t" + diff.newHeader));
        for (var i = 0;i < diff.hunks.length; i++) {
          var hunk = diff.hunks[i];
          if (hunk.oldLines === 0) {
            hunk.oldStart -= 1;
          }
          if (hunk.newLines === 0) {
            hunk.newStart -= 1;
          }
          ret.push("@@ -" + hunk.oldStart + "," + hunk.oldLines + " +" + hunk.newStart + "," + hunk.newLines + " @@");
          ret.push.apply(ret, hunk.lines);
        }
        return ret.join(`
`) + `
`;
      }
      function createTwoFilesPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {
        return formatPatch(structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options));
      }
      function createPatch(fileName, oldStr, newStr, oldHeader, newHeader, options) {
        return createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader, options);
      }
    }
  });
  var require_array3 = __commonJS2({
    "../../node_modules/.pnpm/diff@5.2.0/node_modules/diff/lib/util/array.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", {
        value: true
      });
      exports22.arrayEqual = arrayEqual;
      exports22.arrayStartsWith = arrayStartsWith;
      function arrayEqual(a, b) {
        if (a.length !== b.length) {
          return false;
        }
        return arrayStartsWith(a, b);
      }
      function arrayStartsWith(array, start) {
        if (start.length > array.length) {
          return false;
        }
        for (var i = 0;i < start.length; i++) {
          if (start[i] !== array[i]) {
            return false;
          }
        }
        return true;
      }
    }
  });
  var require_merge3 = __commonJS2({
    "../../node_modules/.pnpm/diff@5.2.0/node_modules/diff/lib/patch/merge.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", {
        value: true
      });
      exports22.calcLineCount = calcLineCount;
      exports22.merge = merge;
      var _create = require_create3();
      var _parse = require_parse6();
      var _array = require_array3();
      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
      }
      function _nonIterableSpread() {
        throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (!o)
          return;
        if (typeof o === "string")
          return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor)
          n = o.constructor.name;
        if (n === "Map" || n === "Set")
          return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
          return _arrayLikeToArray(o, minLen);
      }
      function _iterableToArray(iter) {
        if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
          return Array.from(iter);
      }
      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr))
          return _arrayLikeToArray(arr);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i = 0, arr2 = new Array(len);i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
      function calcLineCount(hunk) {
        var _calcOldNewLineCount = calcOldNewLineCount(hunk.lines), oldLines = _calcOldNewLineCount.oldLines, newLines = _calcOldNewLineCount.newLines;
        if (oldLines !== undefined) {
          hunk.oldLines = oldLines;
        } else {
          delete hunk.oldLines;
        }
        if (newLines !== undefined) {
          hunk.newLines = newLines;
        } else {
          delete hunk.newLines;
        }
      }
      function merge(mine, theirs, base) {
        mine = loadPatch(mine, base);
        theirs = loadPatch(theirs, base);
        var ret = {};
        if (mine.index || theirs.index) {
          ret.index = mine.index || theirs.index;
        }
        if (mine.newFileName || theirs.newFileName) {
          if (!fileNameChanged(mine)) {
            ret.oldFileName = theirs.oldFileName || mine.oldFileName;
            ret.newFileName = theirs.newFileName || mine.newFileName;
            ret.oldHeader = theirs.oldHeader || mine.oldHeader;
            ret.newHeader = theirs.newHeader || mine.newHeader;
          } else if (!fileNameChanged(theirs)) {
            ret.oldFileName = mine.oldFileName;
            ret.newFileName = mine.newFileName;
            ret.oldHeader = mine.oldHeader;
            ret.newHeader = mine.newHeader;
          } else {
            ret.oldFileName = selectField(ret, mine.oldFileName, theirs.oldFileName);
            ret.newFileName = selectField(ret, mine.newFileName, theirs.newFileName);
            ret.oldHeader = selectField(ret, mine.oldHeader, theirs.oldHeader);
            ret.newHeader = selectField(ret, mine.newHeader, theirs.newHeader);
          }
        }
        ret.hunks = [];
        var mineIndex = 0, theirsIndex = 0, mineOffset = 0, theirsOffset = 0;
        while (mineIndex < mine.hunks.length || theirsIndex < theirs.hunks.length) {
          var mineCurrent = mine.hunks[mineIndex] || {
            oldStart: Infinity
          }, theirsCurrent = theirs.hunks[theirsIndex] || {
            oldStart: Infinity
          };
          if (hunkBefore(mineCurrent, theirsCurrent)) {
            ret.hunks.push(cloneHunk(mineCurrent, mineOffset));
            mineIndex++;
            theirsOffset += mineCurrent.newLines - mineCurrent.oldLines;
          } else if (hunkBefore(theirsCurrent, mineCurrent)) {
            ret.hunks.push(cloneHunk(theirsCurrent, theirsOffset));
            theirsIndex++;
            mineOffset += theirsCurrent.newLines - theirsCurrent.oldLines;
          } else {
            var mergedHunk = {
              oldStart: Math.min(mineCurrent.oldStart, theirsCurrent.oldStart),
              oldLines: 0,
              newStart: Math.min(mineCurrent.newStart + mineOffset, theirsCurrent.oldStart + theirsOffset),
              newLines: 0,
              lines: []
            };
            mergeLines(mergedHunk, mineCurrent.oldStart, mineCurrent.lines, theirsCurrent.oldStart, theirsCurrent.lines);
            theirsIndex++;
            mineIndex++;
            ret.hunks.push(mergedHunk);
          }
        }
        return ret;
      }
      function loadPatch(param, base) {
        if (typeof param === "string") {
          if (/^@@/m.test(param) || /^Index:/m.test(param)) {
            return (0, _parse.parsePatch)(param)[0];
          }
          if (!base) {
            throw new Error("Must provide a base reference or pass in a patch");
          }
          return (0, _create.structuredPatch)(undefined, undefined, base, param);
        }
        return param;
      }
      function fileNameChanged(patch) {
        return patch.newFileName && patch.newFileName !== patch.oldFileName;
      }
      function selectField(index, mine, theirs) {
        if (mine === theirs) {
          return mine;
        } else {
          index.conflict = true;
          return {
            mine,
            theirs
          };
        }
      }
      function hunkBefore(test, check) {
        return test.oldStart < check.oldStart && test.oldStart + test.oldLines < check.oldStart;
      }
      function cloneHunk(hunk, offset) {
        return {
          oldStart: hunk.oldStart,
          oldLines: hunk.oldLines,
          newStart: hunk.newStart + offset,
          newLines: hunk.newLines,
          lines: hunk.lines
        };
      }
      function mergeLines(hunk, mineOffset, mineLines, theirOffset, theirLines) {
        var mine = {
          offset: mineOffset,
          lines: mineLines,
          index: 0
        }, their = {
          offset: theirOffset,
          lines: theirLines,
          index: 0
        };
        insertLeading(hunk, mine, their);
        insertLeading(hunk, their, mine);
        while (mine.index < mine.lines.length && their.index < their.lines.length) {
          var mineCurrent = mine.lines[mine.index], theirCurrent = their.lines[their.index];
          if ((mineCurrent[0] === "-" || mineCurrent[0] === "+") && (theirCurrent[0] === "-" || theirCurrent[0] === "+")) {
            mutualChange(hunk, mine, their);
          } else if (mineCurrent[0] === "+" && theirCurrent[0] === " ") {
            var _hunk$lines;
            (_hunk$lines = hunk.lines).push.apply(_hunk$lines, _toConsumableArray(collectChange(mine)));
          } else if (theirCurrent[0] === "+" && mineCurrent[0] === " ") {
            var _hunk$lines2;
            (_hunk$lines2 = hunk.lines).push.apply(_hunk$lines2, _toConsumableArray(collectChange(their)));
          } else if (mineCurrent[0] === "-" && theirCurrent[0] === " ") {
            removal(hunk, mine, their);
          } else if (theirCurrent[0] === "-" && mineCurrent[0] === " ") {
            removal(hunk, their, mine, true);
          } else if (mineCurrent === theirCurrent) {
            hunk.lines.push(mineCurrent);
            mine.index++;
            their.index++;
          } else {
            conflict(hunk, collectChange(mine), collectChange(their));
          }
        }
        insertTrailing(hunk, mine);
        insertTrailing(hunk, their);
        calcLineCount(hunk);
      }
      function mutualChange(hunk, mine, their) {
        var myChanges = collectChange(mine), theirChanges = collectChange(their);
        if (allRemoves(myChanges) && allRemoves(theirChanges)) {
          if ((0, _array.arrayStartsWith)(myChanges, theirChanges) && skipRemoveSuperset(their, myChanges, myChanges.length - theirChanges.length)) {
            var _hunk$lines3;
            (_hunk$lines3 = hunk.lines).push.apply(_hunk$lines3, _toConsumableArray(myChanges));
            return;
          } else if ((0, _array.arrayStartsWith)(theirChanges, myChanges) && skipRemoveSuperset(mine, theirChanges, theirChanges.length - myChanges.length)) {
            var _hunk$lines4;
            (_hunk$lines4 = hunk.lines).push.apply(_hunk$lines4, _toConsumableArray(theirChanges));
            return;
          }
        } else if ((0, _array.arrayEqual)(myChanges, theirChanges)) {
          var _hunk$lines5;
          (_hunk$lines5 = hunk.lines).push.apply(_hunk$lines5, _toConsumableArray(myChanges));
          return;
        }
        conflict(hunk, myChanges, theirChanges);
      }
      function removal(hunk, mine, their, swap) {
        var myChanges = collectChange(mine), theirChanges = collectContext(their, myChanges);
        if (theirChanges.merged) {
          var _hunk$lines6;
          (_hunk$lines6 = hunk.lines).push.apply(_hunk$lines6, _toConsumableArray(theirChanges.merged));
        } else {
          conflict(hunk, swap ? theirChanges : myChanges, swap ? myChanges : theirChanges);
        }
      }
      function conflict(hunk, mine, their) {
        hunk.conflict = true;
        hunk.lines.push({
          conflict: true,
          mine,
          theirs: their
        });
      }
      function insertLeading(hunk, insert, their) {
        while (insert.offset < their.offset && insert.index < insert.lines.length) {
          var line = insert.lines[insert.index++];
          hunk.lines.push(line);
          insert.offset++;
        }
      }
      function insertTrailing(hunk, insert) {
        while (insert.index < insert.lines.length) {
          var line = insert.lines[insert.index++];
          hunk.lines.push(line);
        }
      }
      function collectChange(state) {
        var ret = [], operation = state.lines[state.index][0];
        while (state.index < state.lines.length) {
          var line = state.lines[state.index];
          if (operation === "-" && line[0] === "+") {
            operation = "+";
          }
          if (operation === line[0]) {
            ret.push(line);
            state.index++;
          } else {
            break;
          }
        }
        return ret;
      }
      function collectContext(state, matchChanges) {
        var changes = [], merged = [], matchIndex = 0, contextChanges = false, conflicted = false;
        while (matchIndex < matchChanges.length && state.index < state.lines.length) {
          var change = state.lines[state.index], match = matchChanges[matchIndex];
          if (match[0] === "+") {
            break;
          }
          contextChanges = contextChanges || change[0] !== " ";
          merged.push(match);
          matchIndex++;
          if (change[0] === "+") {
            conflicted = true;
            while (change[0] === "+") {
              changes.push(change);
              change = state.lines[++state.index];
            }
          }
          if (match.substr(1) === change.substr(1)) {
            changes.push(change);
            state.index++;
          } else {
            conflicted = true;
          }
        }
        if ((matchChanges[matchIndex] || "")[0] === "+" && contextChanges) {
          conflicted = true;
        }
        if (conflicted) {
          return changes;
        }
        while (matchIndex < matchChanges.length) {
          merged.push(matchChanges[matchIndex++]);
        }
        return {
          merged,
          changes
        };
      }
      function allRemoves(changes) {
        return changes.reduce(function(prev, change) {
          return prev && change[0] === "-";
        }, true);
      }
      function skipRemoveSuperset(state, removeChanges, delta) {
        for (var i = 0;i < delta; i++) {
          var changeContent = removeChanges[removeChanges.length - delta + i].substr(1);
          if (state.lines[state.index + i] !== " " + changeContent) {
            return false;
          }
        }
        state.index += delta;
        return true;
      }
      function calcOldNewLineCount(lines) {
        var oldLines = 0;
        var newLines = 0;
        lines.forEach(function(line) {
          if (typeof line !== "string") {
            var myCount = calcOldNewLineCount(line.mine);
            var theirCount = calcOldNewLineCount(line.theirs);
            if (oldLines !== undefined) {
              if (myCount.oldLines === theirCount.oldLines) {
                oldLines += myCount.oldLines;
              } else {
                oldLines = undefined;
              }
            }
            if (newLines !== undefined) {
              if (myCount.newLines === theirCount.newLines) {
                newLines += myCount.newLines;
              } else {
                newLines = undefined;
              }
            }
          } else {
            if (newLines !== undefined && (line[0] === "+" || line[0] === " ")) {
              newLines++;
            }
            if (oldLines !== undefined && (line[0] === "-" || line[0] === " ")) {
              oldLines++;
            }
          }
        });
        return {
          oldLines,
          newLines
        };
      }
    }
  });
  var require_reverse = __commonJS2({
    "../../node_modules/.pnpm/diff@5.2.0/node_modules/diff/lib/patch/reverse.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", {
        value: true
      });
      exports22.reversePatch = reversePatch;
      function ownKeys2(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly)
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target) {
        for (var i = 1;i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          if (i % 2) {
            ownKeys2(Object(source), true).forEach(function(key) {
              _defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys2(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function reversePatch(structuredPatch) {
        if (Array.isArray(structuredPatch)) {
          return structuredPatch.map(reversePatch).reverse();
        }
        return _objectSpread(_objectSpread({}, structuredPatch), {}, {
          oldFileName: structuredPatch.newFileName,
          oldHeader: structuredPatch.newHeader,
          newFileName: structuredPatch.oldFileName,
          newHeader: structuredPatch.oldHeader,
          hunks: structuredPatch.hunks.map(function(hunk) {
            return {
              oldLines: hunk.newLines,
              oldStart: hunk.newStart,
              newLines: hunk.oldLines,
              newStart: hunk.oldStart,
              linedelimiters: hunk.linedelimiters,
              lines: hunk.lines.map(function(l) {
                if (l.startsWith("-")) {
                  return "+".concat(l.slice(1));
                }
                if (l.startsWith("+")) {
                  return "-".concat(l.slice(1));
                }
                return l;
              })
            };
          })
        });
      }
    }
  });
  var require_dmp = __commonJS2({
    "../../node_modules/.pnpm/diff@5.2.0/node_modules/diff/lib/convert/dmp.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", {
        value: true
      });
      exports22.convertChangesToDMP = convertChangesToDMP;
      function convertChangesToDMP(changes) {
        var ret = [], change, operation;
        for (var i = 0;i < changes.length; i++) {
          change = changes[i];
          if (change.added) {
            operation = 1;
          } else if (change.removed) {
            operation = -1;
          } else {
            operation = 0;
          }
          ret.push([operation, change.value]);
        }
        return ret;
      }
    }
  });
  var require_xml = __commonJS2({
    "../../node_modules/.pnpm/diff@5.2.0/node_modules/diff/lib/convert/xml.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", {
        value: true
      });
      exports22.convertChangesToXML = convertChangesToXML;
      function convertChangesToXML(changes) {
        var ret = [];
        for (var i = 0;i < changes.length; i++) {
          var change = changes[i];
          if (change.added) {
            ret.push("<ins>");
          } else if (change.removed) {
            ret.push("<del>");
          }
          ret.push(escapeHTML(change.value));
          if (change.added) {
            ret.push("</ins>");
          } else if (change.removed) {
            ret.push("</del>");
          }
        }
        return ret.join("");
      }
      function escapeHTML(s) {
        var n = s;
        n = n.replace(/&/g, "&amp;");
        n = n.replace(/</g, "&lt;");
        n = n.replace(/>/g, "&gt;");
        n = n.replace(/"/g, "&quot;");
        return n;
      }
    }
  });
  var require_lib5 = __commonJS2({
    "../../node_modules/.pnpm/diff@5.2.0/node_modules/diff/lib/index.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", {
        value: true
      });
      Object.defineProperty(exports22, "Diff", {
        enumerable: true,
        get: function get() {
          return _base["default"];
        }
      });
      Object.defineProperty(exports22, "diffChars", {
        enumerable: true,
        get: function get() {
          return _character.diffChars;
        }
      });
      Object.defineProperty(exports22, "diffWords", {
        enumerable: true,
        get: function get() {
          return _word.diffWords;
        }
      });
      Object.defineProperty(exports22, "diffWordsWithSpace", {
        enumerable: true,
        get: function get() {
          return _word.diffWordsWithSpace;
        }
      });
      Object.defineProperty(exports22, "diffLines", {
        enumerable: true,
        get: function get() {
          return _line.diffLines;
        }
      });
      Object.defineProperty(exports22, "diffTrimmedLines", {
        enumerable: true,
        get: function get() {
          return _line.diffTrimmedLines;
        }
      });
      Object.defineProperty(exports22, "diffSentences", {
        enumerable: true,
        get: function get() {
          return _sentence.diffSentences;
        }
      });
      Object.defineProperty(exports22, "diffCss", {
        enumerable: true,
        get: function get() {
          return _css.diffCss;
        }
      });
      Object.defineProperty(exports22, "diffJson", {
        enumerable: true,
        get: function get() {
          return _json.diffJson;
        }
      });
      Object.defineProperty(exports22, "canonicalize", {
        enumerable: true,
        get: function get() {
          return _json.canonicalize;
        }
      });
      Object.defineProperty(exports22, "diffArrays", {
        enumerable: true,
        get: function get() {
          return _array.diffArrays;
        }
      });
      Object.defineProperty(exports22, "applyPatch", {
        enumerable: true,
        get: function get() {
          return _apply.applyPatch;
        }
      });
      Object.defineProperty(exports22, "applyPatches", {
        enumerable: true,
        get: function get() {
          return _apply.applyPatches;
        }
      });
      Object.defineProperty(exports22, "parsePatch", {
        enumerable: true,
        get: function get() {
          return _parse.parsePatch;
        }
      });
      Object.defineProperty(exports22, "merge", {
        enumerable: true,
        get: function get() {
          return _merge.merge;
        }
      });
      Object.defineProperty(exports22, "reversePatch", {
        enumerable: true,
        get: function get() {
          return _reverse.reversePatch;
        }
      });
      Object.defineProperty(exports22, "structuredPatch", {
        enumerable: true,
        get: function get() {
          return _create.structuredPatch;
        }
      });
      Object.defineProperty(exports22, "createTwoFilesPatch", {
        enumerable: true,
        get: function get() {
          return _create.createTwoFilesPatch;
        }
      });
      Object.defineProperty(exports22, "createPatch", {
        enumerable: true,
        get: function get() {
          return _create.createPatch;
        }
      });
      Object.defineProperty(exports22, "formatPatch", {
        enumerable: true,
        get: function get() {
          return _create.formatPatch;
        }
      });
      Object.defineProperty(exports22, "convertChangesToDMP", {
        enumerable: true,
        get: function get() {
          return _dmp.convertChangesToDMP;
        }
      });
      Object.defineProperty(exports22, "convertChangesToXML", {
        enumerable: true,
        get: function get() {
          return _xml.convertChangesToXML;
        }
      });
      var _base = _interopRequireDefault(require_base());
      var _character = require_character();
      var _word = require_word();
      var _line = require_line();
      var _sentence = require_sentence();
      var _css = require_css();
      var _json = require_json2();
      var _array = require_array2();
      var _apply = require_apply2();
      var _parse = require_parse6();
      var _merge = require_merge3();
      var _reverse = require_reverse();
      var _create = require_create3();
      var _dmp = require_dmp();
      var _xml = require_xml();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
    }
  });
  var require_isKey = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_isKey.js"(exports22, module22) {
      var isArray = require_isArray();
      var isSymbol = require_isSymbol();
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
      var reIsPlainProp = /^\w*$/;
      function isKey(value, object) {
        if (isArray(value)) {
          return false;
        }
        var type = typeof value;
        if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
          return true;
        }
        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
      }
      module22.exports = isKey;
    }
  });
  var require_memoize = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/memoize.js"(exports22, module22) {
      var MapCache = require_MapCache();
      var FUNC_ERROR_TEXT = "Expected a function";
      function memoize(func, resolver) {
        if (typeof func != "function" || resolver != null && typeof resolver != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var memoized = function() {
          var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
          if (cache.has(key)) {
            return cache.get(key);
          }
          var result2 = func.apply(this, args);
          memoized.cache = cache.set(key, result2) || cache;
          return result2;
        };
        memoized.cache = new (memoize.Cache || MapCache);
        return memoized;
      }
      memoize.Cache = MapCache;
      module22.exports = memoize;
    }
  });
  var require_memoizeCapped = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_memoizeCapped.js"(exports22, module22) {
      var memoize = require_memoize();
      var MAX_MEMOIZE_SIZE = 500;
      function memoizeCapped(func) {
        var result2 = memoize(func, function(key) {
          if (cache.size === MAX_MEMOIZE_SIZE) {
            cache.clear();
          }
          return key;
        });
        var cache = result2.cache;
        return result2;
      }
      module22.exports = memoizeCapped;
    }
  });
  var require_stringToPath = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_stringToPath.js"(exports22, module22) {
      var memoizeCapped = require_memoizeCapped();
      var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reEscapeChar = /\\(\\)?/g;
      var stringToPath = memoizeCapped(function(string) {
        var result2 = [];
        if (string.charCodeAt(0) === 46) {
          result2.push("");
        }
        string.replace(rePropName, function(match, number, quote, subString) {
          result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
        });
        return result2;
      });
      module22.exports = stringToPath;
    }
  });
  var require_castPath = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_castPath.js"(exports22, module22) {
      var isArray = require_isArray();
      var isKey = require_isKey();
      var stringToPath = require_stringToPath();
      var toString = require_toString();
      function castPath(value, object) {
        if (isArray(value)) {
          return value;
        }
        return isKey(value, object) ? [value] : stringToPath(toString(value));
      }
      module22.exports = castPath;
    }
  });
  var require_toKey = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_toKey.js"(exports22, module22) {
      var isSymbol = require_isSymbol();
      var INFINITY = 1 / 0;
      function toKey(value) {
        if (typeof value == "string" || isSymbol(value)) {
          return value;
        }
        var result2 = value + "";
        return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
      }
      module22.exports = toKey;
    }
  });
  var require_baseGet = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseGet.js"(exports22, module22) {
      var castPath = require_castPath();
      var toKey = require_toKey();
      function baseGet(object, path2) {
        path2 = castPath(path2, object);
        var index = 0, length = path2.length;
        while (object != null && index < length) {
          object = object[toKey(path2[index++])];
        }
        return index && index == length ? object : undefined;
      }
      module22.exports = baseGet;
    }
  });
  var require_baseSet = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseSet.js"(exports22, module22) {
      var assignValue = require_assignValue();
      var castPath = require_castPath();
      var isIndex = require_isIndex();
      var isObject = require_isObject();
      var toKey = require_toKey();
      function baseSet(object, path2, value, customizer) {
        if (!isObject(object)) {
          return object;
        }
        path2 = castPath(path2, object);
        var index = -1, length = path2.length, lastIndex = length - 1, nested = object;
        while (nested != null && ++index < length) {
          var key = toKey(path2[index]), newValue = value;
          if (key === "__proto__" || key === "constructor" || key === "prototype") {
            return object;
          }
          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined;
            if (newValue === undefined) {
              newValue = isObject(objValue) ? objValue : isIndex(path2[index + 1]) ? [] : {};
            }
          }
          assignValue(nested, key, newValue);
          nested = nested[key];
        }
        return object;
      }
      module22.exports = baseSet;
    }
  });
  var require_basePickBy = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_basePickBy.js"(exports22, module22) {
      var baseGet = require_baseGet();
      var baseSet = require_baseSet();
      var castPath = require_castPath();
      function basePickBy(object, paths, predicate) {
        var index = -1, length = paths.length, result2 = {};
        while (++index < length) {
          var path2 = paths[index], value = baseGet(object, path2);
          if (predicate(value, path2)) {
            baseSet(result2, castPath(path2, object), value);
          }
        }
        return result2;
      }
      module22.exports = basePickBy;
    }
  });
  var require_baseHasIn = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseHasIn.js"(exports22, module22) {
      function baseHasIn(object, key) {
        return object != null && key in Object(object);
      }
      module22.exports = baseHasIn;
    }
  });
  var require_hasPath = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_hasPath.js"(exports22, module22) {
      var castPath = require_castPath();
      var isArguments = require_isArguments();
      var isArray = require_isArray();
      var isIndex = require_isIndex();
      var isLength = require_isLength();
      var toKey = require_toKey();
      function hasPath(object, path2, hasFunc) {
        path2 = castPath(path2, object);
        var index = -1, length = path2.length, result2 = false;
        while (++index < length) {
          var key = toKey(path2[index]);
          if (!(result2 = object != null && hasFunc(object, key))) {
            break;
          }
          object = object[key];
        }
        if (result2 || ++index != length) {
          return result2;
        }
        length = object == null ? 0 : object.length;
        return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
      }
      module22.exports = hasPath;
    }
  });
  var require_hasIn = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/hasIn.js"(exports22, module22) {
      var baseHasIn = require_baseHasIn();
      var hasPath = require_hasPath();
      function hasIn(object, path2) {
        return object != null && hasPath(object, path2, baseHasIn);
      }
      module22.exports = hasIn;
    }
  });
  var require_basePick = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_basePick.js"(exports22, module22) {
      var basePickBy = require_basePickBy();
      var hasIn = require_hasIn();
      function basePick(object, paths) {
        return basePickBy(object, paths, function(value, path2) {
          return hasIn(object, path2);
        });
      }
      module22.exports = basePick;
    }
  });
  var require_isFlattenable = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_isFlattenable.js"(exports22, module22) {
      var Symbol2 = require_Symbol();
      var isArguments = require_isArguments();
      var isArray = require_isArray();
      var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined;
      function isFlattenable(value) {
        return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
      }
      module22.exports = isFlattenable;
    }
  });
  var require_baseFlatten = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseFlatten.js"(exports22, module22) {
      var arrayPush = require_arrayPush();
      var isFlattenable = require_isFlattenable();
      function baseFlatten(array, depth, predicate, isStrict, result2) {
        var index = -1, length = array.length;
        predicate || (predicate = isFlattenable);
        result2 || (result2 = []);
        while (++index < length) {
          var value = array[index];
          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              baseFlatten(value, depth - 1, predicate, isStrict, result2);
            } else {
              arrayPush(result2, value);
            }
          } else if (!isStrict) {
            result2[result2.length] = value;
          }
        }
        return result2;
      }
      module22.exports = baseFlatten;
    }
  });
  var require_flatten = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/flatten.js"(exports22, module22) {
      var baseFlatten = require_baseFlatten();
      function flatten(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, 1) : [];
      }
      module22.exports = flatten;
    }
  });
  var require_flatRest = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_flatRest.js"(exports22, module22) {
      var flatten = require_flatten();
      var overRest = require_overRest();
      var setToString = require_setToString();
      function flatRest(func) {
        return setToString(overRest(func, undefined, flatten), func + "");
      }
      module22.exports = flatRest;
    }
  });
  var require_pick = __commonJS2({
    "../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/pick.js"(exports22, module22) {
      var basePick = require_basePick();
      var flatRest = require_flatRest();
      var pick = flatRest(function(object, paths) {
        return object == null ? {} : basePick(object, paths);
      });
      module22.exports = pick;
    }
  });
  var require_RunInstallPleaseResolver = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/RunInstallPleaseResolver.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.RunInstallPleaseResolver = undefined;
      var MessageName_1 = require_MessageName();
      var Report_1 = require_Report();
      var RunInstallPleaseResolver = class {
        constructor(resolver) {
          this.resolver = resolver;
        }
        supportsDescriptor(descriptor, opts) {
          return this.resolver.supportsDescriptor(descriptor, opts);
        }
        supportsLocator(locator, opts) {
          return this.resolver.supportsLocator(locator, opts);
        }
        shouldPersistResolution(locator, opts) {
          return this.resolver.shouldPersistResolution(locator, opts);
        }
        bindDescriptor(descriptor, fromLocator, opts) {
          return this.resolver.bindDescriptor(descriptor, fromLocator, opts);
        }
        getResolutionDependencies(descriptor, opts) {
          return this.resolver.getResolutionDependencies(descriptor, opts);
        }
        async getCandidates(descriptor, dependencies, opts) {
          throw new Report_1.ReportError(MessageName_1.MessageName.MISSING_LOCKFILE_ENTRY, `This package doesn't seem to be present in your lockfile; run "yarn install" to update the lockfile`);
        }
        async getSatisfying(descriptor, dependencies, locators, opts) {
          throw new Report_1.ReportError(MessageName_1.MessageName.MISSING_LOCKFILE_ENTRY, `This package doesn't seem to be present in your lockfile; run "yarn install" to update the lockfile`);
        }
        async resolve(locator, opts) {
          throw new Report_1.ReportError(MessageName_1.MessageName.MISSING_LOCKFILE_ENTRY, `This package doesn't seem to be present in your lockfile; run "yarn install" to update the lockfile`);
        }
      };
      exports22.RunInstallPleaseResolver = RunInstallPleaseResolver;
    }
  });
  var require_ThrowReport = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/ThrowReport.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.ThrowReport = undefined;
      var Report_1 = require_Report();
      var ThrowReport = class extends Report_1.Report {
        reportCacheHit(locator) {
        }
        reportCacheMiss(locator) {
        }
        startSectionSync(opts, cb) {
          return cb();
        }
        async startSectionPromise(opts, cb) {
          return await cb();
        }
        startTimerSync(what, opts, cb) {
          const realCb = typeof opts === `function` ? opts : cb;
          return realCb();
        }
        async startTimerPromise(what, opts, cb) {
          const realCb = typeof opts === `function` ? opts : cb;
          return await realCb();
        }
        reportSeparator() {
        }
        reportInfo(name, text) {
        }
        reportWarning(name, text) {
        }
        reportError(name, text) {
        }
        reportProgress(progress) {
          const promise = Promise.resolve().then(async () => {
            for await (const {} of progress) {
            }
          });
          const stop = () => {
          };
          return { ...promise, stop };
        }
        reportJson(data) {
        }
        reportFold(title, text) {
        }
        async finalize() {
        }
      };
      exports22.ThrowReport = ThrowReport;
    }
  });
  var require_Workspace = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/Workspace.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.Workspace = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var fslib_12 = require_lib();
      var fast_glob_1 = tslib_12.__importDefault(require_out4());
      var Manifest_1 = require_Manifest();
      var WorkspaceResolver_1 = require_WorkspaceResolver();
      var formatUtils = tslib_12.__importStar(require_formatUtils());
      var hashUtils = tslib_12.__importStar(require_hashUtils());
      var semverUtils = tslib_12.__importStar(require_semverUtils());
      var structUtils = tslib_12.__importStar(require_structUtils());
      var Workspace = class {
        constructor(workspaceCwd, { project }) {
          this.workspacesCwds = /* @__PURE__ */ new Set;
          this.project = project;
          this.cwd = workspaceCwd;
        }
        async setup() {
          this.manifest = await Manifest_1.Manifest.tryFind(this.cwd) ?? new Manifest_1.Manifest;
          this.relativeCwd = fslib_12.ppath.relative(this.project.cwd, this.cwd) || fslib_12.PortablePath.dot;
          const ident = this.manifest.name ? this.manifest.name : structUtils.makeIdent(null, `${this.computeCandidateName()}-${hashUtils.makeHash(this.relativeCwd).substring(0, 6)}`);
          this.anchoredDescriptor = structUtils.makeDescriptor(ident, `${WorkspaceResolver_1.WorkspaceResolver.protocol}${this.relativeCwd}`);
          this.anchoredLocator = structUtils.makeLocator(ident, `${WorkspaceResolver_1.WorkspaceResolver.protocol}${this.relativeCwd}`);
          const patterns = this.manifest.workspaceDefinitions.map(({ pattern }) => pattern);
          if (patterns.length === 0)
            return;
          const relativeCwds = await (0, fast_glob_1.default)(patterns, {
            cwd: fslib_12.npath.fromPortablePath(this.cwd),
            onlyDirectories: true,
            ignore: [`**/node_modules`, `**/.git`, `**/.yarn`]
          });
          relativeCwds.sort();
          await relativeCwds.reduce(async (previousTask, relativeCwd) => {
            const candidateCwd = fslib_12.ppath.resolve(this.cwd, fslib_12.npath.toPortablePath(relativeCwd));
            const exists = await fslib_12.xfs.existsPromise(fslib_12.ppath.join(candidateCwd, `package.json`));
            await previousTask;
            if (exists) {
              this.workspacesCwds.add(candidateCwd);
            }
          }, Promise.resolve());
        }
        get anchoredPackage() {
          const pkg = this.project.storedPackages.get(this.anchoredLocator.locatorHash);
          if (!pkg)
            throw new Error(`Assertion failed: Expected workspace ${structUtils.prettyWorkspace(this.project.configuration, this)} (${formatUtils.pretty(this.project.configuration, fslib_12.ppath.join(this.cwd, fslib_12.Filename.manifest), formatUtils.Type.PATH)}) to have been resolved. Run "yarn install" to update the lockfile`);
          return pkg;
        }
        accepts(range) {
          const protocolIndex = range.indexOf(`:`);
          const protocol = protocolIndex !== -1 ? range.slice(0, protocolIndex + 1) : null;
          const pathname = protocolIndex !== -1 ? range.slice(protocolIndex + 1) : range;
          if (protocol === WorkspaceResolver_1.WorkspaceResolver.protocol && fslib_12.ppath.normalize(pathname) === this.relativeCwd)
            return true;
          if (protocol === WorkspaceResolver_1.WorkspaceResolver.protocol && (pathname === `*` || pathname === `^` || pathname === `~`))
            return true;
          const semverRange = semverUtils.validRange(pathname);
          if (!semverRange)
            return false;
          if (protocol === WorkspaceResolver_1.WorkspaceResolver.protocol)
            return semverRange.test(this.manifest.version ?? `0.0.0`);
          if (!this.project.configuration.get(`enableTransparentWorkspaces`))
            return false;
          if (this.manifest.version !== null)
            return semverRange.test(this.manifest.version);
          return false;
        }
        computeCandidateName() {
          if (this.cwd === this.project.cwd) {
            return `root-workspace`;
          } else {
            return `${fslib_12.ppath.basename(this.cwd)}` || `unnamed-workspace`;
          }
        }
        getRecursiveWorkspaceDependencies({ dependencies = Manifest_1.Manifest.hardDependencies } = {}) {
          const workspaceList = /* @__PURE__ */ new Set;
          const visitWorkspace = (workspace) => {
            for (const dependencyType of dependencies) {
              for (const descriptor of workspace.manifest[dependencyType].values()) {
                const foundWorkspace = this.project.tryWorkspaceByDescriptor(descriptor);
                if (foundWorkspace === null || workspaceList.has(foundWorkspace))
                  continue;
                workspaceList.add(foundWorkspace);
                visitWorkspace(foundWorkspace);
              }
            }
          };
          visitWorkspace(this);
          return workspaceList;
        }
        getRecursiveWorkspaceDependents({ dependencies = Manifest_1.Manifest.hardDependencies } = {}) {
          const workspaceList = /* @__PURE__ */ new Set;
          const visitWorkspace = (workspace) => {
            for (const projectWorkspace of this.project.workspaces) {
              const isDependent = dependencies.some((dependencyType) => {
                return [...projectWorkspace.manifest[dependencyType].values()].some((descriptor) => {
                  const foundWorkspace = this.project.tryWorkspaceByDescriptor(descriptor);
                  return foundWorkspace !== null && structUtils.areLocatorsEqual(foundWorkspace.anchoredLocator, workspace.anchoredLocator);
                });
              });
              if (isDependent && !workspaceList.has(projectWorkspace)) {
                workspaceList.add(projectWorkspace);
                visitWorkspace(projectWorkspace);
              }
            }
          };
          visitWorkspace(this);
          return workspaceList;
        }
        getRecursiveWorkspaceChildren() {
          const workspaceSet = /* @__PURE__ */ new Set([this]);
          for (const workspace of workspaceSet) {
            for (const childWorkspaceCwd of workspace.workspacesCwds) {
              const childWorkspace = this.project.workspacesByCwd.get(childWorkspaceCwd);
              if (childWorkspace) {
                workspaceSet.add(childWorkspace);
              }
            }
          }
          workspaceSet.delete(this);
          return Array.from(workspaceSet);
        }
        async persistManifest() {
          const data = {};
          this.manifest.exportTo(data);
          const path2 = fslib_12.ppath.join(this.cwd, Manifest_1.Manifest.fileName);
          const content = `${JSON.stringify(data, null, this.manifest.indent)}
`;
          await fslib_12.xfs.changeFilePromise(path2, content, {
            automaticNewlines: true
          });
          this.manifest.raw = data;
        }
      };
      exports22.Workspace = Workspace;
    }
  });
  var require_Project = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/Project.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.Project = exports22.PeerWarningType = exports22.InstallMode = exports22.LOCKFILE_VERSION = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var fslib_12 = require_lib();
      var fslib_2 = require_lib();
      var parsers_1 = require_lib2();
      var clipanion_12 = require_advanced();
      var crypto_1 = __require("crypto");
      var diff_1 = require_lib5();
      var pick_1 = tslib_12.__importDefault(require_pick());
      var p_limit_12 = tslib_12.__importDefault(require_p_limit());
      var semver_12 = tslib_12.__importDefault(require_semver2());
      var util_1 = __require("util");
      var v8_1 = tslib_12.__importDefault(__require("v8"));
      var zlib_1 = tslib_12.__importDefault(__require("zlib"));
      var Cache_1 = require_Cache();
      var Configuration_1 = require_Configuration();
      var Installer_1 = require_Installer();
      var LegacyMigrationResolver_1 = require_LegacyMigrationResolver();
      var LockfileResolver_1 = require_LockfileResolver();
      var Manifest_1 = require_Manifest();
      var MessageName_1 = require_MessageName();
      var MultiResolver_1 = require_MultiResolver();
      var Report_1 = require_Report();
      var RunInstallPleaseResolver_1 = require_RunInstallPleaseResolver();
      var StreamReport_1 = require_StreamReport();
      var ThrowReport_1 = require_ThrowReport();
      var WorkspaceResolver_1 = require_WorkspaceResolver();
      var Workspace_1 = require_Workspace();
      var folderUtils_1 = require_folderUtils();
      var formatUtils = tslib_12.__importStar(require_formatUtils());
      var hashUtils = tslib_12.__importStar(require_hashUtils());
      var miscUtils = tslib_12.__importStar(require_miscUtils());
      var nodeUtils = tslib_12.__importStar(require_nodeUtils());
      var scriptUtils = tslib_12.__importStar(require_scriptUtils());
      var semverUtils = tslib_12.__importStar(require_semverUtils());
      var structUtils = tslib_12.__importStar(require_structUtils());
      var types_1 = require_types();
      var types_2 = require_types();
      exports22.LOCKFILE_VERSION = miscUtils.parseInt(process.env.YARN_LOCKFILE_VERSION_OVERRIDE ?? 8);
      var INSTALL_STATE_VERSION = 3;
      var MULTIPLE_KEYS_REGEXP = / *, */g;
      var TRAILING_SLASH_REGEXP = /\/$/;
      var FETCHER_CONCURRENCY = 32;
      var gzip = (0, util_1.promisify)(zlib_1.default.gzip);
      var gunzip = (0, util_1.promisify)(zlib_1.default.gunzip);
      var InstallMode;
      (function(InstallMode2) {
        InstallMode2["UpdateLockfile"] = "update-lockfile";
        InstallMode2["SkipBuild"] = "skip-build";
      })(InstallMode || (exports22.InstallMode = InstallMode = {}));
      var INSTALL_STATE_FIELDS = {
        restoreLinkersCustomData: [
          `linkersCustomData`
        ],
        restoreResolutions: [
          `accessibleLocators`,
          `conditionalLocators`,
          `disabledLocators`,
          `optionalBuilds`,
          `storedDescriptors`,
          `storedResolutions`,
          `storedPackages`,
          `lockFileChecksum`
        ],
        restoreBuildState: [
          `skippedBuilds`,
          `storedBuildState`
        ]
      };
      var PeerWarningType;
      (function(PeerWarningType2) {
        PeerWarningType2[PeerWarningType2["NotProvided"] = 0] = "NotProvided";
        PeerWarningType2[PeerWarningType2["NotCompatible"] = 1] = "NotCompatible";
        PeerWarningType2[PeerWarningType2["NodeNotProvided"] = 2] = "NodeNotProvided";
        PeerWarningType2[PeerWarningType2["NodeNotCompatible"] = 3] = "NodeNotCompatible";
      })(PeerWarningType || (exports22.PeerWarningType = PeerWarningType = {}));
      var makeLockfileChecksum = (normalizedContent) => hashUtils.makeHash(`${INSTALL_STATE_VERSION}`, normalizedContent);
      var Project2 = class _Project {
        static async find(configuration, startingCwd) {
          if (!configuration.projectCwd)
            throw new clipanion_12.UsageError(`No project found in ${startingCwd}`);
          let packageCwd = configuration.projectCwd;
          let nextCwd = startingCwd;
          let currentCwd = null;
          while (currentCwd !== configuration.projectCwd) {
            currentCwd = nextCwd;
            if (fslib_2.xfs.existsSync(fslib_2.ppath.join(currentCwd, fslib_2.Filename.manifest))) {
              packageCwd = currentCwd;
              break;
            }
            nextCwd = fslib_2.ppath.dirname(currentCwd);
          }
          const project = new _Project(configuration.projectCwd, { configuration });
          Configuration_1.Configuration.telemetry?.reportProject(project.cwd);
          await project.setupResolutions();
          await project.setupWorkspaces();
          Configuration_1.Configuration.telemetry?.reportWorkspaceCount(project.workspaces.length);
          Configuration_1.Configuration.telemetry?.reportDependencyCount(project.workspaces.reduce((sum, workspace2) => sum + workspace2.manifest.dependencies.size + workspace2.manifest.devDependencies.size, 0));
          const workspace = project.tryWorkspaceByCwd(packageCwd);
          if (workspace)
            return { project, workspace, locator: workspace.anchoredLocator };
          const locator = await project.findLocatorForLocation(`${packageCwd}/`, { strict: true });
          if (locator)
            return { project, locator, workspace: null };
          const projectCwdLog = formatUtils.pretty(configuration, project.cwd, formatUtils.Type.PATH);
          const packageCwdLog = formatUtils.pretty(configuration, fslib_2.ppath.relative(project.cwd, packageCwd), formatUtils.Type.PATH);
          const unintendedProjectLog = `- If ${projectCwdLog} isn't intended to be a project, remove any yarn.lock and/or package.json file there.`;
          const missingWorkspaceLog = `- If ${projectCwdLog} is intended to be a project, it might be that you forgot to list ${packageCwdLog} in its workspace configuration.`;
          const decorrelatedProjectLog = `- Finally, if ${projectCwdLog} is fine and you intend ${packageCwdLog} to be treated as a completely separate project (not even a workspace), create an empty yarn.lock file in it.`;
          throw new clipanion_12.UsageError(`The nearest package directory (${formatUtils.pretty(configuration, packageCwd, formatUtils.Type.PATH)}) doesn't seem to be part of the project declared in ${formatUtils.pretty(configuration, project.cwd, formatUtils.Type.PATH)}.

${[
            unintendedProjectLog,
            missingWorkspaceLog,
            decorrelatedProjectLog
          ].join(`
`)}`);
        }
        constructor(projectCwd, { configuration }) {
          this.resolutionAliases = /* @__PURE__ */ new Map;
          this.workspaces = [];
          this.workspacesByCwd = /* @__PURE__ */ new Map;
          this.workspacesByIdent = /* @__PURE__ */ new Map;
          this.storedResolutions = /* @__PURE__ */ new Map;
          this.storedDescriptors = /* @__PURE__ */ new Map;
          this.storedPackages = /* @__PURE__ */ new Map;
          this.storedChecksums = /* @__PURE__ */ new Map;
          this.storedBuildState = /* @__PURE__ */ new Map;
          this.accessibleLocators = /* @__PURE__ */ new Set;
          this.conditionalLocators = /* @__PURE__ */ new Set;
          this.disabledLocators = /* @__PURE__ */ new Set;
          this.originalPackages = /* @__PURE__ */ new Map;
          this.optionalBuilds = /* @__PURE__ */ new Set;
          this.skippedBuilds = /* @__PURE__ */ new Set;
          this.lockfileLastVersion = null;
          this.lockfileNeedsRefresh = false;
          this.peerRequirements = /* @__PURE__ */ new Map;
          this.peerWarnings = [];
          this.peerRequirementNodes = /* @__PURE__ */ new Map;
          this.linkersCustomData = /* @__PURE__ */ new Map;
          this.lockFileChecksum = null;
          this.installStateChecksum = null;
          this.configuration = configuration;
          this.cwd = projectCwd;
        }
        async setupResolutions() {
          this.storedResolutions = /* @__PURE__ */ new Map;
          this.storedDescriptors = /* @__PURE__ */ new Map;
          this.storedPackages = /* @__PURE__ */ new Map;
          this.lockFileChecksum = null;
          const lockfilePath = fslib_2.ppath.join(this.cwd, fslib_2.Filename.lockfile);
          const defaultLanguageName = this.configuration.get(`defaultLanguageName`);
          if (fslib_2.xfs.existsSync(lockfilePath)) {
            const content = await fslib_2.xfs.readFilePromise(lockfilePath, `utf8`);
            this.lockFileChecksum = makeLockfileChecksum(content);
            const parsed = (0, parsers_1.parseSyml)(content);
            if (parsed.__metadata) {
              const lockfileVersion = parsed.__metadata.version;
              const cacheKey = parsed.__metadata.cacheKey;
              this.lockfileLastVersion = lockfileVersion;
              this.lockfileNeedsRefresh = lockfileVersion < exports22.LOCKFILE_VERSION;
              for (const key of Object.keys(parsed)) {
                if (key === `__metadata`)
                  continue;
                const data = parsed[key];
                if (typeof data.resolution === `undefined`)
                  throw new Error(`Assertion failed: Expected the lockfile entry to have a resolution field (${key})`);
                const locator = structUtils.parseLocator(data.resolution, true);
                const manifest = new Manifest_1.Manifest;
                manifest.load(data, { yamlCompatibilityMode: true });
                const version = manifest.version;
                const languageName = manifest.languageName || defaultLanguageName;
                const linkType = data.linkType.toUpperCase();
                const conditions = data.conditions ?? null;
                const dependencies = manifest.dependencies;
                const peerDependencies = manifest.peerDependencies;
                const dependenciesMeta = manifest.dependenciesMeta;
                const peerDependenciesMeta = manifest.peerDependenciesMeta;
                const bin = manifest.bin;
                if (data.checksum != null) {
                  const checksum = typeof cacheKey !== `undefined` && !data.checksum.includes(`/`) ? `${cacheKey}/${data.checksum}` : data.checksum;
                  this.storedChecksums.set(locator.locatorHash, checksum);
                }
                const pkg = { ...locator, version, languageName, linkType, conditions, dependencies, peerDependencies, dependenciesMeta, peerDependenciesMeta, bin };
                this.originalPackages.set(pkg.locatorHash, pkg);
                for (const entry of key.split(MULTIPLE_KEYS_REGEXP)) {
                  let descriptor = structUtils.parseDescriptor(entry);
                  if (lockfileVersion <= 6) {
                    descriptor = this.configuration.normalizeDependency(descriptor);
                    descriptor = structUtils.makeDescriptor(descriptor, descriptor.range.replace(/^patch:[^@]+@(?!npm(:|%3A))/, `$1npm%3A`));
                  }
                  this.storedDescriptors.set(descriptor.descriptorHash, descriptor);
                  this.storedResolutions.set(descriptor.descriptorHash, locator.locatorHash);
                }
              }
            } else if (content.includes(`yarn lockfile v1`)) {
              this.lockfileLastVersion = -1;
            }
          }
        }
        async setupWorkspaces() {
          this.workspaces = [];
          this.workspacesByCwd = /* @__PURE__ */ new Map;
          this.workspacesByIdent = /* @__PURE__ */ new Map;
          const pathsChecked = /* @__PURE__ */ new Set;
          const limitSetup = (0, p_limit_12.default)(4);
          const loadWorkspaceReducer = async (previousTask, workspaceCwd) => {
            if (pathsChecked.has(workspaceCwd))
              return previousTask;
            pathsChecked.add(workspaceCwd);
            const workspace = new Workspace_1.Workspace(workspaceCwd, { project: this });
            await limitSetup(() => workspace.setup());
            const nextTask = previousTask.then(() => {
              this.addWorkspace(workspace);
            });
            return Array.from(workspace.workspacesCwds).reduce(loadWorkspaceReducer, nextTask);
          };
          await loadWorkspaceReducer(Promise.resolve(), this.cwd);
        }
        addWorkspace(workspace) {
          const dup = this.workspacesByIdent.get(workspace.anchoredLocator.identHash);
          if (typeof dup !== `undefined`)
            throw new Error(`Duplicate workspace name ${structUtils.prettyIdent(this.configuration, workspace.anchoredLocator)}: ${fslib_12.npath.fromPortablePath(workspace.cwd)} conflicts with ${fslib_12.npath.fromPortablePath(dup.cwd)}`);
          this.workspaces.push(workspace);
          this.workspacesByCwd.set(workspace.cwd, workspace);
          this.workspacesByIdent.set(workspace.anchoredLocator.identHash, workspace);
        }
        get topLevelWorkspace() {
          return this.getWorkspaceByCwd(this.cwd);
        }
        tryWorkspaceByCwd(workspaceCwd) {
          if (!fslib_2.ppath.isAbsolute(workspaceCwd))
            workspaceCwd = fslib_2.ppath.resolve(this.cwd, workspaceCwd);
          workspaceCwd = fslib_2.ppath.normalize(workspaceCwd).replace(/\/+$/, ``);
          const workspace = this.workspacesByCwd.get(workspaceCwd);
          if (!workspace)
            return null;
          return workspace;
        }
        getWorkspaceByCwd(workspaceCwd) {
          const workspace = this.tryWorkspaceByCwd(workspaceCwd);
          if (!workspace)
            throw new Error(`Workspace not found (${workspaceCwd})`);
          return workspace;
        }
        tryWorkspaceByFilePath(filePath) {
          let bestWorkspace = null;
          for (const workspace of this.workspaces) {
            const rel = fslib_2.ppath.relative(workspace.cwd, filePath);
            if (rel.startsWith(`../`))
              continue;
            if (bestWorkspace && bestWorkspace.cwd.length >= workspace.cwd.length)
              continue;
            bestWorkspace = workspace;
          }
          if (!bestWorkspace)
            return null;
          return bestWorkspace;
        }
        getWorkspaceByFilePath(filePath) {
          const workspace = this.tryWorkspaceByFilePath(filePath);
          if (!workspace)
            throw new Error(`Workspace not found (${filePath})`);
          return workspace;
        }
        tryWorkspaceByIdent(ident) {
          const workspace = this.workspacesByIdent.get(ident.identHash);
          if (typeof workspace === `undefined`)
            return null;
          return workspace;
        }
        getWorkspaceByIdent(ident) {
          const workspace = this.tryWorkspaceByIdent(ident);
          if (!workspace)
            throw new Error(`Workspace not found (${structUtils.prettyIdent(this.configuration, ident)})`);
          return workspace;
        }
        tryWorkspaceByDescriptor(descriptor) {
          if (descriptor.range.startsWith(WorkspaceResolver_1.WorkspaceResolver.protocol)) {
            const specifier = descriptor.range.slice(WorkspaceResolver_1.WorkspaceResolver.protocol.length);
            if (specifier !== `^` && specifier !== `~` && specifier !== `*` && !semverUtils.validRange(specifier)) {
              return this.tryWorkspaceByCwd(specifier);
            }
          }
          const workspace = this.tryWorkspaceByIdent(descriptor);
          if (workspace === null)
            return null;
          if (structUtils.isVirtualDescriptor(descriptor))
            descriptor = structUtils.devirtualizeDescriptor(descriptor);
          if (!workspace.accepts(descriptor.range))
            return null;
          return workspace;
        }
        getWorkspaceByDescriptor(descriptor) {
          const workspace = this.tryWorkspaceByDescriptor(descriptor);
          if (workspace === null)
            throw new Error(`Workspace not found (${structUtils.prettyDescriptor(this.configuration, descriptor)})`);
          return workspace;
        }
        tryWorkspaceByLocator(locator) {
          const workspace = this.tryWorkspaceByIdent(locator);
          if (workspace === null)
            return null;
          if (structUtils.isVirtualLocator(locator))
            locator = structUtils.devirtualizeLocator(locator);
          if (workspace.anchoredLocator.locatorHash !== locator.locatorHash)
            return null;
          return workspace;
        }
        getWorkspaceByLocator(locator) {
          const workspace = this.tryWorkspaceByLocator(locator);
          if (!workspace)
            throw new Error(`Workspace not found (${structUtils.prettyLocator(this.configuration, locator)})`);
          return workspace;
        }
        deleteDescriptor(descriptorHash) {
          this.storedResolutions.delete(descriptorHash);
          this.storedDescriptors.delete(descriptorHash);
        }
        deleteLocator(locatorHash) {
          this.originalPackages.delete(locatorHash);
          this.storedPackages.delete(locatorHash);
          this.accessibleLocators.delete(locatorHash);
        }
        forgetResolution(dataStructure) {
          if (`descriptorHash` in dataStructure) {
            const locatorHash = this.storedResolutions.get(dataStructure.descriptorHash);
            this.deleteDescriptor(dataStructure.descriptorHash);
            const remainingResolutions = new Set(this.storedResolutions.values());
            if (typeof locatorHash !== `undefined` && !remainingResolutions.has(locatorHash)) {
              this.deleteLocator(locatorHash);
            }
          }
          if (`locatorHash` in dataStructure) {
            this.deleteLocator(dataStructure.locatorHash);
            for (const [descriptorHash, locatorHash] of this.storedResolutions) {
              if (locatorHash === dataStructure.locatorHash) {
                this.deleteDescriptor(descriptorHash);
              }
            }
          }
        }
        forgetTransientResolutions() {
          const resolver = this.configuration.makeResolver();
          const reverseLookup = /* @__PURE__ */ new Map;
          for (const [descriptorHash, locatorHash] of this.storedResolutions.entries()) {
            let descriptorHashes = reverseLookup.get(locatorHash);
            if (!descriptorHashes)
              reverseLookup.set(locatorHash, descriptorHashes = /* @__PURE__ */ new Set);
            descriptorHashes.add(descriptorHash);
          }
          for (const pkg of this.originalPackages.values()) {
            let shouldPersistResolution;
            try {
              shouldPersistResolution = resolver.shouldPersistResolution(pkg, { project: this, resolver });
            } catch {
              shouldPersistResolution = false;
            }
            if (!shouldPersistResolution) {
              this.deleteLocator(pkg.locatorHash);
              const descriptors = reverseLookup.get(pkg.locatorHash);
              if (descriptors) {
                reverseLookup.delete(pkg.locatorHash);
                for (const descriptorHash of descriptors) {
                  this.deleteDescriptor(descriptorHash);
                }
              }
            }
          }
        }
        forgetVirtualResolutions() {
          for (const pkg of this.storedPackages.values()) {
            for (const [dependencyHash, dependency] of pkg.dependencies) {
              if (structUtils.isVirtualDescriptor(dependency)) {
                pkg.dependencies.set(dependencyHash, structUtils.devirtualizeDescriptor(dependency));
              }
            }
          }
        }
        getDependencyMeta(ident, version) {
          const dependencyMeta = {};
          const dependenciesMeta = this.topLevelWorkspace.manifest.dependenciesMeta;
          const dependencyMetaSet = dependenciesMeta.get(structUtils.stringifyIdent(ident));
          if (!dependencyMetaSet)
            return dependencyMeta;
          const defaultMeta = dependencyMetaSet.get(null);
          if (defaultMeta)
            Object.assign(dependencyMeta, defaultMeta);
          if (version === null || !semver_12.default.valid(version))
            return dependencyMeta;
          for (const [range, meta] of dependencyMetaSet)
            if (range !== null && range === version)
              Object.assign(dependencyMeta, meta);
          return dependencyMeta;
        }
        async findLocatorForLocation(cwd, { strict = false } = {}) {
          const report = new ThrowReport_1.ThrowReport;
          const linkers = this.configuration.getLinkers();
          const linkerOptions = { project: this, report };
          for (const linker of linkers) {
            const locator = await linker.findPackageLocator(cwd, linkerOptions);
            if (locator) {
              if (strict) {
                const location = await linker.findPackageLocation(locator, linkerOptions);
                if (location.replace(TRAILING_SLASH_REGEXP, ``) !== cwd.replace(TRAILING_SLASH_REGEXP, ``)) {
                  continue;
                }
              }
              return locator;
            }
          }
          return null;
        }
        async loadUserConfig() {
          const pnpPath = fslib_2.ppath.join(this.cwd, `.pnp.cjs`);
          if (await fslib_2.xfs.existsPromise(pnpPath))
            miscUtils.dynamicRequire(pnpPath).setup();
          const configPath = fslib_2.ppath.join(this.cwd, `yarn.config.cjs`);
          if (!await fslib_2.xfs.existsPromise(configPath))
            return null;
          return miscUtils.dynamicRequire(configPath);
        }
        async preparePackage(originalPkg, { resolver, resolveOptions }) {
          const packageExtensions = await this.configuration.getPackageExtensions();
          const pkg = this.configuration.normalizePackage(originalPkg, { packageExtensions });
          for (const [identHash, descriptor] of pkg.dependencies) {
            const dependency = await this.configuration.reduceHook((hooks) => {
              return hooks.reduceDependency;
            }, descriptor, this, pkg, descriptor, {
              resolver,
              resolveOptions
            });
            if (!structUtils.areIdentsEqual(descriptor, dependency))
              throw new Error(`Assertion failed: The descriptor ident cannot be changed through aliases`);
            const bound = resolver.bindDescriptor(dependency, pkg, resolveOptions);
            pkg.dependencies.set(identHash, bound);
          }
          return pkg;
        }
        async resolveEverything(opts) {
          if (!this.workspacesByCwd || !this.workspacesByIdent)
            throw new Error(`Workspaces must have been setup before calling this function`);
          this.forgetVirtualResolutions();
          const initialPackages = new Map(this.originalPackages);
          const addedPackages = [];
          if (!opts.lockfileOnly)
            this.forgetTransientResolutions();
          const realResolver = opts.resolver || this.configuration.makeResolver();
          const legacyMigrationResolver = new LegacyMigrationResolver_1.LegacyMigrationResolver(realResolver);
          await legacyMigrationResolver.setup(this, { report: opts.report });
          const resolverChain = opts.lockfileOnly ? [new RunInstallPleaseResolver_1.RunInstallPleaseResolver(realResolver)] : [legacyMigrationResolver, realResolver];
          const resolver = new MultiResolver_1.MultiResolver([
            new LockfileResolver_1.LockfileResolver(realResolver),
            ...resolverChain
          ]);
          const noLockfileResolver = new MultiResolver_1.MultiResolver([
            ...resolverChain
          ]);
          const fetcher = this.configuration.makeFetcher();
          const resolveOptions = opts.lockfileOnly ? { project: this, report: opts.report, resolver } : { project: this, report: opts.report, resolver, fetchOptions: { project: this, cache: opts.cache, checksums: this.storedChecksums, report: opts.report, fetcher, cacheOptions: { mirrorWriteOnly: true } } };
          const allDescriptors = /* @__PURE__ */ new Map;
          const allPackages = /* @__PURE__ */ new Map;
          const allResolutions = /* @__PURE__ */ new Map;
          const originalPackages = /* @__PURE__ */ new Map;
          const packageResolutionPromises = /* @__PURE__ */ new Map;
          const descriptorResolutionPromises = /* @__PURE__ */ new Map;
          const dependencyResolutionLocator = this.topLevelWorkspace.anchoredLocator;
          const resolutionDependencies = /* @__PURE__ */ new Set;
          const resolutionQueue = [];
          const currentArchitecture = nodeUtils.getArchitectureSet();
          const supportedArchitectures = this.configuration.getSupportedArchitectures();
          await opts.report.startProgressPromise(Report_1.Report.progressViaTitle(), async (progress) => {
            const startPackageResolution = async (locator) => {
              const originalPkg = await miscUtils.prettifyAsyncErrors(async () => {
                return await resolver.resolve(locator, resolveOptions);
              }, (message) => {
                return `${structUtils.prettyLocator(this.configuration, locator)}: ${message}`;
              });
              if (!structUtils.areLocatorsEqual(locator, originalPkg))
                throw new Error(`Assertion failed: The locator cannot be changed by the resolver (went from ${structUtils.prettyLocator(this.configuration, locator)} to ${structUtils.prettyLocator(this.configuration, originalPkg)})`);
              originalPackages.set(originalPkg.locatorHash, originalPkg);
              const existedBefore = initialPackages.delete(originalPkg.locatorHash);
              if (!existedBefore && !this.tryWorkspaceByLocator(originalPkg))
                addedPackages.push(originalPkg);
              const pkg = await this.preparePackage(originalPkg, { resolver, resolveOptions });
              const dependencyResolutions = miscUtils.allSettledSafe([...pkg.dependencies.values()].map((descriptor) => {
                return scheduleDescriptorResolution(descriptor);
              }));
              resolutionQueue.push(dependencyResolutions);
              dependencyResolutions.catch(() => {
              });
              allPackages.set(pkg.locatorHash, pkg);
              return pkg;
            };
            const schedulePackageResolution = async (locator) => {
              const promise = packageResolutionPromises.get(locator.locatorHash);
              if (typeof promise !== `undefined`)
                return promise;
              const newPromise = Promise.resolve().then(() => startPackageResolution(locator));
              packageResolutionPromises.set(locator.locatorHash, newPromise);
              return newPromise;
            };
            const startDescriptorAliasing = async (descriptor, alias) => {
              const resolution = await scheduleDescriptorResolution(alias);
              allDescriptors.set(descriptor.descriptorHash, descriptor);
              allResolutions.set(descriptor.descriptorHash, resolution.locatorHash);
              return resolution;
            };
            const startDescriptorResolution = async (descriptor) => {
              progress.setTitle(structUtils.prettyDescriptor(this.configuration, descriptor));
              const alias = this.resolutionAliases.get(descriptor.descriptorHash);
              if (typeof alias !== `undefined`)
                return startDescriptorAliasing(descriptor, this.storedDescriptors.get(alias));
              const resolutionDependenciesList = resolver.getResolutionDependencies(descriptor, resolveOptions);
              const resolvedDependencies = Object.fromEntries(await miscUtils.allSettledSafe(Object.entries(resolutionDependenciesList).map(async ([dependencyName, dependency]) => {
                const bound = resolver.bindDescriptor(dependency, dependencyResolutionLocator, resolveOptions);
                const resolvedPackage = await scheduleDescriptorResolution(bound);
                resolutionDependencies.add(resolvedPackage.locatorHash);
                return [dependencyName, resolvedPackage];
              })));
              const candidateResolutions = await miscUtils.prettifyAsyncErrors(async () => {
                return await resolver.getCandidates(descriptor, resolvedDependencies, resolveOptions);
              }, (message) => {
                return `${structUtils.prettyDescriptor(this.configuration, descriptor)}: ${message}`;
              });
              const finalResolution = candidateResolutions[0];
              if (typeof finalResolution === `undefined`)
                throw new Report_1.ReportError(MessageName_1.MessageName.RESOLUTION_FAILED, `${structUtils.prettyDescriptor(this.configuration, descriptor)}: No candidates found`);
              if (opts.checkResolutions) {
                const { locators } = await noLockfileResolver.getSatisfying(descriptor, resolvedDependencies, [finalResolution], { ...resolveOptions, resolver: noLockfileResolver });
                if (!locators.find((locator) => locator.locatorHash === finalResolution.locatorHash)) {
                  throw new Report_1.ReportError(MessageName_1.MessageName.RESOLUTION_MISMATCH, `Invalid resolution ${structUtils.prettyResolution(this.configuration, descriptor, finalResolution)}`);
                }
              }
              allDescriptors.set(descriptor.descriptorHash, descriptor);
              allResolutions.set(descriptor.descriptorHash, finalResolution.locatorHash);
              return schedulePackageResolution(finalResolution);
            };
            const scheduleDescriptorResolution = (descriptor) => {
              const promise = descriptorResolutionPromises.get(descriptor.descriptorHash);
              if (typeof promise !== `undefined`)
                return promise;
              allDescriptors.set(descriptor.descriptorHash, descriptor);
              const newPromise = Promise.resolve().then(() => startDescriptorResolution(descriptor));
              descriptorResolutionPromises.set(descriptor.descriptorHash, newPromise);
              return newPromise;
            };
            for (const workspace of this.workspaces) {
              const workspaceDescriptor = workspace.anchoredDescriptor;
              resolutionQueue.push(scheduleDescriptorResolution(workspaceDescriptor));
            }
            while (resolutionQueue.length > 0) {
              const copy = [...resolutionQueue];
              resolutionQueue.length = 0;
              await miscUtils.allSettledSafe(copy);
            }
          });
          const removedPackages = miscUtils.mapAndFilter(initialPackages.values(), (pkg) => {
            if (this.tryWorkspaceByLocator(pkg))
              return miscUtils.mapAndFilter.skip;
            return pkg;
          });
          if (addedPackages.length > 0 || removedPackages.length > 0) {
            const topLevelResolutions = new Set(this.workspaces.flatMap((workspace) => {
              const workspacePkg = allPackages.get(workspace.anchoredLocator.locatorHash);
              if (!workspacePkg)
                throw new Error(`Assertion failed: The workspace should have been resolved`);
              return Array.from(workspacePkg.dependencies.values(), (descriptor) => {
                const resolution = allResolutions.get(descriptor.descriptorHash);
                if (!resolution)
                  throw new Error(`Assertion failed: The resolution should have been registered`);
                return resolution;
              });
            }));
            const sortTopLevelFirst = (locator) => topLevelResolutions.has(locator.locatorHash) ? `0` : `1`;
            const sortByLocatorString = (locator) => structUtils.stringifyLocator(locator);
            const sortedAddedPackages = miscUtils.sortMap(addedPackages, [sortTopLevelFirst, sortByLocatorString]);
            const sortedRemovedPackages = miscUtils.sortMap(removedPackages, [sortTopLevelFirst, sortByLocatorString]);
            const recommendedLength = opts.report.getRecommendedLength();
            if (sortedAddedPackages.length > 0)
              opts.report.reportInfo(MessageName_1.MessageName.UPDATED_RESOLUTION_RECORD, `${formatUtils.pretty(this.configuration, `+`, formatUtils.Type.ADDED)} ${formatUtils.prettyTruncatedLocatorList(this.configuration, sortedAddedPackages, recommendedLength)}`);
            if (sortedRemovedPackages.length > 0) {
              opts.report.reportInfo(MessageName_1.MessageName.UPDATED_RESOLUTION_RECORD, `${formatUtils.pretty(this.configuration, `-`, formatUtils.Type.REMOVED)} ${formatUtils.prettyTruncatedLocatorList(this.configuration, sortedRemovedPackages, recommendedLength)}`);
            }
          }
          const volatileDescriptors = new Set(this.resolutionAliases.values());
          const optionalBuilds = new Set(allPackages.keys());
          const accessibleLocators = /* @__PURE__ */ new Set;
          const peerRequirements = /* @__PURE__ */ new Map;
          const peerWarnings = [];
          const peerRequirementNodes = /* @__PURE__ */ new Map;
          applyVirtualResolutionMutations({
            project: this,
            accessibleLocators,
            volatileDescriptors,
            optionalBuilds,
            peerRequirements,
            peerWarnings,
            peerRequirementNodes,
            allDescriptors,
            allResolutions,
            allPackages
          });
          for (const locatorHash of resolutionDependencies)
            optionalBuilds.delete(locatorHash);
          for (const descriptorHash of volatileDescriptors) {
            allDescriptors.delete(descriptorHash);
            allResolutions.delete(descriptorHash);
          }
          const conditionalLocators = /* @__PURE__ */ new Set;
          const disabledLocators = /* @__PURE__ */ new Set;
          for (const pkg of allPackages.values()) {
            if (pkg.conditions == null)
              continue;
            if (!optionalBuilds.has(pkg.locatorHash))
              continue;
            if (!structUtils.isPackageCompatible(pkg, supportedArchitectures)) {
              if (structUtils.isPackageCompatible(pkg, currentArchitecture)) {
                opts.report.reportWarningOnce(MessageName_1.MessageName.GHOST_ARCHITECTURE, `${structUtils.prettyLocator(this.configuration, pkg)}: Your current architecture (${process.platform}-${process.arch}) is supported by this package, but is missing from the ${formatUtils.pretty(this.configuration, `supportedArchitectures`, formatUtils.Type.SETTING)} setting`);
              }
              disabledLocators.add(pkg.locatorHash);
            }
            conditionalLocators.add(pkg.locatorHash);
          }
          this.storedResolutions = allResolutions;
          this.storedDescriptors = allDescriptors;
          this.storedPackages = allPackages;
          this.accessibleLocators = accessibleLocators;
          this.conditionalLocators = conditionalLocators;
          this.disabledLocators = disabledLocators;
          this.originalPackages = originalPackages;
          this.optionalBuilds = optionalBuilds;
          this.peerRequirements = peerRequirements;
          this.peerWarnings = peerWarnings;
          this.peerRequirementNodes = peerRequirementNodes;
        }
        async fetchEverything({ cache, report, fetcher: userFetcher, mode, persistProject = true }) {
          const cacheOptions = {
            mockedPackages: this.disabledLocators,
            unstablePackages: this.conditionalLocators
          };
          const fetcher = userFetcher || this.configuration.makeFetcher();
          const fetcherOptions = { checksums: this.storedChecksums, project: this, cache, fetcher, report, cacheOptions };
          let locatorHashes = Array.from(new Set(miscUtils.sortMap(this.storedResolutions.values(), [
            (locatorHash) => {
              const pkg = this.storedPackages.get(locatorHash);
              if (!pkg)
                throw new Error(`Assertion failed: The locator should have been registered`);
              return structUtils.stringifyLocator(pkg);
            }
          ])));
          if (mode === InstallMode.UpdateLockfile)
            locatorHashes = locatorHashes.filter((locatorHash) => !this.storedChecksums.has(locatorHash));
          let firstError = false;
          const progress = Report_1.Report.progressViaCounter(locatorHashes.length);
          await report.reportProgress(progress);
          const limit = (0, p_limit_12.default)(FETCHER_CONCURRENCY);
          await miscUtils.allSettledSafe(locatorHashes.map((locatorHash) => limit(async () => {
            const pkg = this.storedPackages.get(locatorHash);
            if (!pkg)
              throw new Error(`Assertion failed: The locator should have been registered`);
            if (structUtils.isVirtualLocator(pkg))
              return;
            let fetchResult;
            try {
              fetchResult = await fetcher.fetch(pkg, fetcherOptions);
            } catch (error) {
              error.message = `${structUtils.prettyLocator(this.configuration, pkg)}: ${error.message}`;
              report.reportExceptionOnce(error);
              firstError = error;
              return;
            }
            if (fetchResult.checksum != null)
              this.storedChecksums.set(pkg.locatorHash, fetchResult.checksum);
            else
              this.storedChecksums.delete(pkg.locatorHash);
            if (fetchResult.releaseFs) {
              fetchResult.releaseFs();
            }
          }).finally(() => {
            progress.tick();
          })));
          if (firstError)
            throw firstError;
          const cleanInfo = persistProject && mode !== InstallMode.UpdateLockfile ? await this.cacheCleanup({ cache, report }) : null;
          if (report.cacheMisses.size > 0 || cleanInfo) {
            const addedSizes = await Promise.all([...report.cacheMisses].map(async (locatorHash) => {
              const locator = this.storedPackages.get(locatorHash);
              const checksum = this.storedChecksums.get(locatorHash) ?? null;
              const p = cache.getLocatorPath(locator, checksum);
              const stat = await fslib_2.xfs.statPromise(p);
              return stat.size;
            }));
            const finalSizeChange = addedSizes.reduce((sum, size) => sum + size, 0) - (cleanInfo?.size ?? 0);
            const addedCount = report.cacheMisses.size;
            const removedCount = cleanInfo?.count ?? 0;
            const addedLine = `${miscUtils.plural(addedCount, {
              zero: `No new packages`,
              one: `A package was`,
              more: `${formatUtils.pretty(this.configuration, addedCount, formatUtils.Type.NUMBER)} packages were`
            })} added to the project`;
            const removedLine = `${miscUtils.plural(removedCount, {
              zero: `none were`,
              one: `one was`,
              more: `${formatUtils.pretty(this.configuration, removedCount, formatUtils.Type.NUMBER)} were`
            })} removed`;
            const sizeLine = finalSizeChange !== 0 ? ` (${formatUtils.pretty(this.configuration, finalSizeChange, formatUtils.Type.SIZE_DIFF)})` : ``;
            const message = removedCount > 0 ? addedCount > 0 ? `${addedLine}, and ${removedLine}${sizeLine}.` : `${addedLine}, but ${removedLine}${sizeLine}.` : `${addedLine}${sizeLine}.`;
            report.reportInfo(MessageName_1.MessageName.FETCH_NOT_CACHED, message);
          }
        }
        async linkEverything({ cache, report, fetcher: optFetcher, mode }) {
          const cacheOptions = {
            mockedPackages: this.disabledLocators,
            unstablePackages: this.conditionalLocators,
            skipIntegrityCheck: true
          };
          const fetcher = optFetcher || this.configuration.makeFetcher();
          const fetcherOptions = { checksums: this.storedChecksums, project: this, cache, fetcher, report, cacheOptions };
          const linkers = this.configuration.getLinkers();
          const linkerOptions = { project: this, report };
          const installers = new Map(linkers.map((linker) => {
            const installer = linker.makeInstaller(linkerOptions);
            const customDataKey = linker.getCustomDataKey();
            const customData = this.linkersCustomData.get(customDataKey);
            if (typeof customData !== `undefined`)
              installer.attachCustomData(customData);
            return [linker, installer];
          }));
          const packageLinkers = /* @__PURE__ */ new Map;
          const packageLocations = /* @__PURE__ */ new Map;
          const packageBuildDirectives = /* @__PURE__ */ new Map;
          const fetchResultsPerPackage = new Map(await miscUtils.allSettledSafe([...this.accessibleLocators].map(async (locatorHash) => {
            const pkg = this.storedPackages.get(locatorHash);
            if (!pkg)
              throw new Error(`Assertion failed: The locator should have been registered`);
            return [locatorHash, await fetcher.fetch(pkg, fetcherOptions)];
          })));
          const pendingPromises = [];
          const nextSkippedBuilds = /* @__PURE__ */ new Set;
          const skippedBuildLogs = [];
          for (const locatorHash of this.accessibleLocators) {
            const pkg = this.storedPackages.get(locatorHash);
            if (typeof pkg === `undefined`)
              throw new Error(`Assertion failed: The locator should have been registered`);
            const fetchResult = fetchResultsPerPackage.get(pkg.locatorHash);
            if (typeof fetchResult === `undefined`)
              throw new Error(`Assertion failed: The fetch result should have been registered`);
            const holdPromises = [];
            const holdFetchResult = (promise) => {
              holdPromises.push(promise);
            };
            const workspace = this.tryWorkspaceByLocator(pkg);
            if (workspace !== null) {
              const buildDirectives = [];
              const { scripts } = workspace.manifest;
              for (const scriptName of [`preinstall`, `install`, `postinstall`])
                if (scripts.has(scriptName))
                  buildDirectives.push({ type: Installer_1.BuildDirectiveType.SCRIPT, script: scriptName });
              try {
                for (const [linker, installer] of installers) {
                  if (linker.supportsPackage(pkg, linkerOptions)) {
                    const result2 = await installer.installPackage(pkg, fetchResult, { holdFetchResult });
                    if (result2.buildRequest !== null) {
                      throw new Error(`Assertion failed: Linkers can't return build directives for workspaces; this responsibility befalls to the Yarn core`);
                    }
                  }
                }
              } finally {
                if (holdPromises.length === 0) {
                  fetchResult.releaseFs?.();
                } else {
                  pendingPromises.push(miscUtils.allSettledSafe(holdPromises).catch(() => {
                  }).then(() => {
                    fetchResult.releaseFs?.();
                  }));
                }
              }
              const location = fslib_2.ppath.join(fetchResult.packageFs.getRealPath(), fetchResult.prefixPath);
              packageLocations.set(pkg.locatorHash, location);
              if (!structUtils.isVirtualLocator(pkg) && buildDirectives.length > 0) {
                packageBuildDirectives.set(pkg.locatorHash, {
                  buildDirectives,
                  buildLocations: [location]
                });
              }
            } else {
              const linker = linkers.find((linker2) => linker2.supportsPackage(pkg, linkerOptions));
              if (!linker)
                throw new Report_1.ReportError(MessageName_1.MessageName.LINKER_NOT_FOUND, `${structUtils.prettyLocator(this.configuration, pkg)} isn't supported by any available linker`);
              const installer = installers.get(linker);
              if (!installer)
                throw new Error(`Assertion failed: The installer should have been registered`);
              let installStatus;
              try {
                installStatus = await installer.installPackage(pkg, fetchResult, { holdFetchResult });
              } finally {
                if (holdPromises.length === 0) {
                  fetchResult.releaseFs?.();
                } else {
                  pendingPromises.push(miscUtils.allSettledSafe(holdPromises).then(() => {
                  }).then(() => {
                    fetchResult.releaseFs?.();
                  }));
                }
              }
              packageLinkers.set(pkg.locatorHash, linker);
              packageLocations.set(pkg.locatorHash, installStatus.packageLocation);
              if (installStatus.buildRequest && installStatus.packageLocation) {
                if (installStatus.buildRequest.skipped) {
                  nextSkippedBuilds.add(pkg.locatorHash);
                  if (!this.skippedBuilds.has(pkg.locatorHash)) {
                    skippedBuildLogs.push([pkg, installStatus.buildRequest.explain]);
                  }
                } else {
                  packageBuildDirectives.set(pkg.locatorHash, {
                    buildDirectives: installStatus.buildRequest.directives,
                    buildLocations: [installStatus.packageLocation]
                  });
                }
              }
            }
          }
          const externalDependents = /* @__PURE__ */ new Map;
          for (const locatorHash of this.accessibleLocators) {
            const pkg = this.storedPackages.get(locatorHash);
            if (!pkg)
              throw new Error(`Assertion failed: The locator should have been registered`);
            const isWorkspace = this.tryWorkspaceByLocator(pkg) !== null;
            const linkPackage = async (packageLinker, installer) => {
              const packageLocation = packageLocations.get(pkg.locatorHash);
              if (typeof packageLocation === `undefined`)
                throw new Error(`Assertion failed: The package (${structUtils.prettyLocator(this.configuration, pkg)}) should have been registered`);
              const internalDependencies = [];
              for (const descriptor of pkg.dependencies.values()) {
                const resolution = this.storedResolutions.get(descriptor.descriptorHash);
                if (typeof resolution === `undefined`)
                  throw new Error(`Assertion failed: The resolution (${structUtils.prettyDescriptor(this.configuration, descriptor)}, from ${structUtils.prettyLocator(this.configuration, pkg)})should have been registered`);
                const dependency = this.storedPackages.get(resolution);
                if (typeof dependency === `undefined`)
                  throw new Error(`Assertion failed: The package (${resolution}, resolved from ${structUtils.prettyDescriptor(this.configuration, descriptor)}) should have been registered`);
                const dependencyLinker = this.tryWorkspaceByLocator(dependency) === null ? packageLinkers.get(resolution) : null;
                if (typeof dependencyLinker === `undefined`)
                  throw new Error(`Assertion failed: The package (${resolution}, resolved from ${structUtils.prettyDescriptor(this.configuration, descriptor)}) should have been registered`);
                const isWorkspaceDependency = dependencyLinker === null;
                if (dependencyLinker === packageLinker || isWorkspaceDependency) {
                  if (packageLocations.get(dependency.locatorHash) !== null) {
                    internalDependencies.push([descriptor, dependency]);
                  }
                } else if (!isWorkspace && packageLocation !== null) {
                  const externalEntry = miscUtils.getArrayWithDefault(externalDependents, resolution);
                  externalEntry.push(packageLocation);
                }
              }
              if (packageLocation !== null) {
                await installer.attachInternalDependencies(pkg, internalDependencies);
              }
            };
            if (isWorkspace) {
              for (const [packageLinker, installer] of installers) {
                if (packageLinker.supportsPackage(pkg, linkerOptions)) {
                  await linkPackage(packageLinker, installer);
                }
              }
            } else {
              const packageLinker = packageLinkers.get(pkg.locatorHash);
              if (!packageLinker)
                throw new Error(`Assertion failed: The linker should have been found`);
              const installer = installers.get(packageLinker);
              if (!installer)
                throw new Error(`Assertion failed: The installer should have been registered`);
              await linkPackage(packageLinker, installer);
            }
          }
          for (const [locatorHash, dependentPaths] of externalDependents) {
            const pkg = this.storedPackages.get(locatorHash);
            if (!pkg)
              throw new Error(`Assertion failed: The package should have been registered`);
            const packageLinker = packageLinkers.get(pkg.locatorHash);
            if (!packageLinker)
              throw new Error(`Assertion failed: The linker should have been found`);
            const installer = installers.get(packageLinker);
            if (!installer)
              throw new Error(`Assertion failed: The installer should have been registered`);
            await installer.attachExternalDependents(pkg, dependentPaths);
          }
          const linkersCustomData = /* @__PURE__ */ new Map;
          for (const [linker, installer] of installers) {
            const finalizeInstallData = await installer.finalizeInstall();
            for (const installStatus of finalizeInstallData?.records ?? []) {
              if (installStatus.buildRequest.skipped) {
                nextSkippedBuilds.add(installStatus.locator.locatorHash);
                if (!this.skippedBuilds.has(installStatus.locator.locatorHash)) {
                  skippedBuildLogs.push([installStatus.locator, installStatus.buildRequest.explain]);
                }
              } else {
                packageBuildDirectives.set(installStatus.locator.locatorHash, {
                  buildDirectives: installStatus.buildRequest.directives,
                  buildLocations: installStatus.buildLocations
                });
              }
            }
            if (typeof finalizeInstallData?.customData !== `undefined`) {
              linkersCustomData.set(linker.getCustomDataKey(), finalizeInstallData.customData);
            }
          }
          this.linkersCustomData = linkersCustomData;
          await miscUtils.allSettledSafe(pendingPromises);
          if (mode === InstallMode.SkipBuild)
            return;
          for (const [, explain] of miscUtils.sortMap(skippedBuildLogs, ([locator]) => structUtils.stringifyLocator(locator)))
            explain(report);
          const buildablePackages = new Set(packageBuildDirectives.keys());
          const globalHashGenerator = (0, crypto_1.createHash)(`sha512`);
          globalHashGenerator.update(process.versions.node);
          await this.configuration.triggerHook((hooks) => {
            return hooks.globalHashGeneration;
          }, this, (data) => {
            globalHashGenerator.update(`\x00`);
            globalHashGenerator.update(data);
          });
          const globalHash = globalHashGenerator.digest(`hex`);
          const packageHashMap = /* @__PURE__ */ new Map;
          const getBaseHash = (locator) => {
            let hash = packageHashMap.get(locator.locatorHash);
            if (typeof hash !== `undefined`)
              return hash;
            const pkg = this.storedPackages.get(locator.locatorHash);
            if (typeof pkg === `undefined`)
              throw new Error(`Assertion failed: The package should have been registered`);
            const builder = (0, crypto_1.createHash)(`sha512`);
            builder.update(locator.locatorHash);
            packageHashMap.set(locator.locatorHash, `<recursive>`);
            for (const descriptor of pkg.dependencies.values()) {
              const resolution = this.storedResolutions.get(descriptor.descriptorHash);
              if (typeof resolution === `undefined`)
                throw new Error(`Assertion failed: The resolution (${structUtils.prettyDescriptor(this.configuration, descriptor)}) should have been registered`);
              const dependency = this.storedPackages.get(resolution);
              if (typeof dependency === `undefined`)
                throw new Error(`Assertion failed: The package should have been registered`);
              builder.update(getBaseHash(dependency));
            }
            hash = builder.digest(`hex`);
            packageHashMap.set(locator.locatorHash, hash);
            return hash;
          };
          const getBuildHash = (locator, buildLocations) => {
            const builder = (0, crypto_1.createHash)(`sha512`);
            builder.update(globalHash);
            builder.update(getBaseHash(locator));
            for (const location of buildLocations)
              builder.update(location);
            return builder.digest(`hex`);
          };
          const nextBState = /* @__PURE__ */ new Map;
          let isInstallStatePersisted = false;
          const isLocatorBuildable = (locator) => {
            const hashesToCheck = /* @__PURE__ */ new Set([locator.locatorHash]);
            for (const locatorHash of hashesToCheck) {
              const pkg = this.storedPackages.get(locatorHash);
              if (!pkg)
                throw new Error(`Assertion failed: The package should have been registered`);
              for (const dependency of pkg.dependencies.values()) {
                const resolution = this.storedResolutions.get(dependency.descriptorHash);
                if (!resolution)
                  throw new Error(`Assertion failed: The resolution (${structUtils.prettyDescriptor(this.configuration, dependency)}) should have been registered`);
                if (resolution !== locator.locatorHash && buildablePackages.has(resolution))
                  return false;
                const dependencyPkg = this.storedPackages.get(resolution);
                if (!dependencyPkg)
                  throw new Error(`Assertion failed: The package should have been registered`);
                const workspace = this.tryWorkspaceByLocator(dependencyPkg);
                if (workspace) {
                  if (workspace.anchoredLocator.locatorHash !== locator.locatorHash && buildablePackages.has(workspace.anchoredLocator.locatorHash))
                    return false;
                  hashesToCheck.add(workspace.anchoredLocator.locatorHash);
                }
                hashesToCheck.add(resolution);
              }
            }
            return true;
          };
          while (buildablePackages.size > 0) {
            const savedSize = buildablePackages.size;
            const buildPromises = [];
            for (const locatorHash of buildablePackages) {
              const pkg = this.storedPackages.get(locatorHash);
              if (!pkg)
                throw new Error(`Assertion failed: The package should have been registered`);
              if (!isLocatorBuildable(pkg))
                continue;
              const buildInfo = packageBuildDirectives.get(pkg.locatorHash);
              if (!buildInfo)
                throw new Error(`Assertion failed: The build directive should have been registered`);
              const buildHash = getBuildHash(pkg, buildInfo.buildLocations);
              if (this.storedBuildState.get(pkg.locatorHash) === buildHash) {
                nextBState.set(pkg.locatorHash, buildHash);
                buildablePackages.delete(locatorHash);
                continue;
              }
              if (!isInstallStatePersisted) {
                await this.persistInstallStateFile();
                isInstallStatePersisted = true;
              }
              if (this.storedBuildState.has(pkg.locatorHash))
                report.reportInfo(MessageName_1.MessageName.MUST_REBUILD, `${structUtils.prettyLocator(this.configuration, pkg)} must be rebuilt because its dependency tree changed`);
              else
                report.reportInfo(MessageName_1.MessageName.MUST_BUILD, `${structUtils.prettyLocator(this.configuration, pkg)} must be built because it never has been before or the last one failed`);
              const pkgBuilds = buildInfo.buildLocations.map(async (location) => {
                if (!fslib_2.ppath.isAbsolute(location))
                  throw new Error(`Assertion failed: Expected the build location to be absolute (not ${location})`);
                for (const directive of buildInfo.buildDirectives) {
                  let header = `# This file contains the result of Yarn building a package (${structUtils.stringifyLocator(pkg)})
`;
                  switch (directive.type) {
                    case Installer_1.BuildDirectiveType.SCRIPT:
                      {
                        header += `# Script name: ${directive.script}
`;
                      }
                      break;
                    case Installer_1.BuildDirectiveType.SHELLCODE:
                      {
                        header += `# Script code: ${directive.script}
`;
                      }
                      break;
                  }
                  const stdin = null;
                  const wasBuildSuccessful = await fslib_2.xfs.mktempPromise(async (logDir) => {
                    const logFile = fslib_2.ppath.join(logDir, `build.log`);
                    const { stdout, stderr } = this.configuration.getSubprocessStreams(logFile, {
                      header,
                      prefix: structUtils.prettyLocator(this.configuration, pkg),
                      report
                    });
                    let exitCode;
                    try {
                      switch (directive.type) {
                        case Installer_1.BuildDirectiveType.SCRIPT:
                          {
                            exitCode = await scriptUtils.executePackageScript(pkg, directive.script, [], { cwd: location, project: this, stdin, stdout, stderr });
                          }
                          break;
                        case Installer_1.BuildDirectiveType.SHELLCODE:
                          {
                            exitCode = await scriptUtils.executePackageShellcode(pkg, directive.script, [], { cwd: location, project: this, stdin, stdout, stderr });
                          }
                          break;
                      }
                    } catch (error) {
                      stderr.write(error.stack);
                      exitCode = 1;
                    }
                    stdout.end();
                    stderr.end();
                    if (exitCode === 0)
                      return true;
                    fslib_2.xfs.detachTemp(logDir);
                    const buildMessage = `${structUtils.prettyLocator(this.configuration, pkg)} couldn't be built successfully (exit code ${formatUtils.pretty(this.configuration, exitCode, formatUtils.Type.NUMBER)}, logs can be found here: ${formatUtils.pretty(this.configuration, logFile, formatUtils.Type.PATH)})`;
                    const isOptional = this.optionalBuilds.has(pkg.locatorHash);
                    if (isOptional)
                      report.reportInfo(MessageName_1.MessageName.BUILD_FAILED, buildMessage);
                    else
                      report.reportError(MessageName_1.MessageName.BUILD_FAILED, buildMessage);
                    if (StreamReport_1.SUPPORTS_GROUPS)
                      report.reportFold(fslib_12.npath.fromPortablePath(logFile), fslib_2.xfs.readFileSync(logFile, `utf8`));
                    return isOptional;
                  });
                  if (!wasBuildSuccessful) {
                    return false;
                  }
                }
                return true;
              });
              buildPromises.push(...pkgBuilds, Promise.allSettled(pkgBuilds).then((results) => {
                buildablePackages.delete(locatorHash);
                if (results.every((result2) => result2.status === `fulfilled` && result2.value === true)) {
                  nextBState.set(pkg.locatorHash, buildHash);
                }
              }));
            }
            await miscUtils.allSettledSafe(buildPromises);
            if (savedSize === buildablePackages.size) {
              const prettyLocators = Array.from(buildablePackages).map((locatorHash) => {
                const pkg = this.storedPackages.get(locatorHash);
                if (!pkg)
                  throw new Error(`Assertion failed: The package should have been registered`);
                return structUtils.prettyLocator(this.configuration, pkg);
              }).join(`, `);
              report.reportError(MessageName_1.MessageName.CYCLIC_DEPENDENCIES, `Some packages have circular dependencies that make their build order unsatisfiable - as a result they won't be built (affected packages are: ${prettyLocators})`);
              break;
            }
          }
          this.storedBuildState = nextBState;
          this.skippedBuilds = nextSkippedBuilds;
        }
        async installWithNewReport(reportOpts, installOpts) {
          const report = await StreamReport_1.StreamReport.start({
            configuration: this.configuration,
            json: reportOpts.json,
            stdout: reportOpts.stdout,
            forceSectionAlignment: true,
            includeLogs: !reportOpts.json && !reportOpts.quiet,
            includeVersion: true
          }, async (report2) => {
            await this.install({ ...installOpts, report: report2 });
          });
          return report.exitCode();
        }
        async install(opts) {
          const nodeLinker = this.configuration.get(`nodeLinker`);
          Configuration_1.Configuration.telemetry?.reportInstall(nodeLinker);
          let hasPreErrors = false;
          await opts.report.startTimerPromise(`Project validation`, {
            skipIfEmpty: true
          }, async () => {
            if (this.configuration.get(`enableOfflineMode`))
              opts.report.reportWarning(MessageName_1.MessageName.OFFLINE_MODE_ENABLED, `Offline work is enabled; Yarn won't fetch packages from the remote registry if it can avoid it`);
            await this.configuration.triggerHook((hooks) => {
              return hooks.validateProject;
            }, this, {
              reportWarning: (name, text) => {
                opts.report.reportWarning(name, text);
              },
              reportError: (name, text) => {
                opts.report.reportError(name, text);
                hasPreErrors = true;
              }
            });
          });
          if (hasPreErrors)
            return;
          const packageExtensions = await this.configuration.getPackageExtensions();
          for (const extensionsByIdent of packageExtensions.values())
            for (const [, extensionsByRange] of extensionsByIdent)
              for (const extension of extensionsByRange)
                extension.status = types_2.PackageExtensionStatus.Inactive;
          const lockfilePath = fslib_2.ppath.join(this.cwd, fslib_2.Filename.lockfile);
          let initialLockfile = null;
          if (opts.immutable) {
            try {
              initialLockfile = await fslib_2.xfs.readFilePromise(lockfilePath, `utf8`);
            } catch (error) {
              if (error.code === `ENOENT`) {
                throw new Report_1.ReportError(MessageName_1.MessageName.FROZEN_LOCKFILE_EXCEPTION, `The lockfile would have been created by this install, which is explicitly forbidden.`);
              } else {
                throw error;
              }
            }
          }
          await opts.report.startTimerPromise(`Resolution step`, async () => {
            await this.resolveEverything(opts);
          });
          await opts.report.startTimerPromise(`Post-resolution validation`, {
            skipIfEmpty: true
          }, async () => {
            emitPeerDependencyWarnings(this, opts.report);
            for (const [, extensionsPerRange] of packageExtensions) {
              for (const [, extensions] of extensionsPerRange) {
                for (const extension of extensions) {
                  if (extension.userProvided) {
                    const prettyPackageExtension = formatUtils.pretty(this.configuration, extension, formatUtils.Type.PACKAGE_EXTENSION);
                    switch (extension.status) {
                      case types_2.PackageExtensionStatus.Inactive:
                        {
                          opts.report.reportWarning(MessageName_1.MessageName.UNUSED_PACKAGE_EXTENSION, `${prettyPackageExtension}: No matching package in the dependency tree; you may not need this rule anymore.`);
                        }
                        break;
                      case types_2.PackageExtensionStatus.Redundant:
                        {
                          opts.report.reportWarning(MessageName_1.MessageName.REDUNDANT_PACKAGE_EXTENSION, `${prettyPackageExtension}: This rule seems redundant when applied on the original package; the extension may have been applied upstream.`);
                        }
                        break;
                    }
                  }
                }
              }
            }
            if (initialLockfile !== null) {
              const newLockfile = (0, fslib_2.normalizeLineEndings)(initialLockfile, this.generateLockfile());
              if (newLockfile !== initialLockfile) {
                const diff = (0, diff_1.structuredPatch)(lockfilePath, lockfilePath, initialLockfile, newLockfile, undefined, undefined, { maxEditLength: 100 });
                if (diff) {
                  opts.report.reportSeparator();
                  for (const hunk of diff.hunks) {
                    opts.report.reportInfo(null, `@@ -${hunk.oldStart},${hunk.oldLines} +${hunk.newStart},${hunk.newLines} @@`);
                    for (const line of hunk.lines) {
                      if (line.startsWith(`+`)) {
                        opts.report.reportError(MessageName_1.MessageName.FROZEN_LOCKFILE_EXCEPTION, formatUtils.pretty(this.configuration, line, formatUtils.Type.ADDED));
                      } else if (line.startsWith(`-`)) {
                        opts.report.reportError(MessageName_1.MessageName.FROZEN_LOCKFILE_EXCEPTION, formatUtils.pretty(this.configuration, line, formatUtils.Type.REMOVED));
                      } else {
                        opts.report.reportInfo(null, formatUtils.pretty(this.configuration, line, `grey`));
                      }
                    }
                  }
                  opts.report.reportSeparator();
                }
                throw new Report_1.ReportError(MessageName_1.MessageName.FROZEN_LOCKFILE_EXCEPTION, `The lockfile would have been modified by this install, which is explicitly forbidden.`);
              }
            }
          });
          for (const extensionsByIdent of packageExtensions.values())
            for (const [, extensionsByRange] of extensionsByIdent)
              for (const extension of extensionsByRange)
                if (extension.userProvided && extension.status === types_2.PackageExtensionStatus.Active)
                  Configuration_1.Configuration.telemetry?.reportPackageExtension(formatUtils.json(extension, formatUtils.Type.PACKAGE_EXTENSION));
          await opts.report.startTimerPromise(`Fetch step`, async () => {
            await this.fetchEverything(opts);
          });
          const immutablePatterns = opts.immutable ? [...new Set(this.configuration.get(`immutablePatterns`))].sort() : [];
          const before = await Promise.all(immutablePatterns.map(async (pattern) => {
            return hashUtils.checksumPattern(pattern, { cwd: this.cwd });
          }));
          if (typeof opts.persistProject === `undefined` || opts.persistProject)
            await this.persist();
          await opts.report.startTimerPromise(`Link step`, async () => {
            if (opts.mode === InstallMode.UpdateLockfile) {
              opts.report.reportWarning(MessageName_1.MessageName.UPDATE_LOCKFILE_ONLY_SKIP_LINK, `Skipped due to ${formatUtils.pretty(this.configuration, `mode=update-lockfile`, formatUtils.Type.CODE)}`);
              return;
            }
            await this.linkEverything(opts);
            const after = await Promise.all(immutablePatterns.map(async (pattern) => {
              return hashUtils.checksumPattern(pattern, { cwd: this.cwd });
            }));
            for (let t = 0;t < immutablePatterns.length; ++t) {
              if (before[t] !== after[t]) {
                opts.report.reportError(MessageName_1.MessageName.FROZEN_ARTIFACT_EXCEPTION, `The checksum for ${immutablePatterns[t]} has been modified by this install, which is explicitly forbidden.`);
              }
            }
          });
          await this.persistInstallStateFile();
          let hasPostErrors = false;
          await opts.report.startTimerPromise(`Post-install validation`, {
            skipIfEmpty: true
          }, async () => {
            await this.configuration.triggerHook((hooks) => {
              return hooks.validateProjectAfterInstall;
            }, this, {
              reportWarning: (name, text) => {
                opts.report.reportWarning(name, text);
              },
              reportError: (name, text) => {
                opts.report.reportError(name, text);
                hasPostErrors = true;
              }
            });
          });
          if (hasPostErrors)
            return;
          await this.configuration.triggerHook((hooks) => {
            return hooks.afterAllInstalled;
          }, this, opts);
        }
        generateLockfile() {
          const reverseLookup = /* @__PURE__ */ new Map;
          for (const [descriptorHash, locatorHash] of this.storedResolutions.entries()) {
            let descriptorHashes = reverseLookup.get(locatorHash);
            if (!descriptorHashes)
              reverseLookup.set(locatorHash, descriptorHashes = /* @__PURE__ */ new Set);
            descriptorHashes.add(descriptorHash);
          }
          const optimizedLockfile = {};
          const { cacheKey } = Cache_1.Cache.getCacheKey(this.configuration);
          optimizedLockfile.__metadata = {
            version: exports22.LOCKFILE_VERSION,
            cacheKey
          };
          for (const [locatorHash, descriptorHashes] of reverseLookup.entries()) {
            const pkg = this.originalPackages.get(locatorHash);
            if (!pkg)
              continue;
            const descriptors = [];
            for (const descriptorHash of descriptorHashes) {
              const descriptor = this.storedDescriptors.get(descriptorHash);
              if (!descriptor)
                throw new Error(`Assertion failed: The descriptor should have been registered`);
              descriptors.push(descriptor);
            }
            const key = descriptors.map((descriptor) => {
              return structUtils.stringifyDescriptor(descriptor);
            }).sort().join(`, `);
            const manifest = new Manifest_1.Manifest;
            manifest.version = pkg.linkType === types_1.LinkType.HARD ? pkg.version : `0.0.0-use.local`;
            manifest.languageName = pkg.languageName;
            manifest.dependencies = new Map(pkg.dependencies);
            manifest.peerDependencies = new Map(pkg.peerDependencies);
            manifest.dependenciesMeta = new Map(pkg.dependenciesMeta);
            manifest.peerDependenciesMeta = new Map(pkg.peerDependenciesMeta);
            manifest.bin = new Map(pkg.bin);
            optimizedLockfile[key] = {
              ...manifest.exportTo({}, {
                compatibilityMode: false
              }),
              linkType: pkg.linkType.toLowerCase(),
              resolution: structUtils.stringifyLocator(pkg),
              checksum: this.storedChecksums.get(pkg.locatorHash),
              conditions: pkg.conditions || undefined
            };
          }
          const header = `${[
            `# This file is generated by running "yarn install" inside your project.
`,
            `# Manual changes might be lost - proceed with caution!
`
          ].join(``)}
`;
          return header + (0, parsers_1.stringifySyml)(optimizedLockfile);
        }
        async persistLockfile() {
          const lockfilePath = fslib_2.ppath.join(this.cwd, fslib_2.Filename.lockfile);
          let currentContent = ``;
          try {
            currentContent = await fslib_2.xfs.readFilePromise(lockfilePath, `utf8`);
          } catch (error) {
          }
          const newContent = this.generateLockfile();
          const normalizedContent = (0, fslib_2.normalizeLineEndings)(currentContent, newContent);
          if (normalizedContent === currentContent)
            return;
          await fslib_2.xfs.writeFilePromise(lockfilePath, normalizedContent);
          this.lockFileChecksum = makeLockfileChecksum(normalizedContent);
          this.lockfileNeedsRefresh = false;
        }
        async persistInstallStateFile() {
          const fields = [];
          for (const category of Object.values(INSTALL_STATE_FIELDS))
            fields.push(...category);
          const installState = (0, pick_1.default)(this, fields);
          const serializedState = v8_1.default.serialize(installState);
          const newInstallStateChecksum = hashUtils.makeHash(serializedState);
          if (this.installStateChecksum === newInstallStateChecksum)
            return;
          const installStatePath = this.configuration.get(`installStatePath`);
          await fslib_2.xfs.mkdirPromise(fslib_2.ppath.dirname(installStatePath), { recursive: true });
          await fslib_2.xfs.writeFilePromise(installStatePath, await gzip(serializedState));
          this.installStateChecksum = newInstallStateChecksum;
        }
        async restoreInstallState({ restoreLinkersCustomData = true, restoreResolutions = true, restoreBuildState = true } = {}) {
          const installStatePath = this.configuration.get(`installStatePath`);
          let installState;
          try {
            const installStateBuffer = await gunzip(await fslib_2.xfs.readFilePromise(installStatePath));
            installState = v8_1.default.deserialize(installStateBuffer);
            this.installStateChecksum = hashUtils.makeHash(installStateBuffer);
          } catch {
            if (restoreResolutions)
              await this.applyLightResolution();
            return;
          }
          if (restoreLinkersCustomData) {
            if (typeof installState.linkersCustomData !== `undefined`)
              this.linkersCustomData = installState.linkersCustomData;
          }
          if (restoreBuildState)
            Object.assign(this, (0, pick_1.default)(installState, INSTALL_STATE_FIELDS.restoreBuildState));
          if (restoreResolutions) {
            if (installState.lockFileChecksum === this.lockFileChecksum) {
              Object.assign(this, (0, pick_1.default)(installState, INSTALL_STATE_FIELDS.restoreResolutions));
            } else {
              await this.applyLightResolution();
            }
          }
        }
        async applyLightResolution() {
          await this.resolveEverything({
            lockfileOnly: true,
            report: new ThrowReport_1.ThrowReport
          });
          await this.persistInstallStateFile();
        }
        async persist() {
          const limit = (0, p_limit_12.default)(4);
          await Promise.all([
            this.persistLockfile(),
            ...this.workspaces.map((workspace) => {
              return limit(() => workspace.persistManifest());
            })
          ]);
        }
        async cacheCleanup({ cache, report }) {
          if (this.configuration.get(`enableGlobalCache`))
            return null;
          const PRESERVED_FILES = /* @__PURE__ */ new Set([
            `.gitignore`
          ]);
          if (!(0, folderUtils_1.isFolderInside)(cache.cwd, this.cwd))
            return null;
          if (!await fslib_2.xfs.existsPromise(cache.cwd))
            return null;
          const cleanupPromises = [];
          for (const entry of await fslib_2.xfs.readdirPromise(cache.cwd)) {
            if (PRESERVED_FILES.has(entry))
              continue;
            const entryPath = fslib_2.ppath.resolve(cache.cwd, entry);
            if (cache.markedFiles.has(entryPath))
              continue;
            if (cache.immutable) {
              report.reportError(MessageName_1.MessageName.IMMUTABLE_CACHE, `${formatUtils.pretty(this.configuration, fslib_2.ppath.basename(entryPath), `magenta`)} appears to be unused and would be marked for deletion, but the cache is immutable`);
            } else {
              cleanupPromises.push(fslib_2.xfs.lstatPromise(entryPath).then(async (stat) => {
                await fslib_2.xfs.removePromise(entryPath);
                return stat.size;
              }));
            }
          }
          if (cleanupPromises.length === 0)
            return null;
          const sizes = await Promise.all(cleanupPromises);
          return {
            count: cleanupPromises.length,
            size: sizes.reduce((sum, size) => sum + size, 0)
          };
        }
      };
      exports22.Project = Project2;
      function applyVirtualResolutionMutations({ project, allDescriptors, allResolutions, allPackages, accessibleLocators = /* @__PURE__ */ new Set, optionalBuilds = /* @__PURE__ */ new Set, peerRequirements = /* @__PURE__ */ new Map, peerWarnings = [], peerRequirementNodes = /* @__PURE__ */ new Map, volatileDescriptors = /* @__PURE__ */ new Set }) {
        const virtualStack = /* @__PURE__ */ new Map;
        const resolutionStack = [];
        const allIdents = /* @__PURE__ */ new Map;
        const allVirtualInstances = /* @__PURE__ */ new Map;
        const allVirtualDependents = /* @__PURE__ */ new Map;
        const allPeerRequests = /* @__PURE__ */ new Map;
        const originalWorkspaceDefinitions = new Map(project.workspaces.map((workspace) => {
          const locatorHash = workspace.anchoredLocator.locatorHash;
          const pkg = allPackages.get(locatorHash);
          if (typeof pkg === `undefined`)
            throw new Error(`Assertion failed: The workspace should have an associated package`);
          return [locatorHash, structUtils.copyPackage(pkg)];
        }));
        const reportStackOverflow = () => {
          const logDir = fslib_2.xfs.mktempSync();
          const logFile = fslib_2.ppath.join(logDir, `stacktrace.log`);
          const maxSize = String(resolutionStack.length + 1).length;
          const content = resolutionStack.map((locator, index) => {
            const prefix = `${index + 1}.`.padStart(maxSize, ` `);
            return `${prefix} ${structUtils.stringifyLocator(locator)}
`;
          }).join(``);
          fslib_2.xfs.writeFileSync(logFile, content);
          fslib_2.xfs.detachTemp(logDir);
          throw new Report_1.ReportError(MessageName_1.MessageName.STACK_OVERFLOW_RESOLUTION, `Encountered a stack overflow when resolving peer dependencies; cf ${fslib_12.npath.fromPortablePath(logFile)}`);
        };
        const getPackageFromDescriptor = (descriptor) => {
          const resolution = allResolutions.get(descriptor.descriptorHash);
          if (typeof resolution === `undefined`)
            throw new Error(`Assertion failed: The resolution should have been registered`);
          const pkg = allPackages.get(resolution);
          if (!pkg)
            throw new Error(`Assertion failed: The package could not be found`);
          return pkg;
        };
        const resolvePeerDependencies = (parentDescriptor, parentLocator, parentPeerRequests, { top, optional }) => {
          if (resolutionStack.length > 1000)
            reportStackOverflow();
          resolutionStack.push(parentLocator);
          const result2 = resolvePeerDependenciesImpl(parentDescriptor, parentLocator, parentPeerRequests, { top, optional });
          resolutionStack.pop();
          return result2;
        };
        const resolvePeerDependenciesImpl = (parentDescriptor, parentLocator, parentPeerRequests, { top, optional }) => {
          if (!optional)
            optionalBuilds.delete(parentLocator.locatorHash);
          if (accessibleLocators.has(parentLocator.locatorHash))
            return;
          accessibleLocators.add(parentLocator.locatorHash);
          const parentPackage = allPackages.get(parentLocator.locatorHash);
          if (!parentPackage)
            throw new Error(`Assertion failed: The package (${structUtils.prettyLocator(project.configuration, parentLocator)}) should have been registered`);
          const newVirtualInstances = [];
          const parentPeerRequirements = /* @__PURE__ */ new Map;
          const firstPass = [];
          const secondPass = [];
          const thirdPass = [];
          const fourthPass = [];
          for (const descriptor of Array.from(parentPackage.dependencies.values())) {
            if (parentPackage.peerDependencies.has(descriptor.identHash) && parentPackage.locatorHash !== top)
              continue;
            if (structUtils.isVirtualDescriptor(descriptor))
              throw new Error(`Assertion failed: Virtual packages shouldn't be encountered when virtualizing a branch`);
            volatileDescriptors.delete(descriptor.descriptorHash);
            let isOptional = optional;
            if (!isOptional) {
              const dependencyMetaSet = parentPackage.dependenciesMeta.get(structUtils.stringifyIdent(descriptor));
              if (typeof dependencyMetaSet !== `undefined`) {
                const dependencyMeta = dependencyMetaSet.get(null);
                if (typeof dependencyMeta !== `undefined` && dependencyMeta.optional) {
                  isOptional = true;
                }
              }
            }
            const resolution = allResolutions.get(descriptor.descriptorHash);
            if (!resolution)
              throw new Error(`Assertion failed: The resolution (${structUtils.prettyDescriptor(project.configuration, descriptor)}) should have been registered`);
            const pkg = originalWorkspaceDefinitions.get(resolution) || allPackages.get(resolution);
            if (!pkg)
              throw new Error(`Assertion failed: The package (${resolution}, resolved from ${structUtils.prettyDescriptor(project.configuration, descriptor)}) should have been registered`);
            if (pkg.peerDependencies.size === 0) {
              resolvePeerDependencies(descriptor, pkg, /* @__PURE__ */ new Map, { top, optional: isOptional });
              continue;
            }
            let virtualizedDescriptor;
            let virtualizedPackage;
            const missingPeerDependencies = /* @__PURE__ */ new Set;
            const peerRequests = /* @__PURE__ */ new Map;
            firstPass.push(() => {
              virtualizedDescriptor = structUtils.virtualizeDescriptor(descriptor, parentLocator.locatorHash);
              virtualizedPackage = structUtils.virtualizePackage(pkg, parentLocator.locatorHash);
              parentPackage.dependencies.delete(descriptor.identHash);
              parentPackage.dependencies.set(virtualizedDescriptor.identHash, virtualizedDescriptor);
              allResolutions.set(virtualizedDescriptor.descriptorHash, virtualizedPackage.locatorHash);
              allDescriptors.set(virtualizedDescriptor.descriptorHash, virtualizedDescriptor);
              allPackages.set(virtualizedPackage.locatorHash, virtualizedPackage);
              newVirtualInstances.push([pkg, virtualizedDescriptor, virtualizedPackage]);
            });
            secondPass.push(() => {
              allPeerRequests.set(virtualizedPackage.locatorHash, peerRequests);
              for (const peerDescriptor of virtualizedPackage.peerDependencies.values()) {
                const peerRequirement = miscUtils.getFactoryWithDefault(parentPeerRequirements, peerDescriptor.identHash, () => {
                  let parentRequest = parentPeerRequests.get(peerDescriptor.identHash) ?? null;
                  let peerProvision2 = parentPackage.dependencies.get(peerDescriptor.identHash);
                  if (!peerProvision2 && structUtils.areIdentsEqual(parentLocator, peerDescriptor)) {
                    if (parentDescriptor.identHash === parentLocator.identHash) {
                      peerProvision2 = parentDescriptor;
                    } else {
                      peerProvision2 = structUtils.makeDescriptor(parentLocator, parentDescriptor.range);
                      allDescriptors.set(peerProvision2.descriptorHash, peerProvision2);
                      allResolutions.set(peerProvision2.descriptorHash, parentLocator.locatorHash);
                      volatileDescriptors.delete(peerProvision2.descriptorHash);
                      parentRequest = null;
                    }
                  }
                  if (!peerProvision2)
                    peerProvision2 = structUtils.makeDescriptor(peerDescriptor, `missing:`);
                  return {
                    subject: parentLocator,
                    ident: peerDescriptor,
                    provided: peerProvision2,
                    root: !parentRequest,
                    requests: /* @__PURE__ */ new Map,
                    hash: `p${hashUtils.makeHash(parentLocator.locatorHash, peerDescriptor.identHash).slice(0, 5)}`
                  };
                });
                const peerProvision = peerRequirement.provided;
                if (peerProvision.range === `missing:` && virtualizedPackage.dependencies.has(peerDescriptor.identHash)) {
                  virtualizedPackage.peerDependencies.delete(peerDescriptor.identHash);
                  continue;
                }
                peerRequests.set(peerDescriptor.identHash, {
                  requester: virtualizedPackage,
                  descriptor: peerDescriptor,
                  meta: virtualizedPackage.peerDependenciesMeta.get(structUtils.stringifyIdent(peerDescriptor)),
                  children: /* @__PURE__ */ new Map
                });
                virtualizedPackage.dependencies.set(peerDescriptor.identHash, peerProvision);
                if (structUtils.isVirtualDescriptor(peerProvision)) {
                  const dependents = miscUtils.getSetWithDefault(allVirtualDependents, peerProvision.descriptorHash);
                  dependents.add(virtualizedPackage.locatorHash);
                }
                allIdents.set(peerProvision.identHash, peerProvision);
                if (peerProvision.range === `missing:`) {
                  missingPeerDependencies.add(peerProvision.identHash);
                }
              }
              virtualizedPackage.dependencies = new Map(miscUtils.sortMap(virtualizedPackage.dependencies, ([identHash, descriptor2]) => {
                return structUtils.stringifyIdent(descriptor2);
              }));
            });
            thirdPass.push(() => {
              if (!allPackages.has(virtualizedPackage.locatorHash))
                return;
              const stackDepth = virtualStack.get(pkg.locatorHash);
              if (typeof stackDepth === `number` && stackDepth >= 2)
                reportStackOverflow();
              const current = virtualStack.get(pkg.locatorHash);
              const next = typeof current !== `undefined` ? current + 1 : 1;
              virtualStack.set(pkg.locatorHash, next);
              resolvePeerDependencies(virtualizedDescriptor, virtualizedPackage, peerRequests, { top, optional: isOptional });
              virtualStack.set(pkg.locatorHash, next - 1);
            });
            fourthPass.push(() => {
              const finalDescriptor = parentPackage.dependencies.get(descriptor.identHash);
              if (typeof finalDescriptor === `undefined`)
                throw new Error(`Assertion failed: Expected the peer dependency to have been turned into a dependency`);
              const finalResolution = allResolutions.get(finalDescriptor.descriptorHash);
              if (typeof finalResolution === `undefined`)
                throw new Error(`Assertion failed: Expected the descriptor to be registered`);
              const finalPeerRequests = allPeerRequests.get(finalResolution);
              if (typeof finalPeerRequests === `undefined`)
                throw new Error(`Assertion failed: Expected the peer requests to be registered`);
              for (const peerRequirement of parentPeerRequirements.values()) {
                const peerRequest = finalPeerRequests.get(peerRequirement.ident.identHash);
                if (!peerRequest)
                  continue;
                peerRequirement.requests.set(finalDescriptor.descriptorHash, peerRequest);
                peerRequirementNodes.set(peerRequirement.hash, peerRequirement);
                if (!peerRequirement.root) {
                  parentPeerRequests.get(peerRequirement.ident.identHash)?.children.set(finalDescriptor.descriptorHash, peerRequest);
                }
              }
              if (!allPackages.has(virtualizedPackage.locatorHash))
                return;
              for (const missingPeerDependency of missingPeerDependencies) {
                virtualizedPackage.dependencies.delete(missingPeerDependency);
              }
            });
          }
          for (const fn of [...firstPass, ...secondPass])
            fn();
          let stable;
          do {
            stable = true;
            for (const [physicalLocator, virtualDescriptor, virtualPackage] of newVirtualInstances) {
              const otherVirtualInstances = miscUtils.getMapWithDefault(allVirtualInstances, physicalLocator.locatorHash);
              const dependencyHash = hashUtils.makeHash(...[...virtualPackage.dependencies.values()].map((descriptor) => {
                const resolution = descriptor.range !== `missing:` ? allResolutions.get(descriptor.descriptorHash) : `missing:`;
                if (typeof resolution === `undefined`)
                  throw new Error(`Assertion failed: Expected the resolution for ${structUtils.prettyDescriptor(project.configuration, descriptor)} to have been registered`);
                return resolution === top ? `${resolution} (top)` : resolution;
              }), virtualDescriptor.identHash);
              const masterDescriptor = otherVirtualInstances.get(dependencyHash);
              if (typeof masterDescriptor === `undefined`) {
                otherVirtualInstances.set(dependencyHash, virtualDescriptor);
                continue;
              }
              if (masterDescriptor === virtualDescriptor)
                continue;
              allPackages.delete(virtualPackage.locatorHash);
              allDescriptors.delete(virtualDescriptor.descriptorHash);
              allResolutions.delete(virtualDescriptor.descriptorHash);
              accessibleLocators.delete(virtualPackage.locatorHash);
              const dependents = allVirtualDependents.get(virtualDescriptor.descriptorHash) || [];
              const allDependents = [parentPackage.locatorHash, ...dependents];
              allVirtualDependents.delete(virtualDescriptor.descriptorHash);
              for (const dependent of allDependents) {
                const pkg = allPackages.get(dependent);
                if (typeof pkg === `undefined`)
                  continue;
                if (pkg.dependencies.get(virtualDescriptor.identHash).descriptorHash !== masterDescriptor.descriptorHash)
                  stable = false;
                pkg.dependencies.set(virtualDescriptor.identHash, masterDescriptor);
              }
              for (const peerRequirement of parentPeerRequirements.values()) {
                if (peerRequirement.provided.descriptorHash === virtualDescriptor.descriptorHash) {
                  peerRequirement.provided = masterDescriptor;
                }
              }
            }
          } while (!stable);
          for (const fn of [...thirdPass, ...fourthPass]) {
            fn();
          }
        };
        for (const workspace of project.workspaces) {
          const locator = workspace.anchoredLocator;
          volatileDescriptors.delete(workspace.anchoredDescriptor.descriptorHash);
          resolvePeerDependencies(workspace.anchoredDescriptor, locator, /* @__PURE__ */ new Map, { top: locator.locatorHash, optional: false });
        }
        for (const requirement of peerRequirementNodes.values()) {
          if (!requirement.root)
            continue;
          const dependent = allPackages.get(requirement.subject.locatorHash);
          if (typeof dependent === `undefined`)
            continue;
          for (const peerRequest of requirement.requests.values()) {
            const hash = `p${hashUtils.makeHash(requirement.subject.locatorHash, structUtils.stringifyIdent(requirement.ident), peerRequest.requester.locatorHash).slice(0, 5)}`;
            peerRequirements.set(hash, {
              subject: requirement.subject.locatorHash,
              requested: requirement.ident,
              rootRequester: peerRequest.requester.locatorHash,
              allRequesters: Array.from(structUtils.allPeerRequests(peerRequest), (request) => request.requester.locatorHash)
            });
          }
          const allRequests = [...structUtils.allPeerRequests(requirement)];
          if (requirement.provided.range !== `missing:`) {
            const peerPackage = getPackageFromDescriptor(requirement.provided);
            const peerVersion = peerPackage.version ?? `0.0.0`;
            const resolveWorkspaceRange = (range) => {
              if (range.startsWith(WorkspaceResolver_1.WorkspaceResolver.protocol)) {
                if (!project.tryWorkspaceByLocator(peerPackage))
                  return null;
                range = range.slice(WorkspaceResolver_1.WorkspaceResolver.protocol.length);
                if (range === `^` || range === `~`) {
                  range = `*`;
                }
              }
              return range;
            };
            let satisfiesAll = true;
            for (const peerRequest of allRequests) {
              const range = resolveWorkspaceRange(peerRequest.descriptor.range);
              if (range === null) {
                satisfiesAll = false;
                continue;
              }
              if (!semverUtils.satisfiesWithPrereleases(peerVersion, range)) {
                satisfiesAll = false;
                const hash = `p${hashUtils.makeHash(requirement.subject.locatorHash, structUtils.stringifyIdent(requirement.ident), peerRequest.requester.locatorHash).slice(0, 5)}`;
                peerWarnings.push({
                  type: PeerWarningType.NotCompatible,
                  subject: dependent,
                  requested: requirement.ident,
                  requester: peerRequest.requester,
                  version: peerVersion,
                  hash,
                  requirementCount: allRequests.length
                });
              }
            }
            if (!satisfiesAll) {
              const allRanges = allRequests.map((peerRequest) => resolveWorkspaceRange(peerRequest.descriptor.range));
              peerWarnings.push({
                type: PeerWarningType.NodeNotCompatible,
                node: requirement,
                range: allRanges.includes(null) ? null : semverUtils.simplifyRanges(allRanges),
                hash: requirement.hash
              });
            }
          } else {
            let satisfiesAll = true;
            for (const peerRequest of allRequests) {
              if (!peerRequest.meta?.optional) {
                satisfiesAll = false;
                const hash = `p${hashUtils.makeHash(requirement.subject.locatorHash, structUtils.stringifyIdent(requirement.ident), peerRequest.requester.locatorHash).slice(0, 5)}`;
                peerWarnings.push({
                  type: PeerWarningType.NotProvided,
                  subject: dependent,
                  requested: requirement.ident,
                  requester: peerRequest.requester,
                  hash
                });
              }
            }
            if (!satisfiesAll) {
              peerWarnings.push({
                type: PeerWarningType.NodeNotProvided,
                node: requirement,
                hash: requirement.hash
              });
            }
          }
        }
      }
      function* allPeerRequestsWithRoot(root) {
        const roots = /* @__PURE__ */ new Map;
        if (`children` in root) {
          roots.set(root, root);
        } else {
          for (const request of root.requests.values()) {
            roots.set(request, request);
          }
        }
        for (const [request, root2] of roots) {
          yield { request, root: root2 };
          for (const child of request.children.values()) {
            if (!roots.has(child)) {
              roots.set(child, root2);
            }
          }
        }
      }
      function emitPeerDependencyWarnings(project, report) {
        const incompatibleWarnings = [];
        const missingWarnings = [];
        let hasTransitiveWarnings = false;
        for (const warning of project.peerWarnings) {
          if (warning.type === PeerWarningType.NotCompatible || warning.type === PeerWarningType.NotProvided)
            continue;
          if (!project.tryWorkspaceByLocator(warning.node.subject)) {
            hasTransitiveWarnings = true;
            continue;
          }
          if (warning.type === PeerWarningType.NodeNotCompatible) {
            const peerLocatorHash = project.storedResolutions.get(warning.node.provided.descriptorHash);
            if (typeof peerLocatorHash === `undefined`)
              throw new Error(`Assertion failed: Expected the descriptor to be registered`);
            const peerPackage = project.storedPackages.get(peerLocatorHash);
            if (typeof peerPackage === `undefined`)
              throw new Error(`Assertion failed: Expected the package to be registered`);
            const requester = miscUtils.mapAndFind(allPeerRequestsWithRoot(warning.node), ({ request, root }) => {
              if (!semverUtils.satisfiesWithPrereleases(peerPackage.version ?? `0.0.0`, request.descriptor.range))
                return request === root ? structUtils.prettyIdent(project.configuration, request.requester) : `${structUtils.prettyIdent(project.configuration, request.requester)} (via ${structUtils.prettyIdent(project.configuration, root.requester)})`;
              return miscUtils.mapAndFind.skip;
            });
            const otherPackages = [...structUtils.allPeerRequests(warning.node)].length > 1 ? `and other dependencies request` : `requests`;
            const rangeDescription = warning.range ? structUtils.prettyRange(project.configuration, warning.range) : formatUtils.pretty(project.configuration, `but they have non-overlapping ranges!`, `redBright`);
            incompatibleWarnings.push(`${structUtils.prettyIdent(project.configuration, warning.node.ident)} is listed by your project with version ${structUtils.prettyReference(project.configuration, peerPackage.version ?? `0.0.0`)} (${formatUtils.pretty(project.configuration, warning.hash, formatUtils.Type.CODE)}), which doesn't satisfy what ${requester} ${otherPackages} (${rangeDescription}).`);
          }
          if (warning.type === PeerWarningType.NodeNotProvided) {
            const otherPackages = warning.node.requests.size > 1 ? ` and other dependencies` : ``;
            missingWarnings.push(`${structUtils.prettyLocator(project.configuration, warning.node.subject)} doesn't provide ${structUtils.prettyIdent(project.configuration, warning.node.ident)} (${formatUtils.pretty(project.configuration, warning.hash, formatUtils.Type.CODE)}), requested by ${structUtils.prettyIdent(project.configuration, warning.node.requests.values().next().value.requester)}${otherPackages}.`);
          }
        }
        report.startSectionSync({
          reportFooter: () => {
            report.reportWarning(MessageName_1.MessageName.EXPLAIN_PEER_DEPENDENCIES_CTA, `Some peer dependencies are incorrectly met by your project; run ${formatUtils.pretty(project.configuration, `yarn explain peer-requirements <hash>`, formatUtils.Type.CODE)} for details, where ${formatUtils.pretty(project.configuration, `<hash>`, formatUtils.Type.CODE)} is the six-letter p-prefixed code.`);
          },
          skipIfEmpty: true
        }, () => {
          for (const warning of miscUtils.sortMap(incompatibleWarnings, (line) => formatUtils.stripAnsi(line)))
            report.reportWarning(MessageName_1.MessageName.INCOMPATIBLE_PEER_DEPENDENCY, warning);
          for (const warning of miscUtils.sortMap(missingWarnings, (line) => formatUtils.stripAnsi(line))) {
            report.reportWarning(MessageName_1.MessageName.MISSING_PEER_DEPENDENCY, warning);
          }
        });
        if (hasTransitiveWarnings) {
          report.reportWarning(MessageName_1.MessageName.EXPLAIN_PEER_DEPENDENCIES_CTA, `Some peer dependencies are incorrectly met by dependencies; run ${formatUtils.pretty(project.configuration, `yarn explain peer-requirements`, formatUtils.Type.CODE)} for details.`);
        }
      }
    }
  });
  var require_TelemetryManager = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/TelemetryManager.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.TelemetryManager = exports22.MetricName = undefined;
      exports22.derive = derive;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var fslib_12 = require_lib();
      var YarnVersion_1 = require_YarnVersion();
      var hashUtils = tslib_12.__importStar(require_hashUtils());
      var httpUtils = tslib_12.__importStar(require_httpUtils());
      var miscUtils = tslib_12.__importStar(require_miscUtils());
      var semverUtils = tslib_12.__importStar(require_semverUtils());
      var MetricName;
      (function(MetricName2) {
        MetricName2["VERSION"] = "version";
        MetricName2["COMMAND_NAME"] = "commandName";
        MetricName2["PLUGIN_NAME"] = "pluginName";
        MetricName2["INSTALL_COUNT"] = "installCount";
        MetricName2["PROJECT_COUNT"] = "projectCount";
        MetricName2["WORKSPACE_COUNT"] = "workspaceCount";
        MetricName2["DEPENDENCY_COUNT"] = "dependencyCount";
        MetricName2["EXTENSION"] = "packageExtension";
      })(MetricName || (exports22.MetricName = MetricName = {}));
      function derive(params) {
        const hour = 60 * 60 * 1000;
        const day = 24 * hour;
        const nowDay = Math.floor(params.timeNow / day);
        const updateIntervalMs = params.updateInterval * day;
        const lastUpdate = params.state.lastUpdate ?? params.timeNow + updateIntervalMs + Math.floor(updateIntervalMs * params.randomInitialInterval);
        const nextUpdate = lastUpdate + updateIntervalMs;
        const lastTips = params.state.lastTips ?? nowDay * day;
        const nextTips = lastTips + day + 8 * hour - params.timeZone;
        const triggerUpdate = nextUpdate <= params.timeNow;
        const triggerTips = nextTips <= params.timeNow;
        let nextState = null;
        if (triggerUpdate || triggerTips || !params.state.lastUpdate || !params.state.lastTips) {
          nextState = {};
          nextState.lastUpdate = triggerUpdate ? params.timeNow : lastUpdate;
          nextState.lastTips = lastTips;
          nextState.blocks = triggerUpdate ? {} : params.state.blocks;
          nextState.displayedTips = params.state.displayedTips;
        }
        return { nextState, triggerUpdate, triggerTips, nextTips: triggerTips ? nowDay * day : lastTips };
      }
      var TelemetryManager = class {
        constructor(configuration, accountId) {
          this.values = /* @__PURE__ */ new Map;
          this.hits = /* @__PURE__ */ new Map;
          this.enumerators = /* @__PURE__ */ new Map;
          this.nextTips = 0;
          this.displayedTips = [];
          this.shouldCommitTips = false;
          this.configuration = configuration;
          const registryFile = this.getRegistryPath();
          this.isNew = !fslib_12.xfs.existsSync(registryFile);
          this.shouldShowTips = false;
          this.sendReport(accountId);
          this.startBuffer();
        }
        commitTips() {
          if (this.shouldShowTips) {
            this.shouldCommitTips = true;
          }
        }
        selectTip(allTips) {
          const displayedTips = new Set(this.displayedTips);
          const checkVersion = (selector) => {
            if (selector && YarnVersion_1.YarnVersion) {
              return semverUtils.satisfiesWithPrereleases(YarnVersion_1.YarnVersion, selector);
            } else {
              return false;
            }
          };
          const activeTips = allTips.map((_, index) => index).filter((index) => allTips[index] && checkVersion(allTips[index]?.selector));
          if (activeTips.length === 0)
            return null;
          let availableTips = activeTips.filter((index) => !displayedTips.has(index));
          if (availableTips.length === 0) {
            const sliceLength = Math.floor(activeTips.length * 0.2);
            this.displayedTips = sliceLength > 0 ? this.displayedTips.slice(-sliceLength) : [];
            availableTips = activeTips.filter((index) => !displayedTips.has(index));
          }
          const selectedTip = availableTips[Math.floor(Math.random() * availableTips.length)];
          this.displayedTips.push(selectedTip);
          this.commitTips();
          return allTips[selectedTip];
        }
        reportVersion(value) {
          this.reportValue(MetricName.VERSION, value.replace(/-git\..*/, `-git`));
        }
        reportCommandName(value) {
          this.reportValue(MetricName.COMMAND_NAME, value || `<none>`);
        }
        reportPluginName(value) {
          this.reportValue(MetricName.PLUGIN_NAME, value);
        }
        reportProject(cwd) {
          this.reportEnumerator(MetricName.PROJECT_COUNT, cwd);
        }
        reportInstall(nodeLinker) {
          this.reportHit(MetricName.INSTALL_COUNT, nodeLinker);
        }
        reportPackageExtension(value) {
          this.reportValue(MetricName.EXTENSION, value);
        }
        reportWorkspaceCount(count) {
          this.reportValue(MetricName.WORKSPACE_COUNT, String(count));
        }
        reportDependencyCount(count) {
          this.reportValue(MetricName.DEPENDENCY_COUNT, String(count));
        }
        reportValue(metric, value) {
          miscUtils.getSetWithDefault(this.values, metric).add(value);
        }
        reportEnumerator(metric, value) {
          miscUtils.getSetWithDefault(this.enumerators, metric).add(hashUtils.makeHash(value));
        }
        reportHit(metric, extra = `*`) {
          const ns = miscUtils.getMapWithDefault(this.hits, metric);
          const current = miscUtils.getFactoryWithDefault(ns, extra, () => 0);
          ns.set(extra, current + 1);
        }
        getRegistryPath() {
          const registryFile = this.configuration.get(`globalFolder`);
          return fslib_12.ppath.join(registryFile, `telemetry.json`);
        }
        sendReport(accountId) {
          const registryFile = this.getRegistryPath();
          let state;
          try {
            state = fslib_12.xfs.readJsonSync(registryFile);
          } catch {
            state = {};
          }
          const { nextState, triggerUpdate, triggerTips, nextTips } = derive({
            state,
            timeNow: Date.now(),
            timeZone: (/* @__PURE__ */ new Date()).getTimezoneOffset() * 60 * 1000,
            randomInitialInterval: Math.random(),
            updateInterval: this.configuration.get(`telemetryInterval`)
          });
          this.nextTips = nextTips;
          this.displayedTips = state.displayedTips ?? [];
          if (nextState !== null) {
            try {
              fslib_12.xfs.mkdirSync(fslib_12.ppath.dirname(registryFile), { recursive: true });
              fslib_12.xfs.writeJsonSync(registryFile, nextState);
            } catch {
              return false;
            }
          }
          if (triggerTips && this.configuration.get(`enableTips`))
            this.shouldShowTips = true;
          if (triggerUpdate) {
            const blocks = state.blocks ?? {};
            if (Object.keys(blocks).length === 0) {
              const rawUrl = `https://browser-http-intake.logs.datadoghq.eu/v1/input/${accountId}?ddsource=yarn`;
              const sendPayload = (payload) => httpUtils.post(rawUrl, payload, {
                configuration: this.configuration
              }).catch(() => {
              });
              for (const [userId, block] of Object.entries(state.blocks ?? {})) {
                if (Object.keys(block).length === 0)
                  continue;
                const upload = block;
                upload.userId = userId;
                upload.reportType = `primary`;
                for (const key of Object.keys(upload.enumerators ?? {}))
                  upload.enumerators[key] = upload.enumerators[key].length;
                sendPayload(upload);
                const toSend = /* @__PURE__ */ new Map;
                const maxValues = 20;
                for (const [metricName, values] of Object.entries(upload.values))
                  if (values.length > 0)
                    toSend.set(metricName, values.slice(0, maxValues));
                while (toSend.size > 0) {
                  const upload2 = {};
                  upload2.userId = userId;
                  upload2.reportType = `secondary`;
                  upload2.metrics = {};
                  for (const [metricName, values] of toSend) {
                    upload2.metrics[metricName] = values.shift();
                    if (values.length === 0) {
                      toSend.delete(metricName);
                    }
                  }
                  sendPayload(upload2);
                }
              }
            }
          }
          return true;
        }
        applyChanges() {
          const registryFile = this.getRegistryPath();
          let state;
          try {
            state = fslib_12.xfs.readJsonSync(registryFile);
          } catch {
            state = {};
          }
          const userId = this.configuration.get(`telemetryUserId`) ?? `*`;
          const blocks = state.blocks = state.blocks ?? {};
          const block = blocks[userId] = blocks[userId] ?? {};
          for (const key of this.hits.keys()) {
            const store = block.hits = block.hits ?? {};
            const ns = store[key] = store[key] ?? {};
            for (const [extra, value] of this.hits.get(key)) {
              ns[extra] = (ns[extra] ?? 0) + value;
            }
          }
          for (const field of [`values`, `enumerators`]) {
            for (const key of this[field].keys()) {
              const store = block[field] = block[field] ?? {};
              store[key] = [.../* @__PURE__ */ new Set([
                ...store[key] ?? [],
                ...this[field].get(key) ?? []
              ])];
            }
          }
          if (this.shouldCommitTips) {
            state.lastTips = this.nextTips;
            state.displayedTips = this.displayedTips;
          }
          fslib_12.xfs.mkdirSync(fslib_12.ppath.dirname(registryFile), { recursive: true });
          fslib_12.xfs.writeJsonSync(registryFile, state);
        }
        startBuffer() {
          process.on(`exit`, () => {
            try {
              this.applyChanges();
            } catch {
            }
          });
        }
      };
      exports22.TelemetryManager = TelemetryManager;
    }
  });
  var require_lib6 = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+core@4.2.0_typanion@3.14.0/node_modules/@yarnpkg/core/lib/index.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.treeUtils = exports22.tgzUtils = exports22.structUtils = exports22.semverUtils = exports22.scriptUtils = exports22.nodeUtils = exports22.miscUtils = exports22.formatUtils = exports22.folderUtils = exports22.execUtils = exports22.httpUtils = exports22.hashUtils = exports22.PackageExtensionStatus = exports22.PackageExtensionType = exports22.LinkType = exports22.YarnVersion = exports22.Workspace = exports22.WorkspaceResolver = exports22.WorkspaceFetcher = exports22.VirtualFetcher = exports22.ThrowReport = exports22.TelemetryManager = exports22.reportOptionDeprecations = exports22.StreamReport = exports22.Report = exports22.ReportError = exports22.InstallMode = exports22.Project = exports22.PeerWarningType = exports22.LOCKFILE_VERSION = exports22.MultiFetcher = exports22.stringifyMessageName = exports22.parseMessageName = exports22.MessageName = exports22.Manifest = exports22.LockfileResolver = exports22.LightReport = exports22.LegacyMigrationResolver = exports22.BuildDirectiveType = exports22.WindowsLinkType = exports22.SettingsType = exports22.FormatType = exports22.Configuration = exports22.TAG_REGEXP = exports22.LEGACY_PLUGINS = exports22.DEFAULT_RC_FILENAME = exports22.Cache = exports22.CACHE_CHECKPOINT = exports22.CACHE_VERSION = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var execUtils = tslib_12.__importStar(require_execUtils());
      exports22.execUtils = execUtils;
      var folderUtils = tslib_12.__importStar(require_folderUtils());
      exports22.folderUtils = folderUtils;
      var formatUtils = tslib_12.__importStar(require_formatUtils());
      exports22.formatUtils = formatUtils;
      var hashUtils = tslib_12.__importStar(require_hashUtils());
      exports22.hashUtils = hashUtils;
      var httpUtils = tslib_12.__importStar(require_httpUtils());
      exports22.httpUtils = httpUtils;
      var miscUtils = tslib_12.__importStar(require_miscUtils());
      exports22.miscUtils = miscUtils;
      var nodeUtils = tslib_12.__importStar(require_nodeUtils());
      exports22.nodeUtils = nodeUtils;
      var scriptUtils = tslib_12.__importStar(require_scriptUtils());
      exports22.scriptUtils = scriptUtils;
      var semverUtils = tslib_12.__importStar(require_semverUtils());
      exports22.semverUtils = semverUtils;
      var structUtils = tslib_12.__importStar(require_structUtils());
      exports22.structUtils = structUtils;
      var tgzUtils = tslib_12.__importStar(require_tgzUtils());
      exports22.tgzUtils = tgzUtils;
      var treeUtils = tslib_12.__importStar(require_treeUtils());
      exports22.treeUtils = treeUtils;
      var Cache_1 = require_Cache();
      Object.defineProperty(exports22, "CACHE_VERSION", { enumerable: true, get: function() {
        return Cache_1.CACHE_VERSION;
      } });
      Object.defineProperty(exports22, "CACHE_CHECKPOINT", { enumerable: true, get: function() {
        return Cache_1.CACHE_CHECKPOINT;
      } });
      Object.defineProperty(exports22, "Cache", { enumerable: true, get: function() {
        return Cache_1.Cache;
      } });
      var Configuration_1 = require_Configuration();
      Object.defineProperty(exports22, "DEFAULT_RC_FILENAME", { enumerable: true, get: function() {
        return Configuration_1.DEFAULT_RC_FILENAME;
      } });
      Object.defineProperty(exports22, "LEGACY_PLUGINS", { enumerable: true, get: function() {
        return Configuration_1.LEGACY_PLUGINS;
      } });
      Object.defineProperty(exports22, "TAG_REGEXP", { enumerable: true, get: function() {
        return Configuration_1.TAG_REGEXP;
      } });
      var Configuration_2 = require_Configuration();
      Object.defineProperty(exports22, "Configuration", { enumerable: true, get: function() {
        return Configuration_2.Configuration;
      } });
      Object.defineProperty(exports22, "FormatType", { enumerable: true, get: function() {
        return Configuration_2.FormatType;
      } });
      Object.defineProperty(exports22, "SettingsType", { enumerable: true, get: function() {
        return Configuration_2.SettingsType;
      } });
      Object.defineProperty(exports22, "WindowsLinkType", { enumerable: true, get: function() {
        return Configuration_2.WindowsLinkType;
      } });
      var Installer_1 = require_Installer();
      Object.defineProperty(exports22, "BuildDirectiveType", { enumerable: true, get: function() {
        return Installer_1.BuildDirectiveType;
      } });
      var LegacyMigrationResolver_1 = require_LegacyMigrationResolver();
      Object.defineProperty(exports22, "LegacyMigrationResolver", { enumerable: true, get: function() {
        return LegacyMigrationResolver_1.LegacyMigrationResolver;
      } });
      var LightReport_1 = require_LightReport();
      Object.defineProperty(exports22, "LightReport", { enumerable: true, get: function() {
        return LightReport_1.LightReport;
      } });
      var LockfileResolver_1 = require_LockfileResolver();
      Object.defineProperty(exports22, "LockfileResolver", { enumerable: true, get: function() {
        return LockfileResolver_1.LockfileResolver;
      } });
      var Manifest_1 = require_Manifest();
      Object.defineProperty(exports22, "Manifest", { enumerable: true, get: function() {
        return Manifest_1.Manifest;
      } });
      var MessageName_1 = require_MessageName();
      Object.defineProperty(exports22, "MessageName", { enumerable: true, get: function() {
        return MessageName_1.MessageName;
      } });
      Object.defineProperty(exports22, "parseMessageName", { enumerable: true, get: function() {
        return MessageName_1.parseMessageName;
      } });
      Object.defineProperty(exports22, "stringifyMessageName", { enumerable: true, get: function() {
        return MessageName_1.stringifyMessageName;
      } });
      var MultiFetcher_1 = require_MultiFetcher();
      Object.defineProperty(exports22, "MultiFetcher", { enumerable: true, get: function() {
        return MultiFetcher_1.MultiFetcher;
      } });
      var Project_1 = require_Project();
      Object.defineProperty(exports22, "LOCKFILE_VERSION", { enumerable: true, get: function() {
        return Project_1.LOCKFILE_VERSION;
      } });
      Object.defineProperty(exports22, "PeerWarningType", { enumerable: true, get: function() {
        return Project_1.PeerWarningType;
      } });
      Object.defineProperty(exports22, "Project", { enumerable: true, get: function() {
        return Project_1.Project;
      } });
      Object.defineProperty(exports22, "InstallMode", { enumerable: true, get: function() {
        return Project_1.InstallMode;
      } });
      var Report_1 = require_Report();
      Object.defineProperty(exports22, "ReportError", { enumerable: true, get: function() {
        return Report_1.ReportError;
      } });
      Object.defineProperty(exports22, "Report", { enumerable: true, get: function() {
        return Report_1.Report;
      } });
      var StreamReport_1 = require_StreamReport();
      Object.defineProperty(exports22, "StreamReport", { enumerable: true, get: function() {
        return StreamReport_1.StreamReport;
      } });
      Object.defineProperty(exports22, "reportOptionDeprecations", { enumerable: true, get: function() {
        return StreamReport_1.reportOptionDeprecations;
      } });
      var TelemetryManager_1 = require_TelemetryManager();
      Object.defineProperty(exports22, "TelemetryManager", { enumerable: true, get: function() {
        return TelemetryManager_1.TelemetryManager;
      } });
      var ThrowReport_1 = require_ThrowReport();
      Object.defineProperty(exports22, "ThrowReport", { enumerable: true, get: function() {
        return ThrowReport_1.ThrowReport;
      } });
      var VirtualFetcher_1 = require_VirtualFetcher();
      Object.defineProperty(exports22, "VirtualFetcher", { enumerable: true, get: function() {
        return VirtualFetcher_1.VirtualFetcher;
      } });
      var WorkspaceFetcher_1 = require_WorkspaceFetcher();
      Object.defineProperty(exports22, "WorkspaceFetcher", { enumerable: true, get: function() {
        return WorkspaceFetcher_1.WorkspaceFetcher;
      } });
      var WorkspaceResolver_1 = require_WorkspaceResolver();
      Object.defineProperty(exports22, "WorkspaceResolver", { enumerable: true, get: function() {
        return WorkspaceResolver_1.WorkspaceResolver;
      } });
      var Workspace_1 = require_Workspace();
      Object.defineProperty(exports22, "Workspace", { enumerable: true, get: function() {
        return Workspace_1.Workspace;
      } });
      var YarnVersion_1 = require_YarnVersion();
      Object.defineProperty(exports22, "YarnVersion", { enumerable: true, get: function() {
        return YarnVersion_1.YarnVersion;
      } });
      var types_1 = require_types();
      Object.defineProperty(exports22, "LinkType", { enumerable: true, get: function() {
        return types_1.LinkType;
      } });
      Object.defineProperty(exports22, "PackageExtensionType", { enumerable: true, get: function() {
        return types_1.PackageExtensionType;
      } });
      Object.defineProperty(exports22, "PackageExtensionStatus", { enumerable: true, get: function() {
        return types_1.PackageExtensionStatus;
      } });
    }
  });
  var require_hoist = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+nm@4.0.5_typanion@3.14.0/node_modules/@yarnpkg/nm/lib/hoist.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.hoist = exports22.HoisterDependencyKind = undefined;
      var HoisterDependencyKind;
      (function(HoisterDependencyKind2) {
        HoisterDependencyKind2[HoisterDependencyKind2["REGULAR"] = 0] = "REGULAR";
        HoisterDependencyKind2[HoisterDependencyKind2["WORKSPACE"] = 1] = "WORKSPACE";
        HoisterDependencyKind2[HoisterDependencyKind2["EXTERNAL_SOFT_LINK"] = 2] = "EXTERNAL_SOFT_LINK";
      })(HoisterDependencyKind || (exports22.HoisterDependencyKind = HoisterDependencyKind = {}));
      var Hoistable;
      (function(Hoistable2) {
        Hoistable2[Hoistable2["YES"] = 0] = "YES";
        Hoistable2[Hoistable2["NO"] = 1] = "NO";
        Hoistable2[Hoistable2["DEPENDS"] = 2] = "DEPENDS";
      })(Hoistable || (Hoistable = {}));
      var makeLocator = (name, reference) => `${name}@${reference}`;
      var makeIdent = (name, reference) => {
        const hashIdx = reference.indexOf(`#`);
        const realReference = hashIdx >= 0 ? reference.substring(hashIdx + 1) : reference;
        return makeLocator(name, realReference);
      };
      var DebugLevel;
      (function(DebugLevel2) {
        DebugLevel2[DebugLevel2["NONE"] = -1] = "NONE";
        DebugLevel2[DebugLevel2["PERF"] = 0] = "PERF";
        DebugLevel2[DebugLevel2["CHECK"] = 1] = "CHECK";
        DebugLevel2[DebugLevel2["REASONS"] = 2] = "REASONS";
        DebugLevel2[DebugLevel2["INTENSIVE_CHECK"] = 9] = "INTENSIVE_CHECK";
      })(DebugLevel || (DebugLevel = {}));
      var hoist = (tree, opts = {}) => {
        const debugLevel = opts.debugLevel || Number(process.env.NM_DEBUG_LEVEL || DebugLevel.NONE);
        const check = opts.check || debugLevel >= DebugLevel.INTENSIVE_CHECK;
        const hoistingLimits = opts.hoistingLimits || /* @__PURE__ */ new Map;
        const options = { check, debugLevel, hoistingLimits, fastLookupPossible: true };
        let startTime;
        if (options.debugLevel >= DebugLevel.PERF)
          startTime = Date.now();
        const treeCopy = cloneTree(tree, options);
        let anotherRoundNeeded = false;
        let round = 0;
        do {
          const result2 = hoistTo(treeCopy, [treeCopy], /* @__PURE__ */ new Set([treeCopy.locator]), /* @__PURE__ */ new Map, options);
          anotherRoundNeeded = result2.anotherRoundNeeded || result2.isGraphChanged;
          options.fastLookupPossible = false;
          round++;
        } while (anotherRoundNeeded);
        if (options.debugLevel >= DebugLevel.PERF)
          console.log(`hoist time: ${Date.now() - startTime}ms, rounds: ${round}`);
        if (options.debugLevel >= DebugLevel.CHECK) {
          const prevTreeDump = dumpDepTree(treeCopy);
          const isGraphChanged = hoistTo(treeCopy, [treeCopy], /* @__PURE__ */ new Set([treeCopy.locator]), /* @__PURE__ */ new Map, options).isGraphChanged;
          if (isGraphChanged)
            throw new Error(`The hoisting result is not terminal, prev tree:
${prevTreeDump}, next tree:
${dumpDepTree(treeCopy)}`);
          const checkLog = selfCheck(treeCopy);
          if (checkLog) {
            throw new Error(`${checkLog}, after hoisting finished:
${dumpDepTree(treeCopy)}`);
          }
        }
        if (options.debugLevel >= DebugLevel.REASONS)
          console.log(dumpDepTree(treeCopy));
        return shrinkTree(treeCopy);
      };
      exports22.hoist = hoist;
      var getZeroRoundUsedDependencies = (rootNodePath) => {
        const rootNode = rootNodePath[rootNodePath.length - 1];
        const usedDependencies = /* @__PURE__ */ new Map;
        const seenNodes = /* @__PURE__ */ new Set;
        const addUsedDependencies = (node) => {
          if (seenNodes.has(node))
            return;
          seenNodes.add(node);
          for (const dep of node.hoistedDependencies.values())
            usedDependencies.set(dep.name, dep);
          for (const dep of node.dependencies.values()) {
            if (!node.peerNames.has(dep.name)) {
              addUsedDependencies(dep);
            }
          }
        };
        addUsedDependencies(rootNode);
        return usedDependencies;
      };
      var getUsedDependencies = (rootNodePath) => {
        const rootNode = rootNodePath[rootNodePath.length - 1];
        const usedDependencies = /* @__PURE__ */ new Map;
        const seenNodes = /* @__PURE__ */ new Set;
        const hiddenDependencies = /* @__PURE__ */ new Set;
        const addUsedDependencies = (node, hiddenDependencies2) => {
          if (seenNodes.has(node))
            return;
          seenNodes.add(node);
          for (const dep of node.hoistedDependencies.values()) {
            if (!hiddenDependencies2.has(dep.name)) {
              let reachableDependency;
              for (const node2 of rootNodePath) {
                reachableDependency = node2.dependencies.get(dep.name);
                if (reachableDependency) {
                  usedDependencies.set(reachableDependency.name, reachableDependency);
                }
              }
            }
          }
          const childrenHiddenDependencies = /* @__PURE__ */ new Set;
          for (const dep of node.dependencies.values())
            childrenHiddenDependencies.add(dep.name);
          for (const dep of node.dependencies.values()) {
            if (!node.peerNames.has(dep.name)) {
              addUsedDependencies(dep, childrenHiddenDependencies);
            }
          }
        };
        addUsedDependencies(rootNode, hiddenDependencies);
        return usedDependencies;
      };
      var decoupleGraphNode = (parent, node) => {
        if (node.decoupled)
          return node;
        const { name, references, ident, locator, dependencies, originalDependencies, hoistedDependencies, peerNames, reasons, isHoistBorder, hoistPriority, dependencyKind, hoistedFrom, hoistedTo } = node;
        const clone = {
          name,
          references: new Set(references),
          ident,
          locator,
          dependencies: new Map(dependencies),
          originalDependencies: new Map(originalDependencies),
          hoistedDependencies: new Map(hoistedDependencies),
          peerNames: new Set(peerNames),
          reasons: new Map(reasons),
          decoupled: true,
          isHoistBorder,
          hoistPriority,
          dependencyKind,
          hoistedFrom: new Map(hoistedFrom),
          hoistedTo: new Map(hoistedTo)
        };
        const selfDep = clone.dependencies.get(name);
        if (selfDep && selfDep.ident == clone.ident)
          clone.dependencies.set(name, clone);
        parent.dependencies.set(clone.name, clone);
        return clone;
      };
      var getHoistIdentMap = (rootNode, preferenceMap) => {
        const identMap = /* @__PURE__ */ new Map([[rootNode.name, [rootNode.ident]]]);
        for (const dep of rootNode.dependencies.values()) {
          if (!rootNode.peerNames.has(dep.name)) {
            identMap.set(dep.name, [dep.ident]);
          }
        }
        const keyList = Array.from(preferenceMap.keys());
        keyList.sort((key1, key2) => {
          const entry1 = preferenceMap.get(key1);
          const entry2 = preferenceMap.get(key2);
          if (entry2.hoistPriority !== entry1.hoistPriority) {
            return entry2.hoistPriority - entry1.hoistPriority;
          } else {
            const entry1Usages = entry1.dependents.size + entry1.peerDependents.size;
            const entry2Usages = entry2.dependents.size + entry2.peerDependents.size;
            return entry2Usages - entry1Usages;
          }
        });
        for (const key of keyList) {
          const name = key.substring(0, key.indexOf(`@`, 1));
          const ident = key.substring(name.length + 1);
          if (!rootNode.peerNames.has(name)) {
            let idents = identMap.get(name);
            if (!idents) {
              idents = [];
              identMap.set(name, idents);
            }
            if (idents.indexOf(ident) < 0) {
              idents.push(ident);
            }
          }
        }
        return identMap;
      };
      var getSortedRegularDependencies = (node) => {
        const dependencies = /* @__PURE__ */ new Set;
        const addDep = (dep, seenDeps = /* @__PURE__ */ new Set) => {
          if (seenDeps.has(dep))
            return;
          seenDeps.add(dep);
          for (const peerName of dep.peerNames) {
            if (!node.peerNames.has(peerName)) {
              const peerDep = node.dependencies.get(peerName);
              if (peerDep && !dependencies.has(peerDep)) {
                addDep(peerDep, seenDeps);
              }
            }
          }
          dependencies.add(dep);
        };
        for (const dep of node.dependencies.values()) {
          if (!node.peerNames.has(dep.name)) {
            addDep(dep);
          }
        }
        return dependencies;
      };
      var hoistTo = (tree, rootNodePath, rootNodePathLocators, parentShadowedNodes, options, seenNodes = /* @__PURE__ */ new Set) => {
        const rootNode = rootNodePath[rootNodePath.length - 1];
        if (seenNodes.has(rootNode))
          return { anotherRoundNeeded: false, isGraphChanged: false };
        seenNodes.add(rootNode);
        const preferenceMap = buildPreferenceMap(rootNode);
        const hoistIdentMap = getHoistIdentMap(rootNode, preferenceMap);
        const usedDependencies = tree == rootNode ? /* @__PURE__ */ new Map : options.fastLookupPossible ? getZeroRoundUsedDependencies(rootNodePath) : getUsedDependencies(rootNodePath);
        let wasStateChanged;
        let anotherRoundNeeded = false;
        let isGraphChanged = false;
        const hoistIdents = new Map(Array.from(hoistIdentMap.entries()).map(([k, v]) => [k, v[0]]));
        const shadowedNodes = /* @__PURE__ */ new Map;
        do {
          const result2 = hoistGraph(tree, rootNodePath, rootNodePathLocators, usedDependencies, hoistIdents, hoistIdentMap, parentShadowedNodes, shadowedNodes, options);
          if (result2.isGraphChanged)
            isGraphChanged = true;
          if (result2.anotherRoundNeeded)
            anotherRoundNeeded = true;
          wasStateChanged = false;
          for (const [name, idents] of hoistIdentMap) {
            if (idents.length > 1 && !rootNode.dependencies.has(name)) {
              hoistIdents.delete(name);
              idents.shift();
              hoistIdents.set(name, idents[0]);
              wasStateChanged = true;
            }
          }
        } while (wasStateChanged);
        for (const dependency of rootNode.dependencies.values()) {
          if (!rootNode.peerNames.has(dependency.name) && !rootNodePathLocators.has(dependency.locator)) {
            rootNodePathLocators.add(dependency.locator);
            const result2 = hoistTo(tree, [...rootNodePath, dependency], rootNodePathLocators, shadowedNodes, options);
            if (result2.isGraphChanged)
              isGraphChanged = true;
            if (result2.anotherRoundNeeded)
              anotherRoundNeeded = true;
            rootNodePathLocators.delete(dependency.locator);
          }
        }
        return { anotherRoundNeeded, isGraphChanged };
      };
      var hasUnhoistedDependencies = (node) => {
        for (const [subName, subDependency] of node.dependencies) {
          if (!node.peerNames.has(subName) && subDependency.ident !== node.ident) {
            return true;
          }
        }
        return false;
      };
      var getNodeHoistInfo = (rootNode, rootNodePathLocators, nodePath, node, usedDependencies, hoistIdents, hoistIdentMap, shadowedNodes, { outputReason, fastLookupPossible }) => {
        let reasonRoot;
        let reason = null;
        let dependsOn = /* @__PURE__ */ new Set;
        if (outputReason)
          reasonRoot = `${Array.from(rootNodePathLocators).map((x) => prettyPrintLocator(x)).join(`\u2192`)}`;
        const parentNode = nodePath[nodePath.length - 1];
        const isSelfReference = node.ident === parentNode.ident;
        let isHoistable = !isSelfReference;
        if (outputReason && !isHoistable)
          reason = `- self-reference`;
        if (isHoistable) {
          isHoistable = node.dependencyKind !== HoisterDependencyKind.WORKSPACE;
          if (outputReason && !isHoistable) {
            reason = `- workspace`;
          }
        }
        if (isHoistable && node.dependencyKind === HoisterDependencyKind.EXTERNAL_SOFT_LINK) {
          isHoistable = !hasUnhoistedDependencies(node);
          if (outputReason && !isHoistable) {
            reason = `- external soft link with unhoisted dependencies`;
          }
        }
        if (isHoistable) {
          isHoistable = !rootNode.peerNames.has(node.name);
          if (outputReason && !isHoistable) {
            reason = `- cannot shadow peer: ${prettyPrintLocator(rootNode.originalDependencies.get(node.name).locator)} at ${reasonRoot}`;
          }
        }
        if (isHoistable) {
          let isNameAvailable = false;
          const usedDep = usedDependencies.get(node.name);
          isNameAvailable = !usedDep || usedDep.ident === node.ident;
          if (outputReason && !isNameAvailable)
            reason = `- filled by: ${prettyPrintLocator(usedDep.locator)} at ${reasonRoot}`;
          if (isNameAvailable) {
            for (let idx = nodePath.length - 1;idx >= 1; idx--) {
              const parent = nodePath[idx];
              const parentDep = parent.dependencies.get(node.name);
              if (parentDep && parentDep.ident !== node.ident) {
                isNameAvailable = false;
                let shadowedNames = shadowedNodes.get(parentNode);
                if (!shadowedNames) {
                  shadowedNames = /* @__PURE__ */ new Set;
                  shadowedNodes.set(parentNode, shadowedNames);
                }
                shadowedNames.add(node.name);
                if (outputReason)
                  reason = `- filled by ${prettyPrintLocator(parentDep.locator)} at ${nodePath.slice(0, idx).map((x) => prettyPrintLocator(x.locator)).join(`\u2192`)}`;
                break;
              }
            }
          }
          isHoistable = isNameAvailable;
        }
        if (isHoistable) {
          const hoistedIdent = hoistIdents.get(node.name);
          isHoistable = hoistedIdent === node.ident;
          if (outputReason && !isHoistable) {
            reason = `- filled by: ${prettyPrintLocator(hoistIdentMap.get(node.name)[0])} at ${reasonRoot}`;
          }
        }
        if (isHoistable) {
          let arePeerDepsSatisfied = true;
          const checkList = new Set(node.peerNames);
          for (let idx = nodePath.length - 1;idx >= 1; idx--) {
            const parent = nodePath[idx];
            for (const name of checkList) {
              if (parent.peerNames.has(name) && parent.originalDependencies.has(name))
                continue;
              const parentDepNode = parent.dependencies.get(name);
              if (parentDepNode && rootNode.dependencies.get(name) !== parentDepNode) {
                if (idx === nodePath.length - 1) {
                  dependsOn.add(parentDepNode);
                } else {
                  dependsOn = null;
                  arePeerDepsSatisfied = false;
                  if (outputReason) {
                    reason = `- peer dependency ${prettyPrintLocator(parentDepNode.locator)} from parent ${prettyPrintLocator(parent.locator)} was not hoisted to ${reasonRoot}`;
                  }
                }
              }
              checkList.delete(name);
            }
            if (!arePeerDepsSatisfied) {
              break;
            }
          }
          isHoistable = arePeerDepsSatisfied;
        }
        if (isHoistable && !fastLookupPossible) {
          for (const origDep of node.hoistedDependencies.values()) {
            const usedDep = usedDependencies.get(origDep.name) || rootNode.dependencies.get(origDep.name);
            if (!usedDep || origDep.ident !== usedDep.ident) {
              isHoistable = false;
              if (outputReason)
                reason = `- previously hoisted dependency mismatch, needed: ${prettyPrintLocator(origDep.locator)}, available: ${prettyPrintLocator(usedDep?.locator)}`;
              break;
            }
          }
        }
        if (dependsOn !== null && dependsOn.size > 0) {
          return { isHoistable: Hoistable.DEPENDS, dependsOn, reason };
        } else {
          return { isHoistable: isHoistable ? Hoistable.YES : Hoistable.NO, reason };
        }
      };
      var getAliasedLocator = (node) => `${node.name}@${node.locator}`;
      var hoistGraph = (tree, rootNodePath, rootNodePathLocators, usedDependencies, hoistIdents, hoistIdentMap, parentShadowedNodes, shadowedNodes, options) => {
        const rootNode = rootNodePath[rootNodePath.length - 1];
        const seenNodes = /* @__PURE__ */ new Set;
        let anotherRoundNeeded = false;
        let isGraphChanged = false;
        const hoistNodeDependencies = (nodePath, locatorPath, aliasedLocatorPath, parentNode, newNodes2) => {
          if (seenNodes.has(parentNode))
            return;
          const nextLocatorPath = [...locatorPath, getAliasedLocator(parentNode)];
          const nextAliasedLocatorPath = [...aliasedLocatorPath, getAliasedLocator(parentNode)];
          const dependantTree = /* @__PURE__ */ new Map;
          const hoistInfos = /* @__PURE__ */ new Map;
          for (const subDependency of getSortedRegularDependencies(parentNode)) {
            const hoistInfo = getNodeHoistInfo(rootNode, rootNodePathLocators, [rootNode, ...nodePath, parentNode], subDependency, usedDependencies, hoistIdents, hoistIdentMap, shadowedNodes, { outputReason: options.debugLevel >= DebugLevel.REASONS, fastLookupPossible: options.fastLookupPossible });
            hoistInfos.set(subDependency, hoistInfo);
            if (hoistInfo.isHoistable === Hoistable.DEPENDS) {
              for (const node of hoistInfo.dependsOn) {
                const nodeDependants = dependantTree.get(node.name) || /* @__PURE__ */ new Set;
                nodeDependants.add(subDependency.name);
                dependantTree.set(node.name, nodeDependants);
              }
            }
          }
          const unhoistableNodes = /* @__PURE__ */ new Set;
          const addUnhoistableNode = (node, hoistInfo, reason) => {
            if (!unhoistableNodes.has(node)) {
              unhoistableNodes.add(node);
              hoistInfos.set(node, { isHoistable: Hoistable.NO, reason });
              for (const dependantName of dependantTree.get(node.name) || []) {
                addUnhoistableNode(parentNode.dependencies.get(dependantName), hoistInfo, options.debugLevel >= DebugLevel.REASONS ? `- peer dependency ${prettyPrintLocator(node.locator)} from parent ${prettyPrintLocator(parentNode.locator)} was not hoisted` : ``);
              }
            }
          };
          for (const [node, hoistInfo] of hoistInfos)
            if (hoistInfo.isHoistable === Hoistable.NO)
              addUnhoistableNode(node, hoistInfo, hoistInfo.reason);
          let wereNodesHoisted = false;
          for (const node of hoistInfos.keys()) {
            if (!unhoistableNodes.has(node)) {
              isGraphChanged = true;
              const shadowedNames = parentShadowedNodes.get(parentNode);
              if (shadowedNames && shadowedNames.has(node.name))
                anotherRoundNeeded = true;
              wereNodesHoisted = true;
              parentNode.dependencies.delete(node.name);
              parentNode.hoistedDependencies.set(node.name, node);
              parentNode.reasons.delete(node.name);
              const hoistedNode = rootNode.dependencies.get(node.name);
              if (options.debugLevel >= DebugLevel.REASONS) {
                const hoistedFrom = Array.from(locatorPath).concat([parentNode.locator]).map((x) => prettyPrintLocator(x)).join(`\u2192`);
                let hoistedFromArray = rootNode.hoistedFrom.get(node.name);
                if (!hoistedFromArray) {
                  hoistedFromArray = [];
                  rootNode.hoistedFrom.set(node.name, hoistedFromArray);
                }
                hoistedFromArray.push(hoistedFrom);
                parentNode.hoistedTo.set(node.name, Array.from(rootNodePath).map((x) => prettyPrintLocator(x.locator)).join(`\u2192`));
              }
              if (!hoistedNode) {
                if (rootNode.ident !== node.ident) {
                  rootNode.dependencies.set(node.name, node);
                  newNodes2.add(node);
                }
              } else {
                for (const reference of node.references) {
                  hoistedNode.references.add(reference);
                }
              }
            }
          }
          if (parentNode.dependencyKind === HoisterDependencyKind.EXTERNAL_SOFT_LINK && wereNodesHoisted)
            anotherRoundNeeded = true;
          if (options.check) {
            const checkLog = selfCheck(tree);
            if (checkLog) {
              throw new Error(`${checkLog}, after hoisting dependencies of ${[rootNode, ...nodePath, parentNode].map((x) => prettyPrintLocator(x.locator)).join(`\u2192`)}:
${dumpDepTree(tree)}`);
            }
          }
          const children = getSortedRegularDependencies(parentNode);
          for (const node of children) {
            if (unhoistableNodes.has(node)) {
              const hoistInfo = hoistInfos.get(node);
              const hoistableIdent = hoistIdents.get(node.name);
              if ((hoistableIdent === node.ident || !parentNode.reasons.has(node.name)) && hoistInfo.isHoistable !== Hoistable.YES)
                parentNode.reasons.set(node.name, hoistInfo.reason);
              if (!node.isHoistBorder && nextAliasedLocatorPath.indexOf(getAliasedLocator(node)) < 0) {
                seenNodes.add(parentNode);
                const decoupledNode = decoupleGraphNode(parentNode, node);
                hoistNodeDependencies([...nodePath, parentNode], nextLocatorPath, nextAliasedLocatorPath, decoupledNode, nextNewNodes);
                seenNodes.delete(parentNode);
              }
            }
          }
        };
        let newNodes;
        let nextNewNodes = new Set(getSortedRegularDependencies(rootNode));
        const aliasedRootNodePathLocators = Array.from(rootNodePath).map((x) => getAliasedLocator(x));
        do {
          newNodes = nextNewNodes;
          nextNewNodes = /* @__PURE__ */ new Set;
          for (const dep of newNodes) {
            if (dep.locator === rootNode.locator || dep.isHoistBorder)
              continue;
            const decoupledDependency = decoupleGraphNode(rootNode, dep);
            hoistNodeDependencies([], Array.from(rootNodePathLocators), aliasedRootNodePathLocators, decoupledDependency, nextNewNodes);
          }
        } while (nextNewNodes.size > 0);
        return { anotherRoundNeeded, isGraphChanged };
      };
      var selfCheck = (tree) => {
        const log = [];
        const seenNodes = /* @__PURE__ */ new Set;
        const parents = /* @__PURE__ */ new Set;
        const checkNode = (node, parentDeps, parent) => {
          if (seenNodes.has(node))
            return;
          seenNodes.add(node);
          if (parents.has(node))
            return;
          const dependencies = new Map(parentDeps);
          for (const dep of node.dependencies.values())
            if (!node.peerNames.has(dep.name))
              dependencies.set(dep.name, dep);
          for (const origDep of node.originalDependencies.values()) {
            const dep = dependencies.get(origDep.name);
            const prettyPrintTreePath = () => `${Array.from(parents).concat([node]).map((x) => prettyPrintLocator(x.locator)).join(`\u2192`)}`;
            if (node.peerNames.has(origDep.name)) {
              const parentDep = parentDeps.get(origDep.name);
              if (parentDep !== dep || !parentDep || parentDep.ident !== origDep.ident) {
                log.push(`${prettyPrintTreePath()} - broken peer promise: expected ${origDep.ident} but found ${parentDep ? parentDep.ident : parentDep}`);
              }
            } else {
              const hoistedFrom = parent.hoistedFrom.get(node.name);
              const originalHoistedTo = node.hoistedTo.get(origDep.name);
              const prettyHoistedFrom = `${hoistedFrom ? ` hoisted from ${hoistedFrom.join(`, `)}` : ``}`;
              const prettyOriginalHoistedTo = `${originalHoistedTo ? ` hoisted to ${originalHoistedTo}` : ``}`;
              const prettyNodePath = `${prettyPrintTreePath()}${prettyHoistedFrom}`;
              if (!dep) {
                log.push(`${prettyNodePath} - broken require promise: no required dependency ${origDep.name}${prettyOriginalHoistedTo} found`);
              } else if (dep.ident !== origDep.ident) {
                log.push(`${prettyNodePath} - broken require promise for ${origDep.name}${prettyOriginalHoistedTo}: expected ${origDep.ident}, but found: ${dep.ident}`);
              }
            }
          }
          parents.add(node);
          for (const dep of node.dependencies.values()) {
            if (!node.peerNames.has(dep.name)) {
              checkNode(dep, dependencies, node);
            }
          }
          parents.delete(node);
        };
        checkNode(tree, tree.dependencies, tree);
        return log.join(`
`);
      };
      var cloneTree = (tree, options) => {
        const { identName, name, reference, peerNames } = tree;
        const treeCopy = {
          name,
          references: /* @__PURE__ */ new Set([reference]),
          locator: makeLocator(identName, reference),
          ident: makeIdent(identName, reference),
          dependencies: /* @__PURE__ */ new Map,
          originalDependencies: /* @__PURE__ */ new Map,
          hoistedDependencies: /* @__PURE__ */ new Map,
          peerNames: new Set(peerNames),
          reasons: /* @__PURE__ */ new Map,
          decoupled: true,
          isHoistBorder: true,
          hoistPriority: 0,
          dependencyKind: HoisterDependencyKind.WORKSPACE,
          hoistedFrom: /* @__PURE__ */ new Map,
          hoistedTo: /* @__PURE__ */ new Map
        };
        const seenNodes = /* @__PURE__ */ new Map([[tree, treeCopy]]);
        const addNode = (node, parentNode) => {
          let workNode = seenNodes.get(node);
          const isSeen = !!workNode;
          if (!workNode) {
            const { name: name2, identName: identName2, reference: reference2, peerNames: peerNames2, hoistPriority, dependencyKind } = node;
            const dependenciesNmHoistingLimits = options.hoistingLimits.get(parentNode.locator);
            workNode = {
              name: name2,
              references: /* @__PURE__ */ new Set([reference2]),
              locator: makeLocator(identName2, reference2),
              ident: makeIdent(identName2, reference2),
              dependencies: /* @__PURE__ */ new Map,
              originalDependencies: /* @__PURE__ */ new Map,
              hoistedDependencies: /* @__PURE__ */ new Map,
              peerNames: new Set(peerNames2),
              reasons: /* @__PURE__ */ new Map,
              decoupled: true,
              isHoistBorder: dependenciesNmHoistingLimits ? dependenciesNmHoistingLimits.has(name2) : false,
              hoistPriority: hoistPriority || 0,
              dependencyKind: dependencyKind || HoisterDependencyKind.REGULAR,
              hoistedFrom: /* @__PURE__ */ new Map,
              hoistedTo: /* @__PURE__ */ new Map
            };
            seenNodes.set(node, workNode);
          }
          parentNode.dependencies.set(node.name, workNode);
          parentNode.originalDependencies.set(node.name, workNode);
          if (!isSeen) {
            for (const dep of node.dependencies) {
              addNode(dep, workNode);
            }
          } else {
            const seenCoupledNodes = /* @__PURE__ */ new Set;
            const markNodeCoupled = (node2) => {
              if (seenCoupledNodes.has(node2))
                return;
              seenCoupledNodes.add(node2);
              node2.decoupled = false;
              for (const dep of node2.dependencies.values()) {
                if (!node2.peerNames.has(dep.name)) {
                  markNodeCoupled(dep);
                }
              }
            };
            markNodeCoupled(workNode);
          }
        };
        for (const dep of tree.dependencies)
          addNode(dep, treeCopy);
        return treeCopy;
      };
      var getIdentName = (locator) => locator.substring(0, locator.indexOf(`@`, 1));
      var shrinkTree = (tree) => {
        const treeCopy = {
          name: tree.name,
          identName: getIdentName(tree.locator),
          references: new Set(tree.references),
          dependencies: /* @__PURE__ */ new Set
        };
        const seenNodes = /* @__PURE__ */ new Set([tree]);
        const addNode = (node, parentWorkNode, parentNode) => {
          const isSeen = seenNodes.has(node);
          let resultNode;
          if (parentWorkNode === node) {
            resultNode = parentNode;
          } else {
            const { name, references, locator } = node;
            resultNode = {
              name,
              identName: getIdentName(locator),
              references,
              dependencies: /* @__PURE__ */ new Set
            };
          }
          parentNode.dependencies.add(resultNode);
          if (!isSeen) {
            seenNodes.add(node);
            for (const dep of node.dependencies.values()) {
              if (!node.peerNames.has(dep.name)) {
                addNode(dep, node, resultNode);
              }
            }
            seenNodes.delete(node);
          }
        };
        for (const dep of tree.dependencies.values())
          addNode(dep, tree, treeCopy);
        return treeCopy;
      };
      var buildPreferenceMap = (rootNode) => {
        const preferenceMap = /* @__PURE__ */ new Map;
        const seenNodes = /* @__PURE__ */ new Set([rootNode]);
        const getPreferenceKey = (node) => `${node.name}@${node.ident}`;
        const getOrCreatePreferenceEntry = (node) => {
          const key = getPreferenceKey(node);
          let entry = preferenceMap.get(key);
          if (!entry) {
            entry = { dependents: /* @__PURE__ */ new Set, peerDependents: /* @__PURE__ */ new Set, hoistPriority: 0 };
            preferenceMap.set(key, entry);
          }
          return entry;
        };
        const addDependent = (dependent, node) => {
          const isSeen = !!seenNodes.has(node);
          const entry = getOrCreatePreferenceEntry(node);
          entry.dependents.add(dependent.ident);
          if (!isSeen) {
            seenNodes.add(node);
            for (const dep of node.dependencies.values()) {
              const entry2 = getOrCreatePreferenceEntry(dep);
              entry2.hoistPriority = Math.max(entry2.hoistPriority, dep.hoistPriority);
              if (node.peerNames.has(dep.name)) {
                entry2.peerDependents.add(node.ident);
              } else {
                addDependent(node, dep);
              }
            }
          }
        };
        for (const dep of rootNode.dependencies.values())
          if (!rootNode.peerNames.has(dep.name))
            addDependent(rootNode, dep);
        return preferenceMap;
      };
      var prettyPrintLocator = (locator) => {
        if (!locator)
          return `none`;
        const idx = locator.indexOf(`@`, 1);
        let name = locator.substring(0, idx);
        if (name.endsWith(`$wsroot$`))
          name = `wh:${name.replace(`$wsroot$`, ``)}`;
        const reference = locator.substring(idx + 1);
        if (reference === `workspace:.`) {
          return `.`;
        } else if (!reference) {
          return `${name}`;
        } else {
          let version = (reference.indexOf(`#`) > 0 ? reference.split(`#`)[1] : reference).replace(`npm:`, ``);
          if (reference.startsWith(`virtual`))
            name = `v:${name}`;
          if (version.startsWith(`workspace`)) {
            name = `w:${name}`;
            version = ``;
          }
          return `${name}${version ? `@${version}` : ``}`;
        }
      };
      var MAX_NODES_TO_DUMP = 50000;
      var dumpDepTree = (tree) => {
        let nodeCount = 0;
        const dumpPackage = (pkg, parents, prefix = ``) => {
          if (nodeCount > MAX_NODES_TO_DUMP || parents.has(pkg))
            return ``;
          nodeCount++;
          const dependencies = Array.from(pkg.dependencies.values()).sort((n1, n2) => {
            if (n1.name === n2.name) {
              return 0;
            } else {
              return n1.name > n2.name ? 1 : -1;
            }
          });
          let str = ``;
          parents.add(pkg);
          for (let idx = 0;idx < dependencies.length; idx++) {
            const dep = dependencies[idx];
            if (!pkg.peerNames.has(dep.name) && dep !== pkg) {
              const reason = pkg.reasons.get(dep.name);
              const identName = getIdentName(dep.locator);
              str += `${prefix}${idx < dependencies.length - 1 ? `\u251C\u2500` : `\u2514\u2500`}${(parents.has(dep) ? `>` : ``) + (identName !== dep.name ? `a:${dep.name}:` : ``) + prettyPrintLocator(dep.locator) + (reason ? ` ${reason}` : ``)}
`;
              str += dumpPackage(dep, parents, `${prefix}${idx < dependencies.length - 1 ? `\u2502 ` : `  `}`);
            }
          }
          parents.delete(pkg);
          return str;
        };
        const treeDump = dumpPackage(tree, /* @__PURE__ */ new Set);
        return treeDump + (nodeCount > MAX_NODES_TO_DUMP ? `
Tree is too large, part of the tree has been dunped
` : ``);
      };
    }
  });
  var require_buildNodeModulesTree = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+nm@4.0.5_typanion@3.14.0/node_modules/@yarnpkg/nm/lib/buildNodeModulesTree.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.buildLocatorMap = exports22.buildNodeModulesTree = exports22.getArchivePath = exports22.NodeModulesHoistingLimits = exports22.LinkType = undefined;
      var core_1 = require_lib6();
      var fslib_12 = require_lib();
      var fslib_2 = require_lib();
      var hoist_1 = require_hoist();
      var LinkType;
      (function(LinkType2) {
        LinkType2["HARD"] = "HARD";
        LinkType2["SOFT"] = "SOFT";
      })(LinkType || (exports22.LinkType = LinkType = {}));
      var NodeModulesHoistingLimits;
      (function(NodeModulesHoistingLimits2) {
        NodeModulesHoistingLimits2["WORKSPACES"] = "workspaces";
        NodeModulesHoistingLimits2["DEPENDENCIES"] = "dependencies";
        NodeModulesHoistingLimits2["NONE"] = "none";
      })(NodeModulesHoistingLimits || (exports22.NodeModulesHoistingLimits = NodeModulesHoistingLimits = {}));
      var NODE_MODULES = `node_modules`;
      var WORKSPACE_NAME_SUFFIX = `$wsroot$`;
      var getArchivePath = (packagePath) => packagePath.indexOf(`.zip/${NODE_MODULES}/`) >= 0 ? fslib_12.npath.toPortablePath(packagePath.split(`/${NODE_MODULES}/`)[0]) : null;
      exports22.getArchivePath = getArchivePath;
      var buildNodeModulesTree = (pnp, options) => {
        const { packageTree, hoistingLimits, errors, preserveSymlinksRequired } = buildPackageTree(pnp, options);
        let tree = null;
        if (errors.length === 0) {
          const hoistedTree = (0, hoist_1.hoist)(packageTree, { hoistingLimits });
          tree = populateNodeModulesTree(pnp, hoistedTree, options);
        }
        return { tree, errors, preserveSymlinksRequired };
      };
      exports22.buildNodeModulesTree = buildNodeModulesTree;
      var stringifyLocator = (locator) => `${locator.name}@${locator.reference}`;
      var buildLocatorMap = (nodeModulesTree) => {
        const map = /* @__PURE__ */ new Map;
        for (const [location, val] of nodeModulesTree.entries()) {
          if (!val.dirList) {
            let entry = map.get(val.locator);
            if (!entry) {
              entry = { target: val.target, linkType: val.linkType, locations: [], aliases: val.aliases };
              map.set(val.locator, entry);
            }
            entry.locations.push(location);
          }
        }
        for (const val of map.values()) {
          val.locations = val.locations.sort((loc1, loc2) => {
            const len1 = loc1.split(fslib_12.ppath.delimiter).length;
            const len2 = loc2.split(fslib_12.ppath.delimiter).length;
            if (loc2 === loc1) {
              return 0;
            } else if (len1 !== len2) {
              return len2 - len1;
            } else {
              return loc2 > loc1 ? 1 : -1;
            }
          });
        }
        return map;
      };
      exports22.buildLocatorMap = buildLocatorMap;
      var areRealLocatorsEqual = (a, b) => {
        const realA = core_1.structUtils.isVirtualLocator(a) ? core_1.structUtils.devirtualizeLocator(a) : a;
        const realB = core_1.structUtils.isVirtualLocator(b) ? core_1.structUtils.devirtualizeLocator(b) : b;
        return core_1.structUtils.areLocatorsEqual(realA, realB);
      };
      var isExternalSoftLink = (pkg, locator, pnp, topPkgPortableLocation) => {
        if (pkg.linkType !== LinkType.SOFT)
          return false;
        const realSoftLinkPath = fslib_12.npath.toPortablePath(pnp.resolveVirtual && locator.reference && locator.reference.startsWith(`virtual:`) ? pnp.resolveVirtual(pkg.packageLocation) : pkg.packageLocation);
        return fslib_12.ppath.contains(topPkgPortableLocation, realSoftLinkPath) === null;
      };
      var buildWorkspaceMap = (pnp) => {
        const topPkg = pnp.getPackageInformation(pnp.topLevel);
        if (topPkg === null)
          throw new Error(`Assertion failed: Expected the top-level package to have been registered`);
        const topLocator = pnp.findPackageLocator(topPkg.packageLocation);
        if (topLocator === null)
          throw new Error(`Assertion failed: Expected the top-level package to have a physical locator`);
        const topPkgPortableLocation = fslib_12.npath.toPortablePath(topPkg.packageLocation.slice(0, -1));
        const workspaceMap = /* @__PURE__ */ new Map;
        const workspaceTree = { children: /* @__PURE__ */ new Map };
        const pnpRoots = pnp.getDependencyTreeRoots();
        const workspaceLikeLocators = /* @__PURE__ */ new Map;
        const seen = /* @__PURE__ */ new Set;
        const visit = (locator, parentLocator) => {
          const locatorKey = stringifyLocator(locator);
          if (seen.has(locatorKey))
            return;
          seen.add(locatorKey);
          const pkg = pnp.getPackageInformation(locator);
          if (pkg) {
            const parentLocatorKey = parentLocator ? stringifyLocator(parentLocator) : ``;
            if (stringifyLocator(locator) !== parentLocatorKey && pkg.linkType === LinkType.SOFT && !locator.reference.startsWith(`link:`) && !isExternalSoftLink(pkg, locator, pnp, topPkgPortableLocation)) {
              const location = getRealPackageLocation(pkg, locator, pnp);
              const prevLocator = workspaceLikeLocators.get(location);
              if (!prevLocator || locator.reference.startsWith(`workspace:`)) {
                workspaceLikeLocators.set(location, locator);
              }
            }
            for (const [name, referencish] of pkg.packageDependencies) {
              if (referencish !== null) {
                if (!pkg.packagePeers.has(name)) {
                  visit(pnp.getLocator(name, referencish), locator);
                }
              }
            }
          }
        };
        for (const locator of pnpRoots)
          visit(locator, null);
        const cwdSegments = topPkgPortableLocation.split(fslib_12.ppath.sep);
        for (const locator of workspaceLikeLocators.values()) {
          const pkg = pnp.getPackageInformation(locator);
          const location = fslib_12.npath.toPortablePath(pkg.packageLocation.slice(0, -1));
          const segments = location.split(fslib_12.ppath.sep).slice(cwdSegments.length);
          let node = workspaceTree;
          for (const segment of segments) {
            let nextNode = node.children.get(segment);
            if (!nextNode) {
              nextNode = { children: /* @__PURE__ */ new Map };
              node.children.set(segment, nextNode);
            }
            node = nextNode;
          }
          node.workspaceLocator = locator;
        }
        const addWorkspace = (node, parentWorkspaceLocator) => {
          if (node.workspaceLocator) {
            const parentLocatorKey = stringifyLocator(parentWorkspaceLocator);
            let dependencies = workspaceMap.get(parentLocatorKey);
            if (!dependencies) {
              dependencies = /* @__PURE__ */ new Set;
              workspaceMap.set(parentLocatorKey, dependencies);
            }
            dependencies.add(node.workspaceLocator);
          }
          for (const child of node.children.values()) {
            addWorkspace(child, node.workspaceLocator || parentWorkspaceLocator);
          }
        };
        for (const child of workspaceTree.children.values())
          addWorkspace(child, workspaceTree.workspaceLocator);
        return workspaceMap;
      };
      var buildPackageTree = (pnp, options) => {
        const errors = [];
        let preserveSymlinksRequired = false;
        const hoistingLimits = /* @__PURE__ */ new Map;
        const workspaceMap = buildWorkspaceMap(pnp);
        const topPkg = pnp.getPackageInformation(pnp.topLevel);
        if (topPkg === null)
          throw new Error(`Assertion failed: Expected the top-level package to have been registered`);
        const topLocator = pnp.findPackageLocator(topPkg.packageLocation);
        if (topLocator === null)
          throw new Error(`Assertion failed: Expected the top-level package to have a physical locator`);
        const topPkgPortableLocation = fslib_12.npath.toPortablePath(topPkg.packageLocation.slice(0, -1));
        const packageTree = {
          name: topLocator.name,
          identName: topLocator.name,
          reference: topLocator.reference,
          peerNames: topPkg.packagePeers,
          dependencies: /* @__PURE__ */ new Set,
          dependencyKind: hoist_1.HoisterDependencyKind.WORKSPACE
        };
        const nodes = /* @__PURE__ */ new Map;
        const getNodeKey = (name, locator) => `${stringifyLocator(locator)}:${name}`;
        const addPackageToTree = (name, pkg, locator, parent, parentPkg, parentDependencies, parentRelativeCwd, isHoistBorder) => {
          const nodeKey = getNodeKey(name, locator);
          let node = nodes.get(nodeKey);
          const isSeen = !!node;
          if (!isSeen && locator.name === topLocator.name && locator.reference === topLocator.reference) {
            node = packageTree;
            nodes.set(nodeKey, packageTree);
          }
          const isExternalSoftLinkPackage = isExternalSoftLink(pkg, locator, pnp, topPkgPortableLocation);
          if (!node) {
            let dependencyKind = hoist_1.HoisterDependencyKind.REGULAR;
            if (isExternalSoftLinkPackage)
              dependencyKind = hoist_1.HoisterDependencyKind.EXTERNAL_SOFT_LINK;
            else if (pkg.linkType === LinkType.SOFT && locator.name.endsWith(WORKSPACE_NAME_SUFFIX))
              dependencyKind = hoist_1.HoisterDependencyKind.WORKSPACE;
            node = {
              name,
              identName: locator.name,
              reference: locator.reference,
              dependencies: /* @__PURE__ */ new Set,
              peerNames: dependencyKind === hoist_1.HoisterDependencyKind.WORKSPACE ? /* @__PURE__ */ new Set : pkg.packagePeers,
              dependencyKind
            };
            nodes.set(nodeKey, node);
          }
          let hoistPriority;
          if (isExternalSoftLinkPackage)
            hoistPriority = 2;
          else if (parentPkg.linkType === LinkType.SOFT)
            hoistPriority = 1;
          else
            hoistPriority = 0;
          node.hoistPriority = Math.max(node.hoistPriority || 0, hoistPriority);
          if (isHoistBorder && !isExternalSoftLinkPackage) {
            const parentLocatorKey = stringifyLocator({ name: parent.identName, reference: parent.reference });
            const dependencyBorders = hoistingLimits.get(parentLocatorKey) || /* @__PURE__ */ new Set;
            hoistingLimits.set(parentLocatorKey, dependencyBorders);
            dependencyBorders.add(node.name);
          }
          const allDependencies = new Map(pkg.packageDependencies);
          if (options.project) {
            const workspace = options.project.workspacesByCwd.get(fslib_12.npath.toPortablePath(pkg.packageLocation.slice(0, -1)));
            if (workspace) {
              const peerCandidates = /* @__PURE__ */ new Set([
                ...Array.from(workspace.manifest.peerDependencies.values(), (x) => core_1.structUtils.stringifyIdent(x)),
                ...Array.from(workspace.manifest.peerDependenciesMeta.keys())
              ]);
              for (const peerName of peerCandidates) {
                if (!allDependencies.has(peerName)) {
                  allDependencies.set(peerName, parentDependencies.get(peerName) || null);
                  node.peerNames.add(peerName);
                }
              }
            }
          }
          const locatorKey = stringifyLocator({ name: locator.name.replace(WORKSPACE_NAME_SUFFIX, ``), reference: locator.reference });
          const innerWorkspaces = workspaceMap.get(locatorKey);
          if (innerWorkspaces) {
            for (const workspaceLocator of innerWorkspaces) {
              allDependencies.set(`${workspaceLocator.name}${WORKSPACE_NAME_SUFFIX}`, workspaceLocator.reference);
            }
          }
          if (pkg !== parentPkg || pkg.linkType !== LinkType.SOFT || !isExternalSoftLinkPackage && (!options.selfReferencesByCwd || options.selfReferencesByCwd.get(parentRelativeCwd)))
            parent.dependencies.add(node);
          const isWorkspaceDependency = locator !== topLocator && pkg.linkType === LinkType.SOFT && !locator.name.endsWith(WORKSPACE_NAME_SUFFIX) && !isExternalSoftLinkPackage;
          if (!isSeen && !isWorkspaceDependency) {
            const siblingPortalDependencyMap = /* @__PURE__ */ new Map;
            for (const [depName, referencish] of allDependencies) {
              if (referencish !== null) {
                const depLocator = pnp.getLocator(depName, referencish);
                const pkgLocator = pnp.getLocator(depName.replace(WORKSPACE_NAME_SUFFIX, ``), referencish);
                const depPkg = pnp.getPackageInformation(pkgLocator);
                if (depPkg === null)
                  throw new Error(`Assertion failed: Expected the package to have been registered`);
                const isExternalSoftLinkDep = isExternalSoftLink(depPkg, depLocator, pnp, topPkgPortableLocation);
                if (options.validateExternalSoftLinks && options.project && isExternalSoftLinkDep) {
                  if (depPkg.packageDependencies.size > 0)
                    preserveSymlinksRequired = true;
                  for (const [name2, referencish2] of depPkg.packageDependencies) {
                    if (referencish2 !== null) {
                      const portalDependencyLocator = core_1.structUtils.parseLocator(Array.isArray(referencish2) ? `${referencish2[0]}@${referencish2[1]}` : `${name2}@${referencish2}`);
                      if (stringifyLocator(portalDependencyLocator) !== stringifyLocator(depLocator)) {
                        const parentDependencyReferencish = allDependencies.get(name2);
                        if (parentDependencyReferencish) {
                          const parentDependencyLocator = core_1.structUtils.parseLocator(Array.isArray(parentDependencyReferencish) ? `${parentDependencyReferencish[0]}@${parentDependencyReferencish[1]}` : `${name2}@${parentDependencyReferencish}`);
                          if (!areRealLocatorsEqual(parentDependencyLocator, portalDependencyLocator)) {
                            errors.push({
                              messageName: core_1.MessageName.NM_CANT_INSTALL_EXTERNAL_SOFT_LINK,
                              text: `Cannot link ${core_1.structUtils.prettyIdent(options.project.configuration, core_1.structUtils.parseIdent(depLocator.name))} into ${core_1.structUtils.prettyLocator(options.project.configuration, core_1.structUtils.parseLocator(`${locator.name}@${locator.reference}`))} dependency ${core_1.structUtils.prettyLocator(options.project.configuration, portalDependencyLocator)} conflicts with parent dependency ${core_1.structUtils.prettyLocator(options.project.configuration, parentDependencyLocator)}`
                            });
                          }
                        } else {
                          const siblingPortalDependency = siblingPortalDependencyMap.get(name2);
                          if (siblingPortalDependency) {
                            const siblingReferncish = siblingPortalDependency.target;
                            const siblingPortalDependencyLocator = core_1.structUtils.parseLocator(Array.isArray(siblingReferncish) ? `${siblingReferncish[0]}@${siblingReferncish[1]}` : `${name2}@${siblingReferncish}`);
                            if (!areRealLocatorsEqual(siblingPortalDependencyLocator, portalDependencyLocator)) {
                              errors.push({
                                messageName: core_1.MessageName.NM_CANT_INSTALL_EXTERNAL_SOFT_LINK,
                                text: `Cannot link ${core_1.structUtils.prettyIdent(options.project.configuration, core_1.structUtils.parseIdent(depLocator.name))} into ${core_1.structUtils.prettyLocator(options.project.configuration, core_1.structUtils.parseLocator(`${locator.name}@${locator.reference}`))} dependency ${core_1.structUtils.prettyLocator(options.project.configuration, portalDependencyLocator)} conflicts with dependency ${core_1.structUtils.prettyLocator(options.project.configuration, siblingPortalDependencyLocator)} from sibling portal ${core_1.structUtils.prettyIdent(options.project.configuration, core_1.structUtils.parseIdent(siblingPortalDependency.portal.name))}`
                              });
                            }
                          } else {
                            siblingPortalDependencyMap.set(name2, { target: portalDependencyLocator.reference, portal: depLocator });
                          }
                        }
                      }
                    }
                  }
                }
                const parentHoistingLimits = options.hoistingLimitsByCwd?.get(parentRelativeCwd);
                const relativeDepCwd = isExternalSoftLinkDep ? parentRelativeCwd : fslib_12.ppath.relative(topPkgPortableLocation, fslib_12.npath.toPortablePath(depPkg.packageLocation)) || fslib_2.PortablePath.dot;
                const depHoistingLimits = options.hoistingLimitsByCwd?.get(relativeDepCwd);
                const isHoistBorder2 = parentHoistingLimits === NodeModulesHoistingLimits.DEPENDENCIES || depHoistingLimits === NodeModulesHoistingLimits.DEPENDENCIES || depHoistingLimits === NodeModulesHoistingLimits.WORKSPACES;
                addPackageToTree(depName, depPkg, depLocator, node, pkg, allDependencies, relativeDepCwd, isHoistBorder2);
              }
            }
          }
        };
        addPackageToTree(topLocator.name, topPkg, topLocator, packageTree, topPkg, topPkg.packageDependencies, fslib_2.PortablePath.dot, false);
        return { packageTree, hoistingLimits, errors, preserveSymlinksRequired };
      };
      function getRealPackageLocation(pkg, locator, pnp) {
        const realPath = pnp.resolveVirtual && locator.reference && locator.reference.startsWith(`virtual:`) ? pnp.resolveVirtual(pkg.packageLocation) : pkg.packageLocation;
        return fslib_12.npath.toPortablePath(realPath || pkg.packageLocation);
      }
      function getTargetLocatorPath(locator, pnp, options) {
        const pkgLocator = pnp.getLocator(locator.name.replace(WORKSPACE_NAME_SUFFIX, ``), locator.reference);
        const info = pnp.getPackageInformation(pkgLocator);
        if (info === null)
          throw new Error(`Assertion failed: Expected the package to be registered`);
        return options.pnpifyFs ? { linkType: LinkType.SOFT, target: fslib_12.npath.toPortablePath(info.packageLocation) } : { linkType: info.linkType, target: getRealPackageLocation(info, locator, pnp) };
      }
      var populateNodeModulesTree = (pnp, hoistedTree, options) => {
        const tree = /* @__PURE__ */ new Map;
        const makeLeafNode = (locator, nodePath, aliases) => {
          const { linkType, target } = getTargetLocatorPath(locator, pnp, options);
          return {
            locator: stringifyLocator(locator),
            nodePath,
            target,
            linkType,
            aliases
          };
        };
        const getPackageName = (identName) => {
          const [nameOrScope, name] = identName.split(`/`);
          return name ? {
            scope: nameOrScope,
            name
          } : {
            scope: null,
            name: nameOrScope
          };
        };
        const seenNodes = /* @__PURE__ */ new Set;
        const buildTree = (pkg, locationPrefix, parentNodePath) => {
          if (seenNodes.has(pkg))
            return;
          seenNodes.add(pkg);
          const pkgReferences = Array.from(pkg.references).sort().join(`#`);
          for (const dep of pkg.dependencies) {
            const depReferences = Array.from(dep.references).sort().join(`#`);
            if (dep.identName === pkg.identName.replace(WORKSPACE_NAME_SUFFIX, ``) && depReferences === pkgReferences)
              continue;
            const references = Array.from(dep.references).sort();
            const locator = { name: dep.identName, reference: references[0] };
            const { name, scope } = getPackageName(dep.name);
            const packageNameParts = scope ? [scope, name] : [name];
            const nodeModulesDirPath = fslib_12.ppath.join(locationPrefix, NODE_MODULES);
            const nodeModulesLocation = fslib_12.ppath.join(nodeModulesDirPath, ...packageNameParts);
            const nodePath = `${parentNodePath}/${locator.name}`;
            const leafNode = makeLeafNode(locator, parentNodePath, references.slice(1));
            let isAnonymousWorkspace = false;
            if (leafNode.linkType === LinkType.SOFT && options.project) {
              const workspace = options.project.workspacesByCwd.get(leafNode.target.slice(0, -1));
              isAnonymousWorkspace = !!(workspace && !workspace.manifest.name);
            }
            if (!dep.name.endsWith(WORKSPACE_NAME_SUFFIX) && !isAnonymousWorkspace) {
              const prevNode = tree.get(nodeModulesLocation);
              if (prevNode) {
                if (prevNode.dirList) {
                  throw new Error(`Assertion failed: ${nodeModulesLocation} cannot merge dir node with leaf node`);
                } else {
                  const locator1 = core_1.structUtils.parseLocator(prevNode.locator);
                  const locator2 = core_1.structUtils.parseLocator(leafNode.locator);
                  if (prevNode.linkType !== leafNode.linkType)
                    throw new Error(`Assertion failed: ${nodeModulesLocation} cannot merge nodes with different link types ${prevNode.nodePath}/${core_1.structUtils.stringifyLocator(locator1)} and ${parentNodePath}/${core_1.structUtils.stringifyLocator(locator2)}`);
                  else if (locator1.identHash !== locator2.identHash)
                    throw new Error(`Assertion failed: ${nodeModulesLocation} cannot merge nodes with different idents ${prevNode.nodePath}/${core_1.structUtils.stringifyLocator(locator1)} and ${parentNodePath}/s${core_1.structUtils.stringifyLocator(locator2)}`);
                  leafNode.aliases = [...leafNode.aliases, ...prevNode.aliases, core_1.structUtils.parseLocator(prevNode.locator).reference];
                }
              }
              tree.set(nodeModulesLocation, leafNode);
              const segments = nodeModulesLocation.split(`/`);
              const nodeModulesIdx = segments.indexOf(NODE_MODULES);
              for (let segCount = segments.length - 1;nodeModulesIdx >= 0 && segCount > nodeModulesIdx; segCount--) {
                const dirPath = fslib_12.npath.toPortablePath(segments.slice(0, segCount).join(fslib_12.ppath.sep));
                const targetDir = segments[segCount];
                const subdirs = tree.get(dirPath);
                if (!subdirs) {
                  tree.set(dirPath, { dirList: /* @__PURE__ */ new Set([targetDir]) });
                } else if (subdirs.dirList) {
                  if (subdirs.dirList.has(targetDir)) {
                    break;
                  } else {
                    subdirs.dirList.add(targetDir);
                  }
                }
              }
            }
            buildTree(dep, leafNode.linkType === LinkType.SOFT ? leafNode.target : nodeModulesLocation, nodePath);
          }
        };
        const rootNode = makeLeafNode({ name: hoistedTree.name, reference: Array.from(hoistedTree.references)[0] }, ``, []);
        const rootPath = rootNode.target;
        tree.set(rootPath, rootNode);
        buildTree(hoistedTree, rootPath, ``);
        return tree;
      };
    }
  });
  var require_lib7 = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+nm@4.0.5_typanion@3.14.0/node_modules/@yarnpkg/nm/lib/index.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.HoisterDependencyKind = exports22.hoist = exports22.getArchivePath = exports22.buildLocatorMap = exports22.buildNodeModulesTree = exports22.NodeModulesHoistingLimits = undefined;
      var buildNodeModulesTree_1 = require_buildNodeModulesTree();
      Object.defineProperty(exports22, "getArchivePath", { enumerable: true, get: function() {
        return buildNodeModulesTree_1.getArchivePath;
      } });
      var buildNodeModulesTree_2 = require_buildNodeModulesTree();
      Object.defineProperty(exports22, "buildNodeModulesTree", { enumerable: true, get: function() {
        return buildNodeModulesTree_2.buildNodeModulesTree;
      } });
      Object.defineProperty(exports22, "buildLocatorMap", { enumerable: true, get: function() {
        return buildNodeModulesTree_2.buildLocatorMap;
      } });
      var buildNodeModulesTree_3 = require_buildNodeModulesTree();
      Object.defineProperty(exports22, "NodeModulesHoistingLimits", { enumerable: true, get: function() {
        return buildNodeModulesTree_3.NodeModulesHoistingLimits;
      } });
      var hoist_1 = require_hoist();
      Object.defineProperty(exports22, "hoist", { enumerable: true, get: function() {
        return hoist_1.hoist;
      } });
      Object.defineProperty(exports22, "HoisterDependencyKind", { enumerable: true, get: function() {
        return hoist_1.HoisterDependencyKind;
      } });
    }
  });
  var require_lib8 = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+pnp@4.0.8/node_modules/@yarnpkg/pnp/lib/index.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var require$$0 = __require("zlib");
      var path2 = __require("path");
      var module$1 = __require("module");
      var url = __require("url");
      var nodeUtils = __require("util");
      var assert = __require("assert");
      var fs = __require("fs");
      var crypto = __require("crypto");
      var os = __require("os");
      var _interopDefaultLegacy = (e) => e && typeof e === "object" && ("default" in e) ? e : { default: e };
      var require$$0__default = /* @__PURE__ */ _interopDefaultLegacy(require$$0);
      var path__default = /* @__PURE__ */ _interopDefaultLegacy(path2);
      var assert__default = /* @__PURE__ */ _interopDefaultLegacy(assert);
      var fs__default = /* @__PURE__ */ _interopDefaultLegacy(fs);
      var LinkType = /* @__PURE__ */ ((LinkType2) => {
        LinkType2["HARD"] = `HARD`;
        LinkType2["SOFT"] = `SOFT`;
        return LinkType2;
      })(LinkType || {});
      var SAFE_TIME = 456789000;
      var PortablePath = {
        root: `/`,
        dot: `.`,
        parent: `..`
      };
      var Filename = {
        home: `~`,
        nodeModules: `node_modules`,
        manifest: `package.json`,
        lockfile: `yarn.lock`,
        virtual: `__virtual__`,
        pnpJs: `.pnp.js`,
        pnpCjs: `.pnp.cjs`,
        pnpData: `.pnp.data.json`,
        pnpEsmLoader: `.pnp.loader.mjs`,
        rc: `.yarnrc.yml`,
        env: `.env`
      };
      var npath = Object.create(path__default.default);
      var ppath = Object.create(path__default.default.posix);
      npath.cwd = () => process.cwd();
      ppath.cwd = process.platform === `win32` ? () => toPortablePath(process.cwd()) : process.cwd;
      if (process.platform === `win32`) {
        ppath.resolve = (...segments) => {
          if (segments.length > 0 && ppath.isAbsolute(segments[0])) {
            return path__default.default.posix.resolve(...segments);
          } else {
            return path__default.default.posix.resolve(ppath.cwd(), ...segments);
          }
        };
      }
      var contains = function(pathUtils, from, to) {
        from = pathUtils.normalize(from);
        to = pathUtils.normalize(to);
        if (from === to)
          return `.`;
        if (!from.endsWith(pathUtils.sep))
          from = from + pathUtils.sep;
        if (to.startsWith(from)) {
          return to.slice(from.length);
        } else {
          return null;
        }
      };
      npath.contains = (from, to) => contains(npath, from, to);
      ppath.contains = (from, to) => contains(ppath, from, to);
      var WINDOWS_PATH_REGEXP = /^([a-zA-Z]:.*)$/;
      var UNC_WINDOWS_PATH_REGEXP = /^\/\/(\.\/)?(.*)$/;
      var PORTABLE_PATH_REGEXP = /^\/([a-zA-Z]:.*)$/;
      var UNC_PORTABLE_PATH_REGEXP = /^\/unc\/(\.dot\/)?(.*)$/;
      function fromPortablePathWin32(p) {
        let portablePathMatch, uncPortablePathMatch;
        if (portablePathMatch = p.match(PORTABLE_PATH_REGEXP))
          p = portablePathMatch[1];
        else if (uncPortablePathMatch = p.match(UNC_PORTABLE_PATH_REGEXP))
          p = `\\\\${uncPortablePathMatch[1] ? `.\\` : ``}${uncPortablePathMatch[2]}`;
        else
          return p;
        return p.replace(/\//g, `\\`);
      }
      function toPortablePathWin32(p) {
        p = p.replace(/\\/g, `/`);
        let windowsPathMatch, uncWindowsPathMatch;
        if (windowsPathMatch = p.match(WINDOWS_PATH_REGEXP))
          p = `/${windowsPathMatch[1]}`;
        else if (uncWindowsPathMatch = p.match(UNC_WINDOWS_PATH_REGEXP))
          p = `/unc/${uncWindowsPathMatch[1] ? `.dot/` : ``}${uncWindowsPathMatch[2]}`;
        return p;
      }
      var toPortablePath = process.platform === `win32` ? toPortablePathWin32 : (p) => p;
      var fromPortablePath = process.platform === `win32` ? fromPortablePathWin32 : (p) => p;
      npath.fromPortablePath = fromPortablePath;
      npath.toPortablePath = toPortablePath;
      function convertPath(targetPathUtils, sourcePath) {
        return targetPathUtils === npath ? fromPortablePath(sourcePath) : toPortablePath(sourcePath);
      }
      var defaultTime = new Date(SAFE_TIME * 1000);
      var defaultTimeMs = defaultTime.getTime();
      async function copyPromise(destinationFs, destination, sourceFs, source, opts) {
        const normalizedDestination = destinationFs.pathUtils.normalize(destination);
        const normalizedSource = sourceFs.pathUtils.normalize(source);
        const prelayout = [];
        const postlayout = [];
        const { atime, mtime } = opts.stableTime ? { atime: defaultTime, mtime: defaultTime } : await sourceFs.lstatPromise(normalizedSource);
        await destinationFs.mkdirpPromise(destinationFs.pathUtils.dirname(destination), { utimes: [atime, mtime] });
        await copyImpl(prelayout, postlayout, destinationFs, normalizedDestination, sourceFs, normalizedSource, { ...opts, didParentExist: true });
        for (const operation of prelayout)
          await operation();
        await Promise.all(postlayout.map((operation) => {
          return operation();
        }));
      }
      async function copyImpl(prelayout, postlayout, destinationFs, destination, sourceFs, source, opts) {
        const destinationStat = opts.didParentExist ? await maybeLStat(destinationFs, destination) : null;
        const sourceStat = await sourceFs.lstatPromise(source);
        const { atime, mtime } = opts.stableTime ? { atime: defaultTime, mtime: defaultTime } : sourceStat;
        let updated;
        switch (true) {
          case sourceStat.isDirectory():
            {
              updated = await copyFolder(prelayout, postlayout, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts);
            }
            break;
          case sourceStat.isFile():
            {
              updated = await copyFile(prelayout, postlayout, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts);
            }
            break;
          case sourceStat.isSymbolicLink():
            {
              updated = await copySymlink(prelayout, postlayout, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts);
            }
            break;
          default: {
            throw new Error(`Unsupported file type (${sourceStat.mode})`);
          }
        }
        if (opts.linkStrategy?.type !== `HardlinkFromIndex` || !sourceStat.isFile()) {
          if (updated || destinationStat?.mtime?.getTime() !== mtime.getTime() || destinationStat?.atime?.getTime() !== atime.getTime()) {
            postlayout.push(() => destinationFs.lutimesPromise(destination, atime, mtime));
            updated = true;
          }
          if (destinationStat === null || (destinationStat.mode & 511) !== (sourceStat.mode & 511)) {
            postlayout.push(() => destinationFs.chmodPromise(destination, sourceStat.mode & 511));
            updated = true;
          }
        }
        return updated;
      }
      async function maybeLStat(baseFs, p) {
        try {
          return await baseFs.lstatPromise(p);
        } catch (e) {
          return null;
        }
      }
      async function copyFolder(prelayout, postlayout, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts) {
        if (destinationStat !== null && !destinationStat.isDirectory()) {
          if (opts.overwrite) {
            prelayout.push(async () => destinationFs.removePromise(destination));
            destinationStat = null;
          } else {
            return false;
          }
        }
        let updated = false;
        if (destinationStat === null) {
          prelayout.push(async () => {
            try {
              await destinationFs.mkdirPromise(destination, { mode: sourceStat.mode });
            } catch (err) {
              if (err.code !== `EEXIST`) {
                throw err;
              }
            }
          });
          updated = true;
        }
        const entries = await sourceFs.readdirPromise(source);
        const nextOpts = opts.didParentExist && !destinationStat ? { ...opts, didParentExist: false } : opts;
        if (opts.stableSort) {
          for (const entry of entries.sort()) {
            if (await copyImpl(prelayout, postlayout, destinationFs, destinationFs.pathUtils.join(destination, entry), sourceFs, sourceFs.pathUtils.join(source, entry), nextOpts)) {
              updated = true;
            }
          }
        } else {
          const entriesUpdateStatus = await Promise.all(entries.map(async (entry) => {
            await copyImpl(prelayout, postlayout, destinationFs, destinationFs.pathUtils.join(destination, entry), sourceFs, sourceFs.pathUtils.join(source, entry), nextOpts);
          }));
          if (entriesUpdateStatus.some((status) => status)) {
            updated = true;
          }
        }
        return updated;
      }
      async function copyFileViaIndex(prelayout, postlayout, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts, linkStrategy) {
        const sourceHash = await sourceFs.checksumFilePromise(source, { algorithm: `sha1` });
        const defaultMode = 420;
        const sourceMode = sourceStat.mode & 511;
        const indexFileName = `${sourceHash}${sourceMode !== defaultMode ? sourceMode.toString(8) : ``}`;
        const indexPath = destinationFs.pathUtils.join(linkStrategy.indexPath, sourceHash.slice(0, 2), `${indexFileName}.dat`);
        let AtomicBehavior;
        ((AtomicBehavior2) => {
          AtomicBehavior2[AtomicBehavior2["Lock"] = 0] = "Lock";
          AtomicBehavior2[AtomicBehavior2["Rename"] = 1] = "Rename";
        })(AtomicBehavior || (AtomicBehavior = {}));
        let atomicBehavior = 1;
        let indexStat = await maybeLStat(destinationFs, indexPath);
        if (destinationStat) {
          const isDestinationHardlinkedFromIndex = indexStat && destinationStat.dev === indexStat.dev && destinationStat.ino === indexStat.ino;
          const isIndexModified = indexStat?.mtimeMs !== defaultTimeMs;
          if (isDestinationHardlinkedFromIndex) {
            if (isIndexModified && linkStrategy.autoRepair) {
              atomicBehavior = 0;
              indexStat = null;
            }
          }
          if (!isDestinationHardlinkedFromIndex) {
            if (opts.overwrite) {
              prelayout.push(async () => destinationFs.removePromise(destination));
              destinationStat = null;
            } else {
              return false;
            }
          }
        }
        const tempPath = !indexStat && atomicBehavior === 1 ? `${indexPath}.${Math.floor(Math.random() * 4294967296).toString(16).padStart(8, `0`)}` : null;
        let tempPathCleaned = false;
        prelayout.push(async () => {
          if (!indexStat) {
            if (atomicBehavior === 0) {
              await destinationFs.lockPromise(indexPath, async () => {
                const content = await sourceFs.readFilePromise(source);
                await destinationFs.writeFilePromise(indexPath, content);
              });
            }
            if (atomicBehavior === 1 && tempPath) {
              const content = await sourceFs.readFilePromise(source);
              await destinationFs.writeFilePromise(tempPath, content);
              try {
                await destinationFs.linkPromise(tempPath, indexPath);
              } catch (err) {
                if (err.code === `EEXIST`) {
                  tempPathCleaned = true;
                  await destinationFs.unlinkPromise(tempPath);
                } else {
                  throw err;
                }
              }
            }
          }
          if (!destinationStat) {
            await destinationFs.linkPromise(indexPath, destination);
          }
        });
        postlayout.push(async () => {
          if (!indexStat) {
            await destinationFs.lutimesPromise(indexPath, defaultTime, defaultTime);
            if (sourceMode !== defaultMode) {
              await destinationFs.chmodPromise(indexPath, sourceMode);
            }
          }
          if (tempPath && !tempPathCleaned) {
            await destinationFs.unlinkPromise(tempPath);
          }
        });
        return false;
      }
      async function copyFileDirect(prelayout, postlayout, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts) {
        if (destinationStat !== null) {
          if (opts.overwrite) {
            prelayout.push(async () => destinationFs.removePromise(destination));
            destinationStat = null;
          } else {
            return false;
          }
        }
        prelayout.push(async () => {
          const content = await sourceFs.readFilePromise(source);
          await destinationFs.writeFilePromise(destination, content);
        });
        return true;
      }
      async function copyFile(prelayout, postlayout, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts) {
        if (opts.linkStrategy?.type === `HardlinkFromIndex`) {
          return copyFileViaIndex(prelayout, postlayout, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts, opts.linkStrategy);
        } else {
          return copyFileDirect(prelayout, postlayout, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts);
        }
      }
      async function copySymlink(prelayout, postlayout, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts) {
        if (destinationStat !== null) {
          if (opts.overwrite) {
            prelayout.push(async () => destinationFs.removePromise(destination));
            destinationStat = null;
          } else {
            return false;
          }
        }
        prelayout.push(async () => {
          await destinationFs.symlinkPromise(convertPath(destinationFs.pathUtils, await sourceFs.readlinkPromise(source)), destination);
        });
        return true;
      }
      var FakeFS = class {
        pathUtils;
        constructor(pathUtils) {
          this.pathUtils = pathUtils;
        }
        async* genTraversePromise(init, { stableSort = false } = {}) {
          const stack = [init];
          while (stack.length > 0) {
            const p = stack.shift();
            const entry = await this.lstatPromise(p);
            if (entry.isDirectory()) {
              const entries = await this.readdirPromise(p);
              if (stableSort) {
                for (const entry2 of entries.sort()) {
                  stack.push(this.pathUtils.join(p, entry2));
                }
              } else {
                throw new Error(`Not supported`);
              }
            } else {
              yield p;
            }
          }
        }
        async checksumFilePromise(path3, { algorithm = `sha512` } = {}) {
          const fd = await this.openPromise(path3, `r`);
          try {
            const CHUNK_SIZE = 65536;
            const chunk = Buffer.allocUnsafeSlow(CHUNK_SIZE);
            const hash = crypto.createHash(algorithm);
            let bytesRead = 0;
            while ((bytesRead = await this.readPromise(fd, chunk, 0, CHUNK_SIZE)) !== 0)
              hash.update(bytesRead === CHUNK_SIZE ? chunk : chunk.slice(0, bytesRead));
            return hash.digest(`hex`);
          } finally {
            await this.closePromise(fd);
          }
        }
        async removePromise(p, { recursive = true, maxRetries = 5 } = {}) {
          let stat;
          try {
            stat = await this.lstatPromise(p);
          } catch (error) {
            if (error.code === `ENOENT`) {
              return;
            } else {
              throw error;
            }
          }
          if (stat.isDirectory()) {
            if (recursive) {
              const entries = await this.readdirPromise(p);
              await Promise.all(entries.map((entry) => {
                return this.removePromise(this.pathUtils.resolve(p, entry));
              }));
            }
            for (let t = 0;t <= maxRetries; t++) {
              try {
                await this.rmdirPromise(p);
                break;
              } catch (error) {
                if (error.code !== `EBUSY` && error.code !== `ENOTEMPTY`) {
                  throw error;
                } else if (t < maxRetries) {
                  await new Promise((resolve) => setTimeout(resolve, t * 100));
                }
              }
            }
          } else {
            await this.unlinkPromise(p);
          }
        }
        removeSync(p, { recursive = true } = {}) {
          let stat;
          try {
            stat = this.lstatSync(p);
          } catch (error) {
            if (error.code === `ENOENT`) {
              return;
            } else {
              throw error;
            }
          }
          if (stat.isDirectory()) {
            if (recursive)
              for (const entry of this.readdirSync(p))
                this.removeSync(this.pathUtils.resolve(p, entry));
            this.rmdirSync(p);
          } else {
            this.unlinkSync(p);
          }
        }
        async mkdirpPromise(p, { chmod, utimes } = {}) {
          p = this.resolve(p);
          if (p === this.pathUtils.dirname(p))
            return;
          const parts = p.split(this.pathUtils.sep);
          let createdDirectory;
          for (let u = 2;u <= parts.length; ++u) {
            const subPath = parts.slice(0, u).join(this.pathUtils.sep);
            if (!this.existsSync(subPath)) {
              try {
                await this.mkdirPromise(subPath);
              } catch (error) {
                if (error.code === `EEXIST`) {
                  continue;
                } else {
                  throw error;
                }
              }
              createdDirectory ??= subPath;
              if (chmod != null)
                await this.chmodPromise(subPath, chmod);
              if (utimes != null) {
                await this.utimesPromise(subPath, utimes[0], utimes[1]);
              } else {
                const parentStat = await this.statPromise(this.pathUtils.dirname(subPath));
                await this.utimesPromise(subPath, parentStat.atime, parentStat.mtime);
              }
            }
          }
          return createdDirectory;
        }
        mkdirpSync(p, { chmod, utimes } = {}) {
          p = this.resolve(p);
          if (p === this.pathUtils.dirname(p))
            return;
          const parts = p.split(this.pathUtils.sep);
          let createdDirectory;
          for (let u = 2;u <= parts.length; ++u) {
            const subPath = parts.slice(0, u).join(this.pathUtils.sep);
            if (!this.existsSync(subPath)) {
              try {
                this.mkdirSync(subPath);
              } catch (error) {
                if (error.code === `EEXIST`) {
                  continue;
                } else {
                  throw error;
                }
              }
              createdDirectory ??= subPath;
              if (chmod != null)
                this.chmodSync(subPath, chmod);
              if (utimes != null) {
                this.utimesSync(subPath, utimes[0], utimes[1]);
              } else {
                const parentStat = this.statSync(this.pathUtils.dirname(subPath));
                this.utimesSync(subPath, parentStat.atime, parentStat.mtime);
              }
            }
          }
          return createdDirectory;
        }
        async copyPromise(destination, source, { baseFs = this, overwrite = true, stableSort = false, stableTime = false, linkStrategy = null } = {}) {
          return await copyPromise(this, destination, baseFs, source, { overwrite, stableSort, stableTime, linkStrategy });
        }
        copySync(destination, source, { baseFs = this, overwrite = true } = {}) {
          const stat = baseFs.lstatSync(source);
          const exists = this.existsSync(destination);
          if (stat.isDirectory()) {
            this.mkdirpSync(destination);
            const directoryListing = baseFs.readdirSync(source);
            for (const entry of directoryListing) {
              this.copySync(this.pathUtils.join(destination, entry), baseFs.pathUtils.join(source, entry), { baseFs, overwrite });
            }
          } else if (stat.isFile()) {
            if (!exists || overwrite) {
              if (exists)
                this.removeSync(destination);
              const content = baseFs.readFileSync(source);
              this.writeFileSync(destination, content);
            }
          } else if (stat.isSymbolicLink()) {
            if (!exists || overwrite) {
              if (exists)
                this.removeSync(destination);
              const target = baseFs.readlinkSync(source);
              this.symlinkSync(convertPath(this.pathUtils, target), destination);
            }
          } else {
            throw new Error(`Unsupported file type (file: ${source}, mode: 0o${stat.mode.toString(8).padStart(6, `0`)})`);
          }
          const mode = stat.mode & 511;
          this.chmodSync(destination, mode);
        }
        async changeFilePromise(p, content, opts = {}) {
          if (Buffer.isBuffer(content)) {
            return this.changeFileBufferPromise(p, content, opts);
          } else {
            return this.changeFileTextPromise(p, content, opts);
          }
        }
        async changeFileBufferPromise(p, content, { mode } = {}) {
          let current = Buffer.alloc(0);
          try {
            current = await this.readFilePromise(p);
          } catch (error) {
          }
          if (Buffer.compare(current, content) === 0)
            return;
          await this.writeFilePromise(p, content, { mode });
        }
        async changeFileTextPromise(p, content, { automaticNewlines, mode } = {}) {
          let current = ``;
          try {
            current = await this.readFilePromise(p, `utf8`);
          } catch (error) {
          }
          const normalizedContent = automaticNewlines ? normalizeLineEndings(current, content) : content;
          if (current === normalizedContent)
            return;
          await this.writeFilePromise(p, normalizedContent, { mode });
        }
        changeFileSync(p, content, opts = {}) {
          if (Buffer.isBuffer(content)) {
            return this.changeFileBufferSync(p, content, opts);
          } else {
            return this.changeFileTextSync(p, content, opts);
          }
        }
        changeFileBufferSync(p, content, { mode } = {}) {
          let current = Buffer.alloc(0);
          try {
            current = this.readFileSync(p);
          } catch (error) {
          }
          if (Buffer.compare(current, content) === 0)
            return;
          this.writeFileSync(p, content, { mode });
        }
        changeFileTextSync(p, content, { automaticNewlines = false, mode } = {}) {
          let current = ``;
          try {
            current = this.readFileSync(p, `utf8`);
          } catch (error) {
          }
          const normalizedContent = automaticNewlines ? normalizeLineEndings(current, content) : content;
          if (current === normalizedContent)
            return;
          this.writeFileSync(p, normalizedContent, { mode });
        }
        async movePromise(fromP, toP) {
          try {
            await this.renamePromise(fromP, toP);
          } catch (error) {
            if (error.code === `EXDEV`) {
              await this.copyPromise(toP, fromP);
              await this.removePromise(fromP);
            } else {
              throw error;
            }
          }
        }
        moveSync(fromP, toP) {
          try {
            this.renameSync(fromP, toP);
          } catch (error) {
            if (error.code === `EXDEV`) {
              this.copySync(toP, fromP);
              this.removeSync(fromP);
            } else {
              throw error;
            }
          }
        }
        async lockPromise(affectedPath, callback) {
          const lockPath = `${affectedPath}.flock`;
          const interval = 1000 / 60;
          const startTime = Date.now();
          let fd = null;
          const isAlive = async () => {
            let pid;
            try {
              [pid] = await this.readJsonPromise(lockPath);
            } catch (error) {
              return Date.now() - startTime < 500;
            }
            try {
              process.kill(pid, 0);
              return true;
            } catch (error) {
              return false;
            }
          };
          while (fd === null) {
            try {
              fd = await this.openPromise(lockPath, `wx`);
            } catch (error) {
              if (error.code === `EEXIST`) {
                if (!await isAlive()) {
                  try {
                    await this.unlinkPromise(lockPath);
                    continue;
                  } catch (error2) {
                  }
                }
                if (Date.now() - startTime < 60 * 1000) {
                  await new Promise((resolve) => setTimeout(resolve, interval));
                } else {
                  throw new Error(`Couldn't acquire a lock in a reasonable time (via ${lockPath})`);
                }
              } else {
                throw error;
              }
            }
          }
          await this.writePromise(fd, JSON.stringify([process.pid]));
          try {
            return await callback();
          } finally {
            try {
              await this.closePromise(fd);
              await this.unlinkPromise(lockPath);
            } catch (error) {
            }
          }
        }
        async readJsonPromise(p) {
          const content = await this.readFilePromise(p, `utf8`);
          try {
            return JSON.parse(content);
          } catch (error) {
            error.message += ` (in ${p})`;
            throw error;
          }
        }
        readJsonSync(p) {
          const content = this.readFileSync(p, `utf8`);
          try {
            return JSON.parse(content);
          } catch (error) {
            error.message += ` (in ${p})`;
            throw error;
          }
        }
        async writeJsonPromise(p, data, { compact = false } = {}) {
          const space = compact ? 0 : 2;
          return await this.writeFilePromise(p, `${JSON.stringify(data, null, space)}
`);
        }
        writeJsonSync(p, data, { compact = false } = {}) {
          const space = compact ? 0 : 2;
          return this.writeFileSync(p, `${JSON.stringify(data, null, space)}
`);
        }
        async preserveTimePromise(p, cb) {
          const stat = await this.lstatPromise(p);
          const result2 = await cb();
          if (typeof result2 !== `undefined`)
            p = result2;
          await this.lutimesPromise(p, stat.atime, stat.mtime);
        }
        async preserveTimeSync(p, cb) {
          const stat = this.lstatSync(p);
          const result2 = cb();
          if (typeof result2 !== `undefined`)
            p = result2;
          this.lutimesSync(p, stat.atime, stat.mtime);
        }
      };
      var BasePortableFakeFS = class extends FakeFS {
        constructor() {
          super(ppath);
        }
      };
      function getEndOfLine(content) {
        const matches = content.match(/\r?\n/g);
        if (matches === null)
          return os.EOL;
        const crlf = matches.filter((nl) => nl === `\r
`).length;
        const lf = matches.length - crlf;
        return crlf > lf ? `\r
` : `
`;
      }
      function normalizeLineEndings(originalContent, newContent) {
        return newContent.replace(/\r?\n/g, getEndOfLine(originalContent));
      }
      var ProxiedFS = class extends FakeFS {
        getExtractHint(hints) {
          return this.baseFs.getExtractHint(hints);
        }
        resolve(path3) {
          return this.mapFromBase(this.baseFs.resolve(this.mapToBase(path3)));
        }
        getRealPath() {
          return this.mapFromBase(this.baseFs.getRealPath());
        }
        async openPromise(p, flags, mode) {
          return this.baseFs.openPromise(this.mapToBase(p), flags, mode);
        }
        openSync(p, flags, mode) {
          return this.baseFs.openSync(this.mapToBase(p), flags, mode);
        }
        async opendirPromise(p, opts) {
          return Object.assign(await this.baseFs.opendirPromise(this.mapToBase(p), opts), { path: p });
        }
        opendirSync(p, opts) {
          return Object.assign(this.baseFs.opendirSync(this.mapToBase(p), opts), { path: p });
        }
        async readPromise(fd, buffer, offset, length, position) {
          return await this.baseFs.readPromise(fd, buffer, offset, length, position);
        }
        readSync(fd, buffer, offset, length, position) {
          return this.baseFs.readSync(fd, buffer, offset, length, position);
        }
        async writePromise(fd, buffer, offset, length, position) {
          if (typeof buffer === `string`) {
            return await this.baseFs.writePromise(fd, buffer, offset);
          } else {
            return await this.baseFs.writePromise(fd, buffer, offset, length, position);
          }
        }
        writeSync(fd, buffer, offset, length, position) {
          if (typeof buffer === `string`) {
            return this.baseFs.writeSync(fd, buffer, offset);
          } else {
            return this.baseFs.writeSync(fd, buffer, offset, length, position);
          }
        }
        async closePromise(fd) {
          return this.baseFs.closePromise(fd);
        }
        closeSync(fd) {
          this.baseFs.closeSync(fd);
        }
        createReadStream(p, opts) {
          return this.baseFs.createReadStream(p !== null ? this.mapToBase(p) : p, opts);
        }
        createWriteStream(p, opts) {
          return this.baseFs.createWriteStream(p !== null ? this.mapToBase(p) : p, opts);
        }
        async realpathPromise(p) {
          return this.mapFromBase(await this.baseFs.realpathPromise(this.mapToBase(p)));
        }
        realpathSync(p) {
          return this.mapFromBase(this.baseFs.realpathSync(this.mapToBase(p)));
        }
        async existsPromise(p) {
          return this.baseFs.existsPromise(this.mapToBase(p));
        }
        existsSync(p) {
          return this.baseFs.existsSync(this.mapToBase(p));
        }
        accessSync(p, mode) {
          return this.baseFs.accessSync(this.mapToBase(p), mode);
        }
        async accessPromise(p, mode) {
          return this.baseFs.accessPromise(this.mapToBase(p), mode);
        }
        async statPromise(p, opts) {
          return this.baseFs.statPromise(this.mapToBase(p), opts);
        }
        statSync(p, opts) {
          return this.baseFs.statSync(this.mapToBase(p), opts);
        }
        async fstatPromise(fd, opts) {
          return this.baseFs.fstatPromise(fd, opts);
        }
        fstatSync(fd, opts) {
          return this.baseFs.fstatSync(fd, opts);
        }
        lstatPromise(p, opts) {
          return this.baseFs.lstatPromise(this.mapToBase(p), opts);
        }
        lstatSync(p, opts) {
          return this.baseFs.lstatSync(this.mapToBase(p), opts);
        }
        async fchmodPromise(fd, mask) {
          return this.baseFs.fchmodPromise(fd, mask);
        }
        fchmodSync(fd, mask) {
          return this.baseFs.fchmodSync(fd, mask);
        }
        async chmodPromise(p, mask) {
          return this.baseFs.chmodPromise(this.mapToBase(p), mask);
        }
        chmodSync(p, mask) {
          return this.baseFs.chmodSync(this.mapToBase(p), mask);
        }
        async fchownPromise(fd, uid, gid) {
          return this.baseFs.fchownPromise(fd, uid, gid);
        }
        fchownSync(fd, uid, gid) {
          return this.baseFs.fchownSync(fd, uid, gid);
        }
        async chownPromise(p, uid, gid) {
          return this.baseFs.chownPromise(this.mapToBase(p), uid, gid);
        }
        chownSync(p, uid, gid) {
          return this.baseFs.chownSync(this.mapToBase(p), uid, gid);
        }
        async renamePromise(oldP, newP) {
          return this.baseFs.renamePromise(this.mapToBase(oldP), this.mapToBase(newP));
        }
        renameSync(oldP, newP) {
          return this.baseFs.renameSync(this.mapToBase(oldP), this.mapToBase(newP));
        }
        async copyFilePromise(sourceP, destP, flags = 0) {
          return this.baseFs.copyFilePromise(this.mapToBase(sourceP), this.mapToBase(destP), flags);
        }
        copyFileSync(sourceP, destP, flags = 0) {
          return this.baseFs.copyFileSync(this.mapToBase(sourceP), this.mapToBase(destP), flags);
        }
        async appendFilePromise(p, content, opts) {
          return this.baseFs.appendFilePromise(this.fsMapToBase(p), content, opts);
        }
        appendFileSync(p, content, opts) {
          return this.baseFs.appendFileSync(this.fsMapToBase(p), content, opts);
        }
        async writeFilePromise(p, content, opts) {
          return this.baseFs.writeFilePromise(this.fsMapToBase(p), content, opts);
        }
        writeFileSync(p, content, opts) {
          return this.baseFs.writeFileSync(this.fsMapToBase(p), content, opts);
        }
        async unlinkPromise(p) {
          return this.baseFs.unlinkPromise(this.mapToBase(p));
        }
        unlinkSync(p) {
          return this.baseFs.unlinkSync(this.mapToBase(p));
        }
        async utimesPromise(p, atime, mtime) {
          return this.baseFs.utimesPromise(this.mapToBase(p), atime, mtime);
        }
        utimesSync(p, atime, mtime) {
          return this.baseFs.utimesSync(this.mapToBase(p), atime, mtime);
        }
        async lutimesPromise(p, atime, mtime) {
          return this.baseFs.lutimesPromise(this.mapToBase(p), atime, mtime);
        }
        lutimesSync(p, atime, mtime) {
          return this.baseFs.lutimesSync(this.mapToBase(p), atime, mtime);
        }
        async mkdirPromise(p, opts) {
          return this.baseFs.mkdirPromise(this.mapToBase(p), opts);
        }
        mkdirSync(p, opts) {
          return this.baseFs.mkdirSync(this.mapToBase(p), opts);
        }
        async rmdirPromise(p, opts) {
          return this.baseFs.rmdirPromise(this.mapToBase(p), opts);
        }
        rmdirSync(p, opts) {
          return this.baseFs.rmdirSync(this.mapToBase(p), opts);
        }
        async rmPromise(p, opts) {
          return this.baseFs.rmPromise(this.mapToBase(p), opts);
        }
        rmSync(p, opts) {
          return this.baseFs.rmSync(this.mapToBase(p), opts);
        }
        async linkPromise(existingP, newP) {
          return this.baseFs.linkPromise(this.mapToBase(existingP), this.mapToBase(newP));
        }
        linkSync(existingP, newP) {
          return this.baseFs.linkSync(this.mapToBase(existingP), this.mapToBase(newP));
        }
        async symlinkPromise(target, p, type) {
          const mappedP = this.mapToBase(p);
          if (this.pathUtils.isAbsolute(target))
            return this.baseFs.symlinkPromise(this.mapToBase(target), mappedP, type);
          const mappedAbsoluteTarget = this.mapToBase(this.pathUtils.join(this.pathUtils.dirname(p), target));
          const mappedTarget = this.baseFs.pathUtils.relative(this.baseFs.pathUtils.dirname(mappedP), mappedAbsoluteTarget);
          return this.baseFs.symlinkPromise(mappedTarget, mappedP, type);
        }
        symlinkSync(target, p, type) {
          const mappedP = this.mapToBase(p);
          if (this.pathUtils.isAbsolute(target))
            return this.baseFs.symlinkSync(this.mapToBase(target), mappedP, type);
          const mappedAbsoluteTarget = this.mapToBase(this.pathUtils.join(this.pathUtils.dirname(p), target));
          const mappedTarget = this.baseFs.pathUtils.relative(this.baseFs.pathUtils.dirname(mappedP), mappedAbsoluteTarget);
          return this.baseFs.symlinkSync(mappedTarget, mappedP, type);
        }
        async readFilePromise(p, encoding) {
          return this.baseFs.readFilePromise(this.fsMapToBase(p), encoding);
        }
        readFileSync(p, encoding) {
          return this.baseFs.readFileSync(this.fsMapToBase(p), encoding);
        }
        readdirPromise(p, opts) {
          return this.baseFs.readdirPromise(this.mapToBase(p), opts);
        }
        readdirSync(p, opts) {
          return this.baseFs.readdirSync(this.mapToBase(p), opts);
        }
        async readlinkPromise(p) {
          return this.mapFromBase(await this.baseFs.readlinkPromise(this.mapToBase(p)));
        }
        readlinkSync(p) {
          return this.mapFromBase(this.baseFs.readlinkSync(this.mapToBase(p)));
        }
        async truncatePromise(p, len) {
          return this.baseFs.truncatePromise(this.mapToBase(p), len);
        }
        truncateSync(p, len) {
          return this.baseFs.truncateSync(this.mapToBase(p), len);
        }
        async ftruncatePromise(fd, len) {
          return this.baseFs.ftruncatePromise(fd, len);
        }
        ftruncateSync(fd, len) {
          return this.baseFs.ftruncateSync(fd, len);
        }
        watch(p, a, b) {
          return this.baseFs.watch(this.mapToBase(p), a, b);
        }
        watchFile(p, a, b) {
          return this.baseFs.watchFile(this.mapToBase(p), a, b);
        }
        unwatchFile(p, cb) {
          return this.baseFs.unwatchFile(this.mapToBase(p), cb);
        }
        fsMapToBase(p) {
          if (typeof p === `number`) {
            return p;
          } else {
            return this.mapToBase(p);
          }
        }
      };
      function direntToPortable(dirent) {
        const portableDirent = dirent;
        if (typeof dirent.path === `string`)
          portableDirent.path = npath.toPortablePath(dirent.path);
        return portableDirent;
      }
      var NodeFS = class extends BasePortableFakeFS {
        realFs;
        constructor(realFs = fs__default.default) {
          super();
          this.realFs = realFs;
        }
        getExtractHint() {
          return false;
        }
        getRealPath() {
          return PortablePath.root;
        }
        resolve(p) {
          return ppath.resolve(p);
        }
        async openPromise(p, flags, mode) {
          return await new Promise((resolve, reject) => {
            this.realFs.open(npath.fromPortablePath(p), flags, mode, this.makeCallback(resolve, reject));
          });
        }
        openSync(p, flags, mode) {
          return this.realFs.openSync(npath.fromPortablePath(p), flags, mode);
        }
        async opendirPromise(p, opts) {
          return await new Promise((resolve, reject) => {
            if (typeof opts !== `undefined`) {
              this.realFs.opendir(npath.fromPortablePath(p), opts, this.makeCallback(resolve, reject));
            } else {
              this.realFs.opendir(npath.fromPortablePath(p), this.makeCallback(resolve, reject));
            }
          }).then((dir) => {
            const dirWithFixedPath = dir;
            Object.defineProperty(dirWithFixedPath, `path`, {
              value: p,
              configurable: true,
              writable: true
            });
            return dirWithFixedPath;
          });
        }
        opendirSync(p, opts) {
          const dir = typeof opts !== `undefined` ? this.realFs.opendirSync(npath.fromPortablePath(p), opts) : this.realFs.opendirSync(npath.fromPortablePath(p));
          const dirWithFixedPath = dir;
          Object.defineProperty(dirWithFixedPath, `path`, {
            value: p,
            configurable: true,
            writable: true
          });
          return dirWithFixedPath;
        }
        async readPromise(fd, buffer, offset = 0, length = 0, position = -1) {
          return await new Promise((resolve, reject) => {
            this.realFs.read(fd, buffer, offset, length, position, (error, bytesRead) => {
              if (error) {
                reject(error);
              } else {
                resolve(bytesRead);
              }
            });
          });
        }
        readSync(fd, buffer, offset, length, position) {
          return this.realFs.readSync(fd, buffer, offset, length, position);
        }
        async writePromise(fd, buffer, offset, length, position) {
          return await new Promise((resolve, reject) => {
            if (typeof buffer === `string`) {
              return this.realFs.write(fd, buffer, offset, this.makeCallback(resolve, reject));
            } else {
              return this.realFs.write(fd, buffer, offset, length, position, this.makeCallback(resolve, reject));
            }
          });
        }
        writeSync(fd, buffer, offset, length, position) {
          if (typeof buffer === `string`) {
            return this.realFs.writeSync(fd, buffer, offset);
          } else {
            return this.realFs.writeSync(fd, buffer, offset, length, position);
          }
        }
        async closePromise(fd) {
          await new Promise((resolve, reject) => {
            this.realFs.close(fd, this.makeCallback(resolve, reject));
          });
        }
        closeSync(fd) {
          this.realFs.closeSync(fd);
        }
        createReadStream(p, opts) {
          const realPath = p !== null ? npath.fromPortablePath(p) : p;
          return this.realFs.createReadStream(realPath, opts);
        }
        createWriteStream(p, opts) {
          const realPath = p !== null ? npath.fromPortablePath(p) : p;
          return this.realFs.createWriteStream(realPath, opts);
        }
        async realpathPromise(p) {
          return await new Promise((resolve, reject) => {
            this.realFs.realpath(npath.fromPortablePath(p), {}, this.makeCallback(resolve, reject));
          }).then((path3) => {
            return npath.toPortablePath(path3);
          });
        }
        realpathSync(p) {
          return npath.toPortablePath(this.realFs.realpathSync(npath.fromPortablePath(p), {}));
        }
        async existsPromise(p) {
          return await new Promise((resolve) => {
            this.realFs.exists(npath.fromPortablePath(p), resolve);
          });
        }
        accessSync(p, mode) {
          return this.realFs.accessSync(npath.fromPortablePath(p), mode);
        }
        async accessPromise(p, mode) {
          return await new Promise((resolve, reject) => {
            this.realFs.access(npath.fromPortablePath(p), mode, this.makeCallback(resolve, reject));
          });
        }
        existsSync(p) {
          return this.realFs.existsSync(npath.fromPortablePath(p));
        }
        async statPromise(p, opts) {
          return await new Promise((resolve, reject) => {
            if (opts) {
              this.realFs.stat(npath.fromPortablePath(p), opts, this.makeCallback(resolve, reject));
            } else {
              this.realFs.stat(npath.fromPortablePath(p), this.makeCallback(resolve, reject));
            }
          });
        }
        statSync(p, opts) {
          if (opts) {
            return this.realFs.statSync(npath.fromPortablePath(p), opts);
          } else {
            return this.realFs.statSync(npath.fromPortablePath(p));
          }
        }
        async fstatPromise(fd, opts) {
          return await new Promise((resolve, reject) => {
            if (opts) {
              this.realFs.fstat(fd, opts, this.makeCallback(resolve, reject));
            } else {
              this.realFs.fstat(fd, this.makeCallback(resolve, reject));
            }
          });
        }
        fstatSync(fd, opts) {
          if (opts) {
            return this.realFs.fstatSync(fd, opts);
          } else {
            return this.realFs.fstatSync(fd);
          }
        }
        async lstatPromise(p, opts) {
          return await new Promise((resolve, reject) => {
            if (opts) {
              this.realFs.lstat(npath.fromPortablePath(p), opts, this.makeCallback(resolve, reject));
            } else {
              this.realFs.lstat(npath.fromPortablePath(p), this.makeCallback(resolve, reject));
            }
          });
        }
        lstatSync(p, opts) {
          if (opts) {
            return this.realFs.lstatSync(npath.fromPortablePath(p), opts);
          } else {
            return this.realFs.lstatSync(npath.fromPortablePath(p));
          }
        }
        async fchmodPromise(fd, mask) {
          return await new Promise((resolve, reject) => {
            this.realFs.fchmod(fd, mask, this.makeCallback(resolve, reject));
          });
        }
        fchmodSync(fd, mask) {
          return this.realFs.fchmodSync(fd, mask);
        }
        async chmodPromise(p, mask) {
          return await new Promise((resolve, reject) => {
            this.realFs.chmod(npath.fromPortablePath(p), mask, this.makeCallback(resolve, reject));
          });
        }
        chmodSync(p, mask) {
          return this.realFs.chmodSync(npath.fromPortablePath(p), mask);
        }
        async fchownPromise(fd, uid, gid) {
          return await new Promise((resolve, reject) => {
            this.realFs.fchown(fd, uid, gid, this.makeCallback(resolve, reject));
          });
        }
        fchownSync(fd, uid, gid) {
          return this.realFs.fchownSync(fd, uid, gid);
        }
        async chownPromise(p, uid, gid) {
          return await new Promise((resolve, reject) => {
            this.realFs.chown(npath.fromPortablePath(p), uid, gid, this.makeCallback(resolve, reject));
          });
        }
        chownSync(p, uid, gid) {
          return this.realFs.chownSync(npath.fromPortablePath(p), uid, gid);
        }
        async renamePromise(oldP, newP) {
          return await new Promise((resolve, reject) => {
            this.realFs.rename(npath.fromPortablePath(oldP), npath.fromPortablePath(newP), this.makeCallback(resolve, reject));
          });
        }
        renameSync(oldP, newP) {
          return this.realFs.renameSync(npath.fromPortablePath(oldP), npath.fromPortablePath(newP));
        }
        async copyFilePromise(sourceP, destP, flags = 0) {
          return await new Promise((resolve, reject) => {
            this.realFs.copyFile(npath.fromPortablePath(sourceP), npath.fromPortablePath(destP), flags, this.makeCallback(resolve, reject));
          });
        }
        copyFileSync(sourceP, destP, flags = 0) {
          return this.realFs.copyFileSync(npath.fromPortablePath(sourceP), npath.fromPortablePath(destP), flags);
        }
        async appendFilePromise(p, content, opts) {
          return await new Promise((resolve, reject) => {
            const fsNativePath = typeof p === `string` ? npath.fromPortablePath(p) : p;
            if (opts) {
              this.realFs.appendFile(fsNativePath, content, opts, this.makeCallback(resolve, reject));
            } else {
              this.realFs.appendFile(fsNativePath, content, this.makeCallback(resolve, reject));
            }
          });
        }
        appendFileSync(p, content, opts) {
          const fsNativePath = typeof p === `string` ? npath.fromPortablePath(p) : p;
          if (opts) {
            this.realFs.appendFileSync(fsNativePath, content, opts);
          } else {
            this.realFs.appendFileSync(fsNativePath, content);
          }
        }
        async writeFilePromise(p, content, opts) {
          return await new Promise((resolve, reject) => {
            const fsNativePath = typeof p === `string` ? npath.fromPortablePath(p) : p;
            if (opts) {
              this.realFs.writeFile(fsNativePath, content, opts, this.makeCallback(resolve, reject));
            } else {
              this.realFs.writeFile(fsNativePath, content, this.makeCallback(resolve, reject));
            }
          });
        }
        writeFileSync(p, content, opts) {
          const fsNativePath = typeof p === `string` ? npath.fromPortablePath(p) : p;
          if (opts) {
            this.realFs.writeFileSync(fsNativePath, content, opts);
          } else {
            this.realFs.writeFileSync(fsNativePath, content);
          }
        }
        async unlinkPromise(p) {
          return await new Promise((resolve, reject) => {
            this.realFs.unlink(npath.fromPortablePath(p), this.makeCallback(resolve, reject));
          });
        }
        unlinkSync(p) {
          return this.realFs.unlinkSync(npath.fromPortablePath(p));
        }
        async utimesPromise(p, atime, mtime) {
          return await new Promise((resolve, reject) => {
            this.realFs.utimes(npath.fromPortablePath(p), atime, mtime, this.makeCallback(resolve, reject));
          });
        }
        utimesSync(p, atime, mtime) {
          this.realFs.utimesSync(npath.fromPortablePath(p), atime, mtime);
        }
        async lutimesPromise(p, atime, mtime) {
          return await new Promise((resolve, reject) => {
            this.realFs.lutimes(npath.fromPortablePath(p), atime, mtime, this.makeCallback(resolve, reject));
          });
        }
        lutimesSync(p, atime, mtime) {
          this.realFs.lutimesSync(npath.fromPortablePath(p), atime, mtime);
        }
        async mkdirPromise(p, opts) {
          return await new Promise((resolve, reject) => {
            this.realFs.mkdir(npath.fromPortablePath(p), opts, this.makeCallback(resolve, reject));
          });
        }
        mkdirSync(p, opts) {
          return this.realFs.mkdirSync(npath.fromPortablePath(p), opts);
        }
        async rmdirPromise(p, opts) {
          return await new Promise((resolve, reject) => {
            if (opts) {
              this.realFs.rmdir(npath.fromPortablePath(p), opts, this.makeCallback(resolve, reject));
            } else {
              this.realFs.rmdir(npath.fromPortablePath(p), this.makeCallback(resolve, reject));
            }
          });
        }
        rmdirSync(p, opts) {
          return this.realFs.rmdirSync(npath.fromPortablePath(p), opts);
        }
        async rmPromise(p, opts) {
          return await new Promise((resolve, reject) => {
            if (opts) {
              this.realFs.rm(npath.fromPortablePath(p), opts, this.makeCallback(resolve, reject));
            } else {
              this.realFs.rm(npath.fromPortablePath(p), this.makeCallback(resolve, reject));
            }
          });
        }
        rmSync(p, opts) {
          return this.realFs.rmSync(npath.fromPortablePath(p), opts);
        }
        async linkPromise(existingP, newP) {
          return await new Promise((resolve, reject) => {
            this.realFs.link(npath.fromPortablePath(existingP), npath.fromPortablePath(newP), this.makeCallback(resolve, reject));
          });
        }
        linkSync(existingP, newP) {
          return this.realFs.linkSync(npath.fromPortablePath(existingP), npath.fromPortablePath(newP));
        }
        async symlinkPromise(target, p, type) {
          return await new Promise((resolve, reject) => {
            this.realFs.symlink(npath.fromPortablePath(target.replace(/\/+$/, ``)), npath.fromPortablePath(p), type, this.makeCallback(resolve, reject));
          });
        }
        symlinkSync(target, p, type) {
          return this.realFs.symlinkSync(npath.fromPortablePath(target.replace(/\/+$/, ``)), npath.fromPortablePath(p), type);
        }
        async readFilePromise(p, encoding) {
          return await new Promise((resolve, reject) => {
            const fsNativePath = typeof p === `string` ? npath.fromPortablePath(p) : p;
            this.realFs.readFile(fsNativePath, encoding, this.makeCallback(resolve, reject));
          });
        }
        readFileSync(p, encoding) {
          const fsNativePath = typeof p === `string` ? npath.fromPortablePath(p) : p;
          return this.realFs.readFileSync(fsNativePath, encoding);
        }
        async readdirPromise(p, opts) {
          return await new Promise((resolve, reject) => {
            if (opts) {
              if (opts.recursive && process.platform === `win32`) {
                if (opts.withFileTypes) {
                  this.realFs.readdir(npath.fromPortablePath(p), opts, this.makeCallback((results) => resolve(results.map(direntToPortable)), reject));
                } else {
                  this.realFs.readdir(npath.fromPortablePath(p), opts, this.makeCallback((results) => resolve(results.map(npath.toPortablePath)), reject));
                }
              } else {
                this.realFs.readdir(npath.fromPortablePath(p), opts, this.makeCallback(resolve, reject));
              }
            } else {
              this.realFs.readdir(npath.fromPortablePath(p), this.makeCallback(resolve, reject));
            }
          });
        }
        readdirSync(p, opts) {
          if (opts) {
            if (opts.recursive && process.platform === `win32`) {
              if (opts.withFileTypes) {
                return this.realFs.readdirSync(npath.fromPortablePath(p), opts).map(direntToPortable);
              } else {
                return this.realFs.readdirSync(npath.fromPortablePath(p), opts).map(npath.toPortablePath);
              }
            } else {
              return this.realFs.readdirSync(npath.fromPortablePath(p), opts);
            }
          } else {
            return this.realFs.readdirSync(npath.fromPortablePath(p));
          }
        }
        async readlinkPromise(p) {
          return await new Promise((resolve, reject) => {
            this.realFs.readlink(npath.fromPortablePath(p), this.makeCallback(resolve, reject));
          }).then((path3) => {
            return npath.toPortablePath(path3);
          });
        }
        readlinkSync(p) {
          return npath.toPortablePath(this.realFs.readlinkSync(npath.fromPortablePath(p)));
        }
        async truncatePromise(p, len) {
          return await new Promise((resolve, reject) => {
            this.realFs.truncate(npath.fromPortablePath(p), len, this.makeCallback(resolve, reject));
          });
        }
        truncateSync(p, len) {
          return this.realFs.truncateSync(npath.fromPortablePath(p), len);
        }
        async ftruncatePromise(fd, len) {
          return await new Promise((resolve, reject) => {
            this.realFs.ftruncate(fd, len, this.makeCallback(resolve, reject));
          });
        }
        ftruncateSync(fd, len) {
          return this.realFs.ftruncateSync(fd, len);
        }
        watch(p, a, b) {
          return this.realFs.watch(npath.fromPortablePath(p), a, b);
        }
        watchFile(p, a, b) {
          return this.realFs.watchFile(npath.fromPortablePath(p), a, b);
        }
        unwatchFile(p, cb) {
          return this.realFs.unwatchFile(npath.fromPortablePath(p), cb);
        }
        makeCallback(resolve, reject) {
          return (err, result2) => {
            if (err) {
              reject(err);
            } else {
              resolve(result2);
            }
          };
        }
      };
      var NUMBER_REGEXP = /^[0-9]+$/;
      var VIRTUAL_REGEXP = /^(\/(?:[^/]+\/)*?(?:\$\$virtual|__virtual__))((?:\/((?:[^/]+-)?[a-f0-9]+)(?:\/([^/]+))?)?((?:\/.*)?))$/;
      var VALID_COMPONENT = /^([^/]+-)?[a-f0-9]+$/;
      var VirtualFS = class _VirtualFS extends ProxiedFS {
        baseFs;
        static makeVirtualPath(base, component, to) {
          if (ppath.basename(base) !== `__virtual__`)
            throw new Error(`Assertion failed: Virtual folders must be named "__virtual__"`);
          if (!ppath.basename(component).match(VALID_COMPONENT))
            throw new Error(`Assertion failed: Virtual components must be ended by an hexadecimal hash`);
          const target = ppath.relative(ppath.dirname(base), to);
          const segments = target.split(`/`);
          let depth = 0;
          while (depth < segments.length && segments[depth] === `..`)
            depth += 1;
          const finalSegments = segments.slice(depth);
          const fullVirtualPath = ppath.join(base, component, String(depth), ...finalSegments);
          return fullVirtualPath;
        }
        static resolveVirtual(p) {
          const match = p.match(VIRTUAL_REGEXP);
          if (!match || !match[3] && match[5])
            return p;
          const target = ppath.dirname(match[1]);
          if (!match[3] || !match[4])
            return target;
          const isnum = NUMBER_REGEXP.test(match[4]);
          if (!isnum)
            return p;
          const depth = Number(match[4]);
          const backstep = `../`.repeat(depth);
          const subpath = match[5] || `.`;
          return _VirtualFS.resolveVirtual(ppath.join(target, backstep, subpath));
        }
        constructor({ baseFs = new NodeFS } = {}) {
          super(ppath);
          this.baseFs = baseFs;
        }
        getExtractHint(hints) {
          return this.baseFs.getExtractHint(hints);
        }
        getRealPath() {
          return this.baseFs.getRealPath();
        }
        realpathSync(p) {
          const match = p.match(VIRTUAL_REGEXP);
          if (!match)
            return this.baseFs.realpathSync(p);
          if (!match[5])
            return p;
          const realpath = this.baseFs.realpathSync(this.mapToBase(p));
          return _VirtualFS.makeVirtualPath(match[1], match[3], realpath);
        }
        async realpathPromise(p) {
          const match = p.match(VIRTUAL_REGEXP);
          if (!match)
            return await this.baseFs.realpathPromise(p);
          if (!match[5])
            return p;
          const realpath = await this.baseFs.realpathPromise(this.mapToBase(p));
          return _VirtualFS.makeVirtualPath(match[1], match[3], realpath);
        }
        mapToBase(p) {
          if (p === ``)
            return p;
          if (this.pathUtils.isAbsolute(p))
            return _VirtualFS.resolveVirtual(p);
          const resolvedRoot = _VirtualFS.resolveVirtual(this.baseFs.resolve(PortablePath.dot));
          const resolvedP = _VirtualFS.resolveVirtual(this.baseFs.resolve(p));
          return ppath.relative(resolvedRoot, resolvedP) || PortablePath.dot;
        }
        mapFromBase(p) {
          return p;
        }
      };
      var prettyJsonMachine = {
        ["DEFAULT"]: {
          collapsed: false,
          next: {
            [`*`]: "DEFAULT"
          }
        },
        ["TOP_LEVEL"]: {
          collapsed: false,
          next: {
            [`fallbackExclusionList`]: "FALLBACK_EXCLUSION_LIST",
            [`packageRegistryData`]: "PACKAGE_REGISTRY_DATA",
            [`*`]: "DEFAULT"
          }
        },
        ["FALLBACK_EXCLUSION_LIST"]: {
          collapsed: false,
          next: {
            [`*`]: "FALLBACK_EXCLUSION_ENTRIES"
          }
        },
        ["FALLBACK_EXCLUSION_ENTRIES"]: {
          collapsed: true,
          next: {
            [`*`]: "FALLBACK_EXCLUSION_DATA"
          }
        },
        ["FALLBACK_EXCLUSION_DATA"]: {
          collapsed: true,
          next: {
            [`*`]: "DEFAULT"
          }
        },
        ["PACKAGE_REGISTRY_DATA"]: {
          collapsed: false,
          next: {
            [`*`]: "PACKAGE_REGISTRY_ENTRIES"
          }
        },
        ["PACKAGE_REGISTRY_ENTRIES"]: {
          collapsed: true,
          next: {
            [`*`]: "PACKAGE_STORE_DATA"
          }
        },
        ["PACKAGE_STORE_DATA"]: {
          collapsed: false,
          next: {
            [`*`]: "PACKAGE_STORE_ENTRIES"
          }
        },
        ["PACKAGE_STORE_ENTRIES"]: {
          collapsed: true,
          next: {
            [`*`]: "PACKAGE_INFORMATION_DATA"
          }
        },
        ["PACKAGE_INFORMATION_DATA"]: {
          collapsed: false,
          next: {
            [`packageDependencies`]: "PACKAGE_DEPENDENCIES",
            [`*`]: "DEFAULT"
          }
        },
        ["PACKAGE_DEPENDENCIES"]: {
          collapsed: false,
          next: {
            [`*`]: "PACKAGE_DEPENDENCY"
          }
        },
        ["PACKAGE_DEPENDENCY"]: {
          collapsed: true,
          next: {
            [`*`]: "DEFAULT"
          }
        }
      };
      function generateCollapsedArray(data, state, indent) {
        let result2 = ``;
        result2 += `[`;
        for (let t = 0, T = data.length;t < T; ++t) {
          result2 += generateNext(String(t), data[t], state, indent).replace(/^ +/g, ``);
          if (t + 1 < T) {
            result2 += `, `;
          }
        }
        result2 += `]`;
        return result2;
      }
      function generateExpandedArray(data, state, indent) {
        const nextIndent = `${indent}  `;
        let result2 = ``;
        result2 += indent;
        result2 += `[
`;
        for (let t = 0, T = data.length;t < T; ++t) {
          result2 += nextIndent + generateNext(String(t), data[t], state, nextIndent).replace(/^ +/, ``);
          if (t + 1 < T)
            result2 += `,`;
          result2 += `
`;
        }
        result2 += indent;
        result2 += `]`;
        return result2;
      }
      function generateCollapsedObject(data, state, indent) {
        const keys = Object.keys(data);
        let result2 = ``;
        result2 += `{`;
        for (let t = 0, T = keys.length, keysPrinted = 0;t < T; ++t) {
          const key = keys[t];
          const value = data[key];
          if (typeof value === `undefined`)
            continue;
          if (keysPrinted !== 0)
            result2 += `, `;
          result2 += JSON.stringify(key);
          result2 += `: `;
          result2 += generateNext(key, value, state, indent).replace(/^ +/g, ``);
          keysPrinted += 1;
        }
        result2 += `}`;
        return result2;
      }
      function generateExpandedObject(data, state, indent) {
        const keys = Object.keys(data);
        const nextIndent = `${indent}  `;
        let result2 = ``;
        result2 += indent;
        result2 += `{
`;
        let keysPrinted = 0;
        for (let t = 0, T = keys.length;t < T; ++t) {
          const key = keys[t];
          const value = data[key];
          if (typeof value === `undefined`)
            continue;
          if (keysPrinted !== 0) {
            result2 += `,`;
            result2 += `
`;
          }
          result2 += nextIndent;
          result2 += JSON.stringify(key);
          result2 += `: `;
          result2 += generateNext(key, value, state, nextIndent).replace(/^ +/g, ``);
          keysPrinted += 1;
        }
        if (keysPrinted !== 0)
          result2 += `
`;
        result2 += indent;
        result2 += `}`;
        return result2;
      }
      function generateNext(key, data, state, indent) {
        const { next } = prettyJsonMachine[state];
        const nextState = next[key] || next[`*`];
        return generate(data, nextState, indent);
      }
      function generate(data, state, indent) {
        const { collapsed } = prettyJsonMachine[state];
        if (Array.isArray(data)) {
          if (collapsed) {
            return generateCollapsedArray(data, state, indent);
          } else {
            return generateExpandedArray(data, state, indent);
          }
        }
        if (typeof data === `object` && data !== null) {
          if (collapsed) {
            return generateCollapsedObject(data, state, indent);
          } else {
            return generateExpandedObject(data, state, indent);
          }
        }
        return JSON.stringify(data);
      }
      function generatePrettyJson(data) {
        return generate(data, "TOP_LEVEL", ``);
      }
      function sortMap2(values, mappers) {
        const asArray = Array.from(values);
        if (!Array.isArray(mappers))
          mappers = [mappers];
        const stringified = [];
        for (const mapper of mappers)
          stringified.push(asArray.map((value) => mapper(value)));
        const indices = asArray.map((_, index) => index);
        indices.sort((a, b) => {
          for (const layer of stringified) {
            const comparison = layer[a] < layer[b] ? -1 : layer[a] > layer[b] ? 1 : 0;
            if (comparison !== 0) {
              return comparison;
            }
          }
          return 0;
        });
        return indices.map((index) => {
          return asArray[index];
        });
      }
      function generateFallbackExclusionList(settings) {
        const fallbackExclusionList = /* @__PURE__ */ new Map;
        const sortedData = sortMap2(settings.fallbackExclusionList || [], [
          ({ name, reference }) => name,
          ({ name, reference }) => reference
        ]);
        for (const { name, reference } of sortedData) {
          let references = fallbackExclusionList.get(name);
          if (typeof references === `undefined`)
            fallbackExclusionList.set(name, references = /* @__PURE__ */ new Set);
          references.add(reference);
        }
        return Array.from(fallbackExclusionList).map(([name, references]) => {
          return [name, Array.from(references)];
        });
      }
      function generateFallbackPoolData(settings) {
        return sortMap2(settings.fallbackPool || [], ([name]) => name);
      }
      function generatePackageRegistryData(settings) {
        const packageRegistryData = [];
        for (const [packageName, packageStore] of sortMap2(settings.packageRegistry, ([packageName2]) => packageName2 === null ? `0` : `1${packageName2}`)) {
          const packageStoreData = [];
          packageRegistryData.push([packageName, packageStoreData]);
          for (const [packageReference, { packageLocation, packageDependencies, packagePeers, linkType, discardFromLookup }] of sortMap2(packageStore, ([packageReference2]) => packageReference2 === null ? `0` : `1${packageReference2}`)) {
            const normalizedDependencies = [];
            if (packageName !== null && packageReference !== null && !packageDependencies.has(packageName))
              normalizedDependencies.push([packageName, packageReference]);
            for (const [dependencyName, dependencyReference] of sortMap2(packageDependencies.entries(), ([dependencyName2]) => dependencyName2))
              normalizedDependencies.push([dependencyName, dependencyReference]);
            const normalizedPeers = packagePeers && packagePeers.size > 0 ? Array.from(packagePeers) : undefined;
            const normalizedDiscardFromLookup = discardFromLookup ? discardFromLookup : undefined;
            packageStoreData.push([packageReference, {
              packageLocation,
              packageDependencies: normalizedDependencies,
              packagePeers: normalizedPeers,
              linkType,
              discardFromLookup: normalizedDiscardFromLookup
            }]);
          }
        }
        return packageRegistryData;
      }
      function generateSerializedState(settings) {
        return {
          __info: [
            `This file is automatically generated. Do not touch it, or risk`,
            `your modifications being lost.`
          ],
          dependencyTreeRoots: settings.dependencyTreeRoots,
          enableTopLevelFallback: settings.enableTopLevelFallback || false,
          ignorePatternData: settings.ignorePattern || null,
          fallbackExclusionList: generateFallbackExclusionList(settings),
          fallbackPool: generateFallbackPoolData(settings),
          packageRegistryData: generatePackageRegistryData(settings)
        };
      }
      var hook$1;
      var hook_1 = () => {
        if (typeof hook$1 === `undefined`)
          hook$1 = require$$0__default.default.brotliDecompressSync(Buffer.from("", "base64")).toString();
        return hook$1;
      };
      function generateLoader(shebang, loader) {
        return [
          shebang ? `${shebang}
` : ``,
          `/* eslint-disable */
`,
          `// @ts-nocheck
`,
          `"use strict";
`,
          `
`,
          loader,
          `
`,
          hook_1()
        ].join(``);
      }
      function generateJsonString(data) {
        return JSON.stringify(data, null, 2);
      }
      function generateStringLiteral(value) {
        return `'${value.replace(/\\/g, `\\\\`).replace(/'/g, `\\'`).replace(/\n/g, `\\
`)}'`;
      }
      function generateInlinedSetup(data) {
        return [
          `const RAW_RUNTIME_STATE =
`,
          `${generateStringLiteral(generatePrettyJson(data))};

`,
          `function $$SETUP_STATE(hydrateRuntimeState, basePath) {
`,
          `  return hydrateRuntimeState(JSON.parse(RAW_RUNTIME_STATE), {basePath: basePath || __dirname});
`,
          `}
`
        ].join(``);
      }
      function generateSplitSetup() {
        return [
          `function $$SETUP_STATE(hydrateRuntimeState, basePath) {
`,
          `  const fs = require('fs');
`,
          `  const path = require('path');
`,
          `  const pnpDataFilepath = path.resolve(__dirname, ${JSON.stringify(Filename.pnpData)});
`,
          `  return hydrateRuntimeState(JSON.parse(fs.readFileSync(pnpDataFilepath, 'utf8')), {basePath: basePath || __dirname});
`,
          `}
`
        ].join(``);
      }
      function generateInlinedScript(settings) {
        const data = generateSerializedState(settings);
        const setup = generateInlinedSetup(data);
        const loaderFile = generateLoader(settings.shebang, setup);
        return loaderFile;
      }
      function generateSplitScript(settings) {
        const data = generateSerializedState(settings);
        const setup = generateSplitSetup();
        const loaderFile = generateLoader(settings.shebang, setup);
        return { dataFile: generateJsonString(data), loaderFile };
      }
      function hydrateRuntimeState(data, { basePath }) {
        const portablePath = npath.toPortablePath(basePath);
        const absolutePortablePath = ppath.resolve(portablePath);
        const ignorePattern = data.ignorePatternData !== null ? new RegExp(data.ignorePatternData) : null;
        const packageLocatorsByLocations = /* @__PURE__ */ new Map;
        const packageRegistry = new Map(data.packageRegistryData.map(([packageName, packageStoreData]) => {
          return [packageName, new Map(packageStoreData.map(([packageReference, packageInformationData]) => {
            if (packageName === null !== (packageReference === null))
              throw new Error(`Assertion failed: The name and reference should be null, or neither should`);
            const discardFromLookup = packageInformationData.discardFromLookup ?? false;
            const packageLocator = { name: packageName, reference: packageReference };
            const entry = packageLocatorsByLocations.get(packageInformationData.packageLocation);
            if (!entry) {
              packageLocatorsByLocations.set(packageInformationData.packageLocation, { locator: packageLocator, discardFromLookup });
            } else {
              entry.discardFromLookup = entry.discardFromLookup && discardFromLookup;
              if (!discardFromLookup) {
                entry.locator = packageLocator;
              }
            }
            let resolvedPackageLocation = null;
            return [packageReference, {
              packageDependencies: new Map(packageInformationData.packageDependencies),
              packagePeers: new Set(packageInformationData.packagePeers),
              linkType: packageInformationData.linkType,
              discardFromLookup,
              get packageLocation() {
                return resolvedPackageLocation || (resolvedPackageLocation = ppath.join(absolutePortablePath, packageInformationData.packageLocation));
              }
            }];
          }))];
        }));
        const fallbackExclusionList = new Map(data.fallbackExclusionList.map(([packageName, packageReferences]) => {
          return [packageName, new Set(packageReferences)];
        }));
        const fallbackPool = new Map(data.fallbackPool);
        const dependencyTreeRoots = data.dependencyTreeRoots;
        const enableTopLevelFallback = data.enableTopLevelFallback;
        return {
          basePath: portablePath,
          dependencyTreeRoots,
          enableTopLevelFallback,
          fallbackExclusionList,
          fallbackPool,
          ignorePattern,
          packageLocatorsByLocations,
          packageRegistry
        };
      }
      var ArrayIsArray = Array.isArray;
      var JSONStringify = JSON.stringify;
      var ObjectGetOwnPropertyNames = Object.getOwnPropertyNames;
      var ObjectPrototypeHasOwnProperty = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);
      var RegExpPrototypeExec = (obj, string) => RegExp.prototype.exec.call(obj, string);
      var RegExpPrototypeSymbolReplace = (obj, ...rest) => RegExp.prototype[Symbol.replace].apply(obj, rest);
      var StringPrototypeEndsWith = (str, ...rest) => String.prototype.endsWith.apply(str, rest);
      var StringPrototypeIncludes = (str, ...rest) => String.prototype.includes.apply(str, rest);
      var StringPrototypeLastIndexOf = (str, ...rest) => String.prototype.lastIndexOf.apply(str, rest);
      var StringPrototypeIndexOf = (str, ...rest) => String.prototype.indexOf.apply(str, rest);
      var StringPrototypeReplace = (str, ...rest) => String.prototype.replace.apply(str, rest);
      var StringPrototypeSlice = (str, ...rest) => String.prototype.slice.apply(str, rest);
      var StringPrototypeStartsWith = (str, ...rest) => String.prototype.startsWith.apply(str, rest);
      var SafeMap = Map;
      var JSONParse = JSON.parse;
      function createErrorType(code, messageCreator, errorType) {
        return class extends errorType {
          constructor(...args) {
            super(messageCreator(...args));
            this.code = code;
            this.name = `${errorType.name} [${code}]`;
          }
        };
      }
      var ERR_PACKAGE_IMPORT_NOT_DEFINED = createErrorType(`ERR_PACKAGE_IMPORT_NOT_DEFINED`, (specifier, packagePath, base) => {
        return `Package import specifier "${specifier}" is not defined${packagePath ? ` in package ${packagePath}package.json` : ``} imported from ${base}`;
      }, TypeError);
      var ERR_INVALID_MODULE_SPECIFIER = createErrorType(`ERR_INVALID_MODULE_SPECIFIER`, (request, reason, base = undefined) => {
        return `Invalid module "${request}" ${reason}${base ? ` imported from ${base}` : ``}`;
      }, TypeError);
      var ERR_INVALID_PACKAGE_TARGET = createErrorType(`ERR_INVALID_PACKAGE_TARGET`, (pkgPath, key, target, isImport = false, base = undefined) => {
        const relError = typeof target === `string` && !isImport && target.length && !StringPrototypeStartsWith(target, `./`);
        if (key === `.`) {
          assert__default.default(isImport === false);
          return `Invalid "exports" main target ${JSONStringify(target)} defined in the package config ${pkgPath}package.json${base ? ` imported from ${base}` : ``}${relError ? `; targets must start with "./"` : ``}`;
        }
        return `Invalid "${isImport ? `imports` : `exports`}" target ${JSONStringify(target)} defined for '${key}' in the package config ${pkgPath}package.json${base ? ` imported from ${base}` : ``}${relError ? `; targets must start with "./"` : ``}`;
      }, Error);
      var ERR_INVALID_PACKAGE_CONFIG = createErrorType(`ERR_INVALID_PACKAGE_CONFIG`, (path3, base, message) => {
        return `Invalid package config ${path3}${base ? ` while importing ${base}` : ``}${message ? `. ${message}` : ``}`;
      }, Error);
      var ERR_PACKAGE_PATH_NOT_EXPORTED = createErrorType("ERR_PACKAGE_PATH_NOT_EXPORTED", (pkgPath, subpath, base = undefined) => {
        if (subpath === ".")
          return `No "exports" main defined in ${pkgPath}package.json${base ? ` imported from ${base}` : ""}`;
        return `Package subpath '${subpath}' is not defined by "exports" in ${pkgPath}package.json${base ? ` imported from ${base}` : ""}`;
      }, Error);
      function filterOwnProperties(source, keys) {
        const filtered = /* @__PURE__ */ Object.create(null);
        for (let i = 0;i < keys.length; i++) {
          const key = keys[i];
          if (ObjectPrototypeHasOwnProperty(source, key)) {
            filtered[key] = source[key];
          }
        }
        return filtered;
      }
      var packageJSONCache = new SafeMap;
      function getPackageConfig(path3, specifier, base, readFileSyncFn) {
        const existing = packageJSONCache.get(path3);
        if (existing !== undefined) {
          return existing;
        }
        const source = readFileSyncFn(path3);
        if (source === undefined) {
          const packageConfig2 = {
            pjsonPath: path3,
            exists: false,
            main: undefined,
            name: undefined,
            type: "none",
            exports: undefined,
            imports: undefined
          };
          packageJSONCache.set(path3, packageConfig2);
          return packageConfig2;
        }
        let packageJSON;
        try {
          packageJSON = JSONParse(source);
        } catch (error) {
          throw new ERR_INVALID_PACKAGE_CONFIG(path3, (base ? `"${specifier}" from ` : "") + url.fileURLToPath(base || specifier), error.message);
        }
        let { imports, main: main2, name, type } = filterOwnProperties(packageJSON, [
          "imports",
          "main",
          "name",
          "type"
        ]);
        const exports3 = ObjectPrototypeHasOwnProperty(packageJSON, "exports") ? packageJSON.exports : undefined;
        if (typeof imports !== "object" || imports === null) {
          imports = undefined;
        }
        if (typeof main2 !== "string") {
          main2 = undefined;
        }
        if (typeof name !== "string") {
          name = undefined;
        }
        if (type !== "module" && type !== "commonjs") {
          type = "none";
        }
        const packageConfig = {
          pjsonPath: path3,
          exists: true,
          main: main2,
          name,
          type,
          exports: exports3,
          imports
        };
        packageJSONCache.set(path3, packageConfig);
        return packageConfig;
      }
      function getPackageScopeConfig(resolved, readFileSyncFn) {
        let packageJSONUrl = new URL("./package.json", resolved);
        while (true) {
          const packageJSONPath2 = packageJSONUrl.pathname;
          if (StringPrototypeEndsWith(packageJSONPath2, "node_modules/package.json")) {
            break;
          }
          const packageConfig2 = getPackageConfig(url.fileURLToPath(packageJSONUrl), resolved, undefined, readFileSyncFn);
          if (packageConfig2.exists) {
            return packageConfig2;
          }
          const lastPackageJSONUrl = packageJSONUrl;
          packageJSONUrl = new URL("../package.json", packageJSONUrl);
          if (packageJSONUrl.pathname === lastPackageJSONUrl.pathname) {
            break;
          }
        }
        const packageJSONPath = url.fileURLToPath(packageJSONUrl);
        const packageConfig = {
          pjsonPath: packageJSONPath,
          exists: false,
          main: undefined,
          name: undefined,
          type: "none",
          exports: undefined,
          imports: undefined
        };
        packageJSONCache.set(packageJSONPath, packageConfig);
        return packageConfig;
      }
      function throwImportNotDefined(specifier, packageJSONUrl, base) {
        throw new ERR_PACKAGE_IMPORT_NOT_DEFINED(specifier, packageJSONUrl && url.fileURLToPath(new URL(".", packageJSONUrl)), url.fileURLToPath(base));
      }
      function throwInvalidSubpath(subpath, packageJSONUrl, internal, base) {
        const reason = `request is not a valid subpath for the "${internal ? "imports" : "exports"}" resolution of ${url.fileURLToPath(packageJSONUrl)}`;
        throw new ERR_INVALID_MODULE_SPECIFIER(subpath, reason, base && url.fileURLToPath(base));
      }
      function throwInvalidPackageTarget(subpath, target, packageJSONUrl, internal, base) {
        if (typeof target === "object" && target !== null) {
          target = JSONStringify(target, null, "");
        } else {
          target = `${target}`;
        }
        throw new ERR_INVALID_PACKAGE_TARGET(url.fileURLToPath(new URL(".", packageJSONUrl)), subpath, target, internal, base && url.fileURLToPath(base));
      }
      var invalidSegmentRegEx = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))(\\|\/|$)/i;
      var patternRegEx = /\*/g;
      function resolvePackageTargetString(target, subpath, match, packageJSONUrl, base, pattern, internal, conditions) {
        if (subpath !== "" && !pattern && target[target.length - 1] !== "/")
          throwInvalidPackageTarget(match, target, packageJSONUrl, internal, base);
        if (!StringPrototypeStartsWith(target, "./")) {
          if (internal && !StringPrototypeStartsWith(target, "../") && !StringPrototypeStartsWith(target, "/")) {
            let isURL = false;
            try {
              new URL(target);
              isURL = true;
            } catch {
            }
            if (!isURL) {
              const exportTarget = pattern ? RegExpPrototypeSymbolReplace(patternRegEx, target, () => subpath) : target + subpath;
              return exportTarget;
            }
          }
          throwInvalidPackageTarget(match, target, packageJSONUrl, internal, base);
        }
        if (RegExpPrototypeExec(invalidSegmentRegEx, StringPrototypeSlice(target, 2)) !== null)
          throwInvalidPackageTarget(match, target, packageJSONUrl, internal, base);
        const resolved = new URL(target, packageJSONUrl);
        const resolvedPath = resolved.pathname;
        const packagePath = new URL(".", packageJSONUrl).pathname;
        if (!StringPrototypeStartsWith(resolvedPath, packagePath))
          throwInvalidPackageTarget(match, target, packageJSONUrl, internal, base);
        if (subpath === "")
          return resolved;
        if (RegExpPrototypeExec(invalidSegmentRegEx, subpath) !== null) {
          const request = pattern ? StringPrototypeReplace(match, "*", () => subpath) : match + subpath;
          throwInvalidSubpath(request, packageJSONUrl, internal, base);
        }
        if (pattern) {
          return new URL(RegExpPrototypeSymbolReplace(patternRegEx, resolved.href, () => subpath));
        }
        return new URL(subpath, resolved);
      }
      function isArrayIndex(key) {
        const keyNum = +key;
        if (`${keyNum}` !== key)
          return false;
        return keyNum >= 0 && keyNum < 4294967295;
      }
      function resolvePackageTarget(packageJSONUrl, target, subpath, packageSubpath, base, pattern, internal, conditions) {
        if (typeof target === "string") {
          return resolvePackageTargetString(target, subpath, packageSubpath, packageJSONUrl, base, pattern, internal);
        } else if (ArrayIsArray(target)) {
          if (target.length === 0) {
            return null;
          }
          let lastException;
          for (let i = 0;i < target.length; i++) {
            const targetItem = target[i];
            let resolveResult;
            try {
              resolveResult = resolvePackageTarget(packageJSONUrl, targetItem, subpath, packageSubpath, base, pattern, internal, conditions);
            } catch (e) {
              lastException = e;
              if (e.code === "ERR_INVALID_PACKAGE_TARGET") {
                continue;
              }
              throw e;
            }
            if (resolveResult === undefined) {
              continue;
            }
            if (resolveResult === null) {
              lastException = null;
              continue;
            }
            return resolveResult;
          }
          if (lastException === undefined || lastException === null)
            return lastException;
          throw lastException;
        } else if (typeof target === "object" && target !== null) {
          const keys = ObjectGetOwnPropertyNames(target);
          for (let i = 0;i < keys.length; i++) {
            const key = keys[i];
            if (isArrayIndex(key)) {
              throw new ERR_INVALID_PACKAGE_CONFIG(url.fileURLToPath(packageJSONUrl), base, '"exports" cannot contain numeric property keys.');
            }
          }
          for (let i = 0;i < keys.length; i++) {
            const key = keys[i];
            if (key === "default" || conditions.has(key)) {
              const conditionalTarget = target[key];
              const resolveResult = resolvePackageTarget(packageJSONUrl, conditionalTarget, subpath, packageSubpath, base, pattern, internal, conditions);
              if (resolveResult === undefined)
                continue;
              return resolveResult;
            }
          }
          return;
        } else if (target === null) {
          return null;
        }
        throwInvalidPackageTarget(packageSubpath, target, packageJSONUrl, internal, base);
      }
      function patternKeyCompare(a, b) {
        const aPatternIndex = StringPrototypeIndexOf(a, "*");
        const bPatternIndex = StringPrototypeIndexOf(b, "*");
        const baseLenA = aPatternIndex === -1 ? a.length : aPatternIndex + 1;
        const baseLenB = bPatternIndex === -1 ? b.length : bPatternIndex + 1;
        if (baseLenA > baseLenB)
          return -1;
        if (baseLenB > baseLenA)
          return 1;
        if (aPatternIndex === -1)
          return 1;
        if (bPatternIndex === -1)
          return -1;
        if (a.length > b.length)
          return -1;
        if (b.length > a.length)
          return 1;
        return 0;
      }
      function isConditionalExportsMainSugar(exports3, packageJSONUrl, base) {
        if (typeof exports3 === "string" || ArrayIsArray(exports3))
          return true;
        if (typeof exports3 !== "object" || exports3 === null)
          return false;
        const keys = ObjectGetOwnPropertyNames(exports3);
        let isConditionalSugar = false;
        let i = 0;
        for (let j = 0;j < keys.length; j++) {
          const key = keys[j];
          const curIsConditionalSugar = key === "" || key[0] !== ".";
          if (i++ === 0) {
            isConditionalSugar = curIsConditionalSugar;
          } else if (isConditionalSugar !== curIsConditionalSugar) {
            throw new ERR_INVALID_PACKAGE_CONFIG(url.fileURLToPath(packageJSONUrl), base, `"exports" cannot contain some keys starting with '.' and some not. The exports object must either be an object of package subpath keys or an object of main entry condition name keys only.`);
          }
        }
        return isConditionalSugar;
      }
      function throwExportsNotFound(subpath, packageJSONUrl, base) {
        throw new ERR_PACKAGE_PATH_NOT_EXPORTED(url.fileURLToPath(new URL(".", packageJSONUrl)), subpath, base && url.fileURLToPath(base));
      }
      var emittedPackageWarnings = /* @__PURE__ */ new Set;
      function emitTrailingSlashPatternDeprecation(match, pjsonUrl, base) {
        const pjsonPath = url.fileURLToPath(pjsonUrl);
        if (emittedPackageWarnings.has(pjsonPath + "|" + match))
          return;
        emittedPackageWarnings.add(pjsonPath + "|" + match);
        process.emitWarning(`Use of deprecated trailing slash pattern mapping "${match}" in the "exports" field module resolution of the package at ${pjsonPath}${base ? ` imported from ${url.fileURLToPath(base)}` : ""}. Mapping specifiers ending in "/" is no longer supported.`, "DeprecationWarning", "DEP0155");
      }
      function packageExportsResolve({
        packageJSONUrl,
        packageSubpath,
        exports: exports3,
        base,
        conditions
      }) {
        if (isConditionalExportsMainSugar(exports3, packageJSONUrl, base))
          exports3 = { ".": exports3 };
        if (ObjectPrototypeHasOwnProperty(exports3, packageSubpath) && !StringPrototypeIncludes(packageSubpath, "*") && !StringPrototypeEndsWith(packageSubpath, "/")) {
          const target = exports3[packageSubpath];
          const resolveResult = resolvePackageTarget(packageJSONUrl, target, "", packageSubpath, base, false, false, conditions);
          if (resolveResult == null) {
            throwExportsNotFound(packageSubpath, packageJSONUrl, base);
          }
          return resolveResult;
        }
        let bestMatch = "";
        let bestMatchSubpath;
        const keys = ObjectGetOwnPropertyNames(exports3);
        for (let i = 0;i < keys.length; i++) {
          const key = keys[i];
          const patternIndex = StringPrototypeIndexOf(key, "*");
          if (patternIndex !== -1 && StringPrototypeStartsWith(packageSubpath, StringPrototypeSlice(key, 0, patternIndex))) {
            if (StringPrototypeEndsWith(packageSubpath, "/"))
              emitTrailingSlashPatternDeprecation(packageSubpath, packageJSONUrl, base);
            const patternTrailer = StringPrototypeSlice(key, patternIndex + 1);
            if (packageSubpath.length >= key.length && StringPrototypeEndsWith(packageSubpath, patternTrailer) && patternKeyCompare(bestMatch, key) === 1 && StringPrototypeLastIndexOf(key, "*") === patternIndex) {
              bestMatch = key;
              bestMatchSubpath = StringPrototypeSlice(packageSubpath, patternIndex, packageSubpath.length - patternTrailer.length);
            }
          }
        }
        if (bestMatch) {
          const target = exports3[bestMatch];
          const resolveResult = resolvePackageTarget(packageJSONUrl, target, bestMatchSubpath, bestMatch, base, true, false, conditions);
          if (resolveResult == null) {
            throwExportsNotFound(packageSubpath, packageJSONUrl, base);
          }
          return resolveResult;
        }
        throwExportsNotFound(packageSubpath, packageJSONUrl, base);
      }
      function packageImportsResolve({ name, base, conditions, readFileSyncFn }) {
        if (name === "#" || StringPrototypeStartsWith(name, "#/") || StringPrototypeEndsWith(name, "/")) {
          const reason = "is not a valid internal imports specifier name";
          throw new ERR_INVALID_MODULE_SPECIFIER(name, reason, url.fileURLToPath(base));
        }
        let packageJSONUrl;
        const packageConfig = getPackageScopeConfig(base, readFileSyncFn);
        if (packageConfig.exists) {
          packageJSONUrl = url.pathToFileURL(packageConfig.pjsonPath);
          const imports = packageConfig.imports;
          if (imports) {
            if (ObjectPrototypeHasOwnProperty(imports, name) && !StringPrototypeIncludes(name, "*")) {
              const resolveResult = resolvePackageTarget(packageJSONUrl, imports[name], "", name, base, false, true, conditions);
              if (resolveResult != null) {
                return resolveResult;
              }
            } else {
              let bestMatch = "";
              let bestMatchSubpath;
              const keys = ObjectGetOwnPropertyNames(imports);
              for (let i = 0;i < keys.length; i++) {
                const key = keys[i];
                const patternIndex = StringPrototypeIndexOf(key, "*");
                if (patternIndex !== -1 && StringPrototypeStartsWith(name, StringPrototypeSlice(key, 0, patternIndex))) {
                  const patternTrailer = StringPrototypeSlice(key, patternIndex + 1);
                  if (name.length >= key.length && StringPrototypeEndsWith(name, patternTrailer) && patternKeyCompare(bestMatch, key) === 1 && StringPrototypeLastIndexOf(key, "*") === patternIndex) {
                    bestMatch = key;
                    bestMatchSubpath = StringPrototypeSlice(name, patternIndex, name.length - patternTrailer.length);
                  }
                }
              }
              if (bestMatch) {
                const target = imports[bestMatch];
                const resolveResult = resolvePackageTarget(packageJSONUrl, target, bestMatchSubpath, bestMatch, base, true, true, conditions);
                if (resolveResult != null) {
                  return resolveResult;
                }
              }
            }
          }
        }
        throwImportNotDefined(name, packageJSONUrl, base);
      }
      var ErrorCode = /* @__PURE__ */ ((ErrorCode2) => {
        ErrorCode2["API_ERROR"] = `API_ERROR`;
        ErrorCode2["BUILTIN_NODE_RESOLUTION_FAILED"] = `BUILTIN_NODE_RESOLUTION_FAILED`;
        ErrorCode2["EXPORTS_RESOLUTION_FAILED"] = `EXPORTS_RESOLUTION_FAILED`;
        ErrorCode2["MISSING_DEPENDENCY"] = `MISSING_DEPENDENCY`;
        ErrorCode2["MISSING_PEER_DEPENDENCY"] = `MISSING_PEER_DEPENDENCY`;
        ErrorCode2["QUALIFIED_PATH_RESOLUTION_FAILED"] = `QUALIFIED_PATH_RESOLUTION_FAILED`;
        ErrorCode2["INTERNAL"] = `INTERNAL`;
        ErrorCode2["UNDECLARED_DEPENDENCY"] = `UNDECLARED_DEPENDENCY`;
        ErrorCode2["UNSUPPORTED"] = `UNSUPPORTED`;
        return ErrorCode2;
      })(ErrorCode || {});
      var MODULE_NOT_FOUND_ERRORS = /* @__PURE__ */ new Set([
        "BUILTIN_NODE_RESOLUTION_FAILED",
        "MISSING_DEPENDENCY",
        "MISSING_PEER_DEPENDENCY",
        "QUALIFIED_PATH_RESOLUTION_FAILED",
        "UNDECLARED_DEPENDENCY"
      ]);
      function makeError(pnpCode, message, data = {}, code) {
        code ??= MODULE_NOT_FOUND_ERRORS.has(pnpCode) ? `MODULE_NOT_FOUND` : pnpCode;
        const propertySpec = {
          configurable: true,
          writable: true,
          enumerable: false
        };
        return Object.defineProperties(new Error(message), {
          code: {
            ...propertySpec,
            value: code
          },
          pnpCode: {
            ...propertySpec,
            value: pnpCode
          },
          data: {
            ...propertySpec,
            value: data
          }
        });
      }
      function getPathForDisplay(p) {
        return npath.normalize(npath.fromPortablePath(p));
      }
      var flagSymbol = Symbol("arg flag");
      var ArgError = class _ArgError extends Error {
        constructor(msg, code) {
          super(msg);
          this.name = "ArgError";
          this.code = code;
          Object.setPrototypeOf(this, _ArgError.prototype);
        }
      };
      function arg(opts, {
        argv = process.argv.slice(2),
        permissive = false,
        stopAtPositional = false
      } = {}) {
        if (!opts) {
          throw new ArgError("argument specification object is required", "ARG_CONFIG_NO_SPEC");
        }
        const result2 = { _: [] };
        const aliases = {};
        const handlers = {};
        for (const key of Object.keys(opts)) {
          if (!key) {
            throw new ArgError("argument key cannot be an empty string", "ARG_CONFIG_EMPTY_KEY");
          }
          if (key[0] !== "-") {
            throw new ArgError(`argument key must start with '-' but found: '${key}'`, "ARG_CONFIG_NONOPT_KEY");
          }
          if (key.length === 1) {
            throw new ArgError(`argument key must have a name; singular '-' keys are not allowed: ${key}`, "ARG_CONFIG_NONAME_KEY");
          }
          if (typeof opts[key] === "string") {
            aliases[key] = opts[key];
            continue;
          }
          let type = opts[key];
          let isFlag = false;
          if (Array.isArray(type) && type.length === 1 && typeof type[0] === "function") {
            const [fn] = type;
            type = (value, name, prev = []) => {
              prev.push(fn(value, name, prev[prev.length - 1]));
              return prev;
            };
            isFlag = fn === Boolean || fn[flagSymbol] === true;
          } else if (typeof type === "function") {
            isFlag = type === Boolean || type[flagSymbol] === true;
          } else {
            throw new ArgError(`type missing or not a function or valid array type: ${key}`, "ARG_CONFIG_VAD_TYPE");
          }
          if (key[1] !== "-" && key.length > 2) {
            throw new ArgError(`short argument keys (with a single hyphen) must have only one character: ${key}`, "ARG_CONFIG_SHORTOPT_TOOLONG");
          }
          handlers[key] = [type, isFlag];
        }
        for (let i = 0, len = argv.length;i < len; i++) {
          const wholeArg = argv[i];
          if (stopAtPositional && result2._.length > 0) {
            result2._ = result2._.concat(argv.slice(i));
            break;
          }
          if (wholeArg === "--") {
            result2._ = result2._.concat(argv.slice(i + 1));
            break;
          }
          if (wholeArg.length > 1 && wholeArg[0] === "-") {
            const separatedArguments = wholeArg[1] === "-" || wholeArg.length === 2 ? [wholeArg] : wholeArg.slice(1).split("").map((a) => `-${a}`);
            for (let j = 0;j < separatedArguments.length; j++) {
              const arg2 = separatedArguments[j];
              const [originalArgName, argStr] = arg2[1] === "-" ? arg2.split(/=(.*)/, 2) : [arg2, undefined];
              let argName = originalArgName;
              while (argName in aliases) {
                argName = aliases[argName];
              }
              if (!(argName in handlers)) {
                if (permissive) {
                  result2._.push(arg2);
                  continue;
                } else {
                  throw new ArgError(`unknown or unexpected option: ${originalArgName}`, "ARG_UNKNOWN_OPTION");
                }
              }
              const [type, isFlag] = handlers[argName];
              if (!isFlag && j + 1 < separatedArguments.length) {
                throw new ArgError(`option requires argument (but was followed by another short argument): ${originalArgName}`, "ARG_MISSING_REQUIRED_SHORTARG");
              }
              if (isFlag) {
                result2[argName] = type(true, argName, result2[argName]);
              } else if (argStr === undefined) {
                if (argv.length < i + 2 || argv[i + 1].length > 1 && argv[i + 1][0] === "-" && !(argv[i + 1].match(/^-?\d*(\.(?=\d))?\d*$/) && (type === Number || typeof BigInt !== "undefined" && type === BigInt))) {
                  const extended = originalArgName === argName ? "" : ` (alias for ${argName})`;
                  throw new ArgError(`option requires argument: ${originalArgName}${extended}`, "ARG_MISSING_REQUIRED_LONGARG");
                }
                result2[argName] = type(argv[i + 1], argName, result2[argName]);
                ++i;
              } else {
                result2[argName] = type(argStr, argName, result2[argName]);
              }
            }
          } else {
            result2._.push(wholeArg);
          }
        }
        return result2;
      }
      arg.flag = (fn) => {
        fn[flagSymbol] = true;
        return fn;
      };
      arg.COUNT = arg.flag((v, name, existingCount) => (existingCount || 0) + 1);
      arg.ArgError = ArgError;
      var arg_1 = arg;
      function getOptionValue(opt) {
        parseOptions();
        return options[opt];
      }
      var options;
      function parseOptions() {
        if (!options) {
          options = {
            "--conditions": [],
            ...parseArgv(getNodeOptionsEnvArgv()),
            ...parseArgv(process.execArgv)
          };
        }
      }
      function parseArgv(argv) {
        return arg_1({
          "--conditions": [String],
          "-C": "--conditions"
        }, {
          argv,
          permissive: true
        });
      }
      function getNodeOptionsEnvArgv() {
        const errors = [];
        const envArgv = ParseNodeOptionsEnvVar(process.env.NODE_OPTIONS || "", errors);
        if (errors.length !== 0)
          ;
        return envArgv;
      }
      function ParseNodeOptionsEnvVar(node_options, errors) {
        const env_argv = [];
        let is_in_string = false;
        let will_start_new_arg = true;
        for (let index = 0;index < node_options.length; ++index) {
          let c = node_options[index];
          if (c === "\\" && is_in_string) {
            if (index + 1 === node_options.length) {
              errors.push(`invalid value for NODE_OPTIONS (invalid escape)
`);
              return env_argv;
            } else {
              c = node_options[++index];
            }
          } else if (c === " " && !is_in_string) {
            will_start_new_arg = true;
            continue;
          } else if (c === '"') {
            is_in_string = !is_in_string;
            continue;
          }
          if (will_start_new_arg) {
            env_argv.push(c);
            will_start_new_arg = false;
          } else {
            env_argv[env_argv.length - 1] += c;
          }
        }
        if (is_in_string) {
          errors.push(`invalid value for NODE_OPTIONS (unterminated string)
`);
        }
        return env_argv;
      }
      var [major, minor] = process.versions.node.split(`.`).map((value) => parseInt(value, 10));
      var WATCH_MODE_MESSAGE_USES_ARRAYS = major > 19 || major === 19 && minor >= 2 || major === 18 && minor >= 13;
      function reportRequiredFilesToWatchMode(files) {
        if (process.env.WATCH_REPORT_DEPENDENCIES && process.send) {
          files = files.map((filename) => npath.fromPortablePath(VirtualFS.resolveVirtual(npath.toPortablePath(filename))));
          if (WATCH_MODE_MESSAGE_USES_ARRAYS) {
            process.send({ "watch:require": files });
          } else {
            for (const filename of files) {
              process.send({ "watch:require": filename });
            }
          }
        }
      }
      function makeApi(runtimeState, opts) {
        const alwaysWarnOnFallback = Number(process.env.PNP_ALWAYS_WARN_ON_FALLBACK) > 0;
        const debugLevel = Number(process.env.PNP_DEBUG_LEVEL);
        const pathRegExp = /^(?![a-zA-Z]:[\\/]|\\\\|\.{0,2}(?:\/|$))((?:node:)?(?:@[^/]+\/)?[^/]+)\/*(.*|)$/;
        const isStrictRegExp = /^(\/|\.{1,2}(\/|$))/;
        const isDirRegExp = /\/$/;
        const isRelativeRegexp = /^\.{0,2}\//;
        const topLevelLocator = { name: null, reference: null };
        const fallbackLocators = [];
        const emittedWarnings = /* @__PURE__ */ new Set;
        if (runtimeState.enableTopLevelFallback === true)
          fallbackLocators.push(topLevelLocator);
        if (opts.compatibilityMode !== false) {
          for (const name of [`react-scripts`, `gatsby`]) {
            const packageStore = runtimeState.packageRegistry.get(name);
            if (packageStore) {
              for (const reference of packageStore.keys()) {
                if (reference === null) {
                  throw new Error(`Assertion failed: This reference shouldn't be null`);
                } else {
                  fallbackLocators.push({ name, reference });
                }
              }
            }
          }
        }
        const {
          ignorePattern,
          packageRegistry,
          packageLocatorsByLocations
        } = runtimeState;
        function makeLogEntry(name, args) {
          return {
            fn: name,
            args,
            error: null,
            result: null
          };
        }
        function trace(entry) {
          const colors = process.stderr?.hasColors?.() ?? process.stdout.isTTY;
          const c = (n, str) => `\x1B[${n}m${str}\x1B[0m`;
          const error = entry.error;
          if (error)
            console.error(c(`31;1`, `\u2716 ${entry.error?.message.replace(/\n.*/s, ``)}`));
          else
            console.error(c(`33;1`, `\u203C Resolution`));
          if (entry.args.length > 0)
            console.error();
          for (const arg2 of entry.args)
            console.error(`  ${c(`37;1`, `In \u2190`)} ${nodeUtils.inspect(arg2, { colors, compact: true })}`);
          if (entry.result) {
            console.error();
            console.error(`  ${c(`37;1`, `Out \u2192`)} ${nodeUtils.inspect(entry.result, { colors, compact: true })}`);
          }
          const stack = new Error().stack.match(/(?<=^ +)at.*/gm)?.slice(2) ?? [];
          if (stack.length > 0) {
            console.error();
            for (const line of stack) {
              console.error(`  ${c(`38;5;244`, line)}`);
            }
          }
          console.error();
        }
        function maybeLog(name, fn) {
          if (opts.allowDebug === false)
            return fn;
          if (Number.isFinite(debugLevel)) {
            if (debugLevel >= 2) {
              return (...args) => {
                const logEntry = makeLogEntry(name, args);
                try {
                  return logEntry.result = fn(...args);
                } catch (error) {
                  throw logEntry.error = error;
                } finally {
                  trace(logEntry);
                }
              };
            } else if (debugLevel >= 1) {
              return (...args) => {
                try {
                  return fn(...args);
                } catch (error) {
                  const logEntry = makeLogEntry(name, args);
                  logEntry.error = error;
                  trace(logEntry);
                  throw error;
                }
              };
            }
          }
          return fn;
        }
        function getPackageInformationSafe(packageLocator) {
          const packageInformation = getPackageInformation(packageLocator);
          if (!packageInformation) {
            throw makeError(ErrorCode.INTERNAL, `Couldn't find a matching entry in the dependency tree for the specified parent (this is probably an internal error)`);
          }
          return packageInformation;
        }
        function isDependencyTreeRoot(packageLocator) {
          if (packageLocator.name === null)
            return true;
          for (const dependencyTreeRoot of runtimeState.dependencyTreeRoots)
            if (dependencyTreeRoot.name === packageLocator.name && dependencyTreeRoot.reference === packageLocator.reference)
              return true;
          return false;
        }
        const defaultExportsConditions = /* @__PURE__ */ new Set([
          `node`,
          `require`,
          ...getOptionValue(`--conditions`)
        ]);
        function applyNodeExportsResolution(unqualifiedPath, conditions = defaultExportsConditions, issuer) {
          const locator = findPackageLocator(ppath.join(unqualifiedPath, `internal.js`), {
            resolveIgnored: true,
            includeDiscardFromLookup: true
          });
          if (locator === null) {
            throw makeError(ErrorCode.INTERNAL, `The locator that owns the "${unqualifiedPath}" path can't be found inside the dependency tree (this is probably an internal error)`);
          }
          const { packageLocation } = getPackageInformationSafe(locator);
          const manifestPath = ppath.join(packageLocation, Filename.manifest);
          if (!opts.fakeFs.existsSync(manifestPath))
            return null;
          const pkgJson = JSON.parse(opts.fakeFs.readFileSync(manifestPath, `utf8`));
          if (pkgJson.exports == null)
            return null;
          let subpath = ppath.contains(packageLocation, unqualifiedPath);
          if (subpath === null) {
            throw makeError(ErrorCode.INTERNAL, `unqualifiedPath doesn't contain the packageLocation (this is probably an internal error)`);
          }
          if (subpath !== `.` && !isRelativeRegexp.test(subpath))
            subpath = `./${subpath}`;
          try {
            const resolvedExport = packageExportsResolve({
              packageJSONUrl: url.pathToFileURL(npath.fromPortablePath(manifestPath)),
              packageSubpath: subpath,
              exports: pkgJson.exports,
              base: issuer ? url.pathToFileURL(npath.fromPortablePath(issuer)) : null,
              conditions
            });
            return npath.toPortablePath(url.fileURLToPath(resolvedExport));
          } catch (error) {
            throw makeError(ErrorCode.EXPORTS_RESOLUTION_FAILED, error.message, { unqualifiedPath: getPathForDisplay(unqualifiedPath), locator, pkgJson, subpath: getPathForDisplay(subpath), conditions }, error.code);
          }
        }
        function applyNodeExtensionResolution(unqualifiedPath, candidates, { extensions }) {
          let stat;
          try {
            candidates.push(unqualifiedPath);
            stat = opts.fakeFs.statSync(unqualifiedPath);
          } catch (error) {
          }
          if (stat && !stat.isDirectory())
            return opts.fakeFs.realpathSync(unqualifiedPath);
          if (stat && stat.isDirectory()) {
            let pkgJson;
            try {
              pkgJson = JSON.parse(opts.fakeFs.readFileSync(ppath.join(unqualifiedPath, Filename.manifest), `utf8`));
            } catch (error) {
            }
            let nextUnqualifiedPath;
            if (pkgJson && pkgJson.main)
              nextUnqualifiedPath = ppath.resolve(unqualifiedPath, pkgJson.main);
            if (nextUnqualifiedPath && nextUnqualifiedPath !== unqualifiedPath) {
              const resolution = applyNodeExtensionResolution(nextUnqualifiedPath, candidates, { extensions });
              if (resolution !== null) {
                return resolution;
              }
            }
          }
          for (let i = 0, length = extensions.length;i < length; i++) {
            const candidateFile = `${unqualifiedPath}${extensions[i]}`;
            candidates.push(candidateFile);
            if (opts.fakeFs.existsSync(candidateFile)) {
              return candidateFile;
            }
          }
          if (stat && stat.isDirectory()) {
            for (let i = 0, length = extensions.length;i < length; i++) {
              const candidateFile = ppath.format({ dir: unqualifiedPath, name: `index`, ext: extensions[i] });
              candidates.push(candidateFile);
              if (opts.fakeFs.existsSync(candidateFile)) {
                return candidateFile;
              }
            }
          }
          return null;
        }
        function makeFakeModule(path3) {
          const fakeModule = new module$1.Module(path3, null);
          fakeModule.filename = path3;
          fakeModule.paths = module$1.Module._nodeModulePaths(path3);
          return fakeModule;
        }
        function callNativeResolution(request, issuer) {
          if (issuer.endsWith(`/`))
            issuer = ppath.join(issuer, `internal.js`);
          return module$1.Module._resolveFilename(npath.fromPortablePath(request), makeFakeModule(npath.fromPortablePath(issuer)), false, { plugnplay: false });
        }
        function isPathIgnored(path3) {
          if (ignorePattern === null)
            return false;
          const subPath = ppath.contains(runtimeState.basePath, path3);
          if (subPath === null)
            return false;
          if (ignorePattern.test(subPath.replace(/\/$/, ``))) {
            return true;
          } else {
            return false;
          }
        }
        const VERSIONS = { std: 3, resolveVirtual: 1, getAllLocators: 1 };
        const topLevel = topLevelLocator;
        function getPackageInformation({ name, reference }) {
          const packageInformationStore = packageRegistry.get(name);
          if (!packageInformationStore)
            return null;
          const packageInformation = packageInformationStore.get(reference);
          if (!packageInformation)
            return null;
          return packageInformation;
        }
        function findPackageDependents({ name, reference }) {
          const dependents = [];
          for (const [dependentName, packageInformationStore] of packageRegistry) {
            if (dependentName === null)
              continue;
            for (const [dependentReference, packageInformation] of packageInformationStore) {
              if (dependentReference === null)
                continue;
              const dependencyReference = packageInformation.packageDependencies.get(name);
              if (dependencyReference !== reference)
                continue;
              if (dependentName === name && dependentReference === reference)
                continue;
              dependents.push({
                name: dependentName,
                reference: dependentReference
              });
            }
          }
          return dependents;
        }
        function findBrokenPeerDependencies(dependency, initialPackage) {
          const brokenPackages = /* @__PURE__ */ new Map;
          const alreadyVisited = /* @__PURE__ */ new Set;
          const traversal = (currentPackage) => {
            const identifier = JSON.stringify(currentPackage.name);
            if (alreadyVisited.has(identifier))
              return;
            alreadyVisited.add(identifier);
            const dependents = findPackageDependents(currentPackage);
            for (const dependent of dependents) {
              const dependentInformation = getPackageInformationSafe(dependent);
              if (dependentInformation.packagePeers.has(dependency)) {
                traversal(dependent);
              } else {
                let brokenSet = brokenPackages.get(dependent.name);
                if (typeof brokenSet === `undefined`)
                  brokenPackages.set(dependent.name, brokenSet = /* @__PURE__ */ new Set);
                brokenSet.add(dependent.reference);
              }
            }
          };
          traversal(initialPackage);
          const brokenList = [];
          for (const name of [...brokenPackages.keys()].sort())
            for (const reference of [...brokenPackages.get(name)].sort())
              brokenList.push({ name, reference });
          return brokenList;
        }
        function findPackageLocator(location, { resolveIgnored = false, includeDiscardFromLookup = false } = {}) {
          if (isPathIgnored(location) && !resolveIgnored)
            return null;
          let relativeLocation = ppath.relative(runtimeState.basePath, location);
          if (!relativeLocation.match(isStrictRegExp))
            relativeLocation = `./${relativeLocation}`;
          if (!relativeLocation.endsWith(`/`))
            relativeLocation = `${relativeLocation}/`;
          do {
            const entry = packageLocatorsByLocations.get(relativeLocation);
            if (typeof entry === `undefined` || entry.discardFromLookup && !includeDiscardFromLookup) {
              relativeLocation = relativeLocation.substring(0, relativeLocation.lastIndexOf(`/`, relativeLocation.length - 2) + 1);
              continue;
            }
            return entry.locator;
          } while (relativeLocation !== ``);
          return null;
        }
        function tryReadFile(filePath) {
          try {
            return opts.fakeFs.readFileSync(npath.toPortablePath(filePath), `utf8`);
          } catch (err) {
            if (err.code === `ENOENT`)
              return;
            throw err;
          }
        }
        function resolveToUnqualified(request, issuer, { considerBuiltins = true } = {}) {
          if (request.startsWith(`#`))
            throw new Error(`resolveToUnqualified can not handle private import mappings`);
          if (request === `pnpapi`)
            return npath.toPortablePath(opts.pnpapiResolution);
          if (considerBuiltins && module$1.isBuiltin(request))
            return null;
          const requestForDisplay = getPathForDisplay(request);
          const issuerForDisplay = issuer && getPathForDisplay(issuer);
          if (issuer && isPathIgnored(issuer)) {
            if (!ppath.isAbsolute(request) || findPackageLocator(request) === null) {
              const result2 = callNativeResolution(request, issuer);
              if (result2 === false) {
                throw makeError(ErrorCode.BUILTIN_NODE_RESOLUTION_FAILED, `The builtin node resolution algorithm was unable to resolve the requested module (it didn't go through the pnp resolver because the issuer was explicitely ignored by the regexp)

Require request: "${requestForDisplay}"
Required by: ${issuerForDisplay}
`, { request: requestForDisplay, issuer: issuerForDisplay });
              }
              return npath.toPortablePath(result2);
            }
          }
          let unqualifiedPath;
          const dependencyNameMatch = request.match(pathRegExp);
          if (!dependencyNameMatch) {
            if (ppath.isAbsolute(request)) {
              unqualifiedPath = ppath.normalize(request);
            } else {
              if (!issuer) {
                throw makeError(ErrorCode.API_ERROR, `The resolveToUnqualified function must be called with a valid issuer when the path isn't a builtin nor absolute`, { request: requestForDisplay, issuer: issuerForDisplay });
              }
              const absoluteIssuer = ppath.resolve(issuer);
              if (issuer.match(isDirRegExp)) {
                unqualifiedPath = ppath.normalize(ppath.join(absoluteIssuer, request));
              } else {
                unqualifiedPath = ppath.normalize(ppath.join(ppath.dirname(absoluteIssuer), request));
              }
            }
          } else {
            if (!issuer) {
              throw makeError(ErrorCode.API_ERROR, `The resolveToUnqualified function must be called with a valid issuer when the path isn't a builtin nor absolute`, { request: requestForDisplay, issuer: issuerForDisplay });
            }
            const [, dependencyName, subPath] = dependencyNameMatch;
            const issuerLocator = findPackageLocator(issuer);
            if (!issuerLocator) {
              const result2 = callNativeResolution(request, issuer);
              if (result2 === false) {
                throw makeError(ErrorCode.BUILTIN_NODE_RESOLUTION_FAILED, `The builtin node resolution algorithm was unable to resolve the requested module (it didn't go through the pnp resolver because the issuer doesn't seem to be part of the Yarn-managed dependency tree).

Require path: "${requestForDisplay}"
Required by: ${issuerForDisplay}
`, { request: requestForDisplay, issuer: issuerForDisplay });
              }
              return npath.toPortablePath(result2);
            }
            const issuerInformation = getPackageInformationSafe(issuerLocator);
            let dependencyReference = issuerInformation.packageDependencies.get(dependencyName);
            let fallbackReference = null;
            if (dependencyReference == null) {
              if (issuerLocator.name !== null) {
                const exclusionEntry = runtimeState.fallbackExclusionList.get(issuerLocator.name);
                const canUseFallbacks = !exclusionEntry || !exclusionEntry.has(issuerLocator.reference);
                if (canUseFallbacks) {
                  for (let t = 0, T = fallbackLocators.length;t < T; ++t) {
                    const fallbackInformation = getPackageInformationSafe(fallbackLocators[t]);
                    const reference = fallbackInformation.packageDependencies.get(dependencyName);
                    if (reference == null)
                      continue;
                    if (alwaysWarnOnFallback)
                      fallbackReference = reference;
                    else
                      dependencyReference = reference;
                    break;
                  }
                  if (runtimeState.enableTopLevelFallback) {
                    if (dependencyReference == null && fallbackReference === null) {
                      const reference = runtimeState.fallbackPool.get(dependencyName);
                      if (reference != null) {
                        fallbackReference = reference;
                      }
                    }
                  }
                }
              }
            }
            let error = null;
            if (dependencyReference === null) {
              if (isDependencyTreeRoot(issuerLocator)) {
                error = makeError(ErrorCode.MISSING_PEER_DEPENDENCY, `Your application tried to access ${dependencyName} (a peer dependency); this isn't allowed as there is no ancestor to satisfy the requirement. Use a devDependency if needed.

Required package: ${dependencyName}${dependencyName !== requestForDisplay ? ` (via "${requestForDisplay}")` : ``}
Required by: ${issuerForDisplay}
`, { request: requestForDisplay, issuer: issuerForDisplay, dependencyName });
              } else {
                const brokenAncestors = findBrokenPeerDependencies(dependencyName, issuerLocator);
                if (brokenAncestors.every((ancestor) => isDependencyTreeRoot(ancestor))) {
                  error = makeError(ErrorCode.MISSING_PEER_DEPENDENCY, `${issuerLocator.name} tried to access ${dependencyName} (a peer dependency) but it isn't provided by your application; this makes the require call ambiguous and unsound.

Required package: ${dependencyName}${dependencyName !== requestForDisplay ? ` (via "${requestForDisplay}")` : ``}
Required by: ${issuerLocator.name}@${issuerLocator.reference} (via ${issuerForDisplay})
${brokenAncestors.map((ancestorLocator) => `Ancestor breaking the chain: ${ancestorLocator.name}@${ancestorLocator.reference}
`).join(``)}
`, { request: requestForDisplay, issuer: issuerForDisplay, issuerLocator: Object.assign({}, issuerLocator), dependencyName, brokenAncestors });
                } else {
                  error = makeError(ErrorCode.MISSING_PEER_DEPENDENCY, `${issuerLocator.name} tried to access ${dependencyName} (a peer dependency) but it isn't provided by its ancestors; this makes the require call ambiguous and unsound.

Required package: ${dependencyName}${dependencyName !== requestForDisplay ? ` (via "${requestForDisplay}")` : ``}
Required by: ${issuerLocator.name}@${issuerLocator.reference} (via ${issuerForDisplay})

${brokenAncestors.map((ancestorLocator) => `Ancestor breaking the chain: ${ancestorLocator.name}@${ancestorLocator.reference}
`).join(``)}
`, { request: requestForDisplay, issuer: issuerForDisplay, issuerLocator: Object.assign({}, issuerLocator), dependencyName, brokenAncestors });
                }
              }
            } else if (dependencyReference === undefined) {
              if (!considerBuiltins && module$1.isBuiltin(request)) {
                if (isDependencyTreeRoot(issuerLocator)) {
                  error = makeError(ErrorCode.UNDECLARED_DEPENDENCY, `Your application tried to access ${dependencyName}. While this module is usually interpreted as a Node builtin, your resolver is running inside a non-Node resolution context where such builtins are ignored. Since ${dependencyName} isn't otherwise declared in your dependencies, this makes the require call ambiguous and unsound.

Required package: ${dependencyName}${dependencyName !== requestForDisplay ? ` (via "${requestForDisplay}")` : ``}
Required by: ${issuerForDisplay}
`, { request: requestForDisplay, issuer: issuerForDisplay, dependencyName });
                } else {
                  error = makeError(ErrorCode.UNDECLARED_DEPENDENCY, `${issuerLocator.name} tried to access ${dependencyName}. While this module is usually interpreted as a Node builtin, your resolver is running inside a non-Node resolution context where such builtins are ignored. Since ${dependencyName} isn't otherwise declared in ${issuerLocator.name}'s dependencies, this makes the require call ambiguous and unsound.

Required package: ${dependencyName}${dependencyName !== requestForDisplay ? ` (via "${requestForDisplay}")` : ``}
Required by: ${issuerForDisplay}
`, { request: requestForDisplay, issuer: issuerForDisplay, issuerLocator: Object.assign({}, issuerLocator), dependencyName });
                }
              } else {
                if (isDependencyTreeRoot(issuerLocator)) {
                  error = makeError(ErrorCode.UNDECLARED_DEPENDENCY, `Your application tried to access ${dependencyName}, but it isn't declared in your dependencies; this makes the require call ambiguous and unsound.

Required package: ${dependencyName}${dependencyName !== requestForDisplay ? ` (via "${requestForDisplay}")` : ``}
Required by: ${issuerForDisplay}
`, { request: requestForDisplay, issuer: issuerForDisplay, dependencyName });
                } else {
                  error = makeError(ErrorCode.UNDECLARED_DEPENDENCY, `${issuerLocator.name} tried to access ${dependencyName}, but it isn't declared in its dependencies; this makes the require call ambiguous and unsound.

Required package: ${dependencyName}${dependencyName !== requestForDisplay ? ` (via "${requestForDisplay}")` : ``}
Required by: ${issuerLocator.name}@${issuerLocator.reference} (via ${issuerForDisplay})
`, { request: requestForDisplay, issuer: issuerForDisplay, issuerLocator: Object.assign({}, issuerLocator), dependencyName });
                }
              }
            }
            if (dependencyReference == null) {
              if (fallbackReference === null || error === null)
                throw error || new Error(`Assertion failed: Expected an error to have been set`);
              dependencyReference = fallbackReference;
              const message = error.message.replace(/\n.*/g, ``);
              error.message = message;
              if (!emittedWarnings.has(message) && debugLevel !== 0) {
                emittedWarnings.add(message);
                process.emitWarning(error);
              }
            }
            const dependencyLocator = Array.isArray(dependencyReference) ? { name: dependencyReference[0], reference: dependencyReference[1] } : { name: dependencyName, reference: dependencyReference };
            const dependencyInformation = getPackageInformationSafe(dependencyLocator);
            if (!dependencyInformation.packageLocation) {
              throw makeError(ErrorCode.MISSING_DEPENDENCY, `A dependency seems valid but didn't get installed for some reason. This might be caused by a partial install, such as dev vs prod.

Required package: ${dependencyLocator.name}@${dependencyLocator.reference}${dependencyLocator.name !== requestForDisplay ? ` (via "${requestForDisplay}")` : ``}
Required by: ${issuerLocator.name}@${issuerLocator.reference} (via ${issuerForDisplay})
`, { request: requestForDisplay, issuer: issuerForDisplay, dependencyLocator: Object.assign({}, dependencyLocator) });
            }
            const dependencyLocation = dependencyInformation.packageLocation;
            if (subPath) {
              unqualifiedPath = ppath.join(dependencyLocation, subPath);
            } else {
              unqualifiedPath = dependencyLocation;
            }
          }
          return ppath.normalize(unqualifiedPath);
        }
        function resolveUnqualifiedExport(request, unqualifiedPath, conditions = defaultExportsConditions, issuer) {
          if (isStrictRegExp.test(request))
            return unqualifiedPath;
          const unqualifiedExportPath = applyNodeExportsResolution(unqualifiedPath, conditions, issuer);
          if (unqualifiedExportPath) {
            return ppath.normalize(unqualifiedExportPath);
          } else {
            return unqualifiedPath;
          }
        }
        function resolveUnqualified(unqualifiedPath, { extensions = Object.keys(module$1.Module._extensions) } = {}) {
          const candidates = [];
          const qualifiedPath = applyNodeExtensionResolution(unqualifiedPath, candidates, { extensions });
          if (qualifiedPath) {
            return ppath.normalize(qualifiedPath);
          } else {
            reportRequiredFilesToWatchMode(candidates.map((candidate) => npath.fromPortablePath(candidate)));
            const unqualifiedPathForDisplay = getPathForDisplay(unqualifiedPath);
            const containingPackage = findPackageLocator(unqualifiedPath);
            if (containingPackage) {
              const { packageLocation } = getPackageInformationSafe(containingPackage);
              let exists = true;
              try {
                opts.fakeFs.accessSync(packageLocation);
              } catch (err) {
                if (err?.code === `ENOENT`) {
                  exists = false;
                } else {
                  const readableError = (err?.message ?? err ?? `empty exception thrown`).replace(/^[A-Z]/, ($0) => $0.toLowerCase());
                  throw makeError(ErrorCode.QUALIFIED_PATH_RESOLUTION_FAILED, `Required package exists but could not be accessed (${readableError}).

Missing package: ${containingPackage.name}@${containingPackage.reference}
Expected package location: ${getPathForDisplay(packageLocation)}
`, { unqualifiedPath: unqualifiedPathForDisplay, extensions });
                }
              }
              if (!exists) {
                const errorMessage = packageLocation.includes(`/unplugged/`) ? `Required unplugged package missing from disk. This may happen when switching branches without running installs (unplugged packages must be fully materialized on disk to work).` : `Required package missing from disk. If you keep your packages inside your repository then restarting the Node process may be enough. Otherwise, try to run an install first.`;
                throw makeError(ErrorCode.QUALIFIED_PATH_RESOLUTION_FAILED, `${errorMessage}

Missing package: ${containingPackage.name}@${containingPackage.reference}
Expected package location: ${getPathForDisplay(packageLocation)}
`, { unqualifiedPath: unqualifiedPathForDisplay, extensions });
              }
            }
            throw makeError(ErrorCode.QUALIFIED_PATH_RESOLUTION_FAILED, `Qualified path resolution failed: we looked for the following paths, but none could be accessed.

Source path: ${unqualifiedPathForDisplay}
${candidates.map((candidate) => `Not found: ${getPathForDisplay(candidate)}
`).join(``)}`, { unqualifiedPath: unqualifiedPathForDisplay, extensions });
          }
        }
        function resolvePrivateRequest(request, issuer, opts2) {
          if (!issuer)
            throw new Error(`Assertion failed: An issuer is required to resolve private import mappings`);
          const resolved = packageImportsResolve({
            name: request,
            base: url.pathToFileURL(npath.fromPortablePath(issuer)),
            conditions: opts2.conditions ?? defaultExportsConditions,
            readFileSyncFn: tryReadFile
          });
          if (resolved instanceof URL) {
            return resolveUnqualified(npath.toPortablePath(url.fileURLToPath(resolved)), { extensions: opts2.extensions });
          } else {
            if (resolved.startsWith(`#`))
              throw new Error(`Mapping from one private import to another isn't allowed`);
            return resolveRequest(resolved, issuer, opts2);
          }
        }
        function resolveRequest(request, issuer, opts2 = {}) {
          try {
            if (request.startsWith(`#`))
              return resolvePrivateRequest(request, issuer, opts2);
            const { considerBuiltins, extensions, conditions } = opts2;
            const unqualifiedPath = resolveToUnqualified(request, issuer, { considerBuiltins });
            if (request === `pnpapi`)
              return unqualifiedPath;
            if (unqualifiedPath === null)
              return null;
            const isIssuerIgnored = () => issuer !== null ? isPathIgnored(issuer) : false;
            const remappedPath = (!considerBuiltins || !module$1.isBuiltin(request)) && !isIssuerIgnored() ? resolveUnqualifiedExport(request, unqualifiedPath, conditions, issuer) : unqualifiedPath;
            return resolveUnqualified(remappedPath, { extensions });
          } catch (error) {
            if (Object.hasOwn(error, `pnpCode`))
              Object.assign(error.data, { request: getPathForDisplay(request), issuer: issuer && getPathForDisplay(issuer) });
            throw error;
          }
        }
        function resolveVirtual(request) {
          const normalized = ppath.normalize(request);
          const resolved = VirtualFS.resolveVirtual(normalized);
          return resolved !== normalized ? resolved : null;
        }
        return {
          VERSIONS,
          topLevel,
          getLocator: (name, referencish) => {
            if (Array.isArray(referencish)) {
              return { name: referencish[0], reference: referencish[1] };
            } else {
              return { name, reference: referencish };
            }
          },
          getDependencyTreeRoots: () => {
            return [...runtimeState.dependencyTreeRoots];
          },
          getAllLocators() {
            const locators = [];
            for (const [name, entry] of packageRegistry)
              for (const reference of entry.keys())
                if (name !== null && reference !== null)
                  locators.push({ name, reference });
            return locators;
          },
          getPackageInformation: (locator) => {
            const info = getPackageInformation(locator);
            if (info === null)
              return null;
            const packageLocation = npath.fromPortablePath(info.packageLocation);
            const nativeInfo = { ...info, packageLocation };
            return nativeInfo;
          },
          findPackageLocator: (path3) => {
            return findPackageLocator(npath.toPortablePath(path3));
          },
          resolveToUnqualified: maybeLog(`resolveToUnqualified`, (request, issuer, opts2) => {
            const portableIssuer = issuer !== null ? npath.toPortablePath(issuer) : null;
            const resolution = resolveToUnqualified(npath.toPortablePath(request), portableIssuer, opts2);
            if (resolution === null)
              return null;
            return npath.fromPortablePath(resolution);
          }),
          resolveUnqualified: maybeLog(`resolveUnqualified`, (unqualifiedPath, opts2) => {
            return npath.fromPortablePath(resolveUnqualified(npath.toPortablePath(unqualifiedPath), opts2));
          }),
          resolveRequest: maybeLog(`resolveRequest`, (request, issuer, opts2) => {
            const portableIssuer = issuer !== null ? npath.toPortablePath(issuer) : null;
            const resolution = resolveRequest(npath.toPortablePath(request), portableIssuer, opts2);
            if (resolution === null)
              return null;
            return npath.fromPortablePath(resolution);
          }),
          resolveVirtual: maybeLog(`resolveVirtual`, (path3) => {
            const result2 = resolveVirtual(npath.toPortablePath(path3));
            if (result2 !== null) {
              return npath.fromPortablePath(result2);
            } else {
              return null;
            }
          })
        };
      }
      async function hydratePnpFile(location, { fakeFs, pnpapiResolution }) {
        const source = await fakeFs.readFilePromise(location, `utf8`);
        return hydratePnpSource(source, {
          basePath: path2.dirname(location),
          fakeFs,
          pnpapiResolution
        });
      }
      function hydratePnpSource(source, { basePath, fakeFs, pnpapiResolution }) {
        const data = JSON.parse(source);
        const runtimeState = hydrateRuntimeState(data, {
          basePath
        });
        return makeApi(runtimeState, {
          compatibilityMode: true,
          fakeFs,
          pnpapiResolution
        });
      }
      var makeRuntimeApi = (settings, basePath, fakeFs) => {
        const data = generateSerializedState(settings);
        const state = hydrateRuntimeState(data, { basePath });
        const pnpapiResolution = npath.join(basePath, Filename.pnpCjs);
        return makeApi(state, { fakeFs, pnpapiResolution });
      };
      var hook;
      var builtLoader = () => {
        if (typeof hook === `undefined`)
          hook = require$$0__default.default.brotliDecompressSync(Buffer.from("W7YZIYrAeaAIofn/qpGBmjpZVwDLAvMwf4yXtBPC2k244urd2MomTN2aMogfZ4A7OVKdZytVrWdTrWmYxircma0wGjinrwi97kOIB/rfPvf++/N1nmkwua4pdU0vplRnJ8uTq4/IAsPFlgkUtfMXWn1Nm4s4/1OdO8sUK02YQ8V0UUTasGUTR54r1eZDT0Tg+dfNn2bSIN6Zw+V9selvZoGapDZBTNJtWlu8YiP8VAl4vuaHrmqbStPqWMGWi1ET+Wl8hECbrj9M79f7pp+KJEBcE6TKVEriNY6xXKgoIrpP3yOOwfyPgdESROE7cD251tzuvu9hZjDLwpDcErDkGhpVUc7ZLP5BvGEEUjaLZdHaf3p1wpI/ZW6ndipAYFTca6o+3B9iFWHICDGbsHGBmmPDDNvKKnyOtjGr2X7Xv2gIEIo0IUR9fyzr0RFHe+BekvwQ8A7azu4PX6uXTmr3kyZ3UxuE0AeEwE7s3f0LdIJcvAtlstfAn45Em6li+lMmn6NJtkeT0hrM6hZvhjO5NFsx6OvLtoz8vjLzBCE2tq38M2NRMff1r/HFdUdxSA4v2T8UzNbJfx16WEjKmYryX6bLx1Qi4KkviXx2b7rrUxmOfmjBZgdsdLqS9lR7LqgGoSoMNiKLAWDBhm2OenIXqbIOID+RvwRtjzFzXwcoDeaECP86wI+AHGNpQW3WAPb/lwReQ94/ItDUi2V7l5TD4XFWZ8iKTQ12efZjmhTFHWDF9Oc3y70FuMb4wQ/I8qsKeqfE1WVz8edT8MeF67oUi2PlFO03r1CeI4weV1yCaDPmoUYdmMNiRTHsQSNECB+KvgK4BSAsq0qMdK2hYiFg2XXS+o6wEpuP+WXFzRWVisb+bZhUMBx1Uk4qPk7VZ8D1ygB1KwB3KxGYr3qT58d9K84LMe4xPUVz65JDAAYiPHjF/WO1WnW5lxKhpqd4E8oB11Yhn2lsJJ6wgA1OHsJVhMgWr0L6mnDSCoEJ/1xNAVWu0xJ5jcBdoOkC7MBWt4wKYC6pZnU0L0/ZEun63aneuabhhBNM/ElZOVSwFTXhz7urfvcEdzPZNQ/Af/UI5+TJfwTyaXTx5P/jSTu0EjKokid64RDKPrpo0TiT4Dxz/C4cdmdvrVq1qtz/FZbanctieS8eT23qQvPgR6DcPtLjac8FFkDnsbtRv3C+pjh/rES8pqV/UqOax7pPArrJiAxDeArF7/TOfkGNdm1eRHltB0cWa/gCLLQmvzYGAzaC3oiqmm+BmRNUVYDye1Wrf7CoviG9h2bqkfb3co4TkHVQLpWB3sEWM6KCqxl98ZURki9KaP51AxocQP1YrTb71POvLimJLx1O3wgr+jrKYpnOaVh+kQMsaiNKd6vfUs58mCo8VZtF7aA3vcH2sfIfFG3JJY5egsfZCxbWam6tBq2rYQHOzGsbWIRyw4/RMQqrWdK0s9ucgjMyuOQBxG3s3UxOyQlvchbAK4PqV5NA7+s8i/LQewHL9ps1/11SMtq2rzO/k47/CvLVxu/VF14vKnSYvKDIgBp8YQYOrFJnbSfaKiCf2FTBdai76QQTPskJiOSQEKAGct1m9u99O1y37v5Ryvu1HnEnH4Pyn6/CGWd02gi3lBebEnDS0rjEcssB4poRl5wQ9ZteiikUd3kk9ogUkO3Tho11OUVtIukGJ9kbf5PU/PB8gGMrXP7OdPhPUuXg1usheUW1WSLUHYhseGbnUhLmToxyTdiii6DrmbM7eNWtN+y5AIGRHscz2OE8fUQNxSIQZ6hZlRsj1Hsb4x/m4jOawSTFI9FWpjZH8KZ1VTHRlu6U6l+DXBQ7EpQifgHFdiB5VffK4B1wq+IeaBjTsCQEBJBGq3xSny6qetT4lGrbfAOyCI74QeRBimUsmfY65mHj5ICnp/VFsAnaIZuAeBoI+vCFT6JvJoYsyrhaowcOo2Fj8z6AwYvLzPIj2f5esqLhnzs37MN5yy0LWnrJ0EadFAE9448ipZMWaTuelOG+8tWTQ3mIJ29XtpRgS0H42ei8U0KKuc5VWrPWLE1VGrFv2WZu+lBgfNBbBvu9yXrZH023WvtV9bhXBHIyy3a+EVXAI4JMH4ruzTys/jUtXVFd88jvMX7XmIjMgmHwEML9EdRUI18RZdXYPJUtEveG0iLRQEVPTHGBOa3STqzkApApn4QAndZyYwVctL7PXL24PCvPb3kKHTM3qbZlCZZUQ67o30+MCLu1idSB7Ko1KBlCBuX7kPCxvukHi1g7E0IUnq1iFOilXH+T92MGHQJfO5QsUgulZFfd0vWflcxXZD1lPZzB2XvF5BBbTLmzzHuhnTS4KnEPBGqXf+SofcIfJzD3CpiduYhveczjMRb1sXs46drNeQYTdLHw0oVyb3h0AB+z14AseDdgwCyU4d+RWq5Nk2qyWK9SYulIfQCzl/1IxYA0Zc1tsFTi7hVi4YJ9avMITOFjbT7JvuUggreBddtHy42woEaBtrl3C76tSSb1Jp7dwOMEratJVKxjLFKSOKc883wNPZuelXgSBmyCeRLmvoXVuwk90HGS/5yjGOiiLZDC5owKIhOnKT8u0FziBoIfb0VDK3P/uzPGyLNQ3q8Q88g1jxBae7ZindZet2uyHQxNxWbDk4cm+qnw48xcXQWId5pIu+SfEW1FY8nW5rU6w+smRmIG7Zt+CgiO9WZdMH5f8vmUZyWxck6ptvvszFtk6Zgfq10sHR0nTcxZuli/wscpETEZ2OfhVpXMFE+qsLO165Z7TZA1d1Bqmr2mZ9Hahd9lg7E8mT7YYUz9A1+3YRZ9K32VcOjPJW0L0WaPEFNbMFp8C74yc+9qBPFrVE5wPUCiQUF7VLXdWt+k+DK6uoZck62z4kEpLYA9tvMewEDrnuj6qY3lHSggl2aBf4QLEZf5GTaaaBklz+BsSey9F/Gll7EqpzrlJqi4ohTF1F5wpX0AnsfJVSAxz75XiSfSWwnKPzS9wprGuvH6wzu3HS/Y3D7Hcz4zt94iktY3VoDMBXIVU3ZhurAHW0oIkm+v8uQDLPzAmNcXoq1pGUMzuES7qoV9MvYcM/zWfYGdpY3mnjrlGUvd742zezvatOApsxYwL8mkF56vhqawtH8p17pATe1qqlQZ+5fbn6ir4u9mRFTuGNdjU9Kr4Dhb3NGiE7PFRxRGkDLHna3uExLPv9heaZ4l/IbwwjK5uX0Sz5fHSRBX2lntiN51G2bilyt53ibizDkv5bIKqCsVvYi5gM6npb/DHOxdOYFE7iXKH6x4/AIgZUk12lnNak5nTvZNqEwsJDP5qC3DSDSQdP/yQDL7Mr7VWIfD4/nglnn+Ol3aa5pjLQy7F4R1EP/w8oDypvHrmRGEdr/2ZeD9jc9qczNGvWVs1TOpaG1OWPaZ/FeGyqdqOxLql5sbNtLSLj+RigrA8Zd5Skqj5g9HG0R8woPZ8Isv2DI5UcFB74cxq5VF7XR8O+8rIDoIA0r8ZckbDl+z2XGW8kkGlTnl4bYsVvo2XOPalZQC+nHLDeDUjjrq45/Bu66uR6VaZM7XLQChJ6aOJb1zjVoJjGxl/RvOgbbEsUcg9jN6wHQVxz+YK1o4mIkTd9lr73hDhiGJmnrk09khgnZX1jZgXMvlXZfvu/4UzJMeGKZ8+tUdHXsL27CkrKTeN7GAv03B++NvNl3ScoeZpb00tw8A7uI70mwNEMLH3b4q+AS5/v1K0HXvITE/0J1tw8aOX/dv4NwY7+PyWxCzYkFIV9+BpMl+mrOMqJ+oTDH0P+y5oD0Wls9sLKBWmrBPVIBEusrH9cISnk8TJVBCZ+WuYp4oVjgVYQ74StFhLJkeVX+vnH2MZYLE4hGw/zLr1ixF4S0fuq5t1wlGdZcN3Ryiei/RvIQEttuAPEZ56X9DN3RdN1i7WZrDZ9bA2Y6QFCJL8I4FQNd0LAd8e28SZ97m49v3sySuqZT4X7yiKaymNsJy0h+JmUQ53oKpS7dI2CHicwn4nmdRaVSG8PMxr30O/p0loXp2VDeedkJ9n983Z06Xp9nOmvn+ssww+cEbjRzPuX7J+2BQZM01++bXQh6G+eFM+s+c704+9OtsQZ1bwnCZ08K5ZGvMyav8qbdAspe9+ft/QgINsPYAAJlYbcNG5yK6QACe4MsxLLW1T+2s9RJwn7N3Tlm3rL9ZJqtIYwQhWftRqFrqSbokt46nCJqXwRg36i/q7RjTmNCIrZuJc8Sw7ofcAIbN2ZDTkn/ySLoemB33MehW/gegbYAjaNvCCUK4bJs78glrWaysX9ai9TNgcwvRK4+FvwzKg9P21PWN4KwUt8/awmrBhg4sDYMNFJXeBvQ26BLMj6Rg/N6LrXanZNnMsidv4lcT58XgxA1IXpI0MIdVsux5r5bQtNBw0WVK1kTGNQSUIJuIi6AxVF0l+7Lx1z1dieSEoZA+mkP5Ylq4a4MKkLN8745tnSpG3PmlGA7XNgTGeyhijUEgFAHib//r5F5pPqL9J+peKzxJ0PvdaU8A7PiVnOqt8Pu6x7hdfJVmvd60uU7lShz7MZ+W0V3ifWezK/HicLkkP3nx3fLmVafZkIw19egheY8kUHPI8uHQcuhEaOy4pYcmpxzonwxtTiuhiUZ31qv35CM4SgUk4csI78TrbHYCCkvr9MLRSuVuz4VAfGmKhj+5+RoDKwhxJoV1SdcxbwWZ9nFu5I1jiu+ujtpSJ8igdxbOxoVTQwUXDjVFsEbDPKZ33uPtCS3Gib8Jnl06fKT39gz7DSiesYxjt1f+qlrYdKFPXG/uHojPmMAHfu6cIv1ufCH/3W0Ns9ups/HJL6qfjJsfW1cPRnlj122sQXqMt2P/4lF/vp6Lua1x9e48pQ+bsOaJUoH+HhZJhZfmsdx28stYxUj2zwB0mAiiNCXlG5RdoMnIR50mn9OuiGDweOpOKLuzCXy1d1HK9cvgsWsMRO7sA1xUaW3/Tn0Z/EpnMWIoaOG6Pt1A95uzncpFO7Enftf/+x94/6T13Uj4kwKj2u8jwa+yurOoF2+fO3laYMZon4KElVG18Pp8ThJqb5pfWXmWgMqIOMWeGRPByVkE5rAkv9DainSO805Arfc08Yuqnl7MkN5F1sq8Hm5XxpyQ7TpI8/j4dDEn0fNfBXMuuOhdCkbXBaE7ULhJTnFOAEdOX5hJhi2J2rvT+aE6ovLq0vJNnFfjnDyQUoJXnJ3brh3X+H/ab+10cRRhjOO+582DlAqxvXm8mYdkuEG4ZY97+Cy7fPONOY0jMNgUw8W6VqUAONWnGGV/ugM603iYSnR917qLJjSN5VhxfnuIe+Wu3pnZh4e7L49970k2Uhjfj7fOzjbG+1kWydmutpbBTL+75BFfLbNT0Br502jm6laNDgAoRYm7bBFpnX0GOUtU0n50Si/45IPV/QiRlZXdpDHFrHnUACn0a0rw59DTqVe3G9phSBlM9k3TFNcu3XCemc3uvTQbs9feSU/+HqHeJgTbXexE5ph7KqlM7jtT/Lx5p0+GexQuFZy0MmE7acbsX3twNvmnRztnoJ2CaML1NzRGidjukIutSTdkQ1htxO4xb7rVUTlFkeB7Ek0j7ykrp6ktH2nhoncdd9GzmMW60Fr4hoXPnUmPhe2xaZHTBiTVcytnYLvUWdBY2yX31XT8OeAuQDtVlu8xt5k/5kxrqeze3Up79nMDTqmI+u8BzVVs7J/sqH2w3lpaY4b/ZIGiSpQcMtelbSWb2kgvgITu8BaJvE+PTW/xEW0Q92LdM2O0d1RBY3fqStUpXT9W01PUug9KYgTsV5bzTndaIlS7sUc4DEnhHna/y6aDBELFrV9uSsHb7LFjYnLskmjMK6iW3/PxHXn+jjtnPk9Irst9XEfIykDfZQ9rNloWu1V2g2f9T8ms7ocYu7ckXI6/fj1zLs+D/bh654KaV+DsSbZ2EMB28fcVsnx/WD5P32wZWgLT2qklWDronQiwn9ZlvwLQ8W8j3D6vfGW8XXmj5Wb5PvocCsH4fkKAKXKo1dhiJDJo4EcC65eDgaZPec/bkWU30KVlJxt1+93tJq9eVfbXSJrME1VDqKc0xzxLWuTxB8eWmYLJXubjl7xyoailC9soRMWC+bbTKNSIMgJGpSDjFJ9rg0n7M4gvm1OMC22JOP0aW2U1IgKklcH2dT95bzdPG0293mh2QENp2u7CVj04wlDsec2IiKIMU2JfQKDqHHyanNmf7dTyUOVEzuWDm9iZMDy8Z5QJAcay5RE5QT2M4FJbjqqdWxbBBwe9MkADroHwk8lOsafoJ5iMzyozT0XuCRdoQ8qUMm2KR1LKIVsShLwekNZwxCqxyx2QYWaJ5T+37rKqq6DbHbVqjnVd4JurTVDkmoqwQhNUmv6YkTzZKATehk+2qHmxWZjGOAhCFj4t4jDw/PcvGfteQzOzAsvLJ7s4S9WnC2YHb8Pg6wGPt0sh9KTTPzjvecLHS5z1VhZRUTBs4geXXkTEbFa3rDXUIYpNGQ6KZ5/kbWMHD94uTT7yLBk1G3CZC/CrLVBJEL3iZSmIeK+DkEYxmO2cYoElRYjhlUxuYghY55e5Vu5PYOa/WGF9TEO+z64kKLMjgR8O9Oo8zPujvD/U+2ndy8ftlkY2GSI+aFwhYmgpPBlt82jUsIl166FQAAlzfqUD3S1xH37rs7Nk4ZaDSUIiIBq1VmccU3ky2+bRqWET6ztCozAykITec2lxjil+uPN2vnX7sPMbyOIHuNwZvDGDK9EvjtyJQEGjDdaaNDhjwVNzK62n59toPxVQsrh8DDTZRjINmKe1t5ad3GfXJBKYdAboyfw0KdPWW1mJAgYjxjdX8r4oWpaUgQyQIDk0qOvB3+rqSDbp1Xc49R2h5+5VjcuCIXZxLRHPmuM9dlZOd6+uPWlyGsbS+oPDi7hmn6sQDoT1wPRdycZfgffHe3+896yJJ1q3I0nZjafC4S5yX95xkP165eE65eG65kHWiTpNp+rMPGVedLK4BpCcE5FRbT2Asx8dNMj0gen2zqKCj1r4IpFNt3PM6YntBu1lOx/I3FZPdWsq8Mp2k//n1NxJRYFijdJwfZdlF/P+qZmoT35tfJHjyhS5+rQ0mI/AHBC36sX8Af3HUYizJ+mzNSUB0FWNGbE8PTHfTR2Bs2c3pPnjG6CuesDEHZl/zIviFg4Q1NaTyYs3Y52hAwOZKqgWhHiqXiCRvHCXvWYdnr7dumBTd4iud6Cuu587521YmlLWPveWj0G5RD4KmEykSYK0lAFIkQ/cuTPJzFAAyt24Y8eIomJKGhvE9DrJYv0njUniEddmu8nNRtrVkcvnxhxObJls7KaJNjz9cyCDhNeucjD+RZNldRu+l06d+4rFUPrC2c96sqN1I3ugDleefgtL2wNwIXr5MmMWeq0IeiOUr/F/Ku3rZS4PYzt6+KzZAXSCtZYYI3QBFBxg1JZ8XMwTXZxxVjFzp74LuExmVj7nnqO17MmMfsb9oabFL86NhzE/A1CI6c9s3fSIESs+J1Rzk8LDWTh3tfdwqZcp1scWKFHH6z5nihgdViBZ296XyYdXpLm6p4ztIEgkrsDp2nRwW+CVDb8rQx9qlk65hQmlgstLprc00evMTsmDoW/qxsieeiFOdhgsRarlPKIFVAi35+Z2vC+2wEzF2Crs20DX4z06bhphnjLZ7CY1UNb8z3lz6d4gMPTH+1nSxk/o8l1E/2o/p/1mJVxeco7HjsaLcTMN7lnxXGw86yZCTPD3BUrDZ8LmSalAA+xgQ45ElnJD38Zt3MYt22QrM5HaKgmmcQn+Pt+xxf8EzX6OuBmlbtjyNBl+m7MwkjFnHNHpYCAEhvw5TrjcIIgh8cr51VcLL2rjfE6fiSqTqDiteEVBP2fWg/ka0c+p/0vJqgxp63RgtKxrmyEMruMhXveJTdQIoHec229Y9rm8NQzLLCtgIIYhUr+POyGqlmzrC0hg+5AbvLUViMk+vTD/snwtLly52nDaBwSON6lAMJnULe9iVm7qyCGfwqolXl3hOUWDafo5uVANKrM7QFmXgROb3/WXM0CU5JLdyiaOfiZUtFM0F2xepBtOrqY2TU+yXWVDf8ibQ4ZKiHOLDCrasIvhRqaTXdrycvlCMGCJ15/dlndbxlrbUfXLsBBmoiWPs+u/tZlc/0Pe/1u9vzrv/13eH+993ra3fzkGDDLXL7Dq9sJAbXT9qUaTy4kmXdRtka0k+TKht0nu1xJwLIBMJ2o7Z6D3u34toEnmjl43WhtqK1GlvOhtqftfQMmIN62hMzGGNHI91u216azTS9ttv92v8AmbekGM7GBtrWXa77YRRzqsa06L3ma8LVN40aSn5OMo7ntQeOjY7I2r7kypr5xdpOoeBc2Uda2d6TG7HnXD+sU07bdxS8Hir2i1r4ffw+kTyfxhKLtI1Pp3Qq54J/+z322a++9gJ77HdTf6l3Zg3r+FeEytF2Lxs8soef2Qfs0AKusstlJP9bonsVBZdXVXPunX3r/d+wO9P977es2WfrWN1yq7hA6stWaMJFk91WvPrL8LbaCewyGs6OrVgyhLSyadqTtNt2an6QqdvjJU/5wlvWgn8Cq7DfQVrjDQ9cmsr4DVr25g5QZgmzcA+Po0qP+cxiS9RFpQbS7UqyLFg6FcKzX6OjTn3wLzbR6ibXaKL8+yfBWfxVIV578RI5O8KA9XX/jz3+9qLtP6A4MObx3U57FxxbpZc3zWHhMvzOaOlYyn+TtoHSnbU7v/O65N7FZG+FTNomGWfGcUNDSPyQkbmGt2C12fiOJLugvh+1cXgFA6DtpZouttdgKXrD7GJTVtlNuPGhe7fFb346cuy9XIP96Hs6le8QX26dcpTfAgW4sDh6wT1pjs1/d0STdAZUoX1sb0pcnqSF4rs19TE4Xs5Tqp1/Tkq9WRk3UJ3S5d45Py0HXJ1F/zE866nDi2Bmg+1y2Yeq0Zsk3WRaI1Qx3Pu6sxwjZuo7WbcEWiexiSzKfixKdwfPL+EoM613WZqV478zAc2F8bZxrtYpjralqUkywclVACr+QH/9frtyv9vWQENkrK4xPnzEM8ea3PiKv1bY3bzPAvSrieoSFU+swTSKMZjxihqvk+b0RgAO456joWF0phb16hBbjLVvcyheqcAjQh6detnGLiBvtpCqDU+quKkd75q7b8PRnHuBzuMU39mosB5/pTMfQUM54LbRK8osVZC4X5dHvtKWPRiWFo6LHukj4i3u3WjEW81a/K8fNTTcCCD4YbeeUxA0aMxxqFYdmjBRadsS7TUOns1BeWoXcAKmMqoPD+i5fyXF648uATa+5YgzPqvaD7GS7gRl2ac0+Ei0H5t6dL2kAYvmXyxVTEZJwGqMJ5rejs1ntfVciA3kJiL4ZxS4EKDFN7Tf2ucx49P+idEf7Lbzj2yaItS8JB8HbeC9DXh4r/XVu0ioL4vm+n9O7qucPTpaF8TXuNgL7+Xdj+BMpg5K2fIWwHEHuBN/eCx2mkSloNTX8E5tU9HsJJTC7886uP2ZZ2MOro+p4XhUupEExteB4Ch2Q0tdB2NHqVUoZF/TcJP5N/fof3akRsDd3Yd353pcdXyYe+YBKGyvGfoke1fcyF6p7yqUEQ4n1aOv11tvcgRyeruur3J4YfC+jKOuMzvK0SQ9ArhHDzLGmq2O2pn2S1/sDbaFfUYWUiGuRmm48txX3NJuU+q8A2Rz3026gEMQMY2Hn5LIfKfHQS3/HE420sGvttnL/FBA837M7UM6STsh4bmopEZ2dBWW8YQWJV2elnRF3KjorwRI5CtHzYkT/OfjWhecIanzRCBBIe/LepmuGvzv5yQ94U6IdfUxtXmRA9MMa0uA5B6c2Q7xCviXbOWBiLbxENZtdahRE+gEDExzi7QAYQYfgQ0hR/NVNggA+ioZNcWHKNem0FnbkE4kdL9K5zV3c9v/jpcYaz3zY4q0OGkKr5FfEgl+kPkAhxeHnwGl39qUERhfkIJ5jIDIRIjrsZd649qB0vy8I6oqKjjgMIatxre0o/Pd9oIYwJuEIPV70ysVR43mNo+AtjLF84mWxKzLw4ErqaOzLyfIfCianI+ZNCWbNr4za2EWc9L+wQ7wwgnSrysRJhrmPZCp5s6h8iuA6D6ndHf6Zw8CTSk+yxsTcgmUvJHCSsdDlECty1KVRduLsLF30yYE0xLfYJrcC4OERfMql1EWJJzkc0PalxuJSFutw7jNW8H8I3MZ/Rf7bqgserOSCQmLLcT/WcJIDfUbLgu4smr73pGIILiloo4uBAhAPaKOQP7eicj59VTs/35ZDLX2MPeGcmR56x0hJK/YCH+RCG7Wz74Bla1Y9nWKJyZwGdYauIiv26lMxZRMO3pmY9rDNrIz/DO555odBpXZj7AohGefjE5fn3kSqc/4zVy+pFs1HihJCQLoeqXpR81nR6yAjJfWOpF4I61rc3Tv/xK/2X8q/0i1A1+g/JM304oZr3nGISGxvp7PvoamR4pGUCDKvjfn6cYnrOOWiosAzHrGfsarfaTjXFJ2htEXISk+qqXAmfjKEes1mD6N0TlqnPjYLiQXOyuJWCXcT+CJb27i6ZgDHf2NAt8C5aFERT4R550wtsL4C7H4Ta4oVyc/VOkpNq1PRnbKKx5/tjm72k7UwUc1er6KF30dhQssGugiiBqksUK0s3HwptUik8wGOl/XEsdeig/STdBU0J3W5eJoLDgWoIvzMI8cBQbQcA3L+xgAV3dS0ECxcBd0kKBfWspg8OAGY1yV/yIB58OQ95MM25AEFqWK148NHDV5pqPsZZyLI9tDI0PFTaLTut7dShnIydDmCKbDEGyjRbrQ+WacqVbHnKs1Xn4t3dtqa9ThNWFJ0FfUidGz1WwXm+EQiIuKgCYvGpXVxQPG6qv5BlikjUfwCp6fdL+nvVnmg/FMBpdEDQzWfW2epHp5L7Dw6UN2135woZZ2fO7jUOuybrNE1Jg9cdUUwcEYcHypoOiOQ5fRGHzatGpqS3gEnWdKlNolnb8sV55S3jgxK54t8DLdVPfDgDbypfMBwfoxq41dc0bnOKZwTOdmc7GLv6+sMoEY6oBWlvnOpmc6Ibxu07sPx83StVyUbamL9Ar1PrMXnMsM+32TrDCZ059PS1/HMbLNpu3MMyfJowhmfecitAP4wzP9F53ae95PJxH+46zT/O+eaENUCAgZOCPvvKCPTnATye/qUbpqJhSClEoPkzRSJ20PpVdIJ4ar6HB3+T+GEp/QZofbnKk3j53fINLnJsvtJFiy1hi140f4wWyko7xmEne1Go1beiG1yisoPlLkWjHyklG7yziH0XoAN+05c5w8Nrf9rdJJfLuZjX301GXfKr0+NAh59uXL1Mx5VcfpQv3j1/LPHuydnuKDSgmqQuHzUrfm8SEJlIAwdNPZ4GuWpXFKQdhmHTKgcdTkR7YUPx2+lrupnD+BGtUZ1cKpEJp5eg8uWThRBxXguGqp7Fa0XIgAu8sjGVf/p1k8BiOHXX5T9R4bqouH9d2VyKZKtsp3ZN2Tofscxx/tYvhi4/hRrQK9QJOU2UPBoOMikMwcYAGfhwoh3j/yxNSYwQg6RauGDDPmUl2MUiXoYrXuPfhyB5ZovnATBfS2TAR7lpOMPiTNvSbr5hpdWg2oPprMnIc2kiZsR15TgdbF5Adv+ahIftgVKCNSvDl4mXEVxNgE47YCubEWx69p5g22SbsDM0G9f2k/+OqpVAmNSuIEQ/Vqaj4xy4af7KFcmXZjbhFW5u+EhqLZ9eyeshsR6WU8FXSwy91mzgbdh8K2/lvrhglwWAq+v3lwsiI9annoPIVhQHGz62AqgT6EgKzyiLjHtBceZ2YyXEcZl6IDTcmD5ZY+bY1aOHP8AynIQh1p/uRqkR1nvzPnzAbnB6CvgoGae031B5Jx+pQrbKGJfkttvVTgtBCu2Hotrs/UD92L4ZxQChCyoCqByv/3+hfcPHuk0NBJ+uQQfnxM7bC4rswuiTm6TGqCEjjbzVtEB5uZ00auG3aSMfe/KwaMlqdW5GIRWLKuF74Fi6z9Bw76c2A/jvKLaAnGC6Xt8WKQEIdTpmUu6kAYrsPlazkFPM/MJR06ieGmoV7sxi1QXm9sS9M/REh3V+XV2kJh37/7oknUkB1VQYaNsU7ojX14OgRYPeTJbzqp6cxlYv4mwqmRywPiwi4XoE7vAiOJX5ouDCtCXfo0DpVGKEPW9Z9HoRI0g/nsQIcSeAS5BACRjfPGWQ18NrBNU3Uw8H2rClTwhdKHYMFWWFHMUpS6J8SSoovMCfNGByryoXK57C4KtuWOVel05M1DfKIspR1A3u1xdqrnqWjjnRueFWnlKwY42urV0xdNS3Fkml2HUU3lRFRWB9odyUaOBnYEpDwxeKeIdDxcdd9ezlrKBgd3nf7Ck9JC4OiW/YFO7xcMZlSk2WfZODOx5DMrYOxvjK74K1XAT3U+MR0HluiwR8DaDJHyTNavychuXTpg2xSE701CiGq6raiJ3deCFeWRe+zCFeapDzFazSDnecmnmLj5WNdyV3esGfpgti4VzIq23FFcVFRGBwo5rG4S1XfF7TiROfMgDiQnQnlF6JA6lyRByN1LefSa/pFPbsub4YhOLolrSAjjX+VvH3oO/y3NiW9svMeHCMIoXK2x/9Uly5CAUlIg3S0RFHQrCqHmxx3SxU8M4JNjQgQJJ1pH/hvUvXEj6u3QAjKlWCLPBO+toyX2pHNNev2oIPsLGe+D7ykCyn/Ty9vTHyNhH0CY6IWUa77154g3fMSdSnwCYOk+KMVULGjru3XLRk2muhfyZNxR1P/uRP8eRPeY03KCqVn++oYdHYeftDLKe7y3d8kIRm4AIr54oDxuGDblRgU8G6U9BxrpKzRLKgSFnt/UHdANqO0RVtitGXkcTb6vj3OHvlyP1dRjleE6OExnBSFB/O1AA8R0C7fzzK2oY0iBv2RrY+fiNbH1fn4+HetQsv2iwkfLsbBzdDDDdkA7+LFUH2HqkIRbWn2CQtrZnZnaasgb2/g1YEXRzx0RYwxokcDOV1Lq0w9Tr3XWQ4FvG7tf4SiuZOH9z6lVDPAKSNCynTCztsCwCwwbaP0H6O/yAg47yWUosy8pnct3Trv7+Ua6z858b+v2Vbx91Yf9fe9Wzd1mw9X/c1X/u56sB6uf4s9URbO6+Pdb+6zazf8zewq0dovb/aWUf0btZAfedWsKNfZR6+rUz0TYuxVI1e2MDw8kHiYlBzQyG1SWk5QawOcLUSRwMI009FcBzErsRxwcLp9loOXXG2y7bjs1FNgGYvt2Jmd/XprbFituCngBOjd4chj14i1OnZYeMMZWQyKsKGF3tX1ASAqr50xs9eWR0fc3UIkEaqcAiaPHwy4cK65aXTcE7JIJmDF7HHTU12YFbuIl0evi48j0HUuX+h5IItl6yPFQVUVj6ghEl7v8jaYVTKVIXtRcI9HHtfG48NcLJ4MOq4iKZhbMhZ4OaymQC6qprDwff9/N/SlPJF0SU2NUErqCw7E4KU/5TmuCYF4WDIeM1p6YQtebofS1pN0QDRV252IdEeJd7QW0IPjoXa9aXvJKiOUgkz5Jw6cXoWsAITWEk2pgMH+CHFrXql63b4YcO9q42VsVJaq2PdtBqTNF44Ph3LCpBp08HtlkUz9aEIzTk+eR26UBE+rk0tkHGsv2o0t+i8K4bZaa3fNagzlWIragJE0zXMHy7IBEMhK1jEDDljUW5uuI4VUr6S9YaAZpUe4Gxc6bhurYumNk/QCwKkPQBMIvzhjFAicIQxC9gdgOSMyDipd3nNHAS7ByAzjJGTGJ81SlwT8q2RdyGnUm55jrnllSDyO3sJiM5o8Hz4GYB89gSV1SD/JVlbACLd+jomF9Zhf24q6XkmJL0JHnx3GCp4rRmmYDbDpxT7R3hUihF04i/XeD1w8ykEj7rGiFZSOY+pxcgS+AEFjJ9zBmpvHXPtM+a4YmDs/ro1evIq5lo1c6mXnqch1U7ZRTmRqkduCUsT5PakS38gCBeMSrpSXLQctv3pe9VvaXcYEw9gGXDP+CYAuMmOTBflgpR7ceLPheKvaxnjtb+T3ucv3h3AQg2lalIH8+2Tmu3mZWr0ok2QcyZ3p4QurELcg7d8/A+LjXvhMRHZNvNgZePFhpGOUxUbwnU75Ta0cd998js1wu84PAbJf3lp9iSI//lKRqG+fgoNa/3JZSTvlLynRHlIjCYNUNqjC/OQ7/TkzY95TXOUvKX4ZqkWOsjFfk1xq0KWSP6tfM+N5aKIk51sTPuv723k++E0k87aDXvATsHZv+zGmLJREdbYqlT4G+h5bbWZ/Vb+jU6X2Am9gDmfqQbsZK1GHfLwAfvxHIsqjuBL3ZKu2zvSyra+lZYOxnzkR+GtBxN0ckVJh1s8RNHZo+N2B1B3SAcxbF3Vc4WFTL7ruJsSDYMA6GVLR38Xhl9KLmbFZUgNFve5buXKWC0RkOZain1e5YKe7OOpn/IjY8irpa47hlzzN9GylEMPfwCmxHqrYvDTl7FohLTvXu2hbjaR62nuXLFs/KL6cWT2b0OvgBVv2Fg2AUYuB01ORGCwqgTfWR2VIp1nT0+g1JNyBgksohrL57UqflkDKFHrUbHtRWyEjOppYipQbDCEDjttkHvj1hZkDWK4jIRUmYfIwj+UBqHUNpGMUVM+8tPjk4Rw9FyUk8jWRfEipixfj70DTGOuUs0opiRLLMaAnvRfPnacnaHZzIGWEFzlS828mMwfeau9+Orp1f3lXSffHTFvD8BwkzUF0OYEyin463HBzkN6nByQs8JMswriP5g5WehS4SYyjwVIZcEi3l9JM3Axzbb5RtFvfAD/RIgUCqlbAP0BlJ7pFLq0ozlZ3yrOjtJl9Lu4ZzfELvBRw6zoqgZSu/kJ4pWcf/eN2zV0+ijHSfXTNke72O0pcpj/8+Pcn55EEdYuHneXInCso8+8Zv0M8ZVjA027vuDuiC2fUd8aVNLU50X07PZkTtBf8+nc0Tea+C5MfBSugYnKLWJR3kncEuUwXFiP1JSAr5veUI8qa7ioTShCby0+caFw1LZk3uOyR3m1HgqiROtc6zxCB6ZiaeoinIozcYWqTO6x+jPhnH1bPZHtWirPIOnjNXKCVnhAbFqflyZ1VLSD3dmH40WD4FZJF+UjSwmXiojv4HXCWGbvfG+KFmds9BvAQa6Ix1/crd0/RNGI5KUot4kEm++Nxv32ozG7PiqwXx9Qv+Ssawfn28MAv9qU4DCrd8LH1Gqkorw0BXM9Q4AcXNTWT8Rx238Wz7zTCN8Wb6+H4V0WWkUQcAP/xnqRaBYDnAKKJY3liMiVp7SHln0n7gRrNCqKxE+xQG1ALpnKO5VIYR82U3YFAkBKlAnnV601gO+4fRtw8pKHauhynFFrTQxK8G+4zOiUBClxWWeJ1QaxBArEDJBrq2EOJ/GdoQ8KNe70RUbYpLkY3bfD2HRVxtxg4Rd0F7lACUIDXIe7uGVbE0CNm6VHX+O3IEPya45tNW2AeLXqzpeFzkqWMEruOL9Y35cV1UZZZvshxrALnUaW3PGTupSoZvP+CRVEzUlDVC8yQclUhy0PidnqJ6G2aavL5a57czkWiKPNMZ1YyefiDZlMNJmZtKUc3E+EGYrq4PBm9HC9P2y7ztKdEkhug65bVfGAA6SaPrHHKmCaFwYpKRS0aZtYPWaDjKDDPkVi4DSdVeIe0B+XeEsPW8r3XLj7y6VtWQ43kZ8D4/wW3nG4rtFxWLiGtenmiOpMcj0vgrAFi2ZgB2dGnvpfbzPG4PhNeytzET4Ro2zS9QKCtBWB8Nmp3w41R2tXki5VajJjqfvNtKUPKbwWopbNQAnzu0A9E+u/3LeyukNDXcd0ZiF5iMroX9QtXMAMmyI/J1mQaJd9F5pb8xCiTOej5SKiciyILWMB6raNSfAnIMf3GWMSlyIYO7ssONgNaDTyCLTbgk0lHOuOCp8E8fFfscx/+KWTMpWLysdPfl/DdZhq8knTZ8lNX4vJZXDOy4wmgk0ZToY09zqovLVgKh6uBTCnZhAmV8BATno1QtFg2qLXiq6pKre3cSThQwdEnxCYaJZiBrIsJ+A95NLXHuFLGeWobtNr10IH/Z35+TrGxc9OCto6ZktgAkjP75M/Cz1YWMdQoABzq1dkmkA5U7gm/MSEW4Uy9+KDBdxtZm+pwiIwHcraaBSJgImm2oV9IyUo4wYXWUjwkwEYiNEzjkJw8S3FPvnBR1NuWQOiWQc3AjaZuvhJtEo5mck+daTk9PO+W2efl7FeJmv9qz71G3H/3q/4e4xNSlTCMAxa9sLYuk+AEy9XLt4puqzycsrLSi8jVWGL5QoJECvGDpZ5KOYrD88MY60/vp9nyrulyh6XkiKRA8+Qf8qK0SgBN0X/w2aJEj0A", "base64")).toString();
        return hook;
      };
      exports22.LinkType = LinkType;
      exports22.generateInlinedScript = generateInlinedScript;
      exports22.generateLoader = generateLoader;
      exports22.generatePrettyJson = generatePrettyJson;
      exports22.generateSplitScript = generateSplitScript;
      exports22.getESMLoaderTemplate = builtLoader;
      exports22.hydratePnpFile = hydratePnpFile;
      exports22.hydratePnpSource = hydratePnpSource;
      exports22.makeRuntimeApi = makeRuntimeApi;
    }
  });
  var require_jsInstallUtils = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+plugin-pnp@4.0.6_@yarnpkg+cli@4.6.0_@types+react@18.3.18_@yarnpkg+core@4.2.0_typanio_gcqdqac4st2nplev7gdet74yn4/node_modules/@yarnpkg/plugin-pnp/lib/jsInstallUtils.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.checkManifestCompatibility = checkManifestCompatibility;
      exports22.extractBuildRequest = extractBuildRequest;
      exports22.getExtractHint = getExtractHint;
      exports22.hasBindingGyp = hasBindingGyp;
      var core_1 = require_lib6();
      var fslib_12 = require_lib();
      function checkManifestCompatibility(pkg) {
        return core_1.structUtils.isPackageCompatible(pkg, core_1.nodeUtils.getArchitectureSet());
      }
      function extractBuildRequest(pkg, requirements, dependencyMeta, { configuration }) {
        const directives = [];
        for (const scriptName of [`preinstall`, `install`, `postinstall`])
          if (requirements.manifest.scripts.has(scriptName))
            directives.push({ type: core_1.BuildDirectiveType.SCRIPT, script: scriptName });
        if (!requirements.manifest.scripts.has(`install`) && requirements.misc.hasBindingGyp)
          directives.push({ type: core_1.BuildDirectiveType.SHELLCODE, script: `node-gyp rebuild` });
        if (directives.length === 0)
          return null;
        if (pkg.linkType !== core_1.LinkType.HARD)
          return { skipped: true, explain: (report) => report.reportWarningOnce(core_1.MessageName.SOFT_LINK_BUILD, `${core_1.structUtils.prettyLocator(configuration, pkg)} lists build scripts, but is referenced through a soft link. Soft links don't support build scripts, so they'll be ignored.`) };
        if (dependencyMeta && dependencyMeta.built === false)
          return { skipped: true, explain: (report) => report.reportInfoOnce(core_1.MessageName.BUILD_DISABLED, `${core_1.structUtils.prettyLocator(configuration, pkg)} lists build scripts, but its build has been explicitly disabled through configuration.`) };
        if (!configuration.get(`enableScripts`) && !dependencyMeta.built)
          return { skipped: true, explain: (report) => report.reportWarningOnce(core_1.MessageName.DISABLED_BUILD_SCRIPTS, `${core_1.structUtils.prettyLocator(configuration, pkg)} lists build scripts, but all build scripts have been disabled.`) };
        if (!checkManifestCompatibility(pkg))
          return { skipped: true, explain: (report) => report.reportWarningOnce(core_1.MessageName.INCOMPATIBLE_ARCHITECTURE, `${core_1.structUtils.prettyLocator(configuration, pkg)} The ${core_1.nodeUtils.getArchitectureName()} architecture is incompatible with this package, build skipped.`) };
        return { skipped: false, directives };
      }
      var FORCED_EXTRACT_FILETYPES = /* @__PURE__ */ new Set([
        `.exe`,
        `.bin`,
        `.h`,
        `.hh`,
        `.hpp`,
        `.c`,
        `.cc`,
        `.cpp`,
        `.java`,
        `.jar`,
        `.node`
      ]);
      function getExtractHint(fetchResult) {
        return fetchResult.packageFs.getExtractHint({ relevantExtensions: FORCED_EXTRACT_FILETYPES });
      }
      function hasBindingGyp(fetchResult) {
        const bindingFilePath = fslib_12.ppath.join(fetchResult.prefixPath, `binding.gyp`);
        return fetchResult.packageFs.existsSync(bindingFilePath);
      }
    }
  });
  var require_pnpUtils = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+plugin-pnp@4.0.6_@yarnpkg+cli@4.6.0_@types+react@18.3.18_@yarnpkg+core@4.2.0_typanio_gcqdqac4st2nplev7gdet74yn4/node_modules/@yarnpkg/plugin-pnp/lib/pnpUtils.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.getUnpluggedPath = getUnpluggedPath;
      var core_1 = require_lib6();
      var fslib_12 = require_lib();
      function getUnpluggedPath(locator, { configuration }) {
        return fslib_12.ppath.resolve(configuration.get(`pnpUnpluggedFolder`), core_1.structUtils.slugifyLocator(locator));
      }
    }
  });
  var require_PnpLinker = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+plugin-pnp@4.0.6_@yarnpkg+cli@4.6.0_@types+react@18.3.18_@yarnpkg+core@4.2.0_typanio_gcqdqac4st2nplev7gdet74yn4/node_modules/@yarnpkg/plugin-pnp/lib/PnpLinker.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.PnpInstaller = exports22.PnpLinker = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var core_1 = require_lib6();
      var core_2 = require_lib6();
      var fslib_12 = require_lib();
      var pnp_1 = require_lib8();
      var clipanion_12 = require_advanced();
      var index_1 = require_lib11();
      var jsInstallUtils = tslib_12.__importStar(require_jsInstallUtils());
      var pnpUtils = tslib_12.__importStar(require_pnpUtils());
      var FORCED_UNPLUG_PACKAGES = /* @__PURE__ */ new Set([
        core_1.structUtils.makeIdent(null, `open`).identHash,
        core_1.structUtils.makeIdent(null, `opn`).identHash
      ]);
      var PnpLinker = class {
        constructor() {
          this.mode = `strict`;
          this.pnpCache = /* @__PURE__ */ new Map;
        }
        getCustomDataKey() {
          return JSON.stringify({
            name: `PnpLinker`,
            version: 2
          });
        }
        supportsPackage(pkg, opts) {
          return this.isEnabled(opts);
        }
        async findPackageLocation(locator, opts) {
          if (!this.isEnabled(opts))
            throw new Error(`Assertion failed: Expected the PnP linker to be enabled`);
          const pnpPath = (0, index_1.getPnpPath)(opts.project).cjs;
          if (!fslib_12.xfs.existsSync(pnpPath))
            throw new clipanion_12.UsageError(`The project in ${core_1.formatUtils.pretty(opts.project.configuration, `${opts.project.cwd}/package.json`, core_1.formatUtils.Type.PATH)} doesn't seem to have been installed - running an install there might help`);
          const pnpFile = core_1.miscUtils.getFactoryWithDefault(this.pnpCache, pnpPath, () => {
            return core_1.miscUtils.dynamicRequire(pnpPath, { cachingStrategy: core_1.miscUtils.CachingStrategy.FsTime });
          });
          const packageLocator = { name: core_1.structUtils.stringifyIdent(locator), reference: locator.reference };
          const packageInformation = pnpFile.getPackageInformation(packageLocator);
          if (!packageInformation)
            throw new clipanion_12.UsageError(`Couldn't find ${core_1.structUtils.prettyLocator(opts.project.configuration, locator)} in the currently installed PnP map - running an install might help`);
          return fslib_12.npath.toPortablePath(packageInformation.packageLocation);
        }
        async findPackageLocator(location, opts) {
          if (!this.isEnabled(opts))
            return null;
          const pnpPath = (0, index_1.getPnpPath)(opts.project).cjs;
          if (!fslib_12.xfs.existsSync(pnpPath))
            return null;
          const pnpFile = core_1.miscUtils.getFactoryWithDefault(this.pnpCache, pnpPath, () => {
            return core_1.miscUtils.dynamicRequire(pnpPath, { cachingStrategy: core_1.miscUtils.CachingStrategy.FsTime });
          });
          const locator = pnpFile.findPackageLocator(fslib_12.npath.fromPortablePath(location));
          if (!locator)
            return null;
          return core_1.structUtils.makeLocator(core_1.structUtils.parseIdent(locator.name), locator.reference);
        }
        makeInstaller(opts) {
          return new PnpInstaller(opts);
        }
        isEnabled(opts) {
          if (opts.project.configuration.get(`nodeLinker`) !== `pnp`)
            return false;
          if (opts.project.configuration.get(`pnpMode`) !== this.mode)
            return false;
          return true;
        }
      };
      exports22.PnpLinker = PnpLinker;
      var PnpInstaller = class {
        constructor(opts) {
          this.opts = opts;
          this.mode = `strict`;
          this.asyncActions = new core_1.miscUtils.AsyncActions(10);
          this.packageRegistry = /* @__PURE__ */ new Map;
          this.virtualTemplates = /* @__PURE__ */ new Map;
          this.isESMLoaderRequired = false;
          this.customData = {
            store: /* @__PURE__ */ new Map
          };
          this.unpluggedPaths = /* @__PURE__ */ new Set;
          this.opts = opts;
        }
        attachCustomData(customData) {
          this.customData = customData;
        }
        async installPackage(pkg, fetchResult, api) {
          const key1 = core_1.structUtils.stringifyIdent(pkg);
          const key2 = pkg.reference;
          const isWorkspace = !!this.opts.project.tryWorkspaceByLocator(pkg);
          const isVirtual = core_1.structUtils.isVirtualLocator(pkg);
          const hasVirtualInstances = pkg.peerDependencies.size > 0 && !isVirtual;
          const mayNeedToBeBuilt = !hasVirtualInstances && !isWorkspace;
          const mayNeedToBeUnplugged = !hasVirtualInstances && pkg.linkType !== core_2.LinkType.SOFT;
          let customPackageData;
          let dependencyMeta;
          if (mayNeedToBeBuilt || mayNeedToBeUnplugged) {
            const devirtualizedLocator = isVirtual ? core_1.structUtils.devirtualizeLocator(pkg) : pkg;
            customPackageData = this.customData.store.get(devirtualizedLocator.locatorHash);
            if (typeof customPackageData === `undefined`) {
              customPackageData = await extractCustomPackageData(fetchResult);
              if (pkg.linkType === core_2.LinkType.HARD) {
                this.customData.store.set(devirtualizedLocator.locatorHash, customPackageData);
              }
            }
            if (customPackageData.manifest.type === `module`)
              this.isESMLoaderRequired = true;
            dependencyMeta = this.opts.project.getDependencyMeta(devirtualizedLocator, pkg.version);
          }
          const buildRequest = mayNeedToBeBuilt ? jsInstallUtils.extractBuildRequest(pkg, customPackageData, dependencyMeta, { configuration: this.opts.project.configuration }) : null;
          const packageFs = mayNeedToBeUnplugged ? await this.unplugPackageIfNeeded(pkg, customPackageData, fetchResult, dependencyMeta, api) : fetchResult.packageFs;
          if (fslib_12.ppath.isAbsolute(fetchResult.prefixPath))
            throw new Error(`Assertion failed: Expected the prefix path (${fetchResult.prefixPath}) to be relative to the parent`);
          const packageRawLocation = fslib_12.ppath.resolve(packageFs.getRealPath(), fetchResult.prefixPath);
          const packageLocation = normalizeDirectoryPath(this.opts.project.cwd, packageRawLocation);
          const packageDependencies = /* @__PURE__ */ new Map;
          const packagePeers = /* @__PURE__ */ new Set;
          if (isVirtual) {
            for (const descriptor of pkg.peerDependencies.values()) {
              packageDependencies.set(core_1.structUtils.stringifyIdent(descriptor), null);
              packagePeers.add(core_1.structUtils.stringifyIdent(descriptor));
            }
            if (!isWorkspace) {
              const devirtualized = core_1.structUtils.devirtualizeLocator(pkg);
              this.virtualTemplates.set(devirtualized.locatorHash, {
                location: normalizeDirectoryPath(this.opts.project.cwd, fslib_12.VirtualFS.resolveVirtual(packageRawLocation)),
                locator: devirtualized
              });
            }
          }
          core_1.miscUtils.getMapWithDefault(this.packageRegistry, key1).set(key2, {
            packageLocation,
            packageDependencies,
            packagePeers,
            linkType: pkg.linkType,
            discardFromLookup: fetchResult.discardFromLookup || false
          });
          return {
            packageLocation: packageRawLocation,
            buildRequest
          };
        }
        async attachInternalDependencies(locator, dependencies) {
          const packageInformation = this.getPackageInformation(locator);
          for (const [descriptor, locator2] of dependencies) {
            const target = !core_1.structUtils.areIdentsEqual(descriptor, locator2) ? [core_1.structUtils.stringifyIdent(locator2), locator2.reference] : locator2.reference;
            packageInformation.packageDependencies.set(core_1.structUtils.stringifyIdent(descriptor), target);
          }
        }
        async attachExternalDependents(locator, dependentPaths) {
          for (const dependentPath of dependentPaths) {
            const packageInformation = this.getDiskInformation(dependentPath);
            packageInformation.packageDependencies.set(core_1.structUtils.stringifyIdent(locator), locator.reference);
          }
        }
        async finalizeInstall() {
          if (this.opts.project.configuration.get(`pnpMode`) !== this.mode)
            return;
          const pnpPath = (0, index_1.getPnpPath)(this.opts.project);
          if (!this.isEsmEnabled())
            await fslib_12.xfs.removePromise(pnpPath.esmLoader);
          if (this.opts.project.configuration.get(`nodeLinker`) !== `pnp`) {
            await fslib_12.xfs.removePromise(pnpPath.cjs);
            await fslib_12.xfs.removePromise(pnpPath.data);
            await fslib_12.xfs.removePromise(pnpPath.esmLoader);
            await fslib_12.xfs.removePromise(this.opts.project.configuration.get(`pnpUnpluggedFolder`));
            return;
          }
          for (const { locator, location } of this.virtualTemplates.values()) {
            core_1.miscUtils.getMapWithDefault(this.packageRegistry, core_1.structUtils.stringifyIdent(locator)).set(locator.reference, {
              packageLocation: location,
              packageDependencies: /* @__PURE__ */ new Map,
              packagePeers: /* @__PURE__ */ new Set,
              linkType: core_2.LinkType.SOFT,
              discardFromLookup: false
            });
          }
          this.packageRegistry.set(null, /* @__PURE__ */ new Map([
            [null, this.getPackageInformation(this.opts.project.topLevelWorkspace.anchoredLocator)]
          ]));
          const pnpFallbackMode = this.opts.project.configuration.get(`pnpFallbackMode`);
          const dependencyTreeRoots = this.opts.project.workspaces.map(({ anchoredLocator }) => ({ name: core_1.structUtils.stringifyIdent(anchoredLocator), reference: anchoredLocator.reference }));
          const enableTopLevelFallback = pnpFallbackMode !== `none`;
          const fallbackExclusionList = [];
          const fallbackPool = /* @__PURE__ */ new Map;
          const ignorePattern = core_1.miscUtils.buildIgnorePattern([`.yarn/sdks/**`, ...this.opts.project.configuration.get(`pnpIgnorePatterns`)]);
          const packageRegistry = this.packageRegistry;
          const shebang = this.opts.project.configuration.get(`pnpShebang`);
          if (pnpFallbackMode === `dependencies-only`) {
            for (const pkg of this.opts.project.storedPackages.values())
              if (this.opts.project.tryWorkspaceByLocator(pkg))
                fallbackExclusionList.push({ name: core_1.structUtils.stringifyIdent(pkg), reference: pkg.reference });
          }
          await this.asyncActions.wait();
          await this.finalizeInstallWithPnp({
            dependencyTreeRoots,
            enableTopLevelFallback,
            fallbackExclusionList,
            fallbackPool,
            ignorePattern,
            packageRegistry,
            shebang
          });
          return {
            customData: this.customData
          };
        }
        async transformPnpSettings(pnpSettings) {
        }
        isEsmEnabled() {
          if (this.opts.project.configuration.sources.has(`pnpEnableEsmLoader`))
            return this.opts.project.configuration.get(`pnpEnableEsmLoader`);
          if (this.isESMLoaderRequired)
            return true;
          for (const workspace of this.opts.project.workspaces) {
            if (workspace.manifest.type === `module`) {
              return true;
            }
          }
          return false;
        }
        async finalizeInstallWithPnp(pnpSettings) {
          const pnpPath = (0, index_1.getPnpPath)(this.opts.project);
          const nodeModules = await this.locateNodeModules(pnpSettings.ignorePattern);
          if (nodeModules.length > 0) {
            this.opts.report.reportWarning(core_2.MessageName.DANGEROUS_NODE_MODULES, `One or more node_modules have been detected and will be removed. This operation may take some time.`);
            for (const nodeModulesPath of nodeModules) {
              await fslib_12.xfs.removePromise(nodeModulesPath);
            }
          }
          await this.transformPnpSettings(pnpSettings);
          if (this.opts.project.configuration.get(`pnpEnableInlining`)) {
            const loaderFile = (0, pnp_1.generateInlinedScript)(pnpSettings);
            await fslib_12.xfs.changeFilePromise(pnpPath.cjs, loaderFile, {
              automaticNewlines: true,
              mode: 493
            });
            await fslib_12.xfs.removePromise(pnpPath.data);
          } else {
            const { dataFile, loaderFile } = (0, pnp_1.generateSplitScript)(pnpSettings);
            await fslib_12.xfs.changeFilePromise(pnpPath.cjs, loaderFile, {
              automaticNewlines: true,
              mode: 493
            });
            await fslib_12.xfs.changeFilePromise(pnpPath.data, dataFile, {
              automaticNewlines: true,
              mode: 420
            });
          }
          if (this.isEsmEnabled()) {
            this.opts.report.reportWarning(core_2.MessageName.UNNAMED, `ESM support for PnP uses the experimental loader API and is therefore experimental`);
            await fslib_12.xfs.changeFilePromise(pnpPath.esmLoader, (0, pnp_1.getESMLoaderTemplate)(), {
              automaticNewlines: true,
              mode: 420
            });
          }
          const pnpUnpluggedFolder = this.opts.project.configuration.get(`pnpUnpluggedFolder`);
          if (this.unpluggedPaths.size === 0) {
            await fslib_12.xfs.removePromise(pnpUnpluggedFolder);
          } else {
            for (const entry of await fslib_12.xfs.readdirPromise(pnpUnpluggedFolder)) {
              const unpluggedPath = fslib_12.ppath.resolve(pnpUnpluggedFolder, entry);
              if (!this.unpluggedPaths.has(unpluggedPath)) {
                await fslib_12.xfs.removePromise(unpluggedPath);
              }
            }
          }
        }
        async locateNodeModules(ignorePattern) {
          const nodeModules = [];
          const ignoreRegExp = ignorePattern ? new RegExp(ignorePattern) : null;
          for (const workspace of this.opts.project.workspaces) {
            const nodeModulesPath = fslib_12.ppath.join(workspace.cwd, `node_modules`);
            if (ignoreRegExp && ignoreRegExp.test(fslib_12.ppath.relative(this.opts.project.cwd, workspace.cwd)) || !fslib_12.xfs.existsSync(nodeModulesPath))
              continue;
            const directoryListing = await fslib_12.xfs.readdirPromise(nodeModulesPath, {
              withFileTypes: true
            });
            const nonCacheEntries = directoryListing.filter((entry) => {
              return !entry.isDirectory() || entry.name === `.bin` || !entry.name.startsWith(`.`);
            });
            if (nonCacheEntries.length === directoryListing.length) {
              nodeModules.push(nodeModulesPath);
            } else {
              for (const entry of nonCacheEntries) {
                nodeModules.push(fslib_12.ppath.join(nodeModulesPath, entry.name));
              }
            }
          }
          return nodeModules;
        }
        async unplugPackageIfNeeded(pkg, customPackageData, fetchResult, dependencyMeta, api) {
          if (this.shouldBeUnplugged(pkg, customPackageData, dependencyMeta)) {
            return this.unplugPackage(pkg, fetchResult, api);
          } else {
            return fetchResult.packageFs;
          }
        }
        shouldBeUnplugged(pkg, customPackageData, dependencyMeta) {
          if (typeof dependencyMeta.unplugged !== `undefined`)
            return dependencyMeta.unplugged;
          if (FORCED_UNPLUG_PACKAGES.has(pkg.identHash))
            return true;
          if (pkg.conditions != null)
            return true;
          if (customPackageData.manifest.preferUnplugged !== null)
            return customPackageData.manifest.preferUnplugged;
          const buildRequest = jsInstallUtils.extractBuildRequest(pkg, customPackageData, dependencyMeta, { configuration: this.opts.project.configuration });
          if (buildRequest?.skipped === false || customPackageData.misc.extractHint)
            return true;
          return false;
        }
        async unplugPackage(locator, fetchResult, api) {
          const unplugPath = pnpUtils.getUnpluggedPath(locator, { configuration: this.opts.project.configuration });
          if (this.opts.project.disabledLocators.has(locator.locatorHash))
            return new fslib_12.AliasFS(unplugPath, { baseFs: fetchResult.packageFs, pathUtils: fslib_12.ppath });
          this.unpluggedPaths.add(unplugPath);
          api.holdFetchResult(this.asyncActions.set(locator.locatorHash, async () => {
            const readyFile = fslib_12.ppath.join(unplugPath, fetchResult.prefixPath, `.ready`);
            if (await fslib_12.xfs.existsPromise(readyFile))
              return;
            this.opts.project.storedBuildState.delete(locator.locatorHash);
            await fslib_12.xfs.mkdirPromise(unplugPath, { recursive: true });
            await fslib_12.xfs.copyPromise(unplugPath, fslib_12.PortablePath.dot, { baseFs: fetchResult.packageFs, overwrite: false });
            await fslib_12.xfs.writeFilePromise(readyFile, ``);
          }));
          return new fslib_12.CwdFS(unplugPath);
        }
        getPackageInformation(locator) {
          const key1 = core_1.structUtils.stringifyIdent(locator);
          const key2 = locator.reference;
          const packageInformationStore = this.packageRegistry.get(key1);
          if (!packageInformationStore)
            throw new Error(`Assertion failed: The package information store should have been available (for ${core_1.structUtils.prettyIdent(this.opts.project.configuration, locator)})`);
          const packageInformation = packageInformationStore.get(key2);
          if (!packageInformation)
            throw new Error(`Assertion failed: The package information should have been available (for ${core_1.structUtils.prettyLocator(this.opts.project.configuration, locator)})`);
          return packageInformation;
        }
        getDiskInformation(path2) {
          const packageStore = core_1.miscUtils.getMapWithDefault(this.packageRegistry, `@@disk`);
          const normalizedPath = normalizeDirectoryPath(this.opts.project.cwd, path2);
          return core_1.miscUtils.getFactoryWithDefault(packageStore, normalizedPath, () => ({
            packageLocation: normalizedPath,
            packageDependencies: /* @__PURE__ */ new Map,
            packagePeers: /* @__PURE__ */ new Set,
            linkType: core_2.LinkType.SOFT,
            discardFromLookup: false
          }));
        }
      };
      exports22.PnpInstaller = PnpInstaller;
      function normalizeDirectoryPath(root, folder) {
        let relativeFolder = fslib_12.ppath.relative(root, folder);
        if (!relativeFolder.match(/^\.{0,2}\//))
          relativeFolder = `./${relativeFolder}`;
        return relativeFolder.replace(/\/?$/, `/`);
      }
      async function extractCustomPackageData(fetchResult) {
        const manifest = await core_2.Manifest.tryFind(fetchResult.prefixPath, { baseFs: fetchResult.packageFs }) ?? new core_2.Manifest;
        const preservedScripts = /* @__PURE__ */ new Set([`preinstall`, `install`, `postinstall`]);
        for (const scriptName of manifest.scripts.keys())
          if (!preservedScripts.has(scriptName))
            manifest.scripts.delete(scriptName);
        return {
          manifest: {
            scripts: manifest.scripts,
            preferUnplugged: manifest.preferUnplugged,
            type: manifest.type
          },
          misc: {
            extractHint: jsInstallUtils.getExtractHint(fetchResult),
            hasBindingGyp: jsInstallUtils.hasBindingGyp(fetchResult)
          }
        };
      }
    }
  });
  var require_BaseCommand = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+cli@4.6.0_@types+react@18.3.18_@yarnpkg+core@4.2.0_typanion@3.14.0_/node_modules/@yarnpkg/cli/lib/tools/BaseCommand.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.BaseCommand = undefined;
      var clipanion_12 = require_advanced();
      var BaseCommand = class extends clipanion_12.Command {
        constructor() {
          super(...arguments);
          this.cwd = clipanion_12.Option.String(`--cwd`, { hidden: true });
        }
        validateAndExecute() {
          if (typeof this.cwd !== `undefined`)
            throw new clipanion_12.UsageError(`The --cwd option is ambiguous when used anywhere else than the very first parameter provided in the command line, before even the command path`);
          return super.validateAndExecute();
        }
      };
      exports22.BaseCommand = BaseCommand;
    }
  });
  var require_WorkspaceRequiredError = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+cli@4.6.0_@types+react@18.3.18_@yarnpkg+core@4.2.0_typanion@3.14.0_/node_modules/@yarnpkg/cli/lib/tools/WorkspaceRequiredError.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.WorkspaceRequiredError = undefined;
      var core_1 = require_lib6();
      var fslib_12 = require_lib();
      var clipanion_12 = require_advanced();
      var WorkspaceRequiredError = class extends clipanion_12.UsageError {
        constructor(projectCwd, cwd) {
          const relativePath = fslib_12.ppath.relative(projectCwd, cwd);
          const manifestPath = fslib_12.ppath.join(projectCwd, core_1.Manifest.fileName);
          super(`This command can only be run from within a workspace of your project (${relativePath} isn't a workspace of ${manifestPath}).`);
        }
      };
      exports22.WorkspaceRequiredError = WorkspaceRequiredError;
    }
  });
  var require_getDynamicLibs = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+cli@4.6.0_@types+react@18.3.18_@yarnpkg+core@4.2.0_typanion@3.14.0_/node_modules/@yarnpkg/cli/lib/tools/getDynamicLibs.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.getDynamicLibs = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var cli = tslib_12.__importStar(require_lib10());
      var core = tslib_12.__importStar(require_lib6());
      var fslib = tslib_12.__importStar(require_lib());
      var libzip = tslib_12.__importStar(require_sync7());
      var parsers = tslib_12.__importStar(require_lib2());
      var shell = tslib_12.__importStar(require_lib4());
      var clipanion = tslib_12.__importStar(require_advanced());
      var semver = tslib_12.__importStar(require_semver2());
      var typanion = tslib_12.__importStar(require_lib3());
      var getDynamicLibs = () => /* @__PURE__ */ new Map([
        [`@yarnpkg/cli`, cli],
        [`@yarnpkg/core`, core],
        [`@yarnpkg/fslib`, fslib],
        [`@yarnpkg/libzip`, libzip],
        [`@yarnpkg/parsers`, parsers],
        [`@yarnpkg/shell`, shell],
        [`clipanion`, clipanion],
        [`semver`, semver],
        [`typanion`, typanion]
      ]);
      exports22.getDynamicLibs = getDynamicLibs;
    }
  });
  var require_package2 = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+cli@4.6.0_@types+react@18.3.18_@yarnpkg+core@4.2.0_typanion@3.14.0_/node_modules/@yarnpkg/cli/package.json"(exports22, module22) {
      module22.exports = {
        name: "@yarnpkg/cli",
        version: "4.6.0",
        license: "BSD-2-Clause",
        main: "./lib/index.js",
        exports: {
          ".": "./lib/index.js",
          "./package.json": "./package.json"
        },
        dependencies: {
          "@yarnpkg/core": "^4.2.0",
          "@yarnpkg/fslib": "^3.1.1",
          "@yarnpkg/libzip": "^3.1.0",
          "@yarnpkg/parsers": "^3.0.2",
          "@yarnpkg/plugin-compat": "^4.0.10",
          "@yarnpkg/plugin-constraints": "^4.0.2",
          "@yarnpkg/plugin-dlx": "^4.0.0",
          "@yarnpkg/plugin-essentials": "^4.3.0",
          "@yarnpkg/plugin-exec": "^3.0.0",
          "@yarnpkg/plugin-file": "^3.0.0",
          "@yarnpkg/plugin-git": "^3.1.0",
          "@yarnpkg/plugin-github": "^3.0.0",
          "@yarnpkg/plugin-http": "^3.0.1",
          "@yarnpkg/plugin-init": "^4.0.1",
          "@yarnpkg/plugin-interactive-tools": "^4.0.1",
          "@yarnpkg/plugin-link": "^3.0.0",
          "@yarnpkg/plugin-nm": "^4.0.5",
          "@yarnpkg/plugin-npm": "^3.0.1",
          "@yarnpkg/plugin-npm-cli": "^4.0.4",
          "@yarnpkg/plugin-pack": "^4.0.0",
          "@yarnpkg/plugin-patch": "^4.0.1",
          "@yarnpkg/plugin-pnp": "^4.0.6",
          "@yarnpkg/plugin-pnpm": "^2.0.0",
          "@yarnpkg/plugin-stage": "^4.0.0",
          "@yarnpkg/plugin-typescript": "^4.1.1",
          "@yarnpkg/plugin-version": "^4.0.4",
          "@yarnpkg/plugin-workspace-tools": "^4.1.2",
          "@yarnpkg/shell": "^4.1.1",
          "ci-info": "^4.0.0",
          clipanion: "^4.0.0-rc.2",
          semver: "^7.1.2",
          tslib: "^2.4.0",
          typanion: "^3.14.0"
        },
        devDependencies: {
          "@types/semver": "^7.1.0",
          "@yarnpkg/builder": "^4.2.0",
          "@yarnpkg/monorepo": "^0.0.0",
          "@yarnpkg/pnpify": "^4.1.3"
        },
        peerDependencies: {
          "@yarnpkg/core": "^4.2.0"
        },
        scripts: {
          postpack: "rm -rf lib",
          prepack: 'run build:compile "$(pwd)"',
          "build:cli+hook": "run build:pnp:hook && builder build bundle",
          "build:cli": "builder build bundle",
          "run:cli": "builder run",
          "update-local": "run build:cli --no-git-hash && rsync -a --delete bundles/ bin/"
        },
        publishConfig: {
          main: "./lib/index.js",
          bin: null,
          exports: {
            ".": "./lib/index.js",
            "./package.json": "./package.json"
          }
        },
        files: [
          "/lib/**/*",
          "!/lib/pluginConfiguration.*",
          "!/lib/cli.*"
        ],
        "@yarnpkg/builder": {
          bundles: {
            standard: [
              "@yarnpkg/plugin-essentials",
              "@yarnpkg/plugin-compat",
              "@yarnpkg/plugin-constraints",
              "@yarnpkg/plugin-dlx",
              "@yarnpkg/plugin-exec",
              "@yarnpkg/plugin-file",
              "@yarnpkg/plugin-git",
              "@yarnpkg/plugin-github",
              "@yarnpkg/plugin-http",
              "@yarnpkg/plugin-init",
              "@yarnpkg/plugin-interactive-tools",
              "@yarnpkg/plugin-link",
              "@yarnpkg/plugin-nm",
              "@yarnpkg/plugin-npm",
              "@yarnpkg/plugin-npm-cli",
              "@yarnpkg/plugin-pack",
              "@yarnpkg/plugin-patch",
              "@yarnpkg/plugin-pnp",
              "@yarnpkg/plugin-pnpm",
              "@yarnpkg/plugin-stage",
              "@yarnpkg/plugin-typescript",
              "@yarnpkg/plugin-version",
              "@yarnpkg/plugin-workspace-tools"
            ]
          }
        },
        repository: {
          type: "git",
          url: "ssh://git@github.com/yarnpkg/berry.git",
          directory: "packages/yarnpkg-cli"
        },
        engines: {
          node: ">=18.12.0"
        }
      };
    }
  });
  var require_getPluginConfiguration = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+cli@4.6.0_@types+react@18.3.18_@yarnpkg+core@4.2.0_typanion@3.14.0_/node_modules/@yarnpkg/cli/lib/tools/getPluginConfiguration.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.getPluginConfiguration = getPluginConfiguration;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var package_json_1 = tslib_12.__importDefault(require_package2());
      var getDynamicLibs_1 = require_getDynamicLibs();
      function getPluginConfiguration() {
        const plugins2 = /* @__PURE__ */ new Set;
        for (const dependencyName of package_json_1.default[`@yarnpkg/builder`].bundles.standard)
          plugins2.add(dependencyName);
        const modules = (0, getDynamicLibs_1.getDynamicLibs)();
        for (const plugin of plugins2)
          modules.set(plugin, __require(plugin).default);
        return { plugins: plugins2, modules };
      }
    }
  });
  var require_openWorkspace = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+cli@4.6.0_@types+react@18.3.18_@yarnpkg+core@4.2.0_typanion@3.14.0_/node_modules/@yarnpkg/cli/lib/tools/openWorkspace.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.openWorkspace = openWorkspace;
      var core_1 = require_lib6();
      var WorkspaceRequiredError_1 = require_WorkspaceRequiredError();
      async function openWorkspace(configuration, cwd) {
        const { project, workspace } = await core_1.Project.find(configuration, cwd);
        if (!workspace)
          throw new WorkspaceRequiredError_1.WorkspaceRequiredError(project.cwd, cwd);
        return workspace;
      }
    }
  });
  var require_pluginCommands = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+cli@4.6.0_@types+react@18.3.18_@yarnpkg+core@4.2.0_typanion@3.14.0_/node_modules/@yarnpkg/cli/lib/pluginCommands.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.pluginCommands = undefined;
      exports22.pluginCommands = /* @__PURE__ */ new Map([]);
    }
  });
  var require_lib9 = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+cli@4.6.0_@types+react@18.3.18_@yarnpkg+core@4.2.0_typanion@3.14.0_/node_modules/@yarnpkg/cli/lib/lib.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.getCli = getCli;
      exports22.runExit = runExit;
      var core_1 = require_lib6();
      var fslib_12 = require_lib();
      var child_process_1 = __require("child_process");
      var ci_info_1 = require_ci_info();
      var clipanion_12 = require_advanced();
      var pluginCommands_1 = require_pluginCommands();
      var getPluginConfiguration_1 = require_getPluginConfiguration();
      function getBaseCli({ cwd, pluginConfiguration }) {
        const cli = new clipanion_12.Cli({
          binaryLabel: `Yarn Package Manager`,
          binaryName: `yarn`,
          binaryVersion: core_1.YarnVersion ?? `<unknown>`
        });
        return Object.assign(cli, {
          defaultContext: {
            ...clipanion_12.Cli.defaultContext,
            cwd,
            plugins: pluginConfiguration,
            quiet: false,
            stdin: process.stdin,
            stdout: process.stdout,
            stderr: process.stderr
          }
        });
      }
      function validateNodejsVersion(cli) {
        const ignoreNode = core_1.miscUtils.parseOptionalBoolean(process.env.YARN_IGNORE_NODE);
        if (ignoreNode)
          return true;
        const version = process.versions.node;
        const range = `>=18.12.0`;
        if (core_1.semverUtils.satisfiesWithPrereleases(version, range))
          return true;
        const error = new clipanion_12.UsageError(`This tool requires a Node version compatible with ${range} (got ${version}). Upgrade Node, or set \`YARN_IGNORE_NODE=1\` in your environment.`);
        clipanion_12.Cli.defaultContext.stdout.write(cli.error(error));
        return false;
      }
      async function getCoreConfiguration({ selfPath, pluginConfiguration }) {
        return await core_1.Configuration.find(fslib_12.npath.toPortablePath(process.cwd()), pluginConfiguration, {
          strict: false,
          usePathCheck: selfPath
        });
      }
      function runYarnPath(cli, argv, { yarnPath }) {
        if (!fslib_12.xfs.existsSync(yarnPath)) {
          cli.error(new Error(`The "yarn-path" option has been set, but the specified location doesn't exist (${yarnPath}).`));
          return 1;
        }
        process.on(`SIGINT`, () => {
        });
        const yarnPathExecOptions = {
          stdio: `inherit`,
          env: {
            ...process.env,
            YARN_IGNORE_PATH: `1`
          }
        };
        try {
          (0, child_process_1.execFileSync)(process.execPath, [fslib_12.npath.fromPortablePath(yarnPath), ...argv], yarnPathExecOptions);
        } catch (err) {
          return err.status ?? 1;
        }
        return 0;
      }
      function checkCwd(cli, argv) {
        let cwd = null;
        let postCwdArgv = argv;
        if (argv.length >= 2 && argv[0] === `--cwd`) {
          cwd = fslib_12.npath.toPortablePath(argv[1]);
          postCwdArgv = argv.slice(2);
        } else if (argv.length >= 1 && argv[0].startsWith(`--cwd=`)) {
          cwd = fslib_12.npath.toPortablePath(argv[0].slice(6));
          postCwdArgv = argv.slice(1);
        } else if (argv[0] === `add` && argv[argv.length - 2] === `--cwd`) {
          cwd = fslib_12.npath.toPortablePath(argv[argv.length - 1]);
          postCwdArgv = argv.slice(0, argv.length - 2);
        }
        cli.defaultContext.cwd = cwd !== null ? fslib_12.ppath.resolve(cwd) : fslib_12.ppath.cwd();
        return postCwdArgv;
      }
      function initTelemetry(cli, { configuration }) {
        const isTelemetryEnabled = configuration.get(`enableTelemetry`);
        if (!isTelemetryEnabled || ci_info_1.isCI || !process.stdout.isTTY)
          return;
        core_1.Configuration.telemetry = new core_1.TelemetryManager(configuration, `puba9cdc10ec5790a2cf4969dd413a47270`);
        const PLUGIN_REGEX = /^@yarnpkg\/plugin-(.*)$/;
        for (const name of configuration.plugins.keys())
          if (pluginCommands_1.pluginCommands.has(name.match(PLUGIN_REGEX)?.[1] ?? ``))
            core_1.Configuration.telemetry?.reportPluginName(name);
        if (cli.binaryVersion) {
          core_1.Configuration.telemetry.reportVersion(cli.binaryVersion);
        }
      }
      function initCommands(cli, { configuration }) {
        for (const plugin of configuration.plugins.values()) {
          for (const command of plugin.commands || []) {
            cli.register(command);
          }
        }
      }
      async function run(cli, argv, { selfPath, pluginConfiguration }) {
        if (!validateNodejsVersion(cli))
          return 1;
        const configuration = await getCoreConfiguration({
          selfPath,
          pluginConfiguration
        });
        const yarnPath = configuration.get(`yarnPath`);
        const ignorePath = configuration.get(`ignorePath`);
        if (yarnPath && !ignorePath)
          return runYarnPath(cli, argv, { yarnPath });
        delete process.env.YARN_IGNORE_PATH;
        const postCwdArgv = checkCwd(cli, argv);
        initTelemetry(cli, { configuration });
        initCommands(cli, { configuration });
        const command = cli.process(postCwdArgv, cli.defaultContext);
        if (!command.help)
          core_1.Configuration.telemetry?.reportCommandName(command.path.join(` `));
        return await cli.run(command, cli.defaultContext);
      }
      async function getCli({ cwd = fslib_12.ppath.cwd(), pluginConfiguration = (0, getPluginConfiguration_1.getPluginConfiguration)() } = {}) {
        const cli = getBaseCli({ cwd, pluginConfiguration });
        const configuration = await getCoreConfiguration({
          pluginConfiguration,
          selfPath: null
        });
        initCommands(cli, { configuration });
        return cli;
      }
      async function runExit(argv, { cwd = fslib_12.ppath.cwd(), selfPath, pluginConfiguration }) {
        const cli = getBaseCli({ cwd, pluginConfiguration });
        function unexpectedTerminationHandler() {
          clipanion_12.Cli.defaultContext.stdout.write(`ERROR: Yarn is terminating due to an unexpected empty event loop.
Please report this issue at https://github.com/yarnpkg/berry/issues.`);
        }
        process.once(`beforeExit`, unexpectedTerminationHandler);
        try {
          process.exitCode = 42;
          process.exitCode = await run(cli, argv, { selfPath, pluginConfiguration });
        } catch (error) {
          clipanion_12.Cli.defaultContext.stdout.write(cli.error(error));
          process.exitCode = 1;
        } finally {
          process.off(`beforeExit`, unexpectedTerminationHandler);
          await fslib_12.xfs.rmtempPromise();
        }
      }
    }
  });
  var require_lib10 = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+cli@4.6.0_@types+react@18.3.18_@yarnpkg+core@4.2.0_typanion@3.14.0_/node_modules/@yarnpkg/cli/lib/index.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.pluginCommands = exports22.runExit = exports22.getCli = exports22.openWorkspace = exports22.getPluginConfiguration = exports22.getDynamicLibs = exports22.WorkspaceRequiredError = exports22.BaseCommand = undefined;
      var BaseCommand_1 = require_BaseCommand();
      Object.defineProperty(exports22, "BaseCommand", { enumerable: true, get: function() {
        return BaseCommand_1.BaseCommand;
      } });
      var WorkspaceRequiredError_1 = require_WorkspaceRequiredError();
      Object.defineProperty(exports22, "WorkspaceRequiredError", { enumerable: true, get: function() {
        return WorkspaceRequiredError_1.WorkspaceRequiredError;
      } });
      var getDynamicLibs_1 = require_getDynamicLibs();
      Object.defineProperty(exports22, "getDynamicLibs", { enumerable: true, get: function() {
        return getDynamicLibs_1.getDynamicLibs;
      } });
      var getPluginConfiguration_1 = require_getPluginConfiguration();
      Object.defineProperty(exports22, "getPluginConfiguration", { enumerable: true, get: function() {
        return getPluginConfiguration_1.getPluginConfiguration;
      } });
      var openWorkspace_1 = require_openWorkspace();
      Object.defineProperty(exports22, "openWorkspace", { enumerable: true, get: function() {
        return openWorkspace_1.openWorkspace;
      } });
      var lib_1 = require_lib9();
      Object.defineProperty(exports22, "getCli", { enumerable: true, get: function() {
        return lib_1.getCli;
      } });
      Object.defineProperty(exports22, "runExit", { enumerable: true, get: function() {
        return lib_1.runExit;
      } });
      var pluginCommands_1 = require_pluginCommands();
      Object.defineProperty(exports22, "pluginCommands", { enumerable: true, get: function() {
        return pluginCommands_1.pluginCommands;
      } });
    }
  });
  var require_unplug = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+plugin-pnp@4.0.6_@yarnpkg+cli@4.6.0_@types+react@18.3.18_@yarnpkg+core@4.2.0_typanio_gcqdqac4st2nplev7gdet74yn4/node_modules/@yarnpkg/plugin-pnp/lib/commands/unplug.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var cli_1 = require_lib10();
      var core_1 = require_lib6();
      var core_2 = require_lib6();
      var clipanion_12 = require_advanced();
      var micromatch_12 = tslib_12.__importDefault(require_micromatch());
      var pnpUtils = tslib_12.__importStar(require_pnpUtils());
      var UnplugCommand = class extends cli_1.BaseCommand {
        constructor() {
          super(...arguments);
          this.all = clipanion_12.Option.Boolean(`-A,--all`, false, {
            description: `Unplug direct dependencies from the entire project`
          });
          this.recursive = clipanion_12.Option.Boolean(`-R,--recursive`, false, {
            description: `Unplug both direct and transitive dependencies`
          });
          this.json = clipanion_12.Option.Boolean(`--json`, false, {
            description: `Format the output as an NDJSON stream`
          });
          this.patterns = clipanion_12.Option.Rest();
        }
        async execute() {
          const configuration = await core_1.Configuration.find(this.context.cwd, this.context.plugins);
          const { project, workspace } = await core_1.Project.find(configuration, this.context.cwd);
          const cache = await core_1.Cache.find(configuration);
          if (!workspace)
            throw new cli_1.WorkspaceRequiredError(project.cwd, this.context.cwd);
          if (configuration.get(`nodeLinker`) !== `pnp`)
            throw new clipanion_12.UsageError(`This command can only be used if the \`nodeLinker\` option is set to \`pnp\``);
          await project.restoreInstallState();
          const unreferencedPatterns = new Set(this.patterns);
          const matchers = this.patterns.map((pattern) => {
            const patternDescriptor = core_2.structUtils.parseDescriptor(pattern);
            const pseudoDescriptor = patternDescriptor.range !== `unknown` ? patternDescriptor : core_2.structUtils.makeDescriptor(patternDescriptor, `*`);
            if (!core_2.semverUtils.validRange(pseudoDescriptor.range))
              throw new clipanion_12.UsageError(`The range of the descriptor patterns must be a valid semver range (${core_2.structUtils.prettyDescriptor(configuration, pseudoDescriptor)})`);
            return (pkg) => {
              const stringifiedIdent = core_2.structUtils.stringifyIdent(pkg);
              if (!micromatch_12.default.isMatch(stringifiedIdent, core_2.structUtils.stringifyIdent(pseudoDescriptor)))
                return false;
              if (pkg.version && !core_2.semverUtils.satisfiesWithPrereleases(pkg.version, pseudoDescriptor.range))
                return false;
              unreferencedPatterns.delete(pattern);
              return true;
            };
          });
          const getAllMatchingPackages = () => {
            const selection2 = [];
            for (const pkg of project.storedPackages.values())
              if (!project.tryWorkspaceByLocator(pkg) && !core_2.structUtils.isVirtualLocator(pkg) && matchers.some((matcher) => matcher(pkg)))
                selection2.push(pkg);
            return selection2;
          };
          const getSelectedPackages = (roots) => {
            const seen = /* @__PURE__ */ new Set;
            const selection2 = [];
            const traverse = (pkg, depth) => {
              if (seen.has(pkg.locatorHash))
                return;
              const isWorkspace = !!project.tryWorkspaceByLocator(pkg);
              if (depth > 0 && !this.recursive && isWorkspace)
                return;
              seen.add(pkg.locatorHash);
              if (!project.tryWorkspaceByLocator(pkg) && matchers.some((matcher) => matcher(pkg)))
                selection2.push(pkg);
              if (depth > 0 && !this.recursive)
                return;
              for (const dependency of pkg.dependencies.values()) {
                const resolution = project.storedResolutions.get(dependency.descriptorHash);
                if (!resolution)
                  throw new Error(`Assertion failed: The resolution should have been registered`);
                const nextPkg = project.storedPackages.get(resolution);
                if (!nextPkg)
                  throw new Error(`Assertion failed: The package should have been registered`);
                traverse(nextPkg, depth + 1);
              }
            };
            for (const workspace2 of roots)
              traverse(workspace2.anchoredPackage, 0);
            return selection2;
          };
          let selection;
          let projectOrWorkspaces;
          if (this.all && this.recursive) {
            selection = getAllMatchingPackages();
            projectOrWorkspaces = `the project`;
          } else if (this.all) {
            selection = getSelectedPackages(project.workspaces);
            projectOrWorkspaces = `any workspace`;
          } else {
            selection = getSelectedPackages([workspace]);
            projectOrWorkspaces = `this workspace`;
          }
          if (unreferencedPatterns.size > 1)
            throw new clipanion_12.UsageError(`Patterns ${core_1.formatUtils.prettyList(configuration, unreferencedPatterns, core_1.formatUtils.Type.CODE)} don't match any packages referenced by ${projectOrWorkspaces}`);
          if (unreferencedPatterns.size > 0)
            throw new clipanion_12.UsageError(`Pattern ${core_1.formatUtils.prettyList(configuration, unreferencedPatterns, core_1.formatUtils.Type.CODE)} doesn't match any packages referenced by ${projectOrWorkspaces}`);
          selection = core_1.miscUtils.sortMap(selection, (pkg) => {
            return core_2.structUtils.stringifyLocator(pkg);
          });
          const unplugReport = await core_1.StreamReport.start({
            configuration,
            stdout: this.context.stdout,
            json: this.json
          }, async (report) => {
            for (const pkg of selection) {
              const version = pkg.version ?? `unknown`;
              const dependencyMeta = project.topLevelWorkspace.manifest.ensureDependencyMeta(core_2.structUtils.makeDescriptor(pkg, version));
              dependencyMeta.unplugged = true;
              report.reportInfo(core_1.MessageName.UNNAMED, `Will unpack ${core_2.structUtils.prettyLocator(configuration, pkg)} to ${core_1.formatUtils.pretty(configuration, pnpUtils.getUnpluggedPath(pkg, { configuration }), core_1.formatUtils.Type.PATH)}`);
              report.reportJson({
                locator: core_2.structUtils.stringifyLocator(pkg),
                version
              });
            }
            await project.topLevelWorkspace.persistManifest();
            if (!this.json) {
              report.reportSeparator();
            }
          });
          if (unplugReport.hasErrors())
            return unplugReport.exitCode();
          return await project.installWithNewReport({
            json: this.json,
            stdout: this.context.stdout
          }, {
            cache
          });
        }
      };
      UnplugCommand.paths = [
        [`unplug`]
      ];
      UnplugCommand.usage = clipanion_12.Command.Usage({
        description: `force the unpacking of a list of packages`,
        details: `
      This command will add the selectors matching the specified patterns to the list of packages that must be unplugged when installed.

      A package being unplugged means that instead of being referenced directly through its archive, it will be unpacked at install time in the directory configured via \`pnpUnpluggedFolder\`. Note that unpacking packages this way is generally not recommended because it'll make it harder to store your packages within the repository. However, it's a good approach to quickly and safely debug some packages, and can even sometimes be required depending on the context (for example when the package contains shellscripts).

      Running the command will set a persistent flag inside your top-level \`package.json\`, in the \`dependenciesMeta\` field. As such, to undo its effects, you'll need to revert the changes made to the manifest and run \`yarn install\` to apply the modification.

      By default, only direct dependencies from the current workspace are affected. If \`-A,--all\` is set, direct dependencies from the entire project are affected. Using the \`-R,--recursive\` flag will affect transitive dependencies as well as direct ones.

      This command accepts glob patterns inside the scope and name components (not the range). Make sure to escape the patterns to prevent your own shell from trying to expand them.
    `,
        examples: [[
          `Unplug the lodash dependency from the active workspace`,
          `yarn unplug lodash`
        ], [
          `Unplug all instances of lodash referenced by any workspace`,
          `yarn unplug lodash -A`
        ], [
          `Unplug all instances of lodash referenced by the active workspace and its dependencies`,
          `yarn unplug lodash -R`
        ], [
          `Unplug all instances of lodash, anywhere`,
          `yarn unplug lodash -AR`
        ], [
          `Unplug one specific version of lodash`,
          `yarn unplug lodash@1.2.3`
        ], [
          `Unplug all packages with the \`@babel\` scope`,
          `yarn unplug '@babel/*'`
        ], [
          `Unplug all packages (only for testing, not recommended)`,
          `yarn unplug -R '*'`
        ]]
      });
      exports22.default = UnplugCommand;
    }
  });
  var require_lib11 = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+plugin-pnp@4.0.6_@yarnpkg+cli@4.6.0_@types+react@18.3.18_@yarnpkg+core@4.2.0_typanio_gcqdqac4st2nplev7gdet74yn4/node_modules/@yarnpkg/plugin-pnp/lib/index.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.PnpLinker = exports22.PnpInstaller = exports22.quotePathIfNeeded = exports22.getPnpPath = exports22.pnpUtils = exports22.jsInstallUtils = exports22.UnplugCommand = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var core_1 = require_lib6();
      var fslib_12 = require_lib();
      var url_1 = __require("url");
      var PnpLinker_1 = require_PnpLinker();
      var unplug_1 = tslib_12.__importDefault(require_unplug());
      exports22.UnplugCommand = unplug_1.default;
      var jsInstallUtils = tslib_12.__importStar(require_jsInstallUtils());
      exports22.jsInstallUtils = jsInstallUtils;
      var pnpUtils = tslib_12.__importStar(require_pnpUtils());
      exports22.pnpUtils = pnpUtils;
      var getPnpPath = (project) => {
        return {
          cjs: fslib_12.ppath.join(project.cwd, fslib_12.Filename.pnpCjs),
          data: fslib_12.ppath.join(project.cwd, fslib_12.Filename.pnpData),
          esmLoader: fslib_12.ppath.join(project.cwd, fslib_12.Filename.pnpEsmLoader)
        };
      };
      exports22.getPnpPath = getPnpPath;
      var quotePathIfNeeded = (path2) => {
        return /\s/.test(path2) ? JSON.stringify(path2) : path2;
      };
      exports22.quotePathIfNeeded = quotePathIfNeeded;
      async function setupScriptEnvironment(project, env, makePathWrapper) {
        const pnpRegularExpression = /\s*--require\s+\S*\.pnp\.c?js\s*/g;
        const esmLoaderExpression = /\s*--experimental-loader\s+\S*\.pnp\.loader\.mjs\s*/;
        const nodeOptions = (env.NODE_OPTIONS ?? ``).replace(pnpRegularExpression, ` `).replace(esmLoaderExpression, ` `).trim();
        if (project.configuration.get(`nodeLinker`) !== `pnp`) {
          env.NODE_OPTIONS = nodeOptions ? nodeOptions : undefined;
          return;
        }
        const pnpPath = (0, exports22.getPnpPath)(project);
        let pnpRequire = `--require ${(0, exports22.quotePathIfNeeded)(fslib_12.npath.fromPortablePath(pnpPath.cjs))}`;
        if (fslib_12.xfs.existsSync(pnpPath.esmLoader))
          pnpRequire = `${pnpRequire} --experimental-loader ${(0, url_1.pathToFileURL)(fslib_12.npath.fromPortablePath(pnpPath.esmLoader)).href}`;
        if (fslib_12.xfs.existsSync(pnpPath.cjs)) {
          env.NODE_OPTIONS = nodeOptions ? `${pnpRequire} ${nodeOptions}` : pnpRequire;
        }
      }
      async function populateYarnPaths(project, definePath) {
        const pnpPath = (0, exports22.getPnpPath)(project);
        definePath(pnpPath.cjs);
        definePath(pnpPath.data);
        definePath(pnpPath.esmLoader);
        definePath(project.configuration.get(`pnpUnpluggedFolder`));
      }
      var plugin = {
        hooks: {
          populateYarnPaths,
          setupScriptEnvironment
        },
        configuration: {
          nodeLinker: {
            description: `The linker used for installing Node packages, one of: "pnp", "pnpm", or "node-modules"`,
            type: core_1.SettingsType.STRING,
            default: `pnp`
          },
          winLinkType: {
            description: `Whether Yarn should use Windows Junctions or symlinks when creating links on Windows.`,
            type: core_1.SettingsType.STRING,
            values: [
              core_1.WindowsLinkType.JUNCTIONS,
              core_1.WindowsLinkType.SYMLINKS
            ],
            default: core_1.WindowsLinkType.JUNCTIONS
          },
          pnpMode: {
            description: `If 'strict', generates standard PnP maps. If 'loose', merges them with the n_m resolution.`,
            type: core_1.SettingsType.STRING,
            default: `strict`
          },
          pnpShebang: {
            description: `String to prepend to the generated PnP script`,
            type: core_1.SettingsType.STRING,
            default: `#!/usr/bin/env node`
          },
          pnpIgnorePatterns: {
            description: `Array of glob patterns; files matching them will use the classic resolution`,
            type: core_1.SettingsType.STRING,
            default: [],
            isArray: true
          },
          pnpEnableEsmLoader: {
            description: `If true, Yarn will generate an ESM loader (\`.pnp.loader.mjs\`). If this is not explicitly set Yarn tries to automatically detect whether ESM support is required.`,
            type: core_1.SettingsType.BOOLEAN,
            default: false
          },
          pnpEnableInlining: {
            description: `If true, the PnP data will be inlined along with the generated loader`,
            type: core_1.SettingsType.BOOLEAN,
            default: true
          },
          pnpFallbackMode: {
            description: `If true, the generated PnP loader will follow the top-level fallback rule`,
            type: core_1.SettingsType.STRING,
            default: `dependencies-only`
          },
          pnpUnpluggedFolder: {
            description: `Folder where the unplugged packages must be stored`,
            type: core_1.SettingsType.ABSOLUTE_PATH,
            default: `./.yarn/unplugged`
          }
        },
        linkers: [
          PnpLinker_1.PnpLinker
        ],
        commands: [
          unplug_1.default
        ]
      };
      var PnpLinker_2 = require_PnpLinker();
      Object.defineProperty(exports22, "PnpInstaller", { enumerable: true, get: function() {
        return PnpLinker_2.PnpInstaller;
      } });
      Object.defineProperty(exports22, "PnpLinker", { enumerable: true, get: function() {
        return PnpLinker_2.PnpLinker;
      } });
      exports22.default = plugin;
    }
  });
  var require_is_windows = __commonJS2({
    "../../node_modules/.pnpm/is-windows@1.0.2/node_modules/is-windows/index.js"(exports22, module22) {
      (function(factory) {
        if (exports22 && typeof exports22 === "object" && typeof module22 !== "undefined") {
          module22.exports = factory();
        } else if (typeof define === "function" && define.amd) {
          define([], factory);
        } else if (typeof window !== "undefined") {
          window.isWindows = factory();
        } else if (typeof global !== "undefined") {
          global.isWindows = factory();
        } else if (typeof self !== "undefined") {
          self.isWindows = factory();
        } else {
          this.isWindows = factory();
        }
      })(function() {
        return function isWindows() {
          return process && (process.platform === "win32" || /^(msys|cygwin)$/.test(process.env.OSTYPE));
        };
      });
    }
  });
  var require_cmd_extension = __commonJS2({
    "../../node_modules/.pnpm/cmd-extension@1.0.2/node_modules/cmd-extension/index.js"(exports22, module22) {
      var path2 = __require("path");
      var cmdExtension;
      if (process.env.PATHEXT) {
        cmdExtension = process.env.PATHEXT.split(path2.delimiter).find((ext) => ext.toUpperCase() === ".CMD");
      }
      module22.exports = cmdExtension || ".cmd";
    }
  });
  var require_polyfills = __commonJS2({
    "../../node_modules/.pnpm/graceful-fs@4.2.11/node_modules/graceful-fs/polyfills.js"(exports22, module22) {
      var constants = __require("constants");
      var origCwd = process.cwd;
      var cwd = null;
      var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform;
      process.cwd = function() {
        if (!cwd)
          cwd = origCwd.call(process);
        return cwd;
      };
      try {
        process.cwd();
      } catch (er) {
      }
      if (typeof process.chdir === "function") {
        chdir = process.chdir;
        process.chdir = function(d) {
          cwd = null;
          chdir.call(process, d);
        };
        if (Object.setPrototypeOf)
          Object.setPrototypeOf(process.chdir, chdir);
      }
      var chdir;
      module22.exports = patch;
      function patch(fs) {
        if (constants.hasOwnProperty("O_SYMLINK") && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
          patchLchmod(fs);
        }
        if (!fs.lutimes) {
          patchLutimes(fs);
        }
        fs.chown = chownFix(fs.chown);
        fs.fchown = chownFix(fs.fchown);
        fs.lchown = chownFix(fs.lchown);
        fs.chmod = chmodFix(fs.chmod);
        fs.fchmod = chmodFix(fs.fchmod);
        fs.lchmod = chmodFix(fs.lchmod);
        fs.chownSync = chownFixSync(fs.chownSync);
        fs.fchownSync = chownFixSync(fs.fchownSync);
        fs.lchownSync = chownFixSync(fs.lchownSync);
        fs.chmodSync = chmodFixSync(fs.chmodSync);
        fs.fchmodSync = chmodFixSync(fs.fchmodSync);
        fs.lchmodSync = chmodFixSync(fs.lchmodSync);
        fs.stat = statFix(fs.stat);
        fs.fstat = statFix(fs.fstat);
        fs.lstat = statFix(fs.lstat);
        fs.statSync = statFixSync(fs.statSync);
        fs.fstatSync = statFixSync(fs.fstatSync);
        fs.lstatSync = statFixSync(fs.lstatSync);
        if (fs.chmod && !fs.lchmod) {
          fs.lchmod = function(path2, mode, cb) {
            if (cb)
              process.nextTick(cb);
          };
          fs.lchmodSync = function() {
          };
        }
        if (fs.chown && !fs.lchown) {
          fs.lchown = function(path2, uid, gid, cb) {
            if (cb)
              process.nextTick(cb);
          };
          fs.lchownSync = function() {
          };
        }
        if (platform === "win32") {
          fs.rename = typeof fs.rename !== "function" ? fs.rename : function(fs$rename) {
            function rename(from, to, cb) {
              var start = Date.now();
              var backoff = 0;
              fs$rename(from, to, function CB(er) {
                if (er && (er.code === "EACCES" || er.code === "EPERM" || er.code === "EBUSY") && Date.now() - start < 60000) {
                  setTimeout(function() {
                    fs.stat(to, function(stater, st) {
                      if (stater && stater.code === "ENOENT")
                        fs$rename(from, to, CB);
                      else
                        cb(er);
                    });
                  }, backoff);
                  if (backoff < 100)
                    backoff += 10;
                  return;
                }
                if (cb)
                  cb(er);
              });
            }
            if (Object.setPrototypeOf)
              Object.setPrototypeOf(rename, fs$rename);
            return rename;
          }(fs.rename);
        }
        fs.read = typeof fs.read !== "function" ? fs.read : function(fs$read) {
          function read(fd, buffer, offset, length, position, callback_) {
            var callback;
            if (callback_ && typeof callback_ === "function") {
              var eagCounter = 0;
              callback = function(er, _, __) {
                if (er && er.code === "EAGAIN" && eagCounter < 10) {
                  eagCounter++;
                  return fs$read.call(fs, fd, buffer, offset, length, position, callback);
                }
                callback_.apply(this, arguments);
              };
            }
            return fs$read.call(fs, fd, buffer, offset, length, position, callback);
          }
          if (Object.setPrototypeOf)
            Object.setPrototypeOf(read, fs$read);
          return read;
        }(fs.read);
        fs.readSync = typeof fs.readSync !== "function" ? fs.readSync : /* @__PURE__ */ function(fs$readSync) {
          return function(fd, buffer, offset, length, position) {
            var eagCounter = 0;
            while (true) {
              try {
                return fs$readSync.call(fs, fd, buffer, offset, length, position);
              } catch (er) {
                if (er.code === "EAGAIN" && eagCounter < 10) {
                  eagCounter++;
                  continue;
                }
                throw er;
              }
            }
          };
        }(fs.readSync);
        function patchLchmod(fs2) {
          fs2.lchmod = function(path2, mode, callback) {
            fs2.open(path2, constants.O_WRONLY | constants.O_SYMLINK, mode, function(err, fd) {
              if (err) {
                if (callback)
                  callback(err);
                return;
              }
              fs2.fchmod(fd, mode, function(err2) {
                fs2.close(fd, function(err22) {
                  if (callback)
                    callback(err2 || err22);
                });
              });
            });
          };
          fs2.lchmodSync = function(path2, mode) {
            var fd = fs2.openSync(path2, constants.O_WRONLY | constants.O_SYMLINK, mode);
            var threw = true;
            var ret;
            try {
              ret = fs2.fchmodSync(fd, mode);
              threw = false;
            } finally {
              if (threw) {
                try {
                  fs2.closeSync(fd);
                } catch (er) {
                }
              } else {
                fs2.closeSync(fd);
              }
            }
            return ret;
          };
        }
        function patchLutimes(fs2) {
          if (constants.hasOwnProperty("O_SYMLINK") && fs2.futimes) {
            fs2.lutimes = function(path2, at, mt, cb) {
              fs2.open(path2, constants.O_SYMLINK, function(er, fd) {
                if (er) {
                  if (cb)
                    cb(er);
                  return;
                }
                fs2.futimes(fd, at, mt, function(er2) {
                  fs2.close(fd, function(er22) {
                    if (cb)
                      cb(er2 || er22);
                  });
                });
              });
            };
            fs2.lutimesSync = function(path2, at, mt) {
              var fd = fs2.openSync(path2, constants.O_SYMLINK);
              var ret;
              var threw = true;
              try {
                ret = fs2.futimesSync(fd, at, mt);
                threw = false;
              } finally {
                if (threw) {
                  try {
                    fs2.closeSync(fd);
                  } catch (er) {
                  }
                } else {
                  fs2.closeSync(fd);
                }
              }
              return ret;
            };
          } else if (fs2.futimes) {
            fs2.lutimes = function(_a, _b, _c, cb) {
              if (cb)
                process.nextTick(cb);
            };
            fs2.lutimesSync = function() {
            };
          }
        }
        function chmodFix(orig) {
          if (!orig)
            return orig;
          return function(target, mode, cb) {
            return orig.call(fs, target, mode, function(er) {
              if (chownErOk(er))
                er = null;
              if (cb)
                cb.apply(this, arguments);
            });
          };
        }
        function chmodFixSync(orig) {
          if (!orig)
            return orig;
          return function(target, mode) {
            try {
              return orig.call(fs, target, mode);
            } catch (er) {
              if (!chownErOk(er))
                throw er;
            }
          };
        }
        function chownFix(orig) {
          if (!orig)
            return orig;
          return function(target, uid, gid, cb) {
            return orig.call(fs, target, uid, gid, function(er) {
              if (chownErOk(er))
                er = null;
              if (cb)
                cb.apply(this, arguments);
            });
          };
        }
        function chownFixSync(orig) {
          if (!orig)
            return orig;
          return function(target, uid, gid) {
            try {
              return orig.call(fs, target, uid, gid);
            } catch (er) {
              if (!chownErOk(er))
                throw er;
            }
          };
        }
        function statFix(orig) {
          if (!orig)
            return orig;
          return function(target, options, cb) {
            if (typeof options === "function") {
              cb = options;
              options = null;
            }
            function callback(er, stats) {
              if (stats) {
                if (stats.uid < 0)
                  stats.uid += 4294967296;
                if (stats.gid < 0)
                  stats.gid += 4294967296;
              }
              if (cb)
                cb.apply(this, arguments);
            }
            return options ? orig.call(fs, target, options, callback) : orig.call(fs, target, callback);
          };
        }
        function statFixSync(orig) {
          if (!orig)
            return orig;
          return function(target, options) {
            var stats = options ? orig.call(fs, target, options) : orig.call(fs, target);
            if (stats) {
              if (stats.uid < 0)
                stats.uid += 4294967296;
              if (stats.gid < 0)
                stats.gid += 4294967296;
            }
            return stats;
          };
        }
        function chownErOk(er) {
          if (!er)
            return true;
          if (er.code === "ENOSYS")
            return true;
          var nonroot = !process.getuid || process.getuid() !== 0;
          if (nonroot) {
            if (er.code === "EINVAL" || er.code === "EPERM")
              return true;
          }
          return false;
        }
      }
    }
  });
  var require_legacy_streams = __commonJS2({
    "../../node_modules/.pnpm/graceful-fs@4.2.11/node_modules/graceful-fs/legacy-streams.js"(exports22, module22) {
      var Stream = __require("stream").Stream;
      module22.exports = legacy;
      function legacy(fs) {
        return {
          ReadStream,
          WriteStream
        };
        function ReadStream(path2, options) {
          if (!(this instanceof ReadStream))
            return new ReadStream(path2, options);
          Stream.call(this);
          var self2 = this;
          this.path = path2;
          this.fd = null;
          this.readable = true;
          this.paused = false;
          this.flags = "r";
          this.mode = 438;
          this.bufferSize = 64 * 1024;
          options = options || {};
          var keys = Object.keys(options);
          for (var index = 0, length = keys.length;index < length; index++) {
            var key = keys[index];
            this[key] = options[key];
          }
          if (this.encoding)
            this.setEncoding(this.encoding);
          if (this.start !== undefined) {
            if (typeof this.start !== "number") {
              throw TypeError("start must be a Number");
            }
            if (this.end === undefined) {
              this.end = Infinity;
            } else if (typeof this.end !== "number") {
              throw TypeError("end must be a Number");
            }
            if (this.start > this.end) {
              throw new Error("start must be <= end");
            }
            this.pos = this.start;
          }
          if (this.fd !== null) {
            process.nextTick(function() {
              self2._read();
            });
            return;
          }
          fs.open(this.path, this.flags, this.mode, function(err, fd) {
            if (err) {
              self2.emit("error", err);
              self2.readable = false;
              return;
            }
            self2.fd = fd;
            self2.emit("open", fd);
            self2._read();
          });
        }
        function WriteStream(path2, options) {
          if (!(this instanceof WriteStream))
            return new WriteStream(path2, options);
          Stream.call(this);
          this.path = path2;
          this.fd = null;
          this.writable = true;
          this.flags = "w";
          this.encoding = "binary";
          this.mode = 438;
          this.bytesWritten = 0;
          options = options || {};
          var keys = Object.keys(options);
          for (var index = 0, length = keys.length;index < length; index++) {
            var key = keys[index];
            this[key] = options[key];
          }
          if (this.start !== undefined) {
            if (typeof this.start !== "number") {
              throw TypeError("start must be a Number");
            }
            if (this.start < 0) {
              throw new Error("start must be >= zero");
            }
            this.pos = this.start;
          }
          this.busy = false;
          this._queue = [];
          if (this.fd === null) {
            this._open = fs.open;
            this._queue.push([this._open, this.path, this.flags, this.mode, undefined]);
            this.flush();
          }
        }
      }
    }
  });
  var require_clone = __commonJS2({
    "../../node_modules/.pnpm/graceful-fs@4.2.11/node_modules/graceful-fs/clone.js"(exports22, module22) {
      module22.exports = clone;
      var getPrototypeOf = Object.getPrototypeOf || function(obj) {
        return obj.__proto__;
      };
      function clone(obj) {
        if (obj === null || typeof obj !== "object")
          return obj;
        if (obj instanceof Object)
          var copy = { __proto__: getPrototypeOf(obj) };
        else
          var copy = /* @__PURE__ */ Object.create(null);
        Object.getOwnPropertyNames(obj).forEach(function(key) {
          Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key));
        });
        return copy;
      }
    }
  });
  var require_graceful_fs = __commonJS2({
    "../../node_modules/.pnpm/graceful-fs@4.2.11/node_modules/graceful-fs/graceful-fs.js"(exports22, module22) {
      var fs = __require("fs");
      var polyfills = require_polyfills();
      var legacy = require_legacy_streams();
      var clone = require_clone();
      var util = __require("util");
      var gracefulQueue;
      var previousSymbol;
      if (typeof Symbol === "function" && typeof Symbol.for === "function") {
        gracefulQueue = Symbol.for("graceful-fs.queue");
        previousSymbol = Symbol.for("graceful-fs.previous");
      } else {
        gracefulQueue = "___graceful-fs.queue";
        previousSymbol = "___graceful-fs.previous";
      }
      function noop() {
      }
      function publishQueue(context, queue2) {
        Object.defineProperty(context, gracefulQueue, {
          get: function() {
            return queue2;
          }
        });
      }
      var debug = noop;
      if (util.debuglog)
        debug = util.debuglog("gfs4");
      else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ""))
        debug = function() {
          var m = util.format.apply(util, arguments);
          m = "GFS4: " + m.split(/\n/).join(`
GFS4: `);
          console.error(m);
        };
      if (!fs[gracefulQueue]) {
        queue = global[gracefulQueue] || [];
        publishQueue(fs, queue);
        fs.close = function(fs$close) {
          function close(fd, cb) {
            return fs$close.call(fs, fd, function(err) {
              if (!err) {
                resetQueue();
              }
              if (typeof cb === "function")
                cb.apply(this, arguments);
            });
          }
          Object.defineProperty(close, previousSymbol, {
            value: fs$close
          });
          return close;
        }(fs.close);
        fs.closeSync = function(fs$closeSync) {
          function closeSync(fd) {
            fs$closeSync.apply(fs, arguments);
            resetQueue();
          }
          Object.defineProperty(closeSync, previousSymbol, {
            value: fs$closeSync
          });
          return closeSync;
        }(fs.closeSync);
        if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || "")) {
          process.on("exit", function() {
            debug(fs[gracefulQueue]);
            __require("assert").equal(fs[gracefulQueue].length, 0);
          });
        }
      }
      var queue;
      if (!global[gracefulQueue]) {
        publishQueue(global, fs[gracefulQueue]);
      }
      module22.exports = patch(clone(fs));
      if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs.__patched) {
        module22.exports = patch(fs);
        fs.__patched = true;
      }
      function patch(fs2) {
        polyfills(fs2);
        fs2.gracefulify = patch;
        fs2.createReadStream = createReadStream;
        fs2.createWriteStream = createWriteStream;
        var fs$readFile = fs2.readFile;
        fs2.readFile = readFile;
        function readFile(path2, options, cb) {
          if (typeof options === "function")
            cb = options, options = null;
          return go$readFile(path2, options, cb);
          function go$readFile(path3, options2, cb2, startTime) {
            return fs$readFile(path3, options2, function(err) {
              if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
                enqueue([go$readFile, [path3, options2, cb2], err, startTime || Date.now(), Date.now()]);
              else {
                if (typeof cb2 === "function")
                  cb2.apply(this, arguments);
              }
            });
          }
        }
        var fs$writeFile = fs2.writeFile;
        fs2.writeFile = writeFile2;
        function writeFile2(path2, data, options, cb) {
          if (typeof options === "function")
            cb = options, options = null;
          return go$writeFile(path2, data, options, cb);
          function go$writeFile(path3, data2, options2, cb2, startTime) {
            return fs$writeFile(path3, data2, options2, function(err) {
              if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
                enqueue([go$writeFile, [path3, data2, options2, cb2], err, startTime || Date.now(), Date.now()]);
              else {
                if (typeof cb2 === "function")
                  cb2.apply(this, arguments);
              }
            });
          }
        }
        var fs$appendFile = fs2.appendFile;
        if (fs$appendFile)
          fs2.appendFile = appendFile;
        function appendFile(path2, data, options, cb) {
          if (typeof options === "function")
            cb = options, options = null;
          return go$appendFile(path2, data, options, cb);
          function go$appendFile(path3, data2, options2, cb2, startTime) {
            return fs$appendFile(path3, data2, options2, function(err) {
              if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
                enqueue([go$appendFile, [path3, data2, options2, cb2], err, startTime || Date.now(), Date.now()]);
              else {
                if (typeof cb2 === "function")
                  cb2.apply(this, arguments);
              }
            });
          }
        }
        var fs$copyFile = fs2.copyFile;
        if (fs$copyFile)
          fs2.copyFile = copyFile;
        function copyFile(src, dest, flags, cb) {
          if (typeof flags === "function") {
            cb = flags;
            flags = 0;
          }
          return go$copyFile(src, dest, flags, cb);
          function go$copyFile(src2, dest2, flags2, cb2, startTime) {
            return fs$copyFile(src2, dest2, flags2, function(err) {
              if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
                enqueue([go$copyFile, [src2, dest2, flags2, cb2], err, startTime || Date.now(), Date.now()]);
              else {
                if (typeof cb2 === "function")
                  cb2.apply(this, arguments);
              }
            });
          }
        }
        var fs$readdir = fs2.readdir;
        fs2.readdir = readdir;
        var noReaddirOptionVersions = /^v[0-5]\./;
        function readdir(path2, options, cb) {
          if (typeof options === "function")
            cb = options, options = null;
          var go$readdir = noReaddirOptionVersions.test(process.version) ? function go$readdir2(path3, options2, cb2, startTime) {
            return fs$readdir(path3, fs$readdirCallback(path3, options2, cb2, startTime));
          } : function go$readdir2(path3, options2, cb2, startTime) {
            return fs$readdir(path3, options2, fs$readdirCallback(path3, options2, cb2, startTime));
          };
          return go$readdir(path2, options, cb);
          function fs$readdirCallback(path3, options2, cb2, startTime) {
            return function(err, files) {
              if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
                enqueue([
                  go$readdir,
                  [path3, options2, cb2],
                  err,
                  startTime || Date.now(),
                  Date.now()
                ]);
              else {
                if (files && files.sort)
                  files.sort();
                if (typeof cb2 === "function")
                  cb2.call(this, err, files);
              }
            };
          }
        }
        if (process.version.substr(0, 4) === "v0.8") {
          var legStreams = legacy(fs2);
          ReadStream = legStreams.ReadStream;
          WriteStream = legStreams.WriteStream;
        }
        var fs$ReadStream = fs2.ReadStream;
        if (fs$ReadStream) {
          ReadStream.prototype = Object.create(fs$ReadStream.prototype);
          ReadStream.prototype.open = ReadStream$open;
        }
        var fs$WriteStream = fs2.WriteStream;
        if (fs$WriteStream) {
          WriteStream.prototype = Object.create(fs$WriteStream.prototype);
          WriteStream.prototype.open = WriteStream$open;
        }
        Object.defineProperty(fs2, "ReadStream", {
          get: function() {
            return ReadStream;
          },
          set: function(val) {
            ReadStream = val;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(fs2, "WriteStream", {
          get: function() {
            return WriteStream;
          },
          set: function(val) {
            WriteStream = val;
          },
          enumerable: true,
          configurable: true
        });
        var FileReadStream = ReadStream;
        Object.defineProperty(fs2, "FileReadStream", {
          get: function() {
            return FileReadStream;
          },
          set: function(val) {
            FileReadStream = val;
          },
          enumerable: true,
          configurable: true
        });
        var FileWriteStream = WriteStream;
        Object.defineProperty(fs2, "FileWriteStream", {
          get: function() {
            return FileWriteStream;
          },
          set: function(val) {
            FileWriteStream = val;
          },
          enumerable: true,
          configurable: true
        });
        function ReadStream(path2, options) {
          if (this instanceof ReadStream)
            return fs$ReadStream.apply(this, arguments), this;
          else
            return ReadStream.apply(Object.create(ReadStream.prototype), arguments);
        }
        function ReadStream$open() {
          var that = this;
          open(that.path, that.flags, that.mode, function(err, fd) {
            if (err) {
              if (that.autoClose)
                that.destroy();
              that.emit("error", err);
            } else {
              that.fd = fd;
              that.emit("open", fd);
              that.read();
            }
          });
        }
        function WriteStream(path2, options) {
          if (this instanceof WriteStream)
            return fs$WriteStream.apply(this, arguments), this;
          else
            return WriteStream.apply(Object.create(WriteStream.prototype), arguments);
        }
        function WriteStream$open() {
          var that = this;
          open(that.path, that.flags, that.mode, function(err, fd) {
            if (err) {
              that.destroy();
              that.emit("error", err);
            } else {
              that.fd = fd;
              that.emit("open", fd);
            }
          });
        }
        function createReadStream(path2, options) {
          return new fs2.ReadStream(path2, options);
        }
        function createWriteStream(path2, options) {
          return new fs2.WriteStream(path2, options);
        }
        var fs$open = fs2.open;
        fs2.open = open;
        function open(path2, flags, mode, cb) {
          if (typeof mode === "function")
            cb = mode, mode = null;
          return go$open(path2, flags, mode, cb);
          function go$open(path3, flags2, mode2, cb2, startTime) {
            return fs$open(path3, flags2, mode2, function(err, fd) {
              if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
                enqueue([go$open, [path3, flags2, mode2, cb2], err, startTime || Date.now(), Date.now()]);
              else {
                if (typeof cb2 === "function")
                  cb2.apply(this, arguments);
              }
            });
          }
        }
        return fs2;
      }
      function enqueue(elem) {
        debug("ENQUEUE", elem[0].name, elem[1]);
        fs[gracefulQueue].push(elem);
        retry();
      }
      var retryTimer;
      function resetQueue() {
        var now = Date.now();
        for (var i = 0;i < fs[gracefulQueue].length; ++i) {
          if (fs[gracefulQueue][i].length > 2) {
            fs[gracefulQueue][i][3] = now;
            fs[gracefulQueue][i][4] = now;
          }
        }
        retry();
      }
      function retry() {
        clearTimeout(retryTimer);
        retryTimer = undefined;
        if (fs[gracefulQueue].length === 0)
          return;
        var elem = fs[gracefulQueue].shift();
        var fn = elem[0];
        var args = elem[1];
        var err = elem[2];
        var startTime = elem[3];
        var lastTime = elem[4];
        if (startTime === undefined) {
          debug("RETRY", fn.name, args);
          fn.apply(null, args);
        } else if (Date.now() - startTime >= 60000) {
          debug("TIMEOUT", fn.name, args);
          var cb = args.pop();
          if (typeof cb === "function")
            cb.call(null, err);
        } else {
          var sinceAttempt = Date.now() - lastTime;
          var sinceStart = Math.max(lastTime - startTime, 1);
          var desiredDelay = Math.min(sinceStart * 1.2, 100);
          if (sinceAttempt >= desiredDelay) {
            debug("RETRY", fn.name, args);
            fn.apply(null, args.concat([startTime]));
          } else {
            fs[gracefulQueue].push(elem);
          }
        }
        if (retryTimer === undefined) {
          retryTimer = setTimeout(retry, 0);
        }
      }
    }
  });
  var require_cmd_shim = __commonJS2({
    "../../node_modules/.pnpm/@zkochan+cmd-shim@5.4.1/node_modules/@zkochan/cmd-shim/index.js"(exports22, module22) {
      cmdShim.ifExists = cmdShimIfExists;
      var util_1 = __require("util");
      var path2 = __require("path");
      var isWindows = require_is_windows();
      var CMD_EXTENSION = require_cmd_extension();
      var shebangExpr = /^#!\s*(?:\/usr\/bin\/env(?:\s+-S\s*)?)?\s*([^ \t]+)(.*)$/;
      var DEFAULT_OPTIONS = {
        createPwshFile: true,
        createCmdFile: isWindows(),
        fs: require_graceful_fs()
      };
      var extensionToProgramMap = /* @__PURE__ */ new Map([
        [".js", "node"],
        [".cjs", "node"],
        [".mjs", "node"],
        [".cmd", "cmd"],
        [".bat", "cmd"],
        [".ps1", "pwsh"],
        [".sh", "sh"]
      ]);
      function ingestOptions(opts) {
        const opts_ = { ...DEFAULT_OPTIONS, ...opts };
        const fs = opts_.fs;
        opts_.fs_ = {
          chmod: fs.chmod ? (0, util_1.promisify)(fs.chmod) : async () => {
          },
          mkdir: (0, util_1.promisify)(fs.mkdir),
          readFile: (0, util_1.promisify)(fs.readFile),
          stat: (0, util_1.promisify)(fs.stat),
          unlink: (0, util_1.promisify)(fs.unlink),
          writeFile: (0, util_1.promisify)(fs.writeFile)
        };
        return opts_;
      }
      async function cmdShim(src, to, opts) {
        const opts_ = ingestOptions(opts);
        await cmdShim_(src, to, opts_);
      }
      function cmdShimIfExists(src, to, opts) {
        return cmdShim(src, to, opts).catch(() => {
        });
      }
      function rm(path3, opts) {
        return opts.fs_.unlink(path3).catch(() => {
        });
      }
      async function cmdShim_(src, to, opts) {
        const srcRuntimeInfo = await searchScriptRuntime(src, opts);
        await writeShimsPreCommon(to, opts);
        return writeAllShims(src, to, srcRuntimeInfo, opts);
      }
      function writeShimsPreCommon(target, opts) {
        return opts.fs_.mkdir(path2.dirname(target), { recursive: true });
      }
      function writeAllShims(src, to, srcRuntimeInfo, opts) {
        const opts_ = ingestOptions(opts);
        const generatorAndExts = [{ generator: generateShShim, extension: "" }];
        if (opts_.createCmdFile) {
          generatorAndExts.push({ generator: generateCmdShim, extension: CMD_EXTENSION });
        }
        if (opts_.createPwshFile) {
          generatorAndExts.push({ generator: generatePwshShim, extension: ".ps1" });
        }
        return Promise.all(generatorAndExts.map((generatorAndExt) => writeShim(src, to + generatorAndExt.extension, srcRuntimeInfo, generatorAndExt.generator, opts_)));
      }
      function writeShimPre(target, opts) {
        return rm(target, opts);
      }
      function writeShimPost(target, opts) {
        return chmodShim(target, opts);
      }
      async function searchScriptRuntime(target, opts) {
        try {
          const data = await opts.fs_.readFile(target, "utf8");
          const firstLine = data.trim().split(/\r*\n/)[0];
          const shebang = firstLine.match(shebangExpr);
          if (!shebang) {
            const targetExtension = path2.extname(target).toLowerCase();
            return {
              program: extensionToProgramMap.get(targetExtension) || null,
              additionalArgs: ""
            };
          }
          return {
            program: shebang[1],
            additionalArgs: shebang[2]
          };
        } catch (err) {
          if (!isWindows() || err.code !== "ENOENT")
            throw err;
          if (await opts.fs_.stat(`${target}${getExeExtension()}`)) {
            return {
              program: null,
              additionalArgs: ""
            };
          }
          throw err;
        }
      }
      function getExeExtension() {
        let cmdExtension;
        if (process.env.PATHEXT) {
          cmdExtension = process.env.PATHEXT.split(path2.delimiter).find((ext) => ext.toLowerCase() === ".exe");
        }
        return cmdExtension || ".exe";
      }
      async function writeShim(src, to, srcRuntimeInfo, generateShimScript, opts) {
        const defaultArgs = opts.preserveSymlinks ? "--preserve-symlinks" : "";
        const args = [srcRuntimeInfo.additionalArgs, defaultArgs].filter((arg) => arg).join(" ");
        opts = Object.assign({}, opts, {
          prog: srcRuntimeInfo.program,
          args
        });
        await writeShimPre(to, opts);
        await opts.fs_.writeFile(to, generateShimScript(src, to, opts), "utf8");
        return writeShimPost(to, opts);
      }
      function generateCmdShim(src, to, opts) {
        const shTarget = path2.relative(path2.dirname(to), src);
        let target = shTarget.split("/").join("\\");
        const quotedPathToTarget = path2.isAbsolute(target) ? `"${target}"` : `"%~dp0\\${target}"`;
        let longProg;
        let prog = opts.prog;
        let args = opts.args || "";
        const nodePath = normalizePathEnvVar(opts.nodePath).win32;
        const prependToPath = normalizePathEnvVar(opts.prependToPath).win32;
        if (!prog) {
          prog = quotedPathToTarget;
          args = "";
          target = "";
        } else if (prog === "node" && opts.nodeExecPath) {
          prog = `"${opts.nodeExecPath}"`;
          target = quotedPathToTarget;
        } else {
          longProg = `"%~dp0\\${prog}.exe"`;
          target = quotedPathToTarget;
        }
        let progArgs = opts.progArgs ? `${opts.progArgs.join(` `)} ` : "";
        let cmd = `@SETLOCAL\r
`;
        if (prependToPath) {
          cmd += `@SET "PATH=${prependToPath}:%PATH%"\r
`;
        }
        if (nodePath) {
          cmd += `@IF NOT DEFINED NODE_PATH (\r
  @SET "NODE_PATH=${nodePath}"\r
) ELSE (\r
  @SET "NODE_PATH=%NODE_PATH%;${nodePath}"\r
)\r
`;
        }
        if (longProg) {
          cmd += `@IF EXIST ${longProg} (\r
  ${longProg} ${args} ${target} ${progArgs}%*\r
) ELSE (\r
  @SET PATHEXT=%PATHEXT:;.JS;=;%\r
  ${prog} ${args} ${target} ${progArgs}%*\r
)\r
`;
        } else {
          cmd += `@${prog} ${args} ${target} ${progArgs}%*\r
`;
        }
        return cmd;
      }
      function generateShShim(src, to, opts) {
        let shTarget = path2.relative(path2.dirname(to), src);
        let shProg = opts.prog && opts.prog.split("\\").join("/");
        let shLongProg;
        shTarget = shTarget.split("\\").join("/");
        const quotedPathToTarget = path2.isAbsolute(shTarget) ? `"${shTarget}"` : `"$basedir/${shTarget}"`;
        let args = opts.args || "";
        const shNodePath = normalizePathEnvVar(opts.nodePath).posix;
        if (!shProg) {
          shProg = quotedPathToTarget;
          args = "";
          shTarget = "";
        } else if (opts.prog === "node" && opts.nodeExecPath) {
          shProg = `"${opts.nodeExecPath}"`;
          shTarget = quotedPathToTarget;
        } else {
          shLongProg = `"$basedir/${opts.prog}"`;
          shTarget = quotedPathToTarget;
        }
        let progArgs = opts.progArgs ? `${opts.progArgs.join(` `)} ` : "";
        let sh = `#!/bin/sh
basedir=$(dirname "$(echo "$0" | sed -e 's,\\\\,/,g')")

case \`uname\` in
    *CYGWIN*) basedir=\`cygpath -w "$basedir"\`;;
esac

`;
        if (opts.prependToPath) {
          sh += `export PATH="${opts.prependToPath}:$PATH"
`;
        }
        if (shNodePath) {
          sh += `if [ -z "$NODE_PATH" ]; then
  export NODE_PATH="${shNodePath}"
else
  export NODE_PATH="$NODE_PATH:${shNodePath}"
fi
`;
        }
        if (shLongProg) {
          sh += `if [ -x ${shLongProg} ]; then
  exec ${shLongProg} ${args} ${shTarget} ${progArgs}"$@"
else
  exec ${shProg} ${args} ${shTarget} ${progArgs}"$@"
fi
`;
        } else {
          sh += `${shProg} ${args} ${shTarget} ${progArgs}"$@"
exit $?
`;
        }
        return sh;
      }
      function generatePwshShim(src, to, opts) {
        let shTarget = path2.relative(path2.dirname(to), src);
        const shProg = opts.prog && opts.prog.split("\\").join("/");
        let pwshProg = shProg && `"${shProg}$exe"`;
        let pwshLongProg;
        shTarget = shTarget.split("\\").join("/");
        const quotedPathToTarget = path2.isAbsolute(shTarget) ? `"${shTarget}"` : `"$basedir/${shTarget}"`;
        let args = opts.args || "";
        let normalizedNodePathEnvVar = normalizePathEnvVar(opts.nodePath);
        const nodePath = normalizedNodePathEnvVar.win32;
        const shNodePath = normalizedNodePathEnvVar.posix;
        let normalizedPrependPathEnvVar = normalizePathEnvVar(opts.prependToPath);
        const prependPath = normalizedPrependPathEnvVar.win32;
        const shPrependPath = normalizedPrependPathEnvVar.posix;
        if (!pwshProg) {
          pwshProg = quotedPathToTarget;
          args = "";
          shTarget = "";
        } else if (opts.prog === "node" && opts.nodeExecPath) {
          pwshProg = `"${opts.nodeExecPath}"`;
          shTarget = quotedPathToTarget;
        } else {
          pwshLongProg = `"$basedir/${opts.prog}$exe"`;
          shTarget = quotedPathToTarget;
        }
        let progArgs = opts.progArgs ? `${opts.progArgs.join(` `)} ` : "";
        let pwsh = `#!/usr/bin/env pwsh
$basedir=Split-Path $MyInvocation.MyCommand.Definition -Parent

$exe=""
${nodePath || prependPath ? `$pathsep=":"
` : ""}${nodePath ? `$env_node_path=$env:NODE_PATH
$new_node_path="${nodePath}"
` : ""}${prependPath ? `$env_path=$env:PATH
$prepend_path="${prependPath}"
` : ""}if ($PSVersionTable.PSVersion -lt "6.0" -or $IsWindows) {
  # Fix case when both the Windows and Linux builds of Node
  # are installed in the same directory
  $exe=".exe"
${nodePath || prependPath ? `  $pathsep=";"
` : ""}}`;
        if (shNodePath || shPrependPath) {
          pwsh += ` else {
${shNodePath ? `  $new_node_path="${shNodePath}"
` : ""}${shPrependPath ? `  $prepend_path="${shPrependPath}"
` : ""}}
`;
        }
        if (shNodePath) {
          pwsh += `if ([string]::IsNullOrEmpty($env_node_path)) {
  $env:NODE_PATH=$new_node_path
} else {
  $env:NODE_PATH="$env_node_path$pathsep$new_node_path"
}
`;
        }
        if (opts.prependToPath) {
          pwsh += `
$env:PATH="$prepend_path$pathsep$env:PATH"
`;
        }
        if (pwshLongProg) {
          pwsh += `
$ret=0
if (Test-Path ${pwshLongProg}) {
  # Support pipeline input
  if ($MyInvocation.ExpectingInput) {
    $input | & ${pwshLongProg} ${args} ${shTarget} ${progArgs}$args
  } else {
    & ${pwshLongProg} ${args} ${shTarget} ${progArgs}$args
  }
  $ret=$LASTEXITCODE
} else {
  # Support pipeline input
  if ($MyInvocation.ExpectingInput) {
    $input | & ${pwshProg} ${args} ${shTarget} ${progArgs}$args
  } else {
    & ${pwshProg} ${args} ${shTarget} ${progArgs}$args
  }
  $ret=$LASTEXITCODE
}
${nodePath ? `$env:NODE_PATH=$env_node_path
` : ""}${prependPath ? `$env:PATH=$env_path
` : ""}exit $ret
`;
        } else {
          pwsh += `
# Support pipeline input
if ($MyInvocation.ExpectingInput) {
  $input | & ${pwshProg} ${args} ${shTarget} ${progArgs}$args
} else {
  & ${pwshProg} ${args} ${shTarget} ${progArgs}$args
}
${nodePath ? `$env:NODE_PATH=$env_node_path
` : ""}${prependPath ? `$env:PATH=$env_path
` : ""}exit $LASTEXITCODE
`;
        }
        return pwsh;
      }
      function chmodShim(to, opts) {
        return opts.fs_.chmod(to, 493);
      }
      function normalizePathEnvVar(nodePath) {
        if (!nodePath || !nodePath.length) {
          return {
            win32: "",
            posix: ""
          };
        }
        let split = typeof nodePath === "string" ? nodePath.split(path2.delimiter) : Array.from(nodePath);
        let result2 = {};
        for (let i = 0;i < split.length; i++) {
          const win32 = split[i].split("/").join("\\");
          const posix = isWindows() ? split[i].split("\\").join("/").replace(/^([^:\\/]*):/, (_, $1) => `/mnt/${$1.toLowerCase()}`) : split[i];
          result2.win32 = result2.win32 ? `${result2.win32};${win32}` : win32;
          result2.posix = result2.posix ? `${result2.posix}:${posix}` : posix;
          result2[i] = { win32, posix };
        }
        return result2;
      }
      module22.exports = cmdShim;
    }
  });
  var require_NodeModulesLinker = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+plugin-nm@4.0.5_@yarnpkg+cli@4.6.0_@types+react@18.3.18_@yarnpkg+core@4.2.0_typanion_aslqgeyhh5nzufqva72s3gskzm/node_modules/@yarnpkg/plugin-nm/lib/NodeModulesLinker.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.NodeModulesLinker = exports22.NodeModulesMode = undefined;
      exports22.getGlobalHardlinksStore = getGlobalHardlinksStore;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var core_1 = require_lib6();
      var core_2 = require_lib6();
      var core_3 = require_lib6();
      var core_4 = require_lib6();
      var fslib_12 = require_lib();
      var fslib_2 = require_lib();
      var libzip_1 = require_sync7();
      var nm_1 = require_lib7();
      var nm_2 = require_lib7();
      var parsers_1 = require_lib2();
      var plugin_pnp_1 = require_lib11();
      var cmd_shim_1 = tslib_12.__importDefault(require_cmd_shim());
      var clipanion_12 = require_advanced();
      var crypto_1 = tslib_12.__importDefault(__require("crypto"));
      var fs_1 = tslib_12.__importDefault(__require("fs"));
      var STATE_FILE_VERSION = 1;
      var NODE_MODULES = `node_modules`;
      var DOT_BIN = `.bin`;
      var INSTALL_STATE_FILE = `.yarn-state.yml`;
      var MTIME_ACCURANCY = 1000;
      var NodeModulesMode;
      (function(NodeModulesMode2) {
        NodeModulesMode2["CLASSIC"] = "classic";
        NodeModulesMode2["HARDLINKS_LOCAL"] = "hardlinks-local";
        NodeModulesMode2["HARDLINKS_GLOBAL"] = "hardlinks-global";
      })(NodeModulesMode || (exports22.NodeModulesMode = NodeModulesMode = {}));
      var NodeModulesLinker = class {
        constructor() {
          this.installStateCache = /* @__PURE__ */ new Map;
        }
        getCustomDataKey() {
          return JSON.stringify({
            name: `NodeModulesLinker`,
            version: 3
          });
        }
        supportsPackage(pkg, opts) {
          return this.isEnabled(opts);
        }
        async findPackageLocation(locator, opts) {
          if (!this.isEnabled(opts))
            throw new Error(`Assertion failed: Expected the node-modules linker to be enabled`);
          const workspace = opts.project.tryWorkspaceByLocator(locator);
          if (workspace)
            return workspace.cwd;
          const installState = await core_1.miscUtils.getFactoryWithDefault(this.installStateCache, opts.project.cwd, async () => {
            return await findInstallState(opts.project, { unrollAliases: true });
          });
          if (installState === null)
            throw new clipanion_12.UsageError(`Couldn't find the node_modules state file - running an install might help (findPackageLocation)`);
          const locatorInfo = installState.locatorMap.get(core_1.structUtils.stringifyLocator(locator));
          if (!locatorInfo) {
            const err = new clipanion_12.UsageError(`Couldn't find ${core_1.structUtils.prettyLocator(opts.project.configuration, locator)} in the currently installed node_modules map - running an install might help`);
            err.code = `LOCATOR_NOT_INSTALLED`;
            throw err;
          }
          const sortedLocations = locatorInfo.locations.sort((loc1, loc2) => loc1.split(fslib_12.ppath.sep).length - loc2.split(fslib_12.ppath.sep).length);
          const startingCwdModules = fslib_12.ppath.join(opts.project.configuration.startingCwd, NODE_MODULES);
          return sortedLocations.find((location) => fslib_12.ppath.contains(startingCwdModules, location)) || locatorInfo.locations[0];
        }
        async findPackageLocator(location, opts) {
          if (!this.isEnabled(opts))
            return null;
          const installState = await core_1.miscUtils.getFactoryWithDefault(this.installStateCache, opts.project.cwd, async () => {
            return await findInstallState(opts.project, { unrollAliases: true });
          });
          if (installState === null)
            return null;
          const { locationRoot, segments } = parseLocation(fslib_12.ppath.resolve(location), { skipPrefix: opts.project.cwd });
          let locationNode = installState.locationTree.get(locationRoot);
          if (!locationNode)
            return null;
          let locator = locationNode.locator;
          for (const segment of segments) {
            locationNode = locationNode.children.get(segment);
            if (!locationNode)
              break;
            locator = locationNode.locator || locator;
          }
          return core_1.structUtils.parseLocator(locator);
        }
        makeInstaller(opts) {
          return new NodeModulesInstaller(opts);
        }
        isEnabled(opts) {
          return opts.project.configuration.get(`nodeLinker`) === `node-modules`;
        }
      };
      exports22.NodeModulesLinker = NodeModulesLinker;
      var NodeModulesInstaller = class {
        constructor(opts) {
          this.opts = opts;
          this.localStore = /* @__PURE__ */ new Map;
          this.realLocatorChecksums = /* @__PURE__ */ new Map;
          this.customData = {
            store: /* @__PURE__ */ new Map
          };
        }
        attachCustomData(customData) {
          this.customData = customData;
        }
        async installPackage(pkg, fetchResult) {
          const packageLocation = fslib_12.ppath.resolve(fetchResult.packageFs.getRealPath(), fetchResult.prefixPath);
          let customPackageData = this.customData.store.get(pkg.locatorHash);
          if (typeof customPackageData === `undefined`) {
            customPackageData = await extractCustomPackageData(pkg, fetchResult);
            if (pkg.linkType === core_3.LinkType.HARD) {
              this.customData.store.set(pkg.locatorHash, customPackageData);
            }
          }
          if (!core_1.structUtils.isPackageCompatible(pkg, this.opts.project.configuration.getSupportedArchitectures()))
            return { packageLocation: null, buildRequest: null };
          const packageDependencies = /* @__PURE__ */ new Map;
          const packagePeers = /* @__PURE__ */ new Set;
          if (!packageDependencies.has(core_1.structUtils.stringifyIdent(pkg)))
            packageDependencies.set(core_1.structUtils.stringifyIdent(pkg), pkg.reference);
          let realLocator = pkg;
          if (core_1.structUtils.isVirtualLocator(pkg)) {
            realLocator = core_1.structUtils.devirtualizeLocator(pkg);
            for (const descriptor of pkg.peerDependencies.values()) {
              packageDependencies.set(core_1.structUtils.stringifyIdent(descriptor), null);
              packagePeers.add(core_1.structUtils.stringifyIdent(descriptor));
            }
          }
          const pnpNode = {
            packageLocation: `${fslib_12.npath.fromPortablePath(packageLocation)}/`,
            packageDependencies,
            packagePeers,
            linkType: pkg.linkType,
            discardFromLookup: fetchResult.discardFromLookup ?? false
          };
          this.localStore.set(pkg.locatorHash, {
            pkg,
            customPackageData,
            dependencyMeta: this.opts.project.getDependencyMeta(pkg, pkg.version),
            pnpNode
          });
          const checksum = fetchResult.checksum ? fetchResult.checksum.substring(fetchResult.checksum.indexOf(`/`) + 1) : null;
          this.realLocatorChecksums.set(realLocator.locatorHash, checksum);
          return {
            packageLocation,
            buildRequest: null
          };
        }
        async attachInternalDependencies(locator, dependencies) {
          const slot = this.localStore.get(locator.locatorHash);
          if (typeof slot === `undefined`)
            throw new Error(`Assertion failed: Expected information object to have been registered`);
          for (const [descriptor, locator2] of dependencies) {
            const target = !core_1.structUtils.areIdentsEqual(descriptor, locator2) ? [core_1.structUtils.stringifyIdent(locator2), locator2.reference] : locator2.reference;
            slot.pnpNode.packageDependencies.set(core_1.structUtils.stringifyIdent(descriptor), target);
          }
        }
        async attachExternalDependents(locator, dependentPaths) {
          throw new Error(`External dependencies haven't been implemented for the node-modules linker`);
        }
        async finalizeInstall() {
          if (this.opts.project.configuration.get(`nodeLinker`) !== `node-modules`)
            return;
          const defaultFsLayer = new fslib_2.VirtualFS({
            baseFs: new libzip_1.ZipOpenFS({
              maxOpenFiles: 80,
              readOnlyArchives: true
            })
          });
          let preinstallState = await findInstallState(this.opts.project);
          const nmModeSetting = this.opts.project.configuration.get(`nmMode`);
          if (preinstallState === null || nmModeSetting !== preinstallState.nmMode) {
            this.opts.project.storedBuildState.clear();
            preinstallState = { locatorMap: /* @__PURE__ */ new Map, binSymlinks: /* @__PURE__ */ new Map, locationTree: /* @__PURE__ */ new Map, nmMode: nmModeSetting, mtimeMs: 0 };
          }
          const hoistingLimitsByCwd = new Map(this.opts.project.workspaces.map((workspace) => {
            let hoistingLimits = this.opts.project.configuration.get(`nmHoistingLimits`);
            try {
              hoistingLimits = core_1.miscUtils.validateEnum(nm_2.NodeModulesHoistingLimits, workspace.manifest.installConfig?.hoistingLimits ?? hoistingLimits);
            } catch (e) {
              const workspaceName = core_1.structUtils.prettyWorkspace(this.opts.project.configuration, workspace);
              this.opts.report.reportWarning(core_4.MessageName.INVALID_MANIFEST, `${workspaceName}: Invalid 'installConfig.hoistingLimits' value. Expected one of ${Object.values(nm_2.NodeModulesHoistingLimits).join(`, `)}, using default: "${hoistingLimits}"`);
            }
            return [workspace.relativeCwd, hoistingLimits];
          }));
          const selfReferencesByCwd = new Map(this.opts.project.workspaces.map((workspace) => {
            let selfReferences = this.opts.project.configuration.get(`nmSelfReferences`);
            selfReferences = workspace.manifest.installConfig?.selfReferences ?? selfReferences;
            return [workspace.relativeCwd, selfReferences];
          }));
          const pnpApi = {
            VERSIONS: {
              std: 1
            },
            topLevel: {
              name: null,
              reference: null
            },
            getLocator: (name, referencish) => {
              if (Array.isArray(referencish)) {
                return { name: referencish[0], reference: referencish[1] };
              } else {
                return { name, reference: referencish };
              }
            },
            getDependencyTreeRoots: () => {
              return this.opts.project.workspaces.map((workspace) => {
                const anchoredLocator = workspace.anchoredLocator;
                return { name: core_1.structUtils.stringifyIdent(anchoredLocator), reference: anchoredLocator.reference };
              });
            },
            getPackageInformation: (pnpLocator) => {
              const locator = pnpLocator.reference === null ? this.opts.project.topLevelWorkspace.anchoredLocator : core_1.structUtils.makeLocator(core_1.structUtils.parseIdent(pnpLocator.name), pnpLocator.reference);
              const slot = this.localStore.get(locator.locatorHash);
              if (typeof slot === `undefined`)
                throw new Error(`Assertion failed: Expected the package reference to have been registered`);
              return slot.pnpNode;
            },
            findPackageLocator: (location) => {
              const workspace = this.opts.project.tryWorkspaceByCwd(fslib_12.npath.toPortablePath(location));
              if (workspace !== null) {
                const anchoredLocator = workspace.anchoredLocator;
                return { name: core_1.structUtils.stringifyIdent(anchoredLocator), reference: anchoredLocator.reference };
              }
              throw new Error(`Assertion failed: Unimplemented`);
            },
            resolveToUnqualified: () => {
              throw new Error(`Assertion failed: Unimplemented`);
            },
            resolveUnqualified: () => {
              throw new Error(`Assertion failed: Unimplemented`);
            },
            resolveRequest: () => {
              throw new Error(`Assertion failed: Unimplemented`);
            },
            resolveVirtual: (path2) => {
              return fslib_12.npath.fromPortablePath(fslib_2.VirtualFS.resolveVirtual(fslib_12.npath.toPortablePath(path2)));
            }
          };
          const { tree, errors, preserveSymlinksRequired } = (0, nm_1.buildNodeModulesTree)(pnpApi, { pnpifyFs: false, validateExternalSoftLinks: true, hoistingLimitsByCwd, project: this.opts.project, selfReferencesByCwd });
          if (!tree) {
            for (const { messageName, text } of errors)
              this.opts.report.reportError(messageName, text);
            return;
          }
          const locatorMap = (0, nm_2.buildLocatorMap)(tree);
          await persistNodeModules(preinstallState, locatorMap, {
            baseFs: defaultFsLayer,
            project: this.opts.project,
            report: this.opts.report,
            realLocatorChecksums: this.realLocatorChecksums,
            loadManifest: async (locatorKey) => {
              const locator = core_1.structUtils.parseLocator(locatorKey);
              const slot = this.localStore.get(locator.locatorHash);
              if (typeof slot === `undefined`)
                throw new Error(`Assertion failed: Expected the slot to exist`);
              return slot.customPackageData.manifest;
            }
          });
          const installStatuses = [];
          for (const [locatorKey, installRecord] of locatorMap.entries()) {
            if (isLinkLocator(locatorKey))
              continue;
            const locator = core_1.structUtils.parseLocator(locatorKey);
            const slot = this.localStore.get(locator.locatorHash);
            if (typeof slot === `undefined`)
              throw new Error(`Assertion failed: Expected the slot to exist`);
            if (this.opts.project.tryWorkspaceByLocator(slot.pkg))
              continue;
            const buildRequest = plugin_pnp_1.jsInstallUtils.extractBuildRequest(slot.pkg, slot.customPackageData, slot.dependencyMeta, { configuration: this.opts.project.configuration });
            if (!buildRequest)
              continue;
            installStatuses.push({
              buildLocations: installRecord.locations,
              locator,
              buildRequest
            });
          }
          if (preserveSymlinksRequired)
            this.opts.report.reportWarning(core_4.MessageName.NM_PRESERVE_SYMLINKS_REQUIRED, `The application uses portals and that's why ${core_1.formatUtils.pretty(this.opts.project.configuration, `--preserve-symlinks`, core_1.formatUtils.Type.CODE)} Node option is required for launching it`);
          return {
            customData: this.customData,
            records: installStatuses
          };
        }
      };
      async function extractCustomPackageData(pkg, fetchResult) {
        const manifest = await core_1.Manifest.tryFind(fetchResult.prefixPath, { baseFs: fetchResult.packageFs }) ?? new core_1.Manifest;
        const preservedScripts = /* @__PURE__ */ new Set([`preinstall`, `install`, `postinstall`]);
        for (const scriptName of manifest.scripts.keys())
          if (!preservedScripts.has(scriptName))
            manifest.scripts.delete(scriptName);
        return {
          manifest: {
            bin: manifest.bin,
            scripts: manifest.scripts
          },
          misc: {
            hasBindingGyp: plugin_pnp_1.jsInstallUtils.hasBindingGyp(fetchResult)
          }
        };
      }
      async function writeInstallState(project, locatorMap, binSymlinks, nmMode, { installChangedByUser }) {
        let locatorState = ``;
        locatorState += `# Warning: This file is automatically generated. Removing it is fine, but will
`;
        locatorState += `# cause your node_modules installation to become invalidated.
`;
        locatorState += `
`;
        locatorState += `__metadata:
`;
        locatorState += `  version: ${STATE_FILE_VERSION}
`;
        locatorState += `  nmMode: ${nmMode.value}
`;
        const locators = Array.from(locatorMap.keys()).sort();
        const topLevelLocator = core_1.structUtils.stringifyLocator(project.topLevelWorkspace.anchoredLocator);
        for (const locator of locators) {
          const installRecord = locatorMap.get(locator);
          locatorState += `
`;
          locatorState += `${JSON.stringify(locator)}:
`;
          locatorState += `  locations:
`;
          for (const location of installRecord.locations) {
            const internalPath = fslib_12.ppath.contains(project.cwd, location);
            if (internalPath === null)
              throw new Error(`Assertion failed: Expected the path to be within the project (${location})`);
            locatorState += `    - ${JSON.stringify(internalPath)}
`;
          }
          if (installRecord.aliases.length > 0) {
            locatorState += `  aliases:
`;
            for (const alias of installRecord.aliases) {
              locatorState += `    - ${JSON.stringify(alias)}
`;
            }
          }
          if (locator === topLevelLocator && binSymlinks.size > 0) {
            locatorState += `  bin:
`;
            for (const [location, symlinks] of binSymlinks) {
              const internalPath = fslib_12.ppath.contains(project.cwd, location);
              if (internalPath === null)
                throw new Error(`Assertion failed: Expected the path to be within the project (${location})`);
              locatorState += `    ${JSON.stringify(internalPath)}:
`;
              for (const [name, target] of symlinks) {
                const relativePath = fslib_12.ppath.relative(fslib_12.ppath.join(location, NODE_MODULES), target);
                locatorState += `      ${JSON.stringify(name)}: ${JSON.stringify(relativePath)}
`;
              }
            }
          }
        }
        const rootPath = project.cwd;
        const installStatePath = fslib_12.ppath.join(rootPath, NODE_MODULES, INSTALL_STATE_FILE);
        if (installChangedByUser)
          await fslib_2.xfs.removePromise(installStatePath);
        await fslib_2.xfs.changeFilePromise(installStatePath, locatorState, {
          automaticNewlines: true
        });
      }
      async function findInstallState(project, { unrollAliases = false } = {}) {
        const rootPath = project.cwd;
        const installStatePath = fslib_12.ppath.join(rootPath, NODE_MODULES, INSTALL_STATE_FILE);
        let stats;
        try {
          stats = await fslib_2.xfs.statPromise(installStatePath);
        } catch (e) {
        }
        if (!stats)
          return null;
        const locatorState = (0, parsers_1.parseSyml)(await fslib_2.xfs.readFilePromise(installStatePath, `utf8`));
        if (locatorState.__metadata.version > STATE_FILE_VERSION)
          return null;
        const nmMode = locatorState.__metadata.nmMode || NodeModulesMode.CLASSIC;
        const locatorMap = /* @__PURE__ */ new Map;
        const binSymlinks = /* @__PURE__ */ new Map;
        delete locatorState.__metadata;
        for (const [locatorStr, installRecord] of Object.entries(locatorState)) {
          const locations = installRecord.locations.map((location) => {
            return fslib_12.ppath.join(rootPath, location);
          });
          const recordSymlinks = installRecord.bin;
          if (recordSymlinks) {
            for (const [relativeLocation, locationSymlinks] of Object.entries(recordSymlinks)) {
              const location = fslib_12.ppath.join(rootPath, fslib_12.npath.toPortablePath(relativeLocation));
              const symlinks = core_1.miscUtils.getMapWithDefault(binSymlinks, location);
              for (const [name, target] of Object.entries(locationSymlinks)) {
                symlinks.set(name, fslib_12.npath.toPortablePath([location, NODE_MODULES, target].join(fslib_12.ppath.sep)));
              }
            }
          }
          locatorMap.set(locatorStr, {
            target: fslib_12.PortablePath.dot,
            linkType: core_3.LinkType.HARD,
            locations,
            aliases: installRecord.aliases || []
          });
          if (unrollAliases && installRecord.aliases) {
            for (const reference of installRecord.aliases) {
              const { scope, name } = core_1.structUtils.parseLocator(locatorStr);
              const alias = core_1.structUtils.makeLocator(core_1.structUtils.makeIdent(scope, name), reference);
              const aliasStr = core_1.structUtils.stringifyLocator(alias);
              locatorMap.set(aliasStr, {
                target: fslib_12.PortablePath.dot,
                linkType: core_3.LinkType.HARD,
                locations,
                aliases: []
              });
            }
          }
        }
        return { locatorMap, binSymlinks, locationTree: buildLocationTree(locatorMap, { skipPrefix: project.cwd }), nmMode, mtimeMs: stats.mtimeMs };
      }
      var removeDir = async (dir, options) => {
        if (dir.split(fslib_12.ppath.sep).indexOf(NODE_MODULES) < 0)
          throw new Error(`Assertion failed: trying to remove dir that doesn't contain node_modules: ${dir}`);
        try {
          let dirStats;
          if (!options.innerLoop) {
            dirStats = await fslib_2.xfs.lstatPromise(dir);
            if (!dirStats.isDirectory() && !dirStats.isSymbolicLink() || dirStats.isSymbolicLink() && !options.isWorkspaceDir) {
              await fslib_2.xfs.unlinkPromise(dir);
              return;
            }
          }
          const entries = await fslib_2.xfs.readdirPromise(dir, { withFileTypes: true });
          for (const entry of entries) {
            const targetPath = fslib_12.ppath.join(dir, entry.name);
            if (entry.isDirectory()) {
              if (entry.name !== NODE_MODULES || options && options.innerLoop) {
                await removeDir(targetPath, { innerLoop: true, contentsOnly: false });
              }
            } else {
              await fslib_2.xfs.unlinkPromise(targetPath);
            }
          }
          const isExternalWorkspaceSymlink = !options.innerLoop && options.isWorkspaceDir && dirStats?.isSymbolicLink();
          if (!options.contentsOnly && !isExternalWorkspaceSymlink) {
            await fslib_2.xfs.rmdirPromise(dir);
          }
        } catch (e) {
          if (e.code !== `ENOENT` && e.code !== `ENOTEMPTY`) {
            throw e;
          }
        }
      };
      var CONCURRENT_OPERATION_LIMIT = 4;
      var parseLocation = (location, { skipPrefix }) => {
        const projectRelativePath = fslib_12.ppath.contains(skipPrefix, location);
        if (projectRelativePath === null)
          throw new Error(`Assertion failed: Writing attempt prevented to ${location} which is outside project root: ${skipPrefix}`);
        const allSegments = projectRelativePath.split(fslib_12.ppath.sep).filter((segment) => segment !== ``);
        const nmIndex = allSegments.indexOf(NODE_MODULES);
        const relativeRoot = allSegments.slice(0, nmIndex).join(fslib_12.ppath.sep);
        const locationRoot = fslib_12.ppath.join(skipPrefix, relativeRoot);
        const segments = allSegments.slice(nmIndex);
        return { locationRoot, segments };
      };
      var buildLocationTree = (locatorMap, { skipPrefix }) => {
        const locationTree = /* @__PURE__ */ new Map;
        if (locatorMap === null)
          return locationTree;
        const makeNode = () => ({
          children: /* @__PURE__ */ new Map,
          linkType: core_3.LinkType.HARD
        });
        for (const [locator, info] of locatorMap.entries()) {
          if (info.linkType === core_3.LinkType.SOFT) {
            const internalPath = fslib_12.ppath.contains(skipPrefix, info.target);
            if (internalPath !== null) {
              const node = core_1.miscUtils.getFactoryWithDefault(locationTree, info.target, makeNode);
              node.locator = locator;
              node.linkType = info.linkType;
            }
          }
          for (const location of info.locations) {
            const { locationRoot, segments } = parseLocation(location, { skipPrefix });
            let node = core_1.miscUtils.getFactoryWithDefault(locationTree, locationRoot, makeNode);
            for (let idx = 0;idx < segments.length; ++idx) {
              const segment = segments[idx];
              if (segment !== `.`) {
                const nextNode = core_1.miscUtils.getFactoryWithDefault(node.children, segment, makeNode);
                node.children.set(segment, nextNode);
                node = nextNode;
              }
              if (idx === segments.length - 1) {
                node.locator = locator;
                node.linkType = info.linkType;
              }
            }
          }
        }
        return locationTree;
      };
      var symlinkPromise = async (srcPath, dstPath, windowsLinkType) => {
        if (process.platform === `win32` && windowsLinkType === core_3.WindowsLinkType.JUNCTIONS) {
          let stats;
          try {
            stats = await fslib_2.xfs.lstatPromise(srcPath);
          } catch (e) {
          }
          if (!stats || stats.isDirectory()) {
            await fslib_2.xfs.symlinkPromise(srcPath, dstPath, `junction`);
            return;
          }
        }
        await fslib_2.xfs.symlinkPromise(fslib_12.ppath.relative(fslib_12.ppath.dirname(dstPath), srcPath), dstPath);
      };
      async function atomicFileWrite(tmpDir, dstPath, content) {
        const tmpPath = fslib_12.ppath.join(tmpDir, `${crypto_1.default.randomBytes(16).toString(`hex`)}.tmp`);
        try {
          await fslib_2.xfs.writeFilePromise(tmpPath, content);
          try {
            await fslib_2.xfs.linkPromise(tmpPath, dstPath);
          } catch (e) {
          }
        } finally {
          await fslib_2.xfs.unlinkPromise(tmpPath);
        }
      }
      async function copyFilePromise({ srcPath, dstPath, entry, globalHardlinksStore, baseFs, nmMode }) {
        if (entry.kind === DirEntryKind.FILE) {
          if (nmMode.value === NodeModulesMode.HARDLINKS_GLOBAL && globalHardlinksStore && entry.digest) {
            const contentFilePath = fslib_12.ppath.join(globalHardlinksStore, entry.digest.substring(0, 2), `${entry.digest.substring(2)}.dat`);
            let doesContentFileExist;
            try {
              const stats = await fslib_2.xfs.statPromise(contentFilePath);
              if (stats && (!entry.mtimeMs || stats.mtimeMs > entry.mtimeMs || stats.mtimeMs < entry.mtimeMs - MTIME_ACCURANCY)) {
                const contentDigest = await core_2.hashUtils.checksumFile(contentFilePath, { baseFs: fslib_2.xfs, algorithm: `sha1` });
                if (contentDigest !== entry.digest) {
                  const tmpPath = fslib_12.ppath.join(globalHardlinksStore, `${crypto_1.default.randomBytes(16).toString(`hex`)}.tmp`);
                  await fslib_2.xfs.renamePromise(contentFilePath, tmpPath);
                  const content = await baseFs.readFilePromise(srcPath);
                  await fslib_2.xfs.writeFilePromise(tmpPath, content);
                  try {
                    await fslib_2.xfs.linkPromise(tmpPath, contentFilePath);
                    entry.mtimeMs = (/* @__PURE__ */ new Date()).getTime();
                    await fslib_2.xfs.unlinkPromise(tmpPath);
                  } catch (e) {
                  }
                } else if (!entry.mtimeMs) {
                  entry.mtimeMs = Math.ceil(stats.mtimeMs);
                }
              }
              await fslib_2.xfs.linkPromise(contentFilePath, dstPath);
              doesContentFileExist = true;
            } catch (e) {
              doesContentFileExist = false;
            }
            if (!doesContentFileExist) {
              const content = await baseFs.readFilePromise(srcPath);
              await atomicFileWrite(globalHardlinksStore, contentFilePath, content);
              entry.mtimeMs = (/* @__PURE__ */ new Date()).getTime();
              try {
                await fslib_2.xfs.linkPromise(contentFilePath, dstPath);
              } catch (e) {
                if (e && e.code && e.code == `EXDEV`) {
                  nmMode.value = NodeModulesMode.HARDLINKS_LOCAL;
                  await baseFs.copyFilePromise(srcPath, dstPath);
                }
              }
            }
          } else {
            await baseFs.copyFilePromise(srcPath, dstPath);
          }
          const mode = entry.mode & 511;
          if (mode !== 420) {
            await fslib_2.xfs.chmodPromise(dstPath, mode);
          }
        }
      }
      var DirEntryKind;
      (function(DirEntryKind2) {
        DirEntryKind2["FILE"] = "file";
        DirEntryKind2["DIRECTORY"] = "directory";
        DirEntryKind2["SYMLINK"] = "symlink";
      })(DirEntryKind || (DirEntryKind = {}));
      var copyPromise = async (dstDir, srcDir, { baseFs, globalHardlinksStore, nmMode, windowsLinkType, packageChecksum }) => {
        await fslib_2.xfs.mkdirPromise(dstDir, { recursive: true });
        const getEntriesRecursive = async (relativePath = fslib_12.PortablePath.dot) => {
          const srcPath = fslib_12.ppath.join(srcDir, relativePath);
          const entries = await baseFs.readdirPromise(srcPath, { withFileTypes: true });
          const entryMap = /* @__PURE__ */ new Map;
          for (const entry of entries) {
            const relativeEntryPath = fslib_12.ppath.join(relativePath, entry.name);
            let entryValue;
            const srcEntryPath = fslib_12.ppath.join(srcPath, entry.name);
            if (entry.isFile()) {
              entryValue = { kind: DirEntryKind.FILE, mode: (await baseFs.lstatPromise(srcEntryPath)).mode };
              if (nmMode.value === NodeModulesMode.HARDLINKS_GLOBAL) {
                const digest = await core_2.hashUtils.checksumFile(srcEntryPath, { baseFs, algorithm: `sha1` });
                entryValue.digest = digest;
              }
            } else if (entry.isDirectory()) {
              entryValue = { kind: DirEntryKind.DIRECTORY };
            } else if (entry.isSymbolicLink()) {
              entryValue = { kind: DirEntryKind.SYMLINK, symlinkTo: await baseFs.readlinkPromise(srcEntryPath) };
            } else {
              throw new Error(`Unsupported file type (file: ${srcEntryPath}, mode: 0o${await baseFs.statSync(srcEntryPath).mode.toString(8).padStart(6, `0`)})`);
            }
            entryMap.set(relativeEntryPath, entryValue);
            if (entry.isDirectory() && relativeEntryPath !== NODE_MODULES) {
              const childEntries = await getEntriesRecursive(relativeEntryPath);
              for (const [childRelativePath, childEntry] of childEntries) {
                entryMap.set(childRelativePath, childEntry);
              }
            }
          }
          return entryMap;
        };
        let allEntries;
        if (nmMode.value === NodeModulesMode.HARDLINKS_GLOBAL && globalHardlinksStore && packageChecksum) {
          const entriesJsonPath = fslib_12.ppath.join(globalHardlinksStore, packageChecksum.substring(0, 2), `${packageChecksum.substring(2)}.json`);
          try {
            allEntries = new Map(Object.entries(JSON.parse(await fslib_2.xfs.readFilePromise(entriesJsonPath, `utf8`))));
          } catch (e) {
            allEntries = await getEntriesRecursive();
          }
        } else {
          allEntries = await getEntriesRecursive();
        }
        let mtimesChanged = false;
        for (const [relativePath, entry] of allEntries) {
          const srcPath = fslib_12.ppath.join(srcDir, relativePath);
          const dstPath = fslib_12.ppath.join(dstDir, relativePath);
          if (entry.kind === DirEntryKind.DIRECTORY) {
            await fslib_2.xfs.mkdirPromise(dstPath, { recursive: true });
          } else if (entry.kind === DirEntryKind.FILE) {
            const originalMtime = entry.mtimeMs;
            await copyFilePromise({ srcPath, dstPath, entry, nmMode, baseFs, globalHardlinksStore });
            if (entry.mtimeMs !== originalMtime) {
              mtimesChanged = true;
            }
          } else if (entry.kind === DirEntryKind.SYMLINK) {
            await symlinkPromise(fslib_12.ppath.resolve(fslib_12.ppath.dirname(dstPath), entry.symlinkTo), dstPath, windowsLinkType);
          }
        }
        if (nmMode.value === NodeModulesMode.HARDLINKS_GLOBAL && globalHardlinksStore && mtimesChanged && packageChecksum) {
          const entriesJsonPath = fslib_12.ppath.join(globalHardlinksStore, packageChecksum.substring(0, 2), `${packageChecksum.substring(2)}.json`);
          await fslib_2.xfs.removePromise(entriesJsonPath);
          await atomicFileWrite(globalHardlinksStore, entriesJsonPath, Buffer.from(JSON.stringify(Object.fromEntries(allEntries))));
        }
      };
      function syncPreinstallStateWithDisk(locationTree, binSymlinks, stateMtimeMs, project) {
        const refinedLocationTree = /* @__PURE__ */ new Map;
        const refinedBinSymlinks = /* @__PURE__ */ new Map;
        const locatorLocations = /* @__PURE__ */ new Map;
        let installChangedByUser = false;
        const syncNodeWithDisk = (parentPath, entry, parentNode, refinedNode, parentDiskEntries) => {
          let doesExistOnDisk = true;
          const entryPath = fslib_12.ppath.join(parentPath, entry);
          let childDiskEntries = /* @__PURE__ */ new Set;
          if (entry === NODE_MODULES || entry.startsWith(`@`)) {
            let stats;
            try {
              stats = fslib_2.xfs.statSync(entryPath);
            } catch (e) {
            }
            doesExistOnDisk = !!stats;
            if (!stats) {
              installChangedByUser = true;
            } else if (stats.mtimeMs > stateMtimeMs) {
              installChangedByUser = true;
              childDiskEntries = new Set(fslib_2.xfs.readdirSync(entryPath));
            } else {
              childDiskEntries = new Set(parentNode.children.get(entry).children.keys());
            }
            const binarySymlinks = binSymlinks.get(parentPath);
            if (binarySymlinks) {
              const binPath = fslib_12.ppath.join(parentPath, NODE_MODULES, DOT_BIN);
              let binStats;
              try {
                binStats = fslib_2.xfs.statSync(binPath);
              } catch (e) {
              }
              if (!binStats) {
                installChangedByUser = true;
              } else if (binStats.mtimeMs > stateMtimeMs) {
                installChangedByUser = true;
                const diskEntries = new Set(fslib_2.xfs.readdirSync(binPath));
                const refinedBinarySymlinks = /* @__PURE__ */ new Map;
                refinedBinSymlinks.set(parentPath, refinedBinarySymlinks);
                for (const [entry2, target] of binarySymlinks) {
                  if (diskEntries.has(entry2)) {
                    refinedBinarySymlinks.set(entry2, target);
                  }
                }
              } else {
                refinedBinSymlinks.set(parentPath, binarySymlinks);
              }
            }
          } else {
            doesExistOnDisk = parentDiskEntries.has(entry);
          }
          const node = parentNode.children.get(entry);
          if (doesExistOnDisk) {
            const { linkType, locator } = node;
            const childRefinedNode = { children: /* @__PURE__ */ new Map, linkType, locator };
            refinedNode.children.set(entry, childRefinedNode);
            if (locator) {
              const locations = core_1.miscUtils.getSetWithDefault(locatorLocations, locator);
              locations.add(entryPath);
              locatorLocations.set(locator, locations);
            }
            for (const childEntry of node.children.keys()) {
              syncNodeWithDisk(entryPath, childEntry, node, childRefinedNode, childDiskEntries);
            }
          } else if (node.locator) {
            project.storedBuildState.delete(core_1.structUtils.parseLocator(node.locator).locatorHash);
          }
        };
        for (const [workspaceRoot, node] of locationTree) {
          const { linkType, locator } = node;
          const refinedNode = { children: /* @__PURE__ */ new Map, linkType, locator };
          refinedLocationTree.set(workspaceRoot, refinedNode);
          if (locator) {
            const locations = core_1.miscUtils.getSetWithDefault(locatorLocations, node.locator);
            locations.add(workspaceRoot);
            locatorLocations.set(node.locator, locations);
          }
          if (node.children.has(NODE_MODULES)) {
            syncNodeWithDisk(workspaceRoot, NODE_MODULES, node, refinedNode, /* @__PURE__ */ new Set);
          }
        }
        return { locationTree: refinedLocationTree, binSymlinks: refinedBinSymlinks, locatorLocations, installChangedByUser };
      }
      function isLinkLocator(locatorKey) {
        let descriptor = core_1.structUtils.parseDescriptor(locatorKey);
        if (core_1.structUtils.isVirtualDescriptor(descriptor))
          descriptor = core_1.structUtils.devirtualizeDescriptor(descriptor);
        return descriptor.range.startsWith(`link:`);
      }
      async function createBinSymlinkMap(installState, locationTree, projectRoot, { loadManifest }) {
        const locatorScriptMap = /* @__PURE__ */ new Map;
        for (const [locatorKey, { locations }] of installState) {
          const manifest = !isLinkLocator(locatorKey) ? await loadManifest(locatorKey, locations[0]) : null;
          const bin = /* @__PURE__ */ new Map;
          if (manifest) {
            for (const [name, value] of manifest.bin) {
              const target = fslib_12.ppath.join(locations[0], value);
              if (value !== `` && fslib_2.xfs.existsSync(target)) {
                bin.set(name, value);
              }
            }
          }
          locatorScriptMap.set(locatorKey, bin);
        }
        const binSymlinks = /* @__PURE__ */ new Map;
        const getBinSymlinks = (location, parentLocatorLocation, node) => {
          const symlinks = /* @__PURE__ */ new Map;
          const internalPath = fslib_12.ppath.contains(projectRoot, location);
          if (node.locator && internalPath !== null) {
            const binScripts = locatorScriptMap.get(node.locator);
            for (const [filename, scriptPath] of binScripts) {
              const symlinkTarget = fslib_12.ppath.join(location, fslib_12.npath.toPortablePath(scriptPath));
              symlinks.set(filename, symlinkTarget);
            }
            for (const [childLocation, childNode] of node.children) {
              const absChildLocation = fslib_12.ppath.join(location, childLocation);
              const childSymlinks = getBinSymlinks(absChildLocation, absChildLocation, childNode);
              if (childSymlinks.size > 0) {
                binSymlinks.set(location, new Map([...binSymlinks.get(location) || /* @__PURE__ */ new Map, ...childSymlinks]));
              }
            }
          } else {
            for (const [childLocation, childNode] of node.children) {
              const childSymlinks = getBinSymlinks(fslib_12.ppath.join(location, childLocation), parentLocatorLocation, childNode);
              for (const [name, symlinkTarget] of childSymlinks) {
                symlinks.set(name, symlinkTarget);
              }
            }
          }
          return symlinks;
        };
        for (const [location, node] of locationTree) {
          const symlinks = getBinSymlinks(location, location, node);
          if (symlinks.size > 0) {
            binSymlinks.set(location, new Map([...binSymlinks.get(location) || /* @__PURE__ */ new Map, ...symlinks]));
          }
        }
        return binSymlinks;
      }
      var areRealLocatorsEqual = (locatorKey1, locatorKey2) => {
        if (!locatorKey1 || !locatorKey2)
          return locatorKey1 === locatorKey2;
        let locator1 = core_1.structUtils.parseLocator(locatorKey1);
        if (core_1.structUtils.isVirtualLocator(locator1))
          locator1 = core_1.structUtils.devirtualizeLocator(locator1);
        let locator2 = core_1.structUtils.parseLocator(locatorKey2);
        if (core_1.structUtils.isVirtualLocator(locator2))
          locator2 = core_1.structUtils.devirtualizeLocator(locator2);
        return core_1.structUtils.areLocatorsEqual(locator1, locator2);
      };
      function getGlobalHardlinksStore(configuration) {
        return fslib_12.ppath.join(configuration.get(`globalFolder`), `store`);
      }
      async function persistNodeModules(preinstallState, installState, { baseFs, project, report, loadManifest, realLocatorChecksums }) {
        const rootNmDirPath = fslib_12.ppath.join(project.cwd, NODE_MODULES);
        const { locationTree: prevLocationTree, binSymlinks: prevBinSymlinks, locatorLocations: prevLocatorLocations, installChangedByUser } = syncPreinstallStateWithDisk(preinstallState.locationTree, preinstallState.binSymlinks, preinstallState.mtimeMs, project);
        const locationTree = buildLocationTree(installState, { skipPrefix: project.cwd });
        const addQueue = [];
        const addModule = async ({ srcDir, dstDir, linkType, globalHardlinksStore, nmMode: nmMode2, windowsLinkType: windowsLinkType2, packageChecksum }) => {
          const promise = (async () => {
            try {
              if (linkType === core_3.LinkType.SOFT) {
                await fslib_2.xfs.mkdirPromise(fslib_12.ppath.dirname(dstDir), { recursive: true });
                await symlinkPromise(fslib_12.ppath.resolve(srcDir), dstDir, windowsLinkType2);
              } else {
                await copyPromise(dstDir, srcDir, { baseFs, globalHardlinksStore, nmMode: nmMode2, windowsLinkType: windowsLinkType2, packageChecksum });
              }
            } catch (e) {
              e.message = `While persisting ${srcDir} -> ${dstDir} ${e.message}`;
              throw e;
            } finally {
              progress.tick();
            }
          })().then(() => addQueue.splice(addQueue.indexOf(promise), 1));
          addQueue.push(promise);
          if (addQueue.length > CONCURRENT_OPERATION_LIMIT) {
            await Promise.race(addQueue);
          }
        };
        const cloneModule = async (srcDir, dstDir, options) => {
          const promise = (async () => {
            const cloneDir = async (srcDir2, dstDir2, options2) => {
              try {
                if (!options2.innerLoop)
                  await fslib_2.xfs.mkdirPromise(dstDir2, { recursive: true });
                const entries = await fslib_2.xfs.readdirPromise(srcDir2, { withFileTypes: true });
                for (const entry of entries) {
                  if (!options2.innerLoop && entry.name === DOT_BIN)
                    continue;
                  const src = fslib_12.ppath.join(srcDir2, entry.name);
                  const dst = fslib_12.ppath.join(dstDir2, entry.name);
                  if (entry.isDirectory()) {
                    if (entry.name !== NODE_MODULES || options2 && options2.innerLoop) {
                      await fslib_2.xfs.mkdirPromise(dst, { recursive: true });
                      await cloneDir(src, dst, { ...options2, innerLoop: true });
                    }
                  } else {
                    if (nmMode.value === NodeModulesMode.HARDLINKS_LOCAL || nmMode.value === NodeModulesMode.HARDLINKS_GLOBAL) {
                      await fslib_2.xfs.linkPromise(src, dst);
                    } else {
                      await fslib_2.xfs.copyFilePromise(src, dst, fs_1.default.constants.COPYFILE_FICLONE);
                    }
                  }
                }
              } catch (e) {
                if (!options2.innerLoop)
                  e.message = `While cloning ${srcDir2} -> ${dstDir2} ${e.message}`;
                throw e;
              } finally {
                if (!options2.innerLoop) {
                  progress.tick();
                }
              }
            };
            await cloneDir(srcDir, dstDir, options);
          })().then(() => addQueue.splice(addQueue.indexOf(promise), 1));
          addQueue.push(promise);
          if (addQueue.length > CONCURRENT_OPERATION_LIMIT) {
            await Promise.race(addQueue);
          }
        };
        const removeOutdatedDirs = async (location, prevNode, node) => {
          if (!node) {
            if (prevNode.children.has(NODE_MODULES))
              await removeDir(fslib_12.ppath.join(location, NODE_MODULES), { contentsOnly: false });
            const isWorkspaceNmLocation = fslib_12.ppath.basename(location) === NODE_MODULES && prevLocationTree.has(fslib_12.ppath.join(fslib_12.ppath.dirname(location)));
            await removeDir(location, { contentsOnly: location === rootNmDirPath, isWorkspaceDir: isWorkspaceNmLocation });
          } else {
            for (const [segment, prevChildNode] of prevNode.children) {
              const childNode = node.children.get(segment);
              await removeOutdatedDirs(fslib_12.ppath.join(location, segment), prevChildNode, childNode);
            }
          }
        };
        for (const [location, prevNode] of prevLocationTree) {
          const node = locationTree.get(location);
          for (const [segment, prevChildNode] of prevNode.children) {
            if (segment === `.`)
              continue;
            const childNode = node ? node.children.get(segment) : node;
            const dirPath = fslib_12.ppath.join(location, segment);
            await removeOutdatedDirs(dirPath, prevChildNode, childNode);
          }
        }
        const cleanNewDirs = async (location, node, prevNode) => {
          if (!prevNode) {
            if (node.children.has(NODE_MODULES))
              await removeDir(fslib_12.ppath.join(location, NODE_MODULES), { contentsOnly: true });
            const isWorkspaceNmLocation = fslib_12.ppath.basename(location) === NODE_MODULES && locationTree.has(fslib_12.ppath.join(fslib_12.ppath.dirname(location)));
            await removeDir(location, { contentsOnly: node.linkType === core_3.LinkType.HARD, isWorkspaceDir: isWorkspaceNmLocation });
          } else {
            if (!areRealLocatorsEqual(node.locator, prevNode.locator))
              await removeDir(location, { contentsOnly: node.linkType === core_3.LinkType.HARD });
            for (const [segment, childNode] of node.children) {
              const prevChildNode = prevNode.children.get(segment);
              await cleanNewDirs(fslib_12.ppath.join(location, segment), childNode, prevChildNode);
            }
          }
        };
        for (const [location, node] of locationTree) {
          const prevNode = prevLocationTree.get(location);
          for (const [segment, childNode] of node.children) {
            if (segment === `.`)
              continue;
            const prevChildNode = prevNode ? prevNode.children.get(segment) : prevNode;
            await cleanNewDirs(fslib_12.ppath.join(location, segment), childNode, prevChildNode);
          }
        }
        const persistedLocations = /* @__PURE__ */ new Map;
        const addList = [];
        for (const [prevLocator, locations] of prevLocatorLocations) {
          for (const location of locations) {
            const { locationRoot, segments } = parseLocation(location, {
              skipPrefix: project.cwd
            });
            let node = locationTree.get(locationRoot);
            let curLocation = locationRoot;
            if (node) {
              for (const segment of segments) {
                curLocation = fslib_12.ppath.join(curLocation, segment);
                node = node.children.get(segment);
                if (!node) {
                  break;
                }
              }
              if (node) {
                const areLocatorsEqual = areRealLocatorsEqual(node.locator, prevLocator);
                const info = installState.get(node.locator);
                const srcDir = info.target;
                const dstDir = curLocation;
                const linkType = info.linkType;
                if (areLocatorsEqual) {
                  if (!persistedLocations.has(srcDir)) {
                    persistedLocations.set(srcDir, dstDir);
                  }
                } else if (srcDir !== dstDir) {
                  let realLocator = core_1.structUtils.parseLocator(node.locator);
                  if (core_1.structUtils.isVirtualLocator(realLocator))
                    realLocator = core_1.structUtils.devirtualizeLocator(realLocator);
                  addList.push({ srcDir, dstDir, linkType, realLocatorHash: realLocator.locatorHash });
                }
              }
            }
          }
        }
        for (const [locator, { locations }] of installState.entries()) {
          for (const location of locations) {
            const { locationRoot, segments } = parseLocation(location, {
              skipPrefix: project.cwd
            });
            let prevTreeNode = prevLocationTree.get(locationRoot);
            let node = locationTree.get(locationRoot);
            let curLocation = locationRoot;
            const info = installState.get(locator);
            let realLocator = core_1.structUtils.parseLocator(locator);
            if (core_1.structUtils.isVirtualLocator(realLocator))
              realLocator = core_1.structUtils.devirtualizeLocator(realLocator);
            const realLocatorHash = realLocator.locatorHash;
            const srcDir = info.target;
            const dstDir = location;
            if (srcDir === dstDir)
              continue;
            const linkType = info.linkType;
            for (const segment of segments)
              node = node.children.get(segment);
            if (!prevTreeNode) {
              addList.push({ srcDir, dstDir, linkType, realLocatorHash });
            } else {
              for (const segment of segments) {
                curLocation = fslib_12.ppath.join(curLocation, segment);
                prevTreeNode = prevTreeNode.children.get(segment);
                if (!prevTreeNode) {
                  addList.push({ srcDir, dstDir, linkType, realLocatorHash });
                  break;
                }
              }
            }
          }
        }
        const progress = core_1.Report.progressViaCounter(addList.length);
        const reportedProgress = report.reportProgress(progress);
        const nmModeSetting = project.configuration.get(`nmMode`);
        const nmMode = { value: nmModeSetting };
        const windowsLinkType = project.configuration.get(`winLinkType`);
        try {
          const globalHardlinksStore = nmMode.value === NodeModulesMode.HARDLINKS_GLOBAL ? `${getGlobalHardlinksStore(project.configuration)}/v1` : null;
          if (globalHardlinksStore) {
            if (!await fslib_2.xfs.existsPromise(globalHardlinksStore)) {
              await fslib_2.xfs.mkdirpPromise(globalHardlinksStore);
              for (let idx = 0;idx < 256; idx++) {
                await fslib_2.xfs.mkdirPromise(fslib_12.ppath.join(globalHardlinksStore, idx.toString(16).padStart(2, `0`)));
              }
            }
          }
          for (const entry of addList) {
            if (entry.linkType === core_3.LinkType.SOFT || !persistedLocations.has(entry.srcDir)) {
              persistedLocations.set(entry.srcDir, entry.dstDir);
              await addModule({ ...entry, globalHardlinksStore, nmMode, windowsLinkType, packageChecksum: realLocatorChecksums.get(entry.realLocatorHash) || null });
            }
          }
          await Promise.all(addQueue);
          addQueue.length = 0;
          for (const entry of addList) {
            const persistedDir = persistedLocations.get(entry.srcDir);
            if (entry.linkType !== core_3.LinkType.SOFT && entry.dstDir !== persistedDir) {
              await cloneModule(persistedDir, entry.dstDir, { nmMode });
            }
          }
          await Promise.all(addQueue);
          await fslib_2.xfs.mkdirPromise(rootNmDirPath, { recursive: true });
          const binSymlinks = await createBinSymlinkMap(installState, locationTree, project.cwd, { loadManifest });
          await persistBinSymlinks(prevBinSymlinks, binSymlinks, project.cwd, windowsLinkType);
          await writeInstallState(project, installState, binSymlinks, nmMode, { installChangedByUser });
          if (nmModeSetting == NodeModulesMode.HARDLINKS_GLOBAL && nmMode.value == NodeModulesMode.HARDLINKS_LOCAL) {
            report.reportWarningOnce(core_4.MessageName.NM_HARDLINKS_MODE_DOWNGRADED, `'nmMode' has been downgraded to 'hardlinks-local' due to global cache and install folder being on different devices`);
          }
        } finally {
          reportedProgress.stop();
        }
      }
      async function persistBinSymlinks(previousBinSymlinks, binSymlinks, projectCwd, windowsLinkType) {
        for (const location of previousBinSymlinks.keys()) {
          if (fslib_12.ppath.contains(projectCwd, location) === null)
            throw new Error(`Assertion failed. Excepted bin symlink location to be inside project dir, instead it was at ${location}`);
          if (!binSymlinks.has(location)) {
            const binDir = fslib_12.ppath.join(location, NODE_MODULES, DOT_BIN);
            await fslib_2.xfs.removePromise(binDir);
          }
        }
        for (const [location, symlinks] of binSymlinks) {
          if (fslib_12.ppath.contains(projectCwd, location) === null)
            throw new Error(`Assertion failed. Excepted bin symlink location to be inside project dir, instead it was at ${location}`);
          const binDir = fslib_12.ppath.join(location, NODE_MODULES, DOT_BIN);
          const prevSymlinks = previousBinSymlinks.get(location) || /* @__PURE__ */ new Map;
          await fslib_2.xfs.mkdirPromise(binDir, { recursive: true });
          for (const name of prevSymlinks.keys()) {
            if (!symlinks.has(name)) {
              await fslib_2.xfs.removePromise(fslib_12.ppath.join(binDir, name));
              if (process.platform === `win32`) {
                await fslib_2.xfs.removePromise(fslib_12.ppath.join(binDir, `${name}.cmd`));
              }
            }
          }
          for (const [name, target] of symlinks) {
            const prevTarget = prevSymlinks.get(name);
            const symlinkPath = fslib_12.ppath.join(binDir, name);
            if (prevTarget === target)
              continue;
            if (process.platform === `win32`) {
              await (0, cmd_shim_1.default)(fslib_12.npath.fromPortablePath(target), fslib_12.npath.fromPortablePath(symlinkPath), { createPwshFile: false });
            } else {
              await fslib_2.xfs.removePromise(symlinkPath);
              await symlinkPromise(target, symlinkPath, windowsLinkType);
              if (fslib_12.ppath.contains(projectCwd, await fslib_2.xfs.realpathPromise(target)) !== null) {
                await fslib_2.xfs.chmodPromise(target, 493);
              }
            }
          }
        }
      }
    }
  });
  var require_PnpLooseLinker = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+plugin-nm@4.0.5_@yarnpkg+cli@4.6.0_@types+react@18.3.18_@yarnpkg+core@4.2.0_typanion_aslqgeyhh5nzufqva72s3gskzm/node_modules/@yarnpkg/plugin-nm/lib/PnpLooseLinker.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.PnpLooseLinker = undefined;
      var core_1 = require_lib6();
      var fslib_12 = require_lib();
      var libzip_1 = require_sync7();
      var nm_1 = require_lib7();
      var plugin_pnp_1 = require_lib11();
      var pnp_1 = require_lib8();
      var PnpLooseLinker = class extends plugin_pnp_1.PnpLinker {
        constructor() {
          super(...arguments);
          this.mode = `loose`;
        }
        makeInstaller(opts) {
          return new PnpLooseInstaller(opts);
        }
      };
      exports22.PnpLooseLinker = PnpLooseLinker;
      var PnpLooseInstaller = class extends plugin_pnp_1.PnpInstaller {
        constructor() {
          super(...arguments);
          this.mode = `loose`;
        }
        async transformPnpSettings(pnpSettings) {
          const defaultFsLayer = new fslib_12.VirtualFS({
            baseFs: new libzip_1.ZipOpenFS({
              maxOpenFiles: 80,
              readOnlyArchives: true
            })
          });
          const pnp = (0, pnp_1.makeRuntimeApi)(pnpSettings, this.opts.project.cwd, defaultFsLayer);
          const { tree, errors } = (0, nm_1.buildNodeModulesTree)(pnp, { pnpifyFs: false, project: this.opts.project });
          if (!tree) {
            for (const { messageName, text } of errors)
              this.opts.report.reportError(messageName, text);
            return;
          }
          const fallbackPool = /* @__PURE__ */ new Map;
          pnpSettings.fallbackPool = fallbackPool;
          const registerFallback = (name, entry2) => {
            const locator = core_1.structUtils.parseLocator(entry2.locator);
            const identStr = core_1.structUtils.stringifyIdent(locator);
            if (identStr === name) {
              fallbackPool.set(name, locator.reference);
            } else {
              fallbackPool.set(name, [identStr, locator.reference]);
            }
          };
          const root = fslib_12.ppath.join(this.opts.project.cwd, fslib_12.Filename.nodeModules);
          const entry = tree.get(root);
          if (typeof entry === `undefined`)
            return;
          if (`target` in entry)
            throw new Error(`Assertion failed: Expected the root junction point to be a directory`);
          for (const childName of entry.dirList) {
            const childP = fslib_12.ppath.join(root, childName);
            const child = tree.get(childP);
            if (typeof child === `undefined`)
              throw new Error(`Assertion failed: Expected the child to have been registered`);
            if (`target` in child) {
              registerFallback(childName, child);
            } else {
              for (const subChildName of child.dirList) {
                const subChildP = fslib_12.ppath.join(childP, subChildName);
                const subChild = tree.get(subChildP);
                if (typeof subChild === `undefined`)
                  throw new Error(`Assertion failed: Expected the subchild to have been registered`);
                if (`target` in subChild) {
                  registerFallback(`${childName}/${subChildName}`, subChild);
                } else {
                  throw new Error(`Assertion failed: Expected the leaf junction to be a package`);
                }
              }
            }
          }
        }
      };
    }
  });
  var require_lib12 = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+plugin-nm@4.0.5_@yarnpkg+cli@4.6.0_@types+react@18.3.18_@yarnpkg+core@4.2.0_typanion_aslqgeyhh5nzufqva72s3gskzm/node_modules/@yarnpkg/plugin-nm/lib/index.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.PnpLooseLinker = exports22.NodeModulesMode = exports22.NodeModulesLinker = undefined;
      var core_1 = require_lib6();
      var fslib_12 = require_lib();
      var nm_1 = require_lib7();
      var NodeModulesLinker_1 = require_NodeModulesLinker();
      Object.defineProperty(exports22, "NodeModulesLinker", { enumerable: true, get: function() {
        return NodeModulesLinker_1.NodeModulesLinker;
      } });
      Object.defineProperty(exports22, "NodeModulesMode", { enumerable: true, get: function() {
        return NodeModulesLinker_1.NodeModulesMode;
      } });
      var NodeModulesLinker_2 = require_NodeModulesLinker();
      var PnpLooseLinker_1 = require_PnpLooseLinker();
      Object.defineProperty(exports22, "PnpLooseLinker", { enumerable: true, get: function() {
        return PnpLooseLinker_1.PnpLooseLinker;
      } });
      var plugin = {
        hooks: {
          cleanGlobalArtifacts: async (configuration) => {
            const globalHardlinksDirectory = (0, NodeModulesLinker_2.getGlobalHardlinksStore)(configuration);
            await fslib_12.xfs.removePromise(globalHardlinksDirectory);
          }
        },
        configuration: {
          nmHoistingLimits: {
            description: `Prevents packages to be hoisted past specific levels`,
            type: core_1.SettingsType.STRING,
            values: [
              nm_1.NodeModulesHoistingLimits.WORKSPACES,
              nm_1.NodeModulesHoistingLimits.DEPENDENCIES,
              nm_1.NodeModulesHoistingLimits.NONE
            ],
            default: nm_1.NodeModulesHoistingLimits.NONE
          },
          nmMode: {
            description: `Defines in which measure Yarn must use hardlinks and symlinks when generated \`node_modules\` directories.`,
            type: core_1.SettingsType.STRING,
            values: [
              NodeModulesLinker_1.NodeModulesMode.CLASSIC,
              NodeModulesLinker_1.NodeModulesMode.HARDLINKS_LOCAL,
              NodeModulesLinker_1.NodeModulesMode.HARDLINKS_GLOBAL
            ],
            default: NodeModulesLinker_1.NodeModulesMode.CLASSIC
          },
          nmSelfReferences: {
            description: `Defines whether the linker should generate self-referencing symlinks for workspaces.`,
            type: core_1.SettingsType.BOOLEAN,
            default: true
          }
        },
        linkers: [
          NodeModulesLinker_1.NodeModulesLinker,
          PnpLooseLinker_1.PnpLooseLinker
        ]
      };
      exports22.default = plugin;
    }
  });
  var require_constants8 = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+plugin-npm@3.0.1_@yarnpkg+core@4.2.0_typanion@3.14.0__@yarnpkg+plugin-pack@4.0.0_@ya_q46l5sxkt25uytyqx553qmxtby/node_modules/@yarnpkg/plugin-npm/lib/constants.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.PROTOCOL = undefined;
      exports22.PROTOCOL = `npm:`;
    }
  });
  var require_symbols = __commonJS2({
    "../../node_modules/.pnpm/ansi-colors@4.1.3/node_modules/ansi-colors/symbols.js"(exports22, module22) {
      var isHyper = typeof process !== "undefined" && process.env.TERM_PROGRAM === "Hyper";
      var isWindows = typeof process !== "undefined" && process.platform === "win32";
      var isLinux = typeof process !== "undefined" && process.platform === "linux";
      var common = {
        ballotDisabled: "\u2612",
        ballotOff: "\u2610",
        ballotOn: "\u2611",
        bullet: "\u2022",
        bulletWhite: "\u25E6",
        fullBlock: "\u2588",
        heart: "\u2764",
        identicalTo: "\u2261",
        line: "\u2500",
        mark: "\u203B",
        middot: "\xB7",
        minus: "\uFF0D",
        multiplication: "\xD7",
        obelus: "\xF7",
        pencilDownRight: "\u270E",
        pencilRight: "\u270F",
        pencilUpRight: "\u2710",
        percent: "%",
        pilcrow2: "\u2761",
        pilcrow: "\xB6",
        plusMinus: "\xB1",
        question: "?",
        section: "\xA7",
        starsOff: "\u2606",
        starsOn: "\u2605",
        upDownArrow: "\u2195"
      };
      var windows = Object.assign({}, common, {
        check: "\u221A",
        cross: "\xD7",
        ellipsisLarge: "...",
        ellipsis: "...",
        info: "i",
        questionSmall: "?",
        pointer: ">",
        pointerSmall: "\xBB",
        radioOff: "( )",
        radioOn: "(*)",
        warning: "\u203C"
      });
      var other = Object.assign({}, common, {
        ballotCross: "\u2718",
        check: "\u2714",
        cross: "\u2716",
        ellipsisLarge: "\u22EF",
        ellipsis: "\u2026",
        info: "\u2139",
        questionFull: "\uFF1F",
        questionSmall: "\uFE56",
        pointer: isLinux ? "\u25B8" : "\u276F",
        pointerSmall: isLinux ? "\u2023" : "\u203A",
        radioOff: "\u25EF",
        radioOn: "\u25C9",
        warning: "\u26A0"
      });
      module22.exports = isWindows && !isHyper ? windows : other;
      Reflect.defineProperty(module22.exports, "common", { enumerable: false, value: common });
      Reflect.defineProperty(module22.exports, "windows", { enumerable: false, value: windows });
      Reflect.defineProperty(module22.exports, "other", { enumerable: false, value: other });
    }
  });
  var require_ansi_colors = __commonJS2({
    "../../node_modules/.pnpm/ansi-colors@4.1.3/node_modules/ansi-colors/index.js"(exports22, module22) {
      var isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
      var ANSI_REGEX = /[\u001b\u009b][[\]#;?()]*(?:(?:(?:[^\W_]*;?[^\W_]*)\u0007)|(?:(?:[0-9]{1,4}(;[0-9]{0,4})*)?[~0-9=<>cf-nqrtyA-PRZ]))/g;
      var hasColor = () => {
        if (typeof process !== "undefined") {
          return process.env.FORCE_COLOR !== "0";
        }
        return false;
      };
      var create = () => {
        const colors = {
          enabled: hasColor(),
          visible: true,
          styles: {},
          keys: {}
        };
        const ansi = (style2) => {
          let open = style2.open = `\x1B[${style2.codes[0]}m`;
          let close = style2.close = `\x1B[${style2.codes[1]}m`;
          let regex = style2.regex = new RegExp(`\\u001b\\[${style2.codes[1]}m`, "g");
          style2.wrap = (input, newline) => {
            if (input.includes(close))
              input = input.replace(regex, close + open);
            let output = open + input + close;
            return newline ? output.replace(/\r*\n/g, `${close}$&${open}`) : output;
          };
          return style2;
        };
        const wrap = (style2, input, newline) => {
          return typeof style2 === "function" ? style2(input) : style2.wrap(input, newline);
        };
        const style = (input, stack) => {
          if (input === "" || input == null)
            return "";
          if (colors.enabled === false)
            return input;
          if (colors.visible === false)
            return "";
          let str = "" + input;
          let nl = str.includes(`
`);
          let n = stack.length;
          if (n > 0 && stack.includes("unstyle")) {
            stack = [.../* @__PURE__ */ new Set(["unstyle", ...stack])].reverse();
          }
          while (n-- > 0)
            str = wrap(colors.styles[stack[n]], str, nl);
          return str;
        };
        const define2 = (name, codes, type) => {
          colors.styles[name] = ansi({ name, codes });
          let keys = colors.keys[type] || (colors.keys[type] = []);
          keys.push(name);
          Reflect.defineProperty(colors, name, {
            configurable: true,
            enumerable: true,
            set(value) {
              colors.alias(name, value);
            },
            get() {
              let color = (input) => style(input, color.stack);
              Reflect.setPrototypeOf(color, colors);
              color.stack = this.stack ? this.stack.concat(name) : [name];
              return color;
            }
          });
        };
        define2("reset", [0, 0], "modifier");
        define2("bold", [1, 22], "modifier");
        define2("dim", [2, 22], "modifier");
        define2("italic", [3, 23], "modifier");
        define2("underline", [4, 24], "modifier");
        define2("inverse", [7, 27], "modifier");
        define2("hidden", [8, 28], "modifier");
        define2("strikethrough", [9, 29], "modifier");
        define2("black", [30, 39], "color");
        define2("red", [31, 39], "color");
        define2("green", [32, 39], "color");
        define2("yellow", [33, 39], "color");
        define2("blue", [34, 39], "color");
        define2("magenta", [35, 39], "color");
        define2("cyan", [36, 39], "color");
        define2("white", [37, 39], "color");
        define2("gray", [90, 39], "color");
        define2("grey", [90, 39], "color");
        define2("bgBlack", [40, 49], "bg");
        define2("bgRed", [41, 49], "bg");
        define2("bgGreen", [42, 49], "bg");
        define2("bgYellow", [43, 49], "bg");
        define2("bgBlue", [44, 49], "bg");
        define2("bgMagenta", [45, 49], "bg");
        define2("bgCyan", [46, 49], "bg");
        define2("bgWhite", [47, 49], "bg");
        define2("blackBright", [90, 39], "bright");
        define2("redBright", [91, 39], "bright");
        define2("greenBright", [92, 39], "bright");
        define2("yellowBright", [93, 39], "bright");
        define2("blueBright", [94, 39], "bright");
        define2("magentaBright", [95, 39], "bright");
        define2("cyanBright", [96, 39], "bright");
        define2("whiteBright", [97, 39], "bright");
        define2("bgBlackBright", [100, 49], "bgBright");
        define2("bgRedBright", [101, 49], "bgBright");
        define2("bgGreenBright", [102, 49], "bgBright");
        define2("bgYellowBright", [103, 49], "bgBright");
        define2("bgBlueBright", [104, 49], "bgBright");
        define2("bgMagentaBright", [105, 49], "bgBright");
        define2("bgCyanBright", [106, 49], "bgBright");
        define2("bgWhiteBright", [107, 49], "bgBright");
        colors.ansiRegex = ANSI_REGEX;
        colors.hasColor = colors.hasAnsi = (str) => {
          colors.ansiRegex.lastIndex = 0;
          return typeof str === "string" && str !== "" && colors.ansiRegex.test(str);
        };
        colors.alias = (name, color) => {
          let fn = typeof color === "string" ? colors[color] : color;
          if (typeof fn !== "function") {
            throw new TypeError("Expected alias to be the name of an existing color (string) or a function");
          }
          if (!fn.stack) {
            Reflect.defineProperty(fn, "name", { value: name });
            colors.styles[name] = fn;
            fn.stack = [name];
          }
          Reflect.defineProperty(colors, name, {
            configurable: true,
            enumerable: true,
            set(value) {
              colors.alias(name, value);
            },
            get() {
              let color2 = (input) => style(input, color2.stack);
              Reflect.setPrototypeOf(color2, colors);
              color2.stack = this.stack ? this.stack.concat(fn.stack) : fn.stack;
              return color2;
            }
          });
        };
        colors.theme = (custom) => {
          if (!isObject(custom))
            throw new TypeError("Expected theme to be an object");
          for (let name of Object.keys(custom)) {
            colors.alias(name, custom[name]);
          }
          return colors;
        };
        colors.alias("unstyle", (str) => {
          if (typeof str === "string" && str !== "") {
            colors.ansiRegex.lastIndex = 0;
            return str.replace(colors.ansiRegex, "");
          }
          return "";
        });
        colors.alias("noop", (str) => str);
        colors.none = colors.clear = colors.noop;
        colors.stripColor = colors.unstyle;
        colors.symbols = require_symbols();
        colors.define = define2;
        return colors;
      };
      module22.exports = create();
      module22.exports.create = create;
    }
  });
  var require_utils6 = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/utils.js"(exports22) {
      var toString = Object.prototype.toString;
      var colors = require_ansi_colors();
      var onExitCalled = false;
      var onExitCallbacks = /* @__PURE__ */ new Set;
      var complements = {
        yellow: "blue",
        cyan: "red",
        green: "magenta",
        black: "white",
        blue: "yellow",
        red: "cyan",
        magenta: "green",
        white: "black"
      };
      exports22.longest = (arr, prop) => {
        return arr.reduce((a, v) => Math.max(a, prop ? v[prop].length : v.length), 0);
      };
      exports22.hasColor = (str) => !!str && colors.hasColor(str);
      var isObject = exports22.isObject = (val) => {
        return val !== null && typeof val === "object" && !Array.isArray(val);
      };
      exports22.nativeType = (val) => {
        return toString.call(val).slice(8, -1).toLowerCase().replace(/\s/g, "");
      };
      exports22.isAsyncFn = (val) => {
        return exports22.nativeType(val) === "asyncfunction";
      };
      exports22.isPrimitive = (val) => {
        return val != null && typeof val !== "object" && typeof val !== "function";
      };
      exports22.resolve = (context, value, ...rest) => {
        if (typeof value === "function") {
          return value.call(context, ...rest);
        }
        return value;
      };
      exports22.scrollDown = (choices = []) => [...choices.slice(1), choices[0]];
      exports22.scrollUp = (choices = []) => [choices.pop(), ...choices];
      exports22.reorder = (arr = []) => {
        let res = arr.slice();
        res.sort((a, b) => {
          if (a.index > b.index)
            return 1;
          if (a.index < b.index)
            return -1;
          return 0;
        });
        return res;
      };
      exports22.swap = (arr, index, pos) => {
        let len = arr.length;
        let idx = pos === len ? 0 : pos < 0 ? len - 1 : pos;
        let choice = arr[index];
        arr[index] = arr[idx];
        arr[idx] = choice;
      };
      exports22.width = (stream, fallback = 80) => {
        let columns = stream && stream.columns ? stream.columns : fallback;
        if (stream && typeof stream.getWindowSize === "function") {
          columns = stream.getWindowSize()[0];
        }
        if (process.platform === "win32") {
          return columns - 1;
        }
        return columns;
      };
      exports22.height = (stream, fallback = 20) => {
        let rows = stream && stream.rows ? stream.rows : fallback;
        if (stream && typeof stream.getWindowSize === "function") {
          rows = stream.getWindowSize()[1];
        }
        return rows;
      };
      exports22.wordWrap = (str, options = {}) => {
        if (!str)
          return str;
        if (typeof options === "number") {
          options = { width: options };
        }
        let { indent = "", newline = `
` + indent, width = 80 } = options;
        let spaces = (newline + indent).match(/[^\S\n]/g) || [];
        width -= spaces.length;
        let source = `.{1,${width}}([\\s\\u200B]+|$)|[^\\s\\u200B]+?([\\s\\u200B]+|$)`;
        let output = str.trim();
        let regex = new RegExp(source, "g");
        let lines = output.match(regex) || [];
        lines = lines.map((line) => line.replace(/\n$/, ""));
        if (options.padEnd)
          lines = lines.map((line) => line.padEnd(width, " "));
        if (options.padStart)
          lines = lines.map((line) => line.padStart(width, " "));
        return indent + lines.join(newline);
      };
      exports22.unmute = (color) => {
        let name = color.stack.find((n) => colors.keys.color.includes(n));
        if (name) {
          return colors[name];
        }
        let bg = color.stack.find((n) => n.slice(2) === "bg");
        if (bg) {
          return colors[name.slice(2)];
        }
        return (str) => str;
      };
      exports22.pascal = (str) => str ? str[0].toUpperCase() + str.slice(1) : "";
      exports22.inverse = (color) => {
        if (!color || !color.stack)
          return color;
        let name = color.stack.find((n) => colors.keys.color.includes(n));
        if (name) {
          let col = colors["bg" + exports22.pascal(name)];
          return col ? col.black : color;
        }
        let bg = color.stack.find((n) => n.slice(0, 2) === "bg");
        if (bg) {
          return colors[bg.slice(2).toLowerCase()] || color;
        }
        return colors.none;
      };
      exports22.complement = (color) => {
        if (!color || !color.stack)
          return color;
        let name = color.stack.find((n) => colors.keys.color.includes(n));
        let bg = color.stack.find((n) => n.slice(0, 2) === "bg");
        if (name && !bg) {
          return colors[complements[name] || name];
        }
        if (bg) {
          let lower = bg.slice(2).toLowerCase();
          let comp = complements[lower];
          if (!comp)
            return color;
          return colors["bg" + exports22.pascal(comp)] || color;
        }
        return colors.none;
      };
      exports22.meridiem = (date) => {
        let hours = date.getHours();
        let minutes = date.getMinutes();
        let ampm = hours >= 12 ? "pm" : "am";
        hours = hours % 12;
        let hrs = hours === 0 ? 12 : hours;
        let min = minutes < 10 ? "0" + minutes : minutes;
        return hrs + ":" + min + " " + ampm;
      };
      exports22.set = (obj = {}, prop = "", val) => {
        return prop.split(".").reduce((acc, k, i, arr) => {
          let value = arr.length - 1 > i ? acc[k] || {} : val;
          if (!exports22.isObject(value) && i < arr.length - 1)
            value = {};
          return acc[k] = value;
        }, obj);
      };
      exports22.get = (obj = {}, prop = "", fallback) => {
        let value = obj[prop] == null ? prop.split(".").reduce((acc, k) => acc && acc[k], obj) : obj[prop];
        return value == null ? fallback : value;
      };
      exports22.mixin = (target, b) => {
        if (!isObject(target))
          return b;
        if (!isObject(b))
          return target;
        for (let key of Object.keys(b)) {
          let desc = Object.getOwnPropertyDescriptor(b, key);
          if (hasOwnProperty.call(desc, "value")) {
            if (hasOwnProperty.call(target, key) && isObject(desc.value)) {
              let existing = Object.getOwnPropertyDescriptor(target, key);
              if (isObject(existing.value) && existing.value !== desc.value) {
                target[key] = exports22.merge({}, target[key], b[key]);
              } else {
                Reflect.defineProperty(target, key, desc);
              }
            } else {
              Reflect.defineProperty(target, key, desc);
            }
          } else {
            Reflect.defineProperty(target, key, desc);
          }
        }
        return target;
      };
      exports22.merge = (...args) => {
        let target = {};
        for (let ele of args)
          exports22.mixin(target, ele);
        return target;
      };
      exports22.mixinEmitter = (obj, emitter) => {
        let proto = emitter.constructor.prototype;
        for (let key of Object.keys(proto)) {
          let val = proto[key];
          if (typeof val === "function") {
            exports22.define(obj, key, val.bind(emitter));
          } else {
            exports22.define(obj, key, val);
          }
        }
      };
      var onExit = (quit, code) => {
        if (onExitCalled)
          return;
        onExitCalled = true;
        onExitCallbacks.forEach((fn) => fn());
        if (quit === true) {
          process.exit(128 + code);
        }
      };
      var onSigTerm = onExit.bind(null, true, 15);
      var onSigInt = onExit.bind(null, true, 2);
      exports22.onExit = (callback) => {
        if (onExitCallbacks.size === 0) {
          process.once("SIGTERM", onSigTerm);
          process.once("SIGINT", onSigInt);
          process.once("exit", onExit);
        }
        onExitCallbacks.add(callback);
        return () => {
          onExitCallbacks.delete(callback);
          if (onExitCallbacks.size === 0) {
            process.off("SIGTERM", onSigTerm);
            process.off("SIGINT", onSigInt);
            process.off("exit", onExit);
          }
        };
      };
      exports22.define = (obj, key, value) => {
        Reflect.defineProperty(obj, key, { value });
      };
      exports22.defineExport = (obj, key, fn) => {
        let custom;
        Reflect.defineProperty(obj, key, {
          enumerable: true,
          configurable: true,
          set(val) {
            custom = val;
          },
          get() {
            return custom ? custom() : fn();
          }
        });
      };
    }
  });
  var require_combos = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/combos.js"(exports22) {
      exports22.ctrl = {
        a: "first",
        b: "backward",
        c: "cancel",
        d: "deleteForward",
        e: "last",
        f: "forward",
        g: "reset",
        i: "tab",
        k: "cutForward",
        l: "reset",
        n: "newItem",
        m: "cancel",
        j: "submit",
        p: "search",
        r: "remove",
        s: "save",
        u: "undo",
        w: "cutLeft",
        x: "toggleCursor",
        v: "paste"
      };
      exports22.shift = {
        up: "shiftUp",
        down: "shiftDown",
        left: "shiftLeft",
        right: "shiftRight",
        tab: "prev"
      };
      exports22.fn = {
        up: "pageUp",
        down: "pageDown",
        left: "pageLeft",
        right: "pageRight",
        delete: "deleteForward"
      };
      exports22.option = {
        b: "backward",
        f: "forward",
        d: "cutRight",
        left: "cutLeft",
        up: "altUp",
        down: "altDown"
      };
      exports22.keys = {
        pageup: "pageUp",
        pagedown: "pageDown",
        home: "home",
        end: "end",
        cancel: "cancel",
        delete: "deleteForward",
        backspace: "delete",
        down: "down",
        enter: "submit",
        escape: "cancel",
        left: "left",
        space: "space",
        number: "number",
        return: "submit",
        right: "right",
        tab: "next",
        up: "up"
      };
    }
  });
  var require_queue2 = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/queue.js"(exports22, module22) {
      module22.exports = class Queue {
        _queue = [];
        _executing = false;
        _jobRunner = null;
        constructor(jobRunner) {
          this._jobRunner = jobRunner;
        }
        enqueue = (...args) => {
          this._queue.push(args);
          this._dequeue();
        };
        destroy() {
          this._queue.length = 0;
          this._jobRunner = null;
        }
        _dequeue() {
          if (this._executing || !this._queue.length)
            return;
          this._executing = true;
          this._jobRunner(...this._queue.shift());
          setTimeout(() => {
            this._executing = false;
            this._dequeue();
          });
        }
      };
    }
  });
  var require_keypress = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/keypress.js"(exports22, module22) {
      var readline = __require("readline");
      var combos = require_combos();
      var Queue = require_queue2();
      var metaKeyCodeRe = /^(?:\x1b)([a-zA-Z0-9])$/;
      var fnKeyRe = /^(?:\x1b+)(O|N|\[|\[\[)(?:(\d+)(?:;(\d+))?([~^$])|(?:1;)?(\d+)?([a-zA-Z]))/;
      var keyName = {
        OP: "f1",
        OQ: "f2",
        OR: "f3",
        OS: "f4",
        "[11~": "f1",
        "[12~": "f2",
        "[13~": "f3",
        "[14~": "f4",
        "[[A": "f1",
        "[[B": "f2",
        "[[C": "f3",
        "[[D": "f4",
        "[[E": "f5",
        "[15~": "f5",
        "[17~": "f6",
        "[18~": "f7",
        "[19~": "f8",
        "[20~": "f9",
        "[21~": "f10",
        "[23~": "f11",
        "[24~": "f12",
        "[A": "up",
        "[B": "down",
        "[C": "right",
        "[D": "left",
        "[E": "clear",
        "[F": "end",
        "[H": "home",
        OA: "up",
        OB: "down",
        OC: "right",
        OD: "left",
        OE: "clear",
        OF: "end",
        OH: "home",
        "[1~": "home",
        "[2~": "insert",
        "[3~": "delete",
        "[4~": "end",
        "[5~": "pageup",
        "[6~": "pagedown",
        "[[5~": "pageup",
        "[[6~": "pagedown",
        "[7~": "home",
        "[8~": "end",
        "[a": "up",
        "[b": "down",
        "[c": "right",
        "[d": "left",
        "[e": "clear",
        "[2$": "insert",
        "[3$": "delete",
        "[5$": "pageup",
        "[6$": "pagedown",
        "[7$": "home",
        "[8$": "end",
        Oa: "up",
        Ob: "down",
        Oc: "right",
        Od: "left",
        Oe: "clear",
        "[2^": "insert",
        "[3^": "delete",
        "[5^": "pageup",
        "[6^": "pagedown",
        "[7^": "home",
        "[8^": "end",
        "[Z": "tab"
      };
      function isShiftKey(code) {
        return ["[a", "[b", "[c", "[d", "[e", "[2$", "[3$", "[5$", "[6$", "[7$", "[8$", "[Z"].includes(code);
      }
      function isCtrlKey(code) {
        return ["Oa", "Ob", "Oc", "Od", "Oe", "[2^", "[3^", "[5^", "[6^", "[7^", "[8^"].includes(code);
      }
      var keypress = (s = "", event = {}) => {
        let parts;
        let key = {
          name: event.name,
          ctrl: false,
          meta: false,
          shift: false,
          option: false,
          sequence: s,
          raw: s,
          ...event
        };
        if (Buffer.isBuffer(s)) {
          if (s[0] > 127 && s[1] === undefined) {
            s[0] -= 128;
            s = "\x1B" + String(s);
          } else {
            s = String(s);
          }
        } else if (s !== undefined && typeof s !== "string") {
          s = String(s);
        } else if (!s) {
          s = key.sequence || "";
        }
        key.sequence = key.sequence || s || key.name;
        if (s === "\r") {
          key.raw = undefined;
          key.name = "return";
        } else if (s === `
`) {
          key.name = "enter";
        } else if (s === "\t") {
          key.name = "tab";
        } else if (s === "\b" || s === "\x7F" || s === "\x1B\x7F" || s === "\x1B\b") {
          key.name = "backspace";
          key.meta = s.charAt(0) === "\x1B";
        } else if (s === "\x1B" || s === "\x1B\x1B") {
          key.name = "escape";
          key.meta = s.length === 2;
        } else if (s === " " || s === "\x1B ") {
          key.name = "space";
          key.meta = s.length === 2;
        } else if (s <= "\x1A") {
          key.name = String.fromCharCode(s.charCodeAt(0) + 97 - 1);
          key.ctrl = true;
        } else if (s.length === 1 && s >= "0" && s <= "9") {
          key.name = "number";
        } else if (s.length === 1 && s >= "a" && s <= "z") {
          key.name = s;
        } else if (s.length === 1 && s >= "A" && s <= "Z") {
          key.name = s.toLowerCase();
          key.shift = true;
        } else if (parts = metaKeyCodeRe.exec(s)) {
          key.meta = true;
          key.shift = /^[A-Z]$/.test(parts[1]);
        } else if (parts = fnKeyRe.exec(s)) {
          let segs = [...s];
          if (segs[0] === "\x1B" && segs[1] === "\x1B") {
            key.option = true;
          }
          let code = [parts[1], parts[2], parts[4], parts[6]].filter(Boolean).join("");
          let modifier = (parts[3] || parts[5] || 1) - 1;
          key.ctrl = !!(modifier & 4);
          key.meta = !!(modifier & 10);
          key.shift = !!(modifier & 1);
          key.code = code;
          key.name = keyName[code];
          key.shift = isShiftKey(code) || key.shift;
          key.ctrl = isCtrlKey(code) || key.ctrl;
        }
        return key;
      };
      keypress.listen = (options = {}, onKeypress) => {
        let { stdin } = options;
        if (!stdin || stdin !== process.stdin && !stdin.isTTY) {
          throw new Error("Invalid stream passed");
        }
        let rl = readline.createInterface({ terminal: true, input: stdin });
        readline.emitKeypressEvents(stdin, rl);
        const queue = new Queue((buf, key) => onKeypress(buf, keypress(buf, key), rl));
        let isRaw = stdin.isRaw;
        if (stdin.isTTY)
          stdin.setRawMode(true);
        stdin.on("keypress", queue.enqueue);
        rl.resume();
        let off = () => {
          if (stdin.isTTY)
            stdin.setRawMode(isRaw);
          stdin.removeListener("keypress", queue.enqueue);
          queue.destroy();
          rl.pause();
          rl.close();
        };
        return off;
      };
      keypress.action = (buf, key, customActions) => {
        let obj = { ...combos, ...customActions };
        if (key.ctrl) {
          key.action = obj.ctrl[key.name];
          return key;
        }
        if (key.option && obj.option) {
          key.action = obj.option[key.name];
          return key;
        }
        if (key.shift) {
          key.action = obj.shift[key.name];
          return key;
        }
        key.action = obj.keys[key.name];
        return key;
      };
      module22.exports = keypress;
    }
  });
  var require_timer = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/timer.js"(exports22, module22) {
      module22.exports = (prompt) => {
        prompt.timers = prompt.timers || {};
        let timers = prompt.options.timers;
        if (!timers)
          return;
        for (let key of Object.keys(timers)) {
          let opts = timers[key];
          if (typeof opts === "number") {
            opts = { interval: opts };
          }
          create(prompt, key, opts);
        }
      };
      function create(prompt, name, options = {}) {
        let timer = prompt.timers[name] = { name, start: Date.now(), ms: 0, tick: 0 };
        let ms = options.interval || 120;
        timer.frames = options.frames || [];
        timer.loading = true;
        let interval = setInterval(() => {
          timer.ms = Date.now() - timer.start;
          timer.tick++;
          prompt.render();
        }, ms);
        timer.stop = () => {
          timer.loading = false;
          clearInterval(interval);
        };
        Reflect.defineProperty(timer, "interval", { value: interval });
        prompt.once("close", () => timer.stop());
        return timer.stop;
      }
    }
  });
  var require_state = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/state.js"(exports22, module22) {
      var { define: define2, width } = require_utils6();
      var State = class {
        constructor(prompt) {
          let options = prompt.options;
          define2(this, "_prompt", prompt);
          this.type = prompt.type;
          this.name = prompt.name;
          this.message = "";
          this.header = "";
          this.footer = "";
          this.error = "";
          this.hint = "";
          this.input = "";
          this.cursor = 0;
          this.index = 0;
          this.lines = 0;
          this.tick = 0;
          this.prompt = "";
          this.buffer = "";
          this.width = width(options.stdout || process.stdout);
          Object.assign(this, options);
          this.name = this.name || this.message;
          this.message = this.message || this.name;
          this.symbols = prompt.symbols;
          this.styles = prompt.styles;
          this.required = /* @__PURE__ */ new Set;
          this.cancelled = false;
          this.submitted = false;
        }
        clone() {
          let state = { ...this };
          state.status = this.status;
          state.buffer = Buffer.from(state.buffer);
          delete state.clone;
          return state;
        }
        set color(val) {
          this._color = val;
        }
        get color() {
          let styles = this.prompt.styles;
          if (this.cancelled)
            return styles.cancelled;
          if (this.submitted)
            return styles.submitted;
          let color = this._color || styles[this.status];
          return typeof color === "function" ? color : styles.pending;
        }
        set loading(value) {
          this._loading = value;
        }
        get loading() {
          if (typeof this._loading === "boolean")
            return this._loading;
          if (this.loadingChoices)
            return "choices";
          return false;
        }
        get status() {
          if (this.cancelled)
            return "cancelled";
          if (this.submitted)
            return "submitted";
          return "pending";
        }
      };
      module22.exports = State;
    }
  });
  var require_styles = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/styles.js"(exports22, module22) {
      var utils = require_utils6();
      var colors = require_ansi_colors();
      var styles = {
        default: colors.noop,
        noop: colors.noop,
        set inverse(custom) {
          this._inverse = custom;
        },
        get inverse() {
          return this._inverse || utils.inverse(this.primary);
        },
        set complement(custom) {
          this._complement = custom;
        },
        get complement() {
          return this._complement || utils.complement(this.primary);
        },
        primary: colors.cyan,
        success: colors.green,
        danger: colors.magenta,
        strong: colors.bold,
        warning: colors.yellow,
        muted: colors.dim,
        disabled: colors.gray,
        dark: colors.dim.gray,
        underline: colors.underline,
        set info(custom) {
          this._info = custom;
        },
        get info() {
          return this._info || this.primary;
        },
        set em(custom) {
          this._em = custom;
        },
        get em() {
          return this._em || this.primary.underline;
        },
        set heading(custom) {
          this._heading = custom;
        },
        get heading() {
          return this._heading || this.muted.underline;
        },
        set pending(custom) {
          this._pending = custom;
        },
        get pending() {
          return this._pending || this.primary;
        },
        set submitted(custom) {
          this._submitted = custom;
        },
        get submitted() {
          return this._submitted || this.success;
        },
        set cancelled(custom) {
          this._cancelled = custom;
        },
        get cancelled() {
          return this._cancelled || this.danger;
        },
        set typing(custom) {
          this._typing = custom;
        },
        get typing() {
          return this._typing || this.dim;
        },
        set placeholder(custom) {
          this._placeholder = custom;
        },
        get placeholder() {
          return this._placeholder || this.primary.dim;
        },
        set highlight(custom) {
          this._highlight = custom;
        },
        get highlight() {
          return this._highlight || this.inverse;
        }
      };
      styles.merge = (options = {}) => {
        if (options.styles && typeof options.styles.enabled === "boolean") {
          colors.enabled = options.styles.enabled;
        }
        if (options.styles && typeof options.styles.visible === "boolean") {
          colors.visible = options.styles.visible;
        }
        let result2 = utils.merge({}, styles, options.styles);
        delete result2.merge;
        for (let key of Object.keys(colors)) {
          if (!hasOwnProperty.call(result2, key)) {
            Reflect.defineProperty(result2, key, { get: () => colors[key] });
          }
        }
        for (let key of Object.keys(colors.styles)) {
          if (!hasOwnProperty.call(result2, key)) {
            Reflect.defineProperty(result2, key, { get: () => colors[key] });
          }
        }
        return result2;
      };
      module22.exports = styles;
    }
  });
  var require_symbols2 = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/symbols.js"(exports22, module22) {
      var isWindows = process.platform === "win32";
      var colors = require_ansi_colors();
      var utils = require_utils6();
      var symbols = {
        ...colors.symbols,
        upDownDoubleArrow: "\u21D5",
        upDownDoubleArrow2: "\u2B0D",
        upDownArrow: "\u2195",
        asterisk: "*",
        asterism: "\u2042",
        bulletWhite: "\u25E6",
        electricArrow: "\u2301",
        ellipsisLarge: "\u22EF",
        ellipsisSmall: "\u2026",
        fullBlock: "\u2588",
        identicalTo: "\u2261",
        indicator: colors.symbols.check,
        leftAngle: "\u2039",
        mark: "\u203B",
        minus: "\u2212",
        multiplication: "\xD7",
        obelus: "\xF7",
        percent: "%",
        pilcrow: "\xB6",
        pilcrow2: "\u2761",
        pencilUpRight: "\u2710",
        pencilDownRight: "\u270E",
        pencilRight: "\u270F",
        plus: "+",
        plusMinus: "\xB1",
        pointRight: "\u261E",
        rightAngle: "\u203A",
        section: "\xA7",
        hexagon: { off: "\u2B21", on: "\u2B22", disabled: "\u2B22" },
        ballot: { on: "\u2611", off: "\u2610", disabled: "\u2612" },
        stars: { on: "\u2605", off: "\u2606", disabled: "\u2606" },
        folder: { on: "\u25BC", off: "\u25B6", disabled: "\u25B6" },
        prefix: {
          pending: colors.symbols.question,
          submitted: colors.symbols.check,
          cancelled: colors.symbols.cross
        },
        separator: {
          pending: colors.symbols.pointerSmall,
          submitted: colors.symbols.middot,
          cancelled: colors.symbols.middot
        },
        radio: {
          off: isWindows ? "( )" : "\u25EF",
          on: isWindows ? "(*)" : "\u25C9",
          disabled: isWindows ? "(|)" : "\u24BE"
        },
        numbers: ["\u24EA", "\u2460", "\u2461", "\u2462", "\u2463", "\u2464", "\u2465", "\u2466", "\u2467", "\u2468", "\u2469", "\u246A", "\u246B", "\u246C", "\u246D", "\u246E", "\u246F", "\u2470", "\u2471", "\u2472", "\u2473", "\u3251", "\u3252", "\u3253", "\u3254", "\u3255", "\u3256", "\u3257", "\u3258", "\u3259", "\u325A", "\u325B", "\u325C", "\u325D", "\u325E", "\u325F", "\u32B1", "\u32B2", "\u32B3", "\u32B4", "\u32B5", "\u32B6", "\u32B7", "\u32B8", "\u32B9", "\u32BA", "\u32BB", "\u32BC", "\u32BD", "\u32BE", "\u32BF"]
      };
      symbols.merge = (options) => {
        let result2 = utils.merge({}, colors.symbols, symbols, options.symbols);
        delete result2.merge;
        return result2;
      };
      module22.exports = symbols;
    }
  });
  var require_theme = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/theme.js"(exports22, module22) {
      var styles = require_styles();
      var symbols = require_symbols2();
      var utils = require_utils6();
      module22.exports = (prompt) => {
        prompt.options = utils.merge({}, prompt.options.theme, prompt.options);
        prompt.symbols = symbols.merge(prompt.options);
        prompt.styles = styles.merge(prompt.options);
      };
    }
  });
  var require_ansi = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/ansi.js"(exports22, module22) {
      var isTerm = process.env.TERM_PROGRAM === "Apple_Terminal";
      var stripAnsi = require_strip_ansi();
      var utils = require_utils6();
      var ansi = module22.exports = exports22;
      var ESC = "\x1B[";
      var BEL = "\x07";
      var hidden = false;
      var code = ansi.code = {
        bell: BEL,
        beep: BEL,
        beginning: `${ESC}G`,
        down: `${ESC}J`,
        esc: ESC,
        getPosition: `${ESC}6n`,
        hide: `${ESC}?25l`,
        line: `${ESC}2K`,
        lineEnd: `${ESC}K`,
        lineStart: `${ESC}1K`,
        restorePosition: ESC + (isTerm ? "8" : "u"),
        savePosition: ESC + (isTerm ? "7" : "s"),
        screen: `${ESC}2J`,
        show: `${ESC}?25h`,
        up: `${ESC}1J`
      };
      var cursor = ansi.cursor = {
        get hidden() {
          return hidden;
        },
        hide() {
          hidden = true;
          return code.hide;
        },
        show() {
          hidden = false;
          return code.show;
        },
        forward: (count = 1) => `${ESC}${count}C`,
        backward: (count = 1) => `${ESC}${count}D`,
        nextLine: (count = 1) => `${ESC}E`.repeat(count),
        prevLine: (count = 1) => `${ESC}F`.repeat(count),
        up: (count = 1) => count ? `${ESC}${count}A` : "",
        down: (count = 1) => count ? `${ESC}${count}B` : "",
        right: (count = 1) => count ? `${ESC}${count}C` : "",
        left: (count = 1) => count ? `${ESC}${count}D` : "",
        to(x, y) {
          return y ? `${ESC}${y + 1};${x + 1}H` : `${ESC}${x + 1}G`;
        },
        move(x = 0, y = 0) {
          let res = "";
          res += x < 0 ? cursor.left(-x) : x > 0 ? cursor.right(x) : "";
          res += y < 0 ? cursor.up(-y) : y > 0 ? cursor.down(y) : "";
          return res;
        },
        strLen(str) {
          var realLength = 0, len = str.length, charCode = -1;
          for (var i = 0;i < len; i++) {
            charCode = str.charCodeAt(i);
            if (charCode >= 0 && charCode <= 128)
              realLength += 1;
            else
              realLength += 2;
          }
          return realLength;
        },
        restore(state = {}) {
          let { after, cursor: cursor2, initial, input, prompt, size, value } = state;
          initial = utils.isPrimitive(initial) ? String(initial) : "";
          input = utils.isPrimitive(input) ? String(input) : "";
          value = utils.isPrimitive(value) ? String(value) : "";
          if (size) {
            let codes = ansi.cursor.up(size) + ansi.cursor.to(this.strLen(prompt));
            let diff = input.length - cursor2;
            if (diff > 0) {
              codes += ansi.cursor.left(diff);
            }
            return codes;
          }
          if (value || after) {
            let pos = !input && !!initial ? -this.strLen(initial) : -this.strLen(input) + cursor2;
            if (after)
              pos -= this.strLen(after);
            if (input === "" && initial && !prompt.includes(initial)) {
              pos += this.strLen(initial);
            }
            return ansi.cursor.move(pos);
          }
        }
      };
      var erase = ansi.erase = {
        screen: code.screen,
        up: code.up,
        down: code.down,
        line: code.line,
        lineEnd: code.lineEnd,
        lineStart: code.lineStart,
        lines(n) {
          let str = "";
          for (let i = 0;i < n; i++) {
            str += ansi.erase.line + (i < n - 1 ? ansi.cursor.up(1) : "");
          }
          if (n)
            str += ansi.code.beginning;
          return str;
        }
      };
      ansi.clear = (input = "", columns = process.stdout.columns) => {
        if (!columns)
          return erase.line + cursor.to(0);
        let width = (str) => [...stripAnsi(str)].length;
        let lines = input.split(/\r?\n/);
        let rows = 0;
        for (let line of lines) {
          rows += 1 + Math.floor(Math.max(width(line) - 1, 0) / columns);
        }
        return (erase.line + cursor.prevLine()).repeat(rows - 1) + erase.line + cursor.to(0);
      };
    }
  });
  var require_prompt = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/prompt.js"(exports22, module22) {
      var Events = __require("events");
      var stripAnsi = require_strip_ansi();
      var keypress = require_keypress();
      var timer = require_timer();
      var State = require_state();
      var theme = require_theme();
      var utils = require_utils6();
      var ansi = require_ansi();
      var Prompt = class _Prompt extends Events {
        constructor(options = {}) {
          super();
          this.name = options.name;
          this.type = options.type;
          this.options = options;
          theme(this);
          timer(this);
          this.state = new State(this);
          this.initial = [options.initial, options.default].find((v) => v != null);
          this.stdout = options.stdout || process.stdout;
          this.stdin = options.stdin || process.stdin;
          this.scale = options.scale || 1;
          this.term = this.options.term || process.env.TERM_PROGRAM;
          this.margin = margin(this.options.margin);
          this.setMaxListeners(0);
          setOptions(this);
        }
        async keypress(input, event = {}) {
          this.keypressed = true;
          let key = keypress.action(input, keypress(input, event), this.options.actions);
          this.state.keypress = key;
          this.emit("keypress", input, key);
          this.emit("state", this.state.clone());
          const fn = this.options[key.action] || this[key.action] || this.dispatch;
          if (typeof fn === "function") {
            return await fn.call(this, input, key);
          }
          this.alert();
        }
        alert() {
          delete this.state.alert;
          if (this.options.show === false) {
            this.emit("alert");
          } else {
            this.stdout.write(ansi.code.beep);
          }
        }
        cursorHide() {
          this.stdout.write(ansi.cursor.hide());
          const releaseOnExit = utils.onExit(() => this.cursorShow());
          this.on("close", () => {
            this.cursorShow();
            releaseOnExit();
          });
        }
        cursorShow() {
          this.stdout.write(ansi.cursor.show());
        }
        write(str) {
          if (!str)
            return;
          if (this.stdout && this.state.show !== false) {
            this.stdout.write(str);
          }
          this.state.buffer += str;
        }
        clear(lines = 0) {
          let buffer = this.state.buffer;
          this.state.buffer = "";
          if (!buffer && !lines || this.options.show === false)
            return;
          this.stdout.write(ansi.cursor.down(lines) + ansi.clear(buffer, this.width));
        }
        restore() {
          if (this.state.closed || this.options.show === false)
            return;
          let { prompt, after, rest } = this.sections();
          let { cursor, initial = "", input = "", value = "" } = this;
          let size = this.state.size = rest.length;
          let state = { after, cursor, initial, input, prompt, size, value };
          let codes = ansi.cursor.restore(state);
          if (codes) {
            this.stdout.write(codes);
          }
        }
        sections() {
          let { buffer, input, prompt } = this.state;
          prompt = stripAnsi(prompt);
          let buf = stripAnsi(buffer);
          let idx = buf.indexOf(prompt);
          let header = buf.slice(0, idx);
          let rest = buf.slice(idx);
          let lines = rest.split(`
`);
          let first = lines[0];
          let last = lines[lines.length - 1];
          let promptLine = prompt + (input ? " " + input : "");
          let len = promptLine.length;
          let after = len < first.length ? first.slice(len + 1) : "";
          return { header, prompt: first, after, rest: lines.slice(1), last };
        }
        async submit() {
          this.state.submitted = true;
          this.state.validating = true;
          if (this.options.onSubmit) {
            await this.options.onSubmit.call(this, this.name, this.value, this);
          }
          let result2 = this.state.error || await this.validate(this.value, this.state);
          if (result2 !== true) {
            let error = `
` + this.symbols.pointer + " ";
            if (typeof result2 === "string") {
              error += result2.trim();
            } else {
              error += "Invalid input";
            }
            this.state.error = `
` + this.styles.danger(error);
            this.state.submitted = false;
            await this.render();
            await this.alert();
            this.state.validating = false;
            this.state.error = undefined;
            return;
          }
          this.state.validating = false;
          await this.render();
          await this.close();
          this.value = await this.result(this.value);
          this.emit("submit", this.value);
        }
        async cancel(err) {
          this.state.cancelled = this.state.submitted = true;
          await this.render();
          await this.close();
          if (typeof this.options.onCancel === "function") {
            await this.options.onCancel.call(this, this.name, this.value, this);
          }
          this.emit("cancel", await this.error(err));
        }
        async close() {
          this.state.closed = true;
          try {
            let sections = this.sections();
            let lines = Math.ceil(sections.prompt.length / this.width);
            if (sections.rest) {
              this.write(ansi.cursor.down(sections.rest.length));
            }
            this.write(`
`.repeat(lines));
          } catch (err) {
          }
          this.emit("close");
        }
        start() {
          if (!this.stop && this.options.show !== false) {
            this.stop = keypress.listen(this, this.keypress.bind(this));
            this.once("close", this.stop);
            this.emit("start", this);
          }
        }
        async skip() {
          this.skipped = this.options.skip === true;
          if (typeof this.options.skip === "function") {
            this.skipped = await this.options.skip.call(this, this.name, this.value);
          }
          return this.skipped;
        }
        async initialize() {
          let { format, options, result: result2 } = this;
          this.format = () => format.call(this, this.value);
          this.result = () => result2.call(this, this.value);
          if (typeof options.initial === "function") {
            this.initial = await options.initial.call(this, this);
          }
          if (typeof options.onRun === "function") {
            await options.onRun.call(this, this);
          }
          if (typeof options.onSubmit === "function") {
            let onSubmit = options.onSubmit.bind(this);
            let submit = this.submit.bind(this);
            delete this.options.onSubmit;
            this.submit = async () => {
              await onSubmit(this.name, this.value, this);
              return submit();
            };
          }
          await this.start();
          await this.render();
        }
        render() {
          throw new Error("expected prompt to have a custom render method");
        }
        run() {
          return new Promise(async (resolve, reject) => {
            this.once("submit", resolve);
            this.once("cancel", reject);
            if (await this.skip()) {
              this.render = () => {
              };
              return this.submit();
            }
            await this.initialize();
            this.emit("run");
          });
        }
        async element(name, choice, i) {
          let { options, state, symbols, timers } = this;
          let timer2 = timers && timers[name];
          state.timer = timer2;
          let value = options[name] || state[name] || symbols[name];
          let val = choice && choice[name] != null ? choice[name] : await value;
          if (val === "")
            return val;
          let res = await this.resolve(val, state, choice, i);
          if (!res && choice && choice[name]) {
            return this.resolve(value, state, choice, i);
          }
          return res;
        }
        async prefix() {
          let element = await this.element("prefix") || this.symbols;
          let timer2 = this.timers && this.timers.prefix;
          let state = this.state;
          state.timer = timer2;
          if (utils.isObject(element))
            element = element[state.status] || element.pending;
          if (!utils.hasColor(element)) {
            let style = this.styles[state.status] || this.styles.pending;
            return style(element);
          }
          return element;
        }
        async message() {
          let message = await this.element("message");
          if (!utils.hasColor(message)) {
            return this.styles.strong(message);
          }
          return message;
        }
        async separator() {
          let element = await this.element("separator") || this.symbols;
          let timer2 = this.timers && this.timers.separator;
          let state = this.state;
          state.timer = timer2;
          let value = element[state.status] || element.pending || state.separator;
          let ele = await this.resolve(value, state);
          if (utils.isObject(ele))
            ele = ele[state.status] || ele.pending;
          if (!utils.hasColor(ele)) {
            return this.styles.muted(ele);
          }
          return ele;
        }
        async pointer(choice, i) {
          let val = await this.element("pointer", choice, i);
          if (typeof val === "string" && utils.hasColor(val)) {
            return val;
          }
          if (val) {
            let styles = this.styles;
            let focused = this.index === i;
            let style = focused ? styles.primary : (val2) => val2;
            let ele = await this.resolve(val[focused ? "on" : "off"] || val, this.state);
            let styled = !utils.hasColor(ele) ? style(ele) : ele;
            return focused ? styled : " ".repeat(ele.length);
          }
        }
        async indicator(choice, i) {
          let val = await this.element("indicator", choice, i);
          if (typeof val === "string" && utils.hasColor(val)) {
            return val;
          }
          if (val) {
            let styles = this.styles;
            let enabled = choice.enabled === true;
            let style = enabled ? styles.success : styles.dark;
            let ele = val[enabled ? "on" : "off"] || val;
            return !utils.hasColor(ele) ? style(ele) : ele;
          }
          return "";
        }
        body() {
          return null;
        }
        footer() {
          if (this.state.status === "pending") {
            return this.element("footer");
          }
        }
        header() {
          if (this.state.status === "pending") {
            return this.element("header");
          }
        }
        async hint() {
          if (this.state.status === "pending" && !this.isValue(this.state.input)) {
            let hint = await this.element("hint");
            if (!utils.hasColor(hint)) {
              return this.styles.muted(hint);
            }
            return hint;
          }
        }
        error(err) {
          return !this.state.submitted ? err || this.state.error : "";
        }
        format(value) {
          return value;
        }
        result(value) {
          return value;
        }
        validate(value) {
          if (this.options.required === true) {
            return this.isValue(value);
          }
          return true;
        }
        isValue(value) {
          return value != null && value !== "";
        }
        resolve(value, ...args) {
          return utils.resolve(this, value, ...args);
        }
        get base() {
          return _Prompt.prototype;
        }
        get style() {
          return this.styles[this.state.status];
        }
        get height() {
          return this.options.rows || utils.height(this.stdout, 25);
        }
        get width() {
          return this.options.columns || utils.width(this.stdout, 80);
        }
        get size() {
          return { width: this.width, height: this.height };
        }
        set cursor(value) {
          this.state.cursor = value;
        }
        get cursor() {
          return this.state.cursor;
        }
        set input(value) {
          this.state.input = value;
        }
        get input() {
          return this.state.input;
        }
        set value(value) {
          this.state.value = value;
        }
        get value() {
          let { input, value } = this.state;
          let result2 = [value, input].find(this.isValue.bind(this));
          return this.isValue(result2) ? result2 : this.initial;
        }
        static get prompt() {
          return (options) => new this(options).run();
        }
      };
      function setOptions(prompt) {
        let isValidKey = (key) => {
          return prompt[key] === undefined || typeof prompt[key] === "function";
        };
        let ignore = [
          "actions",
          "choices",
          "initial",
          "margin",
          "roles",
          "styles",
          "symbols",
          "theme",
          "timers",
          "value"
        ];
        let ignoreFn = [
          "body",
          "footer",
          "error",
          "header",
          "hint",
          "indicator",
          "message",
          "prefix",
          "separator",
          "skip"
        ];
        for (let key of Object.keys(prompt.options)) {
          if (ignore.includes(key))
            continue;
          if (/^on[A-Z]/.test(key))
            continue;
          let option = prompt.options[key];
          if (typeof option === "function" && isValidKey(key)) {
            if (!ignoreFn.includes(key)) {
              prompt[key] = option.bind(prompt);
            }
          } else if (typeof prompt[key] !== "function") {
            prompt[key] = option;
          }
        }
      }
      function margin(value) {
        if (typeof value === "number") {
          value = [value, value, value, value];
        }
        let arr = [].concat(value || []);
        let pad = (i) => i % 2 === 0 ? `
` : " ";
        let res = [];
        for (let i = 0;i < 4; i++) {
          let char = pad(i);
          if (arr[i]) {
            res.push(char.repeat(arr[i]));
          } else {
            res.push("");
          }
        }
        return res;
      }
      module22.exports = Prompt;
    }
  });
  var require_roles = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/roles.js"(exports22, module22) {
      var utils = require_utils6();
      var roles = {
        default(prompt, choice) {
          return choice;
        },
        checkbox(prompt, choice) {
          throw new Error("checkbox role is not implemented yet");
        },
        editable(prompt, choice) {
          throw new Error("editable role is not implemented yet");
        },
        expandable(prompt, choice) {
          throw new Error("expandable role is not implemented yet");
        },
        heading(prompt, choice) {
          choice.disabled = "";
          choice.indicator = [choice.indicator, " "].find((v) => v != null);
          choice.message = choice.message || "";
          return choice;
        },
        input(prompt, choice) {
          throw new Error("input role is not implemented yet");
        },
        option(prompt, choice) {
          return roles.default(prompt, choice);
        },
        radio(prompt, choice) {
          throw new Error("radio role is not implemented yet");
        },
        separator(prompt, choice) {
          choice.disabled = "";
          choice.indicator = [choice.indicator, " "].find((v) => v != null);
          choice.message = choice.message || prompt.symbols.line.repeat(5);
          return choice;
        },
        spacer(prompt, choice) {
          return choice;
        }
      };
      module22.exports = (name, options = {}) => {
        let role = utils.merge({}, roles, options.roles);
        return role[name] || role.default;
      };
    }
  });
  var require_array4 = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/types/array.js"(exports22, module22) {
      var stripAnsi = require_strip_ansi();
      var Prompt = require_prompt();
      var roles = require_roles();
      var utils = require_utils6();
      var { reorder, scrollUp, scrollDown, isObject, swap } = utils;
      var ArrayPrompt = class extends Prompt {
        constructor(options) {
          super(options);
          this.cursorHide();
          this.maxSelected = options.maxSelected || Infinity;
          this.multiple = options.multiple || false;
          this.initial = options.initial || 0;
          this.delay = options.delay || 0;
          this.longest = 0;
          this.num = "";
        }
        async initialize() {
          if (typeof this.options.initial === "function") {
            this.initial = await this.options.initial.call(this);
          }
          await this.reset(true);
          await super.initialize();
        }
        async reset() {
          let { choices, initial, autofocus, suggest } = this.options;
          this.state._choices = [];
          this.state.choices = [];
          this.choices = await Promise.all(await this.toChoices(choices));
          this.choices.forEach((ch) => ch.enabled = false);
          if (typeof suggest !== "function" && this.selectable.length === 0) {
            throw new Error("At least one choice must be selectable");
          }
          if (isObject(initial))
            initial = Object.keys(initial);
          if (Array.isArray(initial)) {
            if (autofocus != null)
              this.index = this.findIndex(autofocus);
            initial.forEach((v) => this.enable(this.find(v)));
            await this.render();
          } else {
            if (autofocus != null)
              initial = autofocus;
            if (typeof initial === "string")
              initial = this.findIndex(initial);
            if (typeof initial === "number" && initial > -1) {
              this.index = Math.max(0, Math.min(initial, this.choices.length));
              this.enable(this.find(this.index));
            }
          }
          if (this.isDisabled(this.focused)) {
            await this.down();
          }
        }
        async toChoices(value, parent) {
          this.state.loadingChoices = true;
          let choices = [];
          let index = 0;
          let toChoices = async (items, parent2) => {
            if (typeof items === "function")
              items = await items.call(this);
            if (items instanceof Promise)
              items = await items;
            for (let i = 0;i < items.length; i++) {
              let choice = items[i] = await this.toChoice(items[i], index++, parent2);
              choices.push(choice);
              if (choice.choices) {
                await toChoices(choice.choices, choice);
              }
            }
            return choices;
          };
          return toChoices(value, parent).then((choices2) => {
            this.state.loadingChoices = false;
            return choices2;
          });
        }
        async toChoice(ele, i, parent) {
          if (typeof ele === "function")
            ele = await ele.call(this, this);
          if (ele instanceof Promise)
            ele = await ele;
          if (typeof ele === "string")
            ele = { name: ele };
          if (ele.normalized)
            return ele;
          ele.normalized = true;
          let origVal = ele.value;
          let role = roles(ele.role, this.options);
          ele = role(this, ele);
          if (typeof ele.disabled === "string" && !ele.hint) {
            ele.hint = ele.disabled;
            ele.disabled = true;
          }
          if (ele.disabled === true && ele.hint == null) {
            ele.hint = "(disabled)";
          }
          if (ele.index != null)
            return ele;
          ele.name = ele.name || ele.key || ele.title || ele.value || ele.message;
          ele.message = ele.message || ele.name || "";
          ele.value = [ele.value, ele.name].find(this.isValue.bind(this));
          ele.input = "";
          ele.index = i;
          ele.cursor = 0;
          utils.define(ele, "parent", parent);
          ele.level = parent ? parent.level + 1 : 1;
          if (ele.indent == null) {
            ele.indent = parent ? parent.indent + "  " : ele.indent || "";
          }
          ele.path = parent ? parent.path + "." + ele.name : ele.name;
          ele.enabled = !!(this.multiple && !this.isDisabled(ele) && (ele.enabled || this.isSelected(ele)));
          if (!this.isDisabled(ele)) {
            this.longest = Math.max(this.longest, stripAnsi(ele.message).length);
          }
          let choice = { ...ele };
          ele.reset = (input = choice.input, value = choice.value) => {
            for (let key of Object.keys(choice))
              ele[key] = choice[key];
            ele.input = input;
            ele.value = value;
          };
          if (origVal == null && typeof ele.initial === "function") {
            ele.input = await ele.initial.call(this, this.state, ele, i);
          }
          return ele;
        }
        async onChoice(choice, i) {
          this.emit("choice", choice, i, this);
          if (typeof choice.onChoice === "function") {
            await choice.onChoice.call(this, this.state, choice, i);
          }
        }
        async addChoice(ele, i, parent) {
          let choice = await this.toChoice(ele, i, parent);
          this.choices.push(choice);
          this.index = this.choices.length - 1;
          this.limit = this.choices.length;
          return choice;
        }
        async newItem(item, i, parent) {
          let ele = { name: "New choice name?", editable: true, newChoice: true, ...item };
          let choice = await this.addChoice(ele, i, parent);
          choice.updateChoice = () => {
            delete choice.newChoice;
            choice.name = choice.message = choice.input;
            choice.input = "";
            choice.cursor = 0;
          };
          return this.render();
        }
        indent(choice) {
          if (choice.indent == null) {
            return choice.level > 1 ? "  ".repeat(choice.level - 1) : "";
          }
          return choice.indent;
        }
        dispatch(s, key) {
          if (this.multiple && this[key.name])
            return this[key.name]();
          this.alert();
        }
        focus(choice, enabled) {
          if (typeof enabled !== "boolean")
            enabled = choice.enabled;
          if (enabled && !choice.enabled && this.selected.length >= this.maxSelected) {
            return this.alert();
          }
          this.index = choice.index;
          choice.enabled = enabled && !this.isDisabled(choice);
          return choice;
        }
        space() {
          if (!this.multiple)
            return this.alert();
          if (!this.focused)
            return;
          this.toggle(this.focused);
          return this.render();
        }
        a() {
          if (this.maxSelected < this.choices.length)
            return this.alert();
          let enabled = this.selectable.every((ch) => ch.enabled);
          this.choices.forEach((ch) => ch.enabled = !enabled);
          return this.render();
        }
        i() {
          if (this.choices.length - this.selected.length > this.maxSelected) {
            return this.alert();
          }
          this.choices.forEach((ch) => ch.enabled = !ch.enabled);
          return this.render();
        }
        g() {
          if (!this.choices.some((ch) => !!ch.parent))
            return this.a();
          const focused = this.focused;
          this.toggle(focused.parent && !focused.choices ? focused.parent : focused);
          return this.render();
        }
        toggle(choice, enabled) {
          if (!choice.enabled && this.selected.length >= this.maxSelected) {
            return this.alert();
          }
          if (typeof enabled !== "boolean")
            enabled = !choice.enabled;
          choice.enabled = enabled;
          if (choice.choices) {
            choice.choices.forEach((ch) => this.toggle(ch, enabled));
          }
          let parent = choice.parent;
          while (parent) {
            let choices = parent.choices.filter((ch) => this.isDisabled(ch));
            parent.enabled = choices.every((ch) => ch.enabled === true);
            parent = parent.parent;
          }
          reset(this, this.choices);
          this.emit("toggle", choice, this);
          return choice;
        }
        enable(choice) {
          if (this.selected.length >= this.maxSelected)
            return this.alert();
          choice.enabled = !this.isDisabled(choice);
          choice.choices && choice.choices.forEach(this.enable.bind(this));
          return choice;
        }
        disable(choice) {
          choice.enabled = false;
          choice.choices && choice.choices.forEach(this.disable.bind(this));
          return choice;
        }
        number(n) {
          this.num += n;
          let number = (num) => {
            let i = Number(num);
            if (i > this.choices.length - 1)
              return this.alert();
            let focused = this.focused;
            let choice = this.choices.find((ch) => i === ch.index);
            if (!choice.enabled && this.selected.length >= this.maxSelected) {
              return this.alert();
            }
            if (this.visible.indexOf(choice) === -1) {
              let choices = reorder(this.choices);
              let actualIdx = choices.indexOf(choice);
              if (focused.index > actualIdx) {
                let start = choices.slice(actualIdx, actualIdx + this.limit);
                let end = choices.filter((ch) => !start.includes(ch));
                this.choices = start.concat(end);
              } else {
                let pos = actualIdx - this.limit + 1;
                this.choices = choices.slice(pos).concat(choices.slice(0, pos));
              }
            }
            this.index = this.choices.indexOf(choice);
            this.toggle(this.focused);
            return this.render();
          };
          clearTimeout(this.numberTimeout);
          return new Promise((resolve) => {
            let len = this.choices.length;
            let num = this.num;
            let handle = (val = false, res) => {
              clearTimeout(this.numberTimeout);
              if (val)
                res = number(num);
              this.num = "";
              resolve(res);
            };
            if (num === "0" || num.length === 1 && Number(num + "0") > len) {
              return handle(true);
            }
            if (Number(num) > len) {
              return handle(false, this.alert());
            }
            this.numberTimeout = setTimeout(() => handle(true), this.delay);
          });
        }
        home() {
          this.choices = reorder(this.choices);
          this.index = 0;
          return this.render();
        }
        end() {
          let pos = this.choices.length - this.limit;
          let choices = reorder(this.choices);
          this.choices = choices.slice(pos).concat(choices.slice(0, pos));
          this.index = this.limit - 1;
          return this.render();
        }
        first() {
          this.index = 0;
          return this.render();
        }
        last() {
          this.index = this.visible.length - 1;
          return this.render();
        }
        prev() {
          if (this.visible.length <= 1)
            return this.alert();
          return this.up();
        }
        next() {
          if (this.visible.length <= 1)
            return this.alert();
          return this.down();
        }
        right() {
          if (this.cursor >= this.input.length)
            return this.alert();
          this.cursor++;
          return this.render();
        }
        left() {
          if (this.cursor <= 0)
            return this.alert();
          this.cursor--;
          return this.render();
        }
        up() {
          let len = this.choices.length;
          let vis = this.visible.length;
          let idx = this.index;
          if (this.options.scroll === false && idx === 0) {
            return this.alert();
          }
          if (len > vis && idx === 0) {
            return this.scrollUp();
          }
          this.index = (idx - 1 % len + len) % len;
          if (this.isDisabled() && !this.allChoicesAreDisabled()) {
            return this.up();
          }
          return this.render();
        }
        down() {
          let len = this.choices.length;
          let vis = this.visible.length;
          let idx = this.index;
          if (this.options.scroll === false && idx === vis - 1) {
            return this.alert();
          }
          if (len > vis && idx === vis - 1) {
            return this.scrollDown();
          }
          this.index = (idx + 1) % len;
          if (this.isDisabled() && !this.allChoicesAreDisabled()) {
            return this.down();
          }
          return this.render();
        }
        scrollUp(i = 0) {
          this.choices = scrollUp(this.choices);
          this.index = i;
          if (this.isDisabled()) {
            return this.up();
          }
          return this.render();
        }
        scrollDown(i = this.visible.length - 1) {
          this.choices = scrollDown(this.choices);
          this.index = i;
          if (this.isDisabled()) {
            return this.down();
          }
          return this.render();
        }
        async shiftUp() {
          if (this.options.sort === true) {
            this.sorting = true;
            this.swap(this.index - 1);
            await this.up();
            this.sorting = false;
            return;
          }
          return this.scrollUp(this.index);
        }
        async shiftDown() {
          if (this.options.sort === true) {
            this.sorting = true;
            this.swap(this.index + 1);
            await this.down();
            this.sorting = false;
            return;
          }
          return this.scrollDown(this.index);
        }
        pageUp() {
          if (this.visible.length <= 1)
            return this.alert();
          this.limit = Math.max(this.limit - 1, 0);
          this.index = Math.min(this.limit - 1, this.index);
          this._limit = this.limit;
          if (this.isDisabled()) {
            return this.up();
          }
          return this.render();
        }
        pageDown() {
          if (this.visible.length >= this.choices.length)
            return this.alert();
          this.index = Math.max(0, this.index);
          this.limit = Math.min(this.limit + 1, this.choices.length);
          this._limit = this.limit;
          if (this.isDisabled()) {
            return this.down();
          }
          return this.render();
        }
        swap(pos) {
          swap(this.choices, this.index, pos);
        }
        allChoicesAreDisabled(choices = this.choices) {
          return choices.every((choice) => this.isDisabled(choice));
        }
        isDisabled(choice = this.focused) {
          let keys = ["disabled", "collapsed", "hidden", "completing", "readonly"];
          if (choice && keys.some((key) => choice[key] === true)) {
            return true;
          }
          return choice && choice.role === "heading";
        }
        isEnabled(choice = this.focused) {
          if (Array.isArray(choice))
            return choice.every((ch) => this.isEnabled(ch));
          if (choice.choices) {
            let choices = choice.choices.filter((ch) => !this.isDisabled(ch));
            return choice.enabled && choices.every((ch) => this.isEnabled(ch));
          }
          return choice.enabled && !this.isDisabled(choice);
        }
        isChoice(choice, value) {
          return choice.name === value || choice.index === Number(value);
        }
        isSelected(choice) {
          if (Array.isArray(this.initial)) {
            return this.initial.some((value) => this.isChoice(choice, value));
          }
          return this.isChoice(choice, this.initial);
        }
        map(names = [], prop = "value") {
          return [].concat(names || []).reduce((acc, name) => {
            acc[name] = this.find(name, prop);
            return acc;
          }, {});
        }
        filter(value, prop) {
          let isChoice = (ele, i) => [ele.name, i].includes(value);
          let fn = typeof value === "function" ? value : isChoice;
          let choices = this.options.multiple ? this.state._choices : this.choices;
          let result2 = choices.filter(fn);
          if (prop) {
            return result2.map((ch) => ch[prop]);
          }
          return result2;
        }
        find(value, prop) {
          if (isObject(value))
            return prop ? value[prop] : value;
          let isChoice = (ele, i) => [ele.name, i].includes(value);
          let fn = typeof value === "function" ? value : isChoice;
          let choice = this.choices.find(fn);
          if (choice) {
            return prop ? choice[prop] : choice;
          }
        }
        findIndex(value) {
          return this.choices.indexOf(this.find(value));
        }
        async submit() {
          let choice = this.focused;
          if (!choice)
            return this.alert();
          if (choice.newChoice) {
            if (!choice.input)
              return this.alert();
            choice.updateChoice();
            return this.render();
          }
          if (this.choices.some((ch) => ch.newChoice)) {
            return this.alert();
          }
          let { reorder: reorder2, sort } = this.options;
          let multi = this.multiple === true;
          let value = this.selected;
          if (value === undefined) {
            return this.alert();
          }
          if (Array.isArray(value) && reorder2 !== false && sort !== true) {
            value = utils.reorder(value);
          }
          this.value = multi ? value.map((ch) => ch.name) : value.name;
          return super.submit();
        }
        set choices(choices = []) {
          this.state._choices = this.state._choices || [];
          this.state.choices = choices;
          for (let choice of choices) {
            if (!this.state._choices.some((ch) => ch.name === choice.name)) {
              this.state._choices.push(choice);
            }
          }
          if (!this._initial && this.options.initial) {
            this._initial = true;
            let init = this.initial;
            if (typeof init === "string" || typeof init === "number") {
              let choice = this.find(init);
              if (choice) {
                this.initial = choice.index;
                this.focus(choice, true);
              }
            }
          }
        }
        get choices() {
          return reset(this, this.state.choices || []);
        }
        set visible(visible) {
          this.state.visible = visible;
        }
        get visible() {
          return (this.state.visible || this.choices).slice(0, this.limit);
        }
        set limit(num) {
          this.state.limit = num;
        }
        get limit() {
          let { state, options, choices } = this;
          let limit = state.limit || this._limit || options.limit || choices.length;
          return Math.min(limit, this.height);
        }
        set value(value) {
          super.value = value;
        }
        get value() {
          if (typeof super.value !== "string" && super.value === this.initial) {
            return this.input;
          }
          return super.value;
        }
        set index(i) {
          this.state.index = i;
        }
        get index() {
          return Math.max(0, this.state ? this.state.index : 0);
        }
        get enabled() {
          return this.filter(this.isEnabled.bind(this));
        }
        get focused() {
          let choice = this.choices[this.index];
          if (choice && this.state.submitted && this.multiple !== true) {
            choice.enabled = true;
          }
          return choice;
        }
        get selectable() {
          return this.choices.filter((choice) => !this.isDisabled(choice));
        }
        get selected() {
          return this.multiple ? this.enabled : this.focused;
        }
      };
      function reset(prompt, choices) {
        if (choices instanceof Promise)
          return choices;
        if (typeof choices === "function") {
          if (utils.isAsyncFn(choices))
            return choices;
          choices = choices.call(prompt, prompt);
        }
        for (let choice of choices) {
          if (Array.isArray(choice.choices)) {
            let items = choice.choices.filter((ch) => !prompt.isDisabled(ch));
            choice.enabled = items.every((ch) => ch.enabled === true);
          }
          if (prompt.isDisabled(choice) === true) {
            delete choice.enabled;
          }
        }
        return choices;
      }
      module22.exports = ArrayPrompt;
    }
  });
  var require_select = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/prompts/select.js"(exports22, module22) {
      var ArrayPrompt = require_array4();
      var utils = require_utils6();
      var SelectPrompt = class extends ArrayPrompt {
        constructor(options) {
          super(options);
          this.emptyError = this.options.emptyError || "No items were selected";
        }
        async dispatch(s, key) {
          if (this.multiple) {
            return this[key.name] ? await this[key.name](s, key) : await super.dispatch(s, key);
          }
          this.alert();
        }
        separator() {
          if (this.options.separator)
            return super.separator();
          let sep = this.styles.muted(this.symbols.ellipsis);
          return this.state.submitted ? super.separator() : sep;
        }
        pointer(choice, i) {
          return !this.multiple || this.options.pointer ? super.pointer(choice, i) : "";
        }
        indicator(choice, i) {
          return this.multiple ? super.indicator(choice, i) : "";
        }
        choiceMessage(choice, i) {
          let message = this.resolve(choice.message, this.state, choice, i);
          if (choice.role === "heading" && !utils.hasColor(message)) {
            message = this.styles.strong(message);
          }
          return this.resolve(message, this.state, choice, i);
        }
        choiceSeparator() {
          return ":";
        }
        async renderChoice(choice, i) {
          await this.onChoice(choice, i);
          let focused = this.index === i;
          let pointer = await this.pointer(choice, i);
          let check = await this.indicator(choice, i) + (choice.pad || "");
          let hint = await this.resolve(choice.hint, this.state, choice, i);
          if (hint && !utils.hasColor(hint)) {
            hint = this.styles.muted(hint);
          }
          let ind = this.indent(choice);
          let msg = await this.choiceMessage(choice, i);
          let line = () => [this.margin[3], ind + pointer + check, msg, this.margin[1], hint].filter(Boolean).join(" ");
          if (choice.role === "heading") {
            return line();
          }
          if (choice.disabled) {
            if (!utils.hasColor(msg)) {
              msg = this.styles.disabled(msg);
            }
            return line();
          }
          if (focused) {
            msg = this.styles.em(msg);
          }
          return line();
        }
        async renderChoices() {
          if (this.state.loading === "choices") {
            return this.styles.warning("Loading choices");
          }
          if (this.state.submitted)
            return "";
          let choices = this.visible.map(async (ch, i) => await this.renderChoice(ch, i));
          let visible = await Promise.all(choices);
          if (!visible.length)
            visible.push(this.styles.danger("No matching choices"));
          let result2 = this.margin[0] + visible.join(`
`);
          let header;
          if (this.options.choicesHeader) {
            header = await this.resolve(this.options.choicesHeader, this.state);
          }
          return [header, result2].filter(Boolean).join(`
`);
        }
        format() {
          if (!this.state.submitted || this.state.cancelled)
            return "";
          if (Array.isArray(this.selected)) {
            return this.selected.map((choice) => this.styles.primary(choice.name)).join(", ");
          }
          return this.styles.primary(this.selected.name);
        }
        async render() {
          let { submitted, size } = this.state;
          let prompt = "";
          let header = await this.header();
          let prefix = await this.prefix();
          let separator = await this.separator();
          let message = await this.message();
          if (this.options.promptLine !== false) {
            prompt = [prefix, message, separator, ""].join(" ");
            this.state.prompt = prompt;
          }
          let output = await this.format();
          let help = await this.error() || await this.hint();
          let body = await this.renderChoices();
          let footer = await this.footer();
          if (output)
            prompt += output;
          if (help && !prompt.includes(help))
            prompt += " " + help;
          if (submitted && !output && !body.trim() && this.multiple && this.emptyError != null) {
            prompt += this.styles.danger(this.emptyError);
          }
          this.clear(size);
          this.write([header, prompt, body, footer].filter(Boolean).join(`
`));
          this.write(this.margin[2]);
          this.restore();
        }
      };
      module22.exports = SelectPrompt;
    }
  });
  var require_autocomplete = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/prompts/autocomplete.js"(exports22, module22) {
      var Select = require_select();
      var highlight = (input, color) => {
        const regex = input ? new RegExp(input, "ig") : /$^/;
        return (str) => {
          return input ? str.replace(regex, (match) => color(match)) : str;
        };
      };
      var AutoComplete = class extends Select {
        constructor(options) {
          super(options);
          this.cursorShow();
        }
        moveCursor(n) {
          this.state.cursor += n;
        }
        dispatch(ch) {
          return this.append(ch);
        }
        space(ch) {
          return this.options.multiple ? super.space(ch) : this.append(ch);
        }
        append(ch) {
          let { cursor, input } = this.state;
          this.input = input.slice(0, cursor) + ch + input.slice(cursor);
          this.moveCursor(1);
          return this.complete();
        }
        delete() {
          let { cursor, input } = this.state;
          if (!input)
            return this.alert();
          this.input = input.slice(0, cursor - 1) + input.slice(cursor);
          this.moveCursor(-1);
          return this.complete();
        }
        deleteForward() {
          let { cursor, input } = this.state;
          if (input[cursor] === undefined)
            return this.alert();
          this.input = `${input}`.slice(0, cursor) + `${input}`.slice(cursor + 1);
          return this.complete();
        }
        number(ch) {
          return this.append(ch);
        }
        async complete() {
          this.completing = true;
          this.choices = await this.suggest(this.input, this.state._choices);
          this.state.limit = undefined;
          this.index = Math.min(Math.max(this.visible.length - 1, 0), this.index);
          await this.render();
          this.completing = false;
        }
        suggest(input = this.input, choices = this.state._choices) {
          if (typeof this.options.suggest === "function") {
            return this.options.suggest.call(this, input, choices);
          }
          let str = input.toLowerCase();
          return choices.filter((ch) => ch.message.toLowerCase().includes(str));
        }
        pointer() {
          return "";
        }
        format() {
          if (!this.focused)
            return this.input;
          if (this.options.multiple && this.state.submitted) {
            return this.selected.map((ch) => this.styles.primary(ch.message)).join(", ");
          }
          if (this.state.submitted) {
            let value = this.value = this.input = this.focused.value;
            return this.styles.primary(value);
          }
          return this.input;
        }
        async render() {
          if (this.state.status !== "pending")
            return super.render();
          const hl = this.options.highlight || this.styles.complement;
          const style = (input, color2) => {
            if (!input)
              return input;
            if (hl.stack)
              return hl(input);
            return hl.call(this, input);
          };
          const color = highlight(this.input, style);
          const choices = this.choices;
          this.choices = choices.map((ch) => ({ ...ch, message: color(ch.message) }));
          await super.render();
          this.choices = choices;
        }
        submit() {
          if (this.options.multiple) {
            this.value = this.selected.map((ch) => ch.name);
          }
          return super.submit();
        }
      };
      module22.exports = AutoComplete;
    }
  });
  var require_placeholder = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/placeholder.js"(exports22, module22) {
      var utils = require_utils6();
      module22.exports = (prompt, options = {}) => {
        prompt.cursorHide();
        let { input = "", initial = "", pos, showCursor = true, color } = options;
        let style = color || prompt.styles.placeholder;
        let inverse = utils.inverse(prompt.styles.primary);
        let blinker = (str) => inverse(prompt.styles.black(str));
        let output = input;
        let char = " ";
        let reverse = blinker(char);
        if (prompt.blink && prompt.blink.off === true) {
          blinker = (str) => str;
          reverse = "";
        }
        if (showCursor && pos === 0 && initial === "" && input === "") {
          return blinker(char);
        }
        if (showCursor && pos === 0 && (input === initial || input === "")) {
          return blinker(initial[0]) + style(initial.slice(1));
        }
        initial = utils.isPrimitive(initial) ? `${initial}` : "";
        input = utils.isPrimitive(input) ? `${input}` : "";
        let placeholder = initial && initial.startsWith(input) && initial !== input;
        let cursor = placeholder ? blinker(initial[input.length]) : reverse;
        if (pos !== input.length && showCursor === true) {
          output = input.slice(0, pos) + blinker(input[pos]) + input.slice(pos + 1);
          cursor = "";
        }
        if (showCursor === false) {
          cursor = "";
        }
        if (placeholder) {
          let raw = prompt.styles.unstyle(output + cursor);
          return output + cursor + style(initial.slice(raw.length));
        }
        return output + cursor;
      };
    }
  });
  var require_form = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/prompts/form.js"(exports22, module22) {
      var stripAnsi = require_strip_ansi();
      var SelectPrompt = require_select();
      var placeholder = require_placeholder();
      var FormPrompt = class extends SelectPrompt {
        constructor(options) {
          super({ ...options, multiple: true });
          this.type = "form";
          this.initial = this.options.initial;
          this.align = [this.options.align, "right"].find((v) => v != null);
          this.emptyError = "";
          this.values = {};
        }
        async reset(first) {
          await super.reset();
          if (first === true)
            this._index = this.index;
          this.index = this._index;
          this.values = {};
          this.choices.forEach((choice) => choice.reset && choice.reset());
          return this.render();
        }
        dispatch(char) {
          return !!char && this.append(char);
        }
        append(char) {
          let choice = this.focused;
          if (!choice)
            return this.alert();
          let { cursor, input } = choice;
          choice.value = choice.input = input.slice(0, cursor) + char + input.slice(cursor);
          choice.cursor++;
          return this.render();
        }
        delete() {
          let choice = this.focused;
          if (!choice || choice.cursor <= 0)
            return this.alert();
          let { cursor, input } = choice;
          choice.value = choice.input = input.slice(0, cursor - 1) + input.slice(cursor);
          choice.cursor--;
          return this.render();
        }
        deleteForward() {
          let choice = this.focused;
          if (!choice)
            return this.alert();
          let { cursor, input } = choice;
          if (input[cursor] === undefined)
            return this.alert();
          let str = `${input}`.slice(0, cursor) + `${input}`.slice(cursor + 1);
          choice.value = choice.input = str;
          return this.render();
        }
        right() {
          let choice = this.focused;
          if (!choice)
            return this.alert();
          if (choice.cursor >= choice.input.length)
            return this.alert();
          choice.cursor++;
          return this.render();
        }
        left() {
          let choice = this.focused;
          if (!choice)
            return this.alert();
          if (choice.cursor <= 0)
            return this.alert();
          choice.cursor--;
          return this.render();
        }
        space(ch, key) {
          return this.dispatch(ch, key);
        }
        number(ch, key) {
          return this.dispatch(ch, key);
        }
        next() {
          let ch = this.focused;
          if (!ch)
            return this.alert();
          let { initial, input } = ch;
          if (initial && initial.startsWith(input) && input !== initial) {
            ch.value = ch.input = initial;
            ch.cursor = ch.value.length;
            return this.render();
          }
          return super.next();
        }
        prev() {
          let ch = this.focused;
          if (!ch)
            return this.alert();
          if (ch.cursor === 0)
            return super.prev();
          ch.value = ch.input = "";
          ch.cursor = 0;
          return this.render();
        }
        separator() {
          return "";
        }
        format(value) {
          return !this.state.submitted ? super.format(value) : "";
        }
        pointer() {
          return "";
        }
        indicator(choice) {
          return choice.input ? "\u29BF" : "\u2299";
        }
        async choiceSeparator(choice, i) {
          let sep = await this.resolve(choice.separator, this.state, choice, i) || ":";
          return sep ? " " + this.styles.disabled(sep) : "";
        }
        async renderChoice(choice, i) {
          await this.onChoice(choice, i);
          let { state, styles } = this;
          let { cursor, initial = "", name, input = "" } = choice;
          let { muted, submitted, primary, danger } = styles;
          let focused = this.index === i;
          let validate = choice.validate || (() => true);
          let sep = await this.choiceSeparator(choice, i);
          let msg = choice.message;
          if (this.align === "right")
            msg = msg.padStart(this.longest + 1, " ");
          if (this.align === "left")
            msg = msg.padEnd(this.longest + 1, " ");
          let value = this.values[name] = input || initial;
          let color = input ? "success" : "dark";
          if (await validate.call(choice, value, this.state) !== true) {
            color = "danger";
          }
          let style = styles[color];
          let indicator = style(await this.indicator(choice, i)) + (choice.pad || "");
          let indent = this.indent(choice);
          let line = () => [indent, indicator, msg + sep, input].filter(Boolean).join(" ");
          if (state.submitted) {
            msg = stripAnsi(msg);
            input = submitted(input);
            return line();
          }
          if (choice.format) {
            input = await choice.format.call(this, input, choice, i);
          } else {
            let color2 = this.styles.muted;
            let options = { input, initial, pos: cursor, showCursor: focused, color: color2 };
            input = placeholder(this, options);
          }
          if (!this.isValue(input)) {
            input = this.styles.muted(this.symbols.ellipsis);
          }
          if (choice.result) {
            this.values[name] = await choice.result.call(this, value, choice, i);
          }
          if (focused) {
            msg = primary(msg);
          }
          if (choice.error) {
            input += (input ? " " : "") + danger(choice.error.trim());
          } else if (choice.hint) {
            input += (input ? " " : "") + muted(choice.hint.trim());
          }
          return line();
        }
        async submit() {
          this.value = this.values;
          return super.base.submit.call(this);
        }
      };
      module22.exports = FormPrompt;
    }
  });
  var require_auth = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/types/auth.js"(exports22, module22) {
      var FormPrompt = require_form();
      var defaultAuthenticate = () => {
        throw new Error("expected prompt to have a custom authenticate method");
      };
      var factory = (authenticate = defaultAuthenticate) => {

        class AuthPrompt extends FormPrompt {
          constructor(options) {
            super(options);
          }
          async submit() {
            this.value = await authenticate.call(this, this.values, this.state);
            super.base.submit.call(this);
          }
          static create(authenticate2) {
            return factory(authenticate2);
          }
        }
        return AuthPrompt;
      };
      module22.exports = factory();
    }
  });
  var require_basicauth = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/prompts/basicauth.js"(exports22, module22) {
      var AuthPrompt = require_auth();
      function defaultAuthenticate(value, state) {
        if (value.username === this.options.username && value.password === this.options.password) {
          return true;
        }
        return false;
      }
      var factory = (authenticate = defaultAuthenticate) => {
        const choices = [
          { name: "username", message: "username" },
          {
            name: "password",
            message: "password",
            format(input) {
              if (this.options.showPassword) {
                return input;
              }
              let color = this.state.submitted ? this.styles.primary : this.styles.muted;
              return color(this.symbols.asterisk.repeat(input.length));
            }
          }
        ];

        class BasicAuthPrompt extends AuthPrompt.create(authenticate) {
          constructor(options) {
            super({ ...options, choices });
          }
          static create(authenticate2) {
            return factory(authenticate2);
          }
        }
        return BasicAuthPrompt;
      };
      module22.exports = factory();
    }
  });
  var require_boolean = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/types/boolean.js"(exports22, module22) {
      var Prompt = require_prompt();
      var { isPrimitive, hasColor } = require_utils6();
      var BooleanPrompt = class extends Prompt {
        constructor(options) {
          super(options);
          this.cursorHide();
        }
        async initialize() {
          let initial = await this.resolve(this.initial, this.state);
          this.input = await this.cast(initial);
          await super.initialize();
        }
        dispatch(ch) {
          if (!this.isValue(ch))
            return this.alert();
          this.input = ch;
          return this.submit();
        }
        format(value) {
          let { styles, state } = this;
          return !state.submitted ? styles.primary(value) : styles.success(value);
        }
        cast(input) {
          return this.isTrue(input);
        }
        isTrue(input) {
          return /^[ty1]/i.test(input);
        }
        isFalse(input) {
          return /^[fn0]/i.test(input);
        }
        isValue(value) {
          return isPrimitive(value) && (this.isTrue(value) || this.isFalse(value));
        }
        async hint() {
          if (this.state.status === "pending") {
            let hint = await this.element("hint");
            if (!hasColor(hint)) {
              return this.styles.muted(hint);
            }
            return hint;
          }
        }
        async render() {
          let { input, size } = this.state;
          let prefix = await this.prefix();
          let sep = await this.separator();
          let msg = await this.message();
          let hint = this.styles.muted(this.default);
          let promptLine = [prefix, msg, hint, sep].filter(Boolean).join(" ");
          this.state.prompt = promptLine;
          let header = await this.header();
          let value = this.value = this.cast(input);
          let output = await this.format(value);
          let help = await this.error() || await this.hint();
          let footer = await this.footer();
          if (help && !promptLine.includes(help))
            output += " " + help;
          promptLine += " " + output;
          this.clear(size);
          this.write([header, promptLine, footer].filter(Boolean).join(`
`));
          this.restore();
        }
        set value(value) {
          super.value = value;
        }
        get value() {
          return this.cast(super.value);
        }
      };
      module22.exports = BooleanPrompt;
    }
  });
  var require_confirm = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/prompts/confirm.js"(exports22, module22) {
      var BooleanPrompt = require_boolean();
      var ConfirmPrompt = class extends BooleanPrompt {
        constructor(options) {
          super(options);
          this.default = this.options.default || (this.initial ? "(Y/n)" : "(y/N)");
        }
      };
      module22.exports = ConfirmPrompt;
    }
  });
  var require_editable = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/prompts/editable.js"(exports22, module22) {
      var Select = require_select();
      var Form = require_form();
      var form = Form.prototype;
      var Editable = class extends Select {
        constructor(options) {
          super({ ...options, multiple: true });
          this.align = [this.options.align, "left"].find((v) => v != null);
          this.emptyError = "";
          this.values = {};
        }
        dispatch(char, key) {
          let choice = this.focused;
          let parent = choice.parent || {};
          if (!choice.editable && !parent.editable) {
            if (char === "a" || char === "i")
              return super[char]();
          }
          return form.dispatch.call(this, char, key);
        }
        append(char, key) {
          return form.append.call(this, char, key);
        }
        delete(char, key) {
          return form.delete.call(this, char, key);
        }
        space(char) {
          return this.focused.editable ? this.append(char) : super.space();
        }
        number(char) {
          return this.focused.editable ? this.append(char) : super.number(char);
        }
        next() {
          return this.focused.editable ? form.next.call(this) : super.next();
        }
        prev() {
          return this.focused.editable ? form.prev.call(this) : super.prev();
        }
        async indicator(choice, i) {
          let symbol = choice.indicator || "";
          let value = choice.editable ? symbol : super.indicator(choice, i);
          return await this.resolve(value, this.state, choice, i) || "";
        }
        indent(choice) {
          return choice.role === "heading" ? "" : choice.editable ? " " : "  ";
        }
        async renderChoice(choice, i) {
          choice.indent = "";
          if (choice.editable)
            return form.renderChoice.call(this, choice, i);
          return super.renderChoice(choice, i);
        }
        error() {
          return "";
        }
        footer() {
          return this.state.error;
        }
        async validate() {
          let result2 = true;
          for (let choice of this.choices) {
            if (typeof choice.validate !== "function") {
              continue;
            }
            if (choice.role === "heading") {
              continue;
            }
            let val = choice.parent ? this.value[choice.parent.name] : this.value;
            if (choice.editable) {
              val = choice.value === choice.name ? choice.initial || "" : choice.value;
            } else if (!this.isDisabled(choice)) {
              val = choice.enabled === true;
            }
            result2 = await choice.validate(val, this.state);
            if (result2 !== true) {
              break;
            }
          }
          if (result2 !== true) {
            this.state.error = typeof result2 === "string" ? result2 : "Invalid Input";
          }
          return result2;
        }
        submit() {
          if (this.focused.newChoice === true)
            return super.submit();
          if (this.choices.some((ch) => ch.newChoice)) {
            return this.alert();
          }
          this.value = {};
          for (let choice of this.choices) {
            let val = choice.parent ? this.value[choice.parent.name] : this.value;
            if (choice.role === "heading") {
              this.value[choice.name] = {};
              continue;
            }
            if (choice.editable) {
              val[choice.name] = choice.value === choice.name ? choice.initial || "" : choice.value;
            } else if (!this.isDisabled(choice)) {
              val[choice.name] = choice.enabled === true;
            }
          }
          return this.base.submit.call(this);
        }
      };
      module22.exports = Editable;
    }
  });
  var require_string2 = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/types/string.js"(exports22, module22) {
      var Prompt = require_prompt();
      var keypress = require_keypress();
      var placeholder = require_placeholder();
      var { isPrimitive } = require_utils6();
      var StringPrompt = class extends Prompt {
        constructor(options) {
          super(options);
          this.initial = isPrimitive(this.initial) ? String(this.initial) : "";
          if (this.initial)
            this.cursorHide();
          this.state.prevCursor = 0;
          this.state.clipboard = [];
          this.keypressTimeout = this.options.keypressTimeout !== undefined ? this.options.keypressTimeout : null;
        }
        async keypress(input, key = input ? keypress(input, {}) : {}) {
          const now = Date.now();
          const elapsed = now - this.lastKeypress;
          this.lastKeypress = now;
          const isEnterKey = key.name === "return" || key.name === "enter";
          let prev = this.state.prevKeypress;
          let append;
          this.state.prevKeypress = key;
          if (this.keypressTimeout != null && isEnterKey) {
            if (elapsed < this.keypressTimeout) {
              return this.submit();
            }
            this.state.multilineBuffer = this.state.multilineBuffer || "";
            this.state.multilineBuffer += input;
            append = true;
            prev = null;
          }
          if (append || this.options.multiline && isEnterKey) {
            if (!prev || prev.name !== "return") {
              return this.append(`
`, key);
            }
          }
          return super.keypress(input, key);
        }
        moveCursor(n) {
          this.cursor += n;
        }
        reset() {
          this.input = this.value = "";
          this.cursor = 0;
          return this.render();
        }
        dispatch(ch, key) {
          if (!ch || key.ctrl || key.code)
            return this.alert();
          this.append(ch);
        }
        append(ch) {
          let { cursor, input } = this.state;
          this.input = `${input}`.slice(0, cursor) + ch + `${input}`.slice(cursor);
          this.moveCursor(String(ch).length);
          this.render();
        }
        insert(str) {
          this.append(str);
        }
        delete() {
          let { cursor, input } = this.state;
          if (cursor <= 0)
            return this.alert();
          this.input = `${input}`.slice(0, cursor - 1) + `${input}`.slice(cursor);
          this.moveCursor(-1);
          this.render();
        }
        deleteForward() {
          let { cursor, input } = this.state;
          if (input[cursor] === undefined)
            return this.alert();
          this.input = `${input}`.slice(0, cursor) + `${input}`.slice(cursor + 1);
          this.render();
        }
        cutForward() {
          let pos = this.cursor;
          if (this.input.length <= pos)
            return this.alert();
          this.state.clipboard.push(this.input.slice(pos));
          this.input = this.input.slice(0, pos);
          this.render();
        }
        cutLeft() {
          let pos = this.cursor;
          if (pos === 0)
            return this.alert();
          let before = this.input.slice(0, pos);
          let after = this.input.slice(pos);
          let words = before.split(" ");
          this.state.clipboard.push(words.pop());
          this.input = words.join(" ");
          this.cursor = this.input.length;
          this.input += after;
          this.render();
        }
        paste() {
          if (!this.state.clipboard.length)
            return this.alert();
          this.insert(this.state.clipboard.pop());
          this.render();
        }
        toggleCursor() {
          if (this.state.prevCursor) {
            this.cursor = this.state.prevCursor;
            this.state.prevCursor = 0;
          } else {
            this.state.prevCursor = this.cursor;
            this.cursor = 0;
          }
          this.render();
        }
        first() {
          this.cursor = 0;
          this.render();
        }
        last() {
          this.cursor = this.input.length - 1;
          this.render();
        }
        next() {
          let init = this.initial != null ? String(this.initial) : "";
          if (!init || !init.startsWith(this.input))
            return this.alert();
          this.input = this.initial;
          this.cursor = this.initial.length;
          this.render();
        }
        prev() {
          if (!this.input)
            return this.alert();
          this.reset();
        }
        backward() {
          return this.left();
        }
        forward() {
          return this.right();
        }
        right() {
          if (this.cursor >= this.input.length)
            return this.alert();
          this.moveCursor(1);
          return this.render();
        }
        left() {
          if (this.cursor <= 0)
            return this.alert();
          this.moveCursor(-1);
          return this.render();
        }
        isValue(value) {
          return !!value;
        }
        async format(input = this.value) {
          let initial = await this.resolve(this.initial, this.state);
          if (!this.state.submitted) {
            return placeholder(this, { input, initial, pos: this.cursor });
          }
          return this.styles.submitted(input || initial);
        }
        async render() {
          let size = this.state.size;
          let prefix = await this.prefix();
          let separator = await this.separator();
          let message = await this.message();
          let prompt = [prefix, message, separator].filter(Boolean).join(" ");
          this.state.prompt = prompt;
          let header = await this.header();
          let output = await this.format();
          let help = await this.error() || await this.hint();
          let footer = await this.footer();
          if (help && !output.includes(help))
            output += " " + help;
          prompt += " " + output;
          this.clear(size);
          this.write([header, prompt, footer].filter(Boolean).join(`
`));
          this.restore();
        }
      };
      module22.exports = StringPrompt;
    }
  });
  var require_completer = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/completer.js"(exports22, module22) {
      var unique = (arr) => arr.filter((v, i) => arr.lastIndexOf(v) === i);
      var compact = (arr) => unique(arr).filter(Boolean);
      module22.exports = (action, data = {}, value = "") => {
        let { past = [], present = "" } = data;
        let rest, prev;
        switch (action) {
          case "prev":
          case "undo":
            rest = past.slice(0, past.length - 1);
            prev = past[past.length - 1] || "";
            return {
              past: compact([value, ...rest]),
              present: prev
            };
          case "next":
          case "redo":
            rest = past.slice(1);
            prev = past[0] || "";
            return {
              past: compact([...rest, value]),
              present: prev
            };
          case "save":
            return {
              past: compact([...past, value]),
              present: ""
            };
          case "remove":
            prev = compact(past.filter((v) => v !== value));
            present = "";
            if (prev.length) {
              present = prev.pop();
            }
            return {
              past: prev,
              present
            };
          default: {
            throw new Error(`Invalid action: "${action}"`);
          }
        }
      };
    }
  });
  var require_input = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/prompts/input.js"(exports22, module22) {
      var Prompt = require_string2();
      var completer = require_completer();
      var Input = class extends Prompt {
        constructor(options) {
          super(options);
          let history = this.options.history;
          if (history && history.store) {
            let initial = history.values || this.initial;
            this.autosave = !!history.autosave;
            this.store = history.store;
            this.data = this.store.get("values") || { past: [], present: initial };
            this.initial = this.data.present || this.data.past[this.data.past.length - 1];
          }
        }
        completion(action) {
          if (!this.store)
            return this.alert();
          this.data = completer(action, this.data, this.input);
          if (!this.data.present)
            return this.alert();
          this.input = this.data.present;
          this.cursor = this.input.length;
          return this.render();
        }
        altUp() {
          return this.completion("prev");
        }
        altDown() {
          return this.completion("next");
        }
        prev() {
          this.save();
          return super.prev();
        }
        save() {
          if (!this.store)
            return;
          this.data = completer("save", this.data, this.input);
          this.store.set("values", this.data);
        }
        submit() {
          if (this.store && this.autosave === true) {
            this.save();
          }
          return super.submit();
        }
      };
      module22.exports = Input;
    }
  });
  var require_invisible = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/prompts/invisible.js"(exports22, module22) {
      var StringPrompt = require_string2();
      var InvisiblePrompt = class extends StringPrompt {
        format() {
          return "";
        }
      };
      module22.exports = InvisiblePrompt;
    }
  });
  var require_list2 = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/prompts/list.js"(exports22, module22) {
      var StringPrompt = require_string2();
      var ListPrompt = class extends StringPrompt {
        constructor(options = {}) {
          super(options);
          this.sep = this.options.separator || /, */;
          this.initial = options.initial || "";
        }
        split(input = this.value) {
          return input ? String(input).split(this.sep) : [];
        }
        format() {
          let style = this.state.submitted ? this.styles.primary : (val) => val;
          return this.list.map(style).join(", ");
        }
        async submit(value) {
          let result2 = this.state.error || await this.validate(this.list, this.state);
          if (result2 !== true) {
            this.state.error = result2;
            return super.submit();
          }
          this.value = this.list;
          return super.submit();
        }
        get list() {
          return this.split();
        }
      };
      module22.exports = ListPrompt;
    }
  });
  var require_multiselect = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/prompts/multiselect.js"(exports22, module22) {
      var Select = require_select();
      var MultiSelect = class extends Select {
        constructor(options) {
          super({ ...options, multiple: true });
        }
      };
      module22.exports = MultiSelect;
    }
  });
  var require_number = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/types/number.js"(exports22, module22) {
      var StringPrompt = require_string2();
      var NumberPrompt = class extends StringPrompt {
        constructor(options = {}) {
          super({ style: "number", ...options });
          this.min = this.isValue(options.min) ? this.toNumber(options.min) : -Infinity;
          this.max = this.isValue(options.max) ? this.toNumber(options.max) : Infinity;
          this.delay = options.delay != null ? options.delay : 1000;
          this.float = options.float !== false;
          this.round = options.round === true || options.float === false;
          this.major = options.major || 10;
          this.minor = options.minor || 1;
          this.initial = options.initial != null ? options.initial : "";
          this.input = String(this.initial);
          this.cursor = this.input.length;
          this.cursorShow();
        }
        append(ch) {
          if (!/[-+.]/.test(ch) || ch === "." && this.input.includes(".")) {
            return this.alert("invalid number");
          }
          return super.append(ch);
        }
        number(ch) {
          return super.append(ch);
        }
        next() {
          if (this.input && this.input !== this.initial)
            return this.alert();
          if (!this.isValue(this.initial))
            return this.alert();
          this.input = this.initial;
          this.cursor = String(this.initial).length;
          return this.render();
        }
        up(number) {
          let step = number || this.minor;
          let num = this.toNumber(this.input);
          if (num > this.max + step)
            return this.alert();
          this.input = `${num + step}`;
          return this.render();
        }
        down(number) {
          let step = number || this.minor;
          let num = this.toNumber(this.input);
          if (num < this.min - step)
            return this.alert();
          this.input = `${num - step}`;
          return this.render();
        }
        shiftDown() {
          return this.down(this.major);
        }
        shiftUp() {
          return this.up(this.major);
        }
        format(input = this.input) {
          if (typeof this.options.format === "function") {
            return this.options.format.call(this, input);
          }
          return this.styles.info(input);
        }
        toNumber(value = "") {
          return this.float ? +value : Math.round(+value);
        }
        isValue(value) {
          return /^[-+]?[0-9]+((\.)|(\.[0-9]+))?$/.test(value);
        }
        submit() {
          let value = [this.input, this.initial].find((v) => this.isValue(v));
          this.value = this.toNumber(value || 0);
          return super.submit();
        }
      };
      module22.exports = NumberPrompt;
    }
  });
  var require_numeral = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/prompts/numeral.js"(exports22, module22) {
      module22.exports = require_number();
    }
  });
  var require_password = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/prompts/password.js"(exports22, module22) {
      var StringPrompt = require_string2();
      var PasswordPrompt = class extends StringPrompt {
        constructor(options) {
          super(options);
          this.cursorShow();
        }
        format(input = this.input) {
          if (!this.keypressed)
            return "";
          let color = this.state.submitted ? this.styles.primary : this.styles.muted;
          return color(this.symbols.asterisk.repeat(input.length));
        }
      };
      module22.exports = PasswordPrompt;
    }
  });
  var require_scale = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/prompts/scale.js"(exports22, module22) {
      var stripAnsi = require_strip_ansi();
      var ArrayPrompt = require_array4();
      var utils = require_utils6();
      var LikertScale = class extends ArrayPrompt {
        constructor(options = {}) {
          super(options);
          this.widths = [].concat(options.messageWidth || 50);
          this.align = [].concat(options.align || "left");
          this.linebreak = options.linebreak || false;
          this.edgeLength = options.edgeLength || 3;
          this.newline = options.newline || `
   `;
          let start = options.startNumber || 1;
          if (typeof this.scale === "number") {
            this.scaleKey = false;
            this.scale = Array(this.scale).fill(0).map((v, i) => ({ name: i + start }));
          }
        }
        async reset() {
          this.tableized = false;
          await super.reset();
          return this.render();
        }
        tableize() {
          if (this.tableized === true)
            return;
          this.tableized = true;
          let longest = 0;
          for (let ch of this.choices) {
            longest = Math.max(longest, ch.message.length);
            ch.scaleIndex = ch.initial || 2;
            ch.scale = [];
            for (let i = 0;i < this.scale.length; i++) {
              ch.scale.push({ index: i });
            }
          }
          this.widths[0] = Math.min(this.widths[0], longest + 3);
        }
        async dispatch(s, key) {
          if (this.multiple) {
            return this[key.name] ? await this[key.name](s, key) : await super.dispatch(s, key);
          }
          this.alert();
        }
        heading(msg, item, i) {
          return this.styles.strong(msg);
        }
        separator() {
          return this.styles.muted(this.symbols.ellipsis);
        }
        right() {
          let choice = this.focused;
          if (choice.scaleIndex >= this.scale.length - 1)
            return this.alert();
          choice.scaleIndex++;
          return this.render();
        }
        left() {
          let choice = this.focused;
          if (choice.scaleIndex <= 0)
            return this.alert();
          choice.scaleIndex--;
          return this.render();
        }
        indent() {
          return "";
        }
        format() {
          if (this.state.submitted) {
            let values = this.choices.map((ch) => this.styles.info(ch.index));
            return values.join(", ");
          }
          return "";
        }
        pointer() {
          return "";
        }
        renderScaleKey() {
          if (this.scaleKey === false)
            return "";
          if (this.state.submitted)
            return "";
          let scale = this.scale.map((item) => `   ${item.name} - ${item.message}`);
          let key = ["", ...scale].map((item) => this.styles.muted(item));
          return key.join(`
`);
        }
        renderScaleHeading(max) {
          let keys = this.scale.map((ele) => ele.name);
          if (typeof this.options.renderScaleHeading === "function") {
            keys = this.options.renderScaleHeading.call(this, max);
          }
          let diff = this.scaleLength - keys.join("").length;
          let spacing = Math.round(diff / (keys.length - 1));
          let names = keys.map((key) => this.styles.strong(key));
          let headings = names.join(" ".repeat(spacing));
          let padding = " ".repeat(this.widths[0]);
          return this.margin[3] + padding + this.margin[1] + headings;
        }
        scaleIndicator(choice, item, i) {
          if (typeof this.options.scaleIndicator === "function") {
            return this.options.scaleIndicator.call(this, choice, item, i);
          }
          let enabled = choice.scaleIndex === item.index;
          if (item.disabled)
            return this.styles.hint(this.symbols.radio.disabled);
          if (enabled)
            return this.styles.success(this.symbols.radio.on);
          return this.symbols.radio.off;
        }
        renderScale(choice, i) {
          let scale = choice.scale.map((item) => this.scaleIndicator(choice, item, i));
          let padding = this.term === "Hyper" ? "" : " ";
          return scale.join(padding + this.symbols.line.repeat(this.edgeLength));
        }
        async renderChoice(choice, i) {
          await this.onChoice(choice, i);
          let focused = this.index === i;
          let pointer = await this.pointer(choice, i);
          let hint = await choice.hint;
          if (hint && !utils.hasColor(hint)) {
            hint = this.styles.muted(hint);
          }
          let pad = (str) => this.margin[3] + str.replace(/\s+$/, "").padEnd(this.widths[0], " ");
          let newline = this.newline;
          let ind = this.indent(choice);
          let message = await this.resolve(choice.message, this.state, choice, i);
          let scale = await this.renderScale(choice, i);
          let margin = this.margin[1] + this.margin[3];
          this.scaleLength = stripAnsi(scale).length;
          this.widths[0] = Math.min(this.widths[0], this.width - this.scaleLength - margin.length);
          let msg = utils.wordWrap(message, { width: this.widths[0], newline });
          let lines = msg.split(`
`).map((line) => pad(line) + this.margin[1]);
          if (focused) {
            scale = this.styles.info(scale);
            lines = lines.map((line) => this.styles.info(line));
          }
          lines[0] += scale;
          if (this.linebreak)
            lines.push("");
          return [ind + pointer, lines.join(`
`)].filter(Boolean);
        }
        async renderChoices() {
          if (this.state.submitted)
            return "";
          this.tableize();
          let choices = this.visible.map(async (ch, i) => await this.renderChoice(ch, i));
          let visible = await Promise.all(choices);
          let heading = await this.renderScaleHeading();
          return this.margin[0] + [heading, ...visible.map((v) => v.join(" "))].join(`
`);
        }
        async render() {
          let { submitted, size } = this.state;
          let prefix = await this.prefix();
          let separator = await this.separator();
          let message = await this.message();
          let prompt = "";
          if (this.options.promptLine !== false) {
            prompt = [prefix, message, separator, ""].join(" ");
            this.state.prompt = prompt;
          }
          let header = await this.header();
          let output = await this.format();
          let key = await this.renderScaleKey();
          let help = await this.error() || await this.hint();
          let body = await this.renderChoices();
          let footer = await this.footer();
          let err = this.emptyError;
          if (output)
            prompt += output;
          if (help && !prompt.includes(help))
            prompt += " " + help;
          if (submitted && !output && !body.trim() && this.multiple && err != null) {
            prompt += this.styles.danger(err);
          }
          this.clear(size);
          this.write([header, prompt, key, body, footer].filter(Boolean).join(`
`));
          if (!this.state.submitted) {
            this.write(this.margin[2]);
          }
          this.restore();
        }
        submit() {
          this.value = {};
          for (let choice of this.choices) {
            this.value[choice.name] = choice.scaleIndex;
          }
          return this.base.submit.call(this);
        }
      };
      module22.exports = LikertScale;
    }
  });
  var require_interpolate = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/interpolate.js"(exports22, module22) {
      var stripAnsi = require_strip_ansi();
      var clean = (str = "") => {
        return typeof str === "string" ? str.replace(/^['"]|['"]$/g, "") : "";
      };
      var Item = class {
        constructor(token) {
          this.name = token.key;
          this.field = token.field || {};
          this.value = clean(token.initial || this.field.initial || "");
          this.message = token.message || this.name;
          this.cursor = 0;
          this.input = "";
          this.lines = [];
        }
      };
      var tokenize = async (options = {}, defaults = {}, fn = (token) => token) => {
        let unique = /* @__PURE__ */ new Set;
        let fields = options.fields || [];
        let input = options.template;
        let tabstops = [];
        let items = [];
        let keys = [];
        let line = 1;
        if (typeof input === "function") {
          input = await input();
        }
        let i = -1;
        let next = () => input[++i];
        let peek = () => input[i + 1];
        let push = (token) => {
          token.line = line;
          tabstops.push(token);
        };
        push({ type: "bos", value: "" });
        while (i < input.length - 1) {
          let value = next();
          if (/^[^\S\n ]$/.test(value)) {
            push({ type: "text", value });
            continue;
          }
          if (value === `
`) {
            push({ type: "newline", value });
            line++;
            continue;
          }
          if (value === "\\") {
            value += next();
            push({ type: "text", value });
            continue;
          }
          if ((value === "$" || value === "#" || value === "{") && peek() === "{") {
            let n = next();
            value += n;
            let token = { type: "template", open: value, inner: "", close: "", value };
            let ch;
            while (ch = next()) {
              if (ch === "}") {
                if (peek() === "}")
                  ch += next();
                token.value += ch;
                token.close = ch;
                break;
              }
              if (ch === ":") {
                token.initial = "";
                token.key = token.inner;
              } else if (token.initial !== undefined) {
                token.initial += ch;
              }
              token.value += ch;
              token.inner += ch;
            }
            token.template = token.open + (token.initial || token.inner) + token.close;
            token.key = token.key || token.inner;
            if (hasOwnProperty.call(defaults, token.key)) {
              token.initial = defaults[token.key];
            }
            token = fn(token);
            push(token);
            keys.push(token.key);
            unique.add(token.key);
            let item = items.find((item2) => item2.name === token.key);
            token.field = fields.find((ch2) => ch2.name === token.key);
            if (!item) {
              item = new Item(token);
              items.push(item);
            }
            item.lines.push(token.line - 1);
            continue;
          }
          let last = tabstops[tabstops.length - 1];
          if (last.type === "text" && last.line === line) {
            last.value += value;
          } else {
            push({ type: "text", value });
          }
        }
        push({ type: "eos", value: "" });
        return { input, tabstops, unique, keys, items };
      };
      module22.exports = async (prompt) => {
        let options = prompt.options;
        let required = new Set(options.required === true ? [] : options.required || []);
        let defaults = { ...options.values, ...options.initial };
        let { tabstops, items, keys } = await tokenize(options, defaults);
        let result2 = createFn("result", prompt, options);
        let format = createFn("format", prompt, options);
        let isValid = createFn("validate", prompt, options, true);
        let isVal = prompt.isValue.bind(prompt);
        return async (state = {}, submitted = false) => {
          let index = 0;
          state.required = required;
          state.items = items;
          state.keys = keys;
          state.output = "";
          let validate = async (value, state2, item, index2) => {
            let error = await isValid(value, state2, item, index2);
            if (error === false) {
              return "Invalid field " + item.name;
            }
            return error;
          };
          for (let token of tabstops) {
            let value = token.value;
            let key = token.key;
            if (token.type !== "template") {
              if (value)
                state.output += value;
              continue;
            }
            if (token.type === "template") {
              let item = items.find((ch) => ch.name === key);
              if (options.required === true) {
                state.required.add(item.name);
              }
              let val = [item.input, state.values[item.value], item.value, value].find(isVal);
              let field = item.field || {};
              let message = field.message || token.inner;
              if (submitted) {
                let error = await validate(state.values[key], state, item, index);
                if (error && typeof error === "string" || error === false) {
                  state.invalid.set(key, error);
                  continue;
                }
                state.invalid.delete(key);
                let res = await result2(state.values[key], state, item, index);
                state.output += stripAnsi(res);
                continue;
              }
              item.placeholder = false;
              let before = value;
              value = await format(value, state, item, index);
              if (val !== value) {
                state.values[key] = val;
                value = prompt.styles.typing(val);
                state.missing.delete(message);
              } else {
                state.values[key] = undefined;
                val = `<${message}>`;
                value = prompt.styles.primary(val);
                item.placeholder = true;
                if (state.required.has(key)) {
                  state.missing.add(message);
                }
              }
              if (state.missing.has(message) && state.validating) {
                value = prompt.styles.warning(val);
              }
              if (state.invalid.has(key) && state.validating) {
                value = prompt.styles.danger(val);
              }
              if (index === state.index) {
                if (before !== value) {
                  value = prompt.styles.underline(value);
                } else {
                  value = prompt.styles.heading(stripAnsi(value));
                }
              }
              index++;
            }
            if (value) {
              state.output += value;
            }
          }
          let lines = state.output.split(`
`).map((l) => " " + l);
          let len = items.length;
          let done = 0;
          for (let item of items) {
            if (state.invalid.has(item.name)) {
              item.lines.forEach((i) => {
                if (lines[i][0] !== " ")
                  return;
                lines[i] = state.styles.danger(state.symbols.bullet) + lines[i].slice(1);
              });
            }
            if (prompt.isValue(state.values[item.name])) {
              done++;
            }
          }
          state.completed = (done / len * 100).toFixed(0);
          state.output = lines.join(`
`);
          return state.output;
        };
      };
      function createFn(prop, prompt, options, fallback) {
        return (value, state, item, index) => {
          if (typeof item.field[prop] === "function") {
            return item.field[prop].call(prompt, value, state, item, index);
          }
          return [fallback, value].find((v) => prompt.isValue(v));
        };
      }
    }
  });
  var require_snippet = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/prompts/snippet.js"(exports22, module22) {
      var stripAnsi = require_strip_ansi();
      var interpolate = require_interpolate();
      var Prompt = require_prompt();
      var SnippetPrompt = class extends Prompt {
        constructor(options) {
          super(options);
          this.cursorHide();
          this.reset(true);
        }
        async initialize() {
          this.interpolate = await interpolate(this);
          await super.initialize();
        }
        async reset(first) {
          this.state.keys = [];
          this.state.invalid = /* @__PURE__ */ new Map;
          this.state.missing = /* @__PURE__ */ new Set;
          this.state.completed = 0;
          this.state.values = {};
          if (first !== true) {
            await this.initialize();
            await this.render();
          }
        }
        moveCursor(n) {
          let item = this.getItem();
          this.cursor += n;
          item.cursor += n;
        }
        dispatch(ch, key) {
          if (!key.code && !key.ctrl && ch != null && this.getItem()) {
            this.append(ch, key);
            return;
          }
          this.alert();
        }
        append(ch, key) {
          let item = this.getItem();
          let prefix = item.input.slice(0, this.cursor);
          let suffix = item.input.slice(this.cursor);
          this.input = item.input = `${prefix}${ch}${suffix}`;
          this.moveCursor(1);
          this.render();
        }
        delete() {
          let item = this.getItem();
          if (this.cursor <= 0 || !item.input)
            return this.alert();
          let suffix = item.input.slice(this.cursor);
          let prefix = item.input.slice(0, this.cursor - 1);
          this.input = item.input = `${prefix}${suffix}`;
          this.moveCursor(-1);
          this.render();
        }
        increment(i) {
          return i >= this.state.keys.length - 1 ? 0 : i + 1;
        }
        decrement(i) {
          return i <= 0 ? this.state.keys.length - 1 : i - 1;
        }
        first() {
          this.state.index = 0;
          this.render();
        }
        last() {
          this.state.index = this.state.keys.length - 1;
          this.render();
        }
        right() {
          if (this.cursor >= this.input.length)
            return this.alert();
          this.moveCursor(1);
          this.render();
        }
        left() {
          if (this.cursor <= 0)
            return this.alert();
          this.moveCursor(-1);
          this.render();
        }
        prev() {
          this.state.index = this.decrement(this.state.index);
          this.getItem();
          this.render();
        }
        next() {
          this.state.index = this.increment(this.state.index);
          this.getItem();
          this.render();
        }
        up() {
          this.prev();
        }
        down() {
          this.next();
        }
        format(value) {
          let color = this.state.completed < 100 ? this.styles.warning : this.styles.success;
          if (this.state.submitted === true && this.state.completed !== 100) {
            color = this.styles.danger;
          }
          return color(`${this.state.completed}% completed`);
        }
        async render() {
          let { index, keys = [], submitted, size } = this.state;
          let newline = [this.options.newline, `
`].find((v) => v != null);
          let prefix = await this.prefix();
          let separator = await this.separator();
          let message = await this.message();
          let prompt = [prefix, message, separator].filter(Boolean).join(" ");
          this.state.prompt = prompt;
          let header = await this.header();
          let error = await this.error() || "";
          let hint = await this.hint() || "";
          let body = submitted ? "" : await this.interpolate(this.state);
          let key = this.state.key = keys[index] || "";
          let input = await this.format(key);
          let footer = await this.footer();
          if (input)
            prompt += " " + input;
          if (hint && !input && this.state.completed === 0)
            prompt += " " + hint;
          this.clear(size);
          let lines = [header, prompt, body, footer, error.trim()];
          this.write(lines.filter(Boolean).join(newline));
          this.restore();
        }
        getItem(name) {
          let { items, keys, index } = this.state;
          let item = items.find((ch) => ch.name === keys[index]);
          if (item && item.input != null) {
            this.input = item.input;
            this.cursor = item.cursor;
          }
          return item;
        }
        async submit() {
          if (typeof this.interpolate !== "function")
            await this.initialize();
          await this.interpolate(this.state, true);
          let { invalid, missing, output, values } = this.state;
          if (invalid.size) {
            let err = "";
            for (let [key, value] of invalid)
              err += `Invalid ${key}: ${value}
`;
            this.state.error = err;
            return super.submit();
          }
          if (missing.size) {
            this.state.error = "Required: " + [...missing.keys()].join(", ");
            return super.submit();
          }
          let lines = stripAnsi(output).split(`
`);
          let result2 = lines.map((v) => v.slice(1)).join(`
`);
          this.value = { values, result: result2 };
          return super.submit();
        }
      };
      module22.exports = SnippetPrompt;
    }
  });
  var require_sort2 = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/prompts/sort.js"(exports22, module22) {
      var hint = "(Use <shift>+<up/down> to sort)";
      var Prompt = require_select();
      var Sort = class extends Prompt {
        constructor(options) {
          super({ ...options, reorder: false, sort: true, multiple: true });
          this.state.hint = [this.options.hint, hint].find(this.isValue.bind(this));
        }
        indicator() {
          return "";
        }
        async renderChoice(choice, i) {
          let str = await super.renderChoice(choice, i);
          let sym = this.symbols.identicalTo + " ";
          let pre = this.index === i && this.sorting ? this.styles.muted(sym) : "  ";
          if (this.options.drag === false)
            pre = "";
          if (this.options.numbered === true) {
            return pre + `${i + 1} - ` + str;
          }
          return pre + str;
        }
        get selected() {
          return this.choices;
        }
        submit() {
          this.value = this.choices.map((choice) => choice.value);
          return super.submit();
        }
      };
      module22.exports = Sort;
    }
  });
  var require_survey = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/prompts/survey.js"(exports22, module22) {
      var ArrayPrompt = require_array4();
      var Survey = class extends ArrayPrompt {
        constructor(options = {}) {
          super(options);
          this.emptyError = options.emptyError || "No items were selected";
          this.term = process.env.TERM_PROGRAM;
          if (!this.options.header) {
            let header = ["", "4 - Strongly Agree", "3 - Agree", "2 - Neutral", "1 - Disagree", "0 - Strongly Disagree", ""];
            header = header.map((ele) => this.styles.muted(ele));
            this.state.header = header.join(`
   `);
          }
        }
        async toChoices(...args) {
          if (this.createdScales)
            return false;
          this.createdScales = true;
          let choices = await super.toChoices(...args);
          for (let choice of choices) {
            choice.scale = createScale(5, this.options);
            choice.scaleIdx = 2;
          }
          return choices;
        }
        dispatch() {
          this.alert();
        }
        space() {
          let choice = this.focused;
          let ele = choice.scale[choice.scaleIdx];
          let selected = ele.selected;
          choice.scale.forEach((e) => e.selected = false);
          ele.selected = !selected;
          return this.render();
        }
        indicator() {
          return "";
        }
        pointer() {
          return "";
        }
        separator() {
          return this.styles.muted(this.symbols.ellipsis);
        }
        right() {
          let choice = this.focused;
          if (choice.scaleIdx >= choice.scale.length - 1)
            return this.alert();
          choice.scaleIdx++;
          return this.render();
        }
        left() {
          let choice = this.focused;
          if (choice.scaleIdx <= 0)
            return this.alert();
          choice.scaleIdx--;
          return this.render();
        }
        indent() {
          return "   ";
        }
        async renderChoice(item, i) {
          await this.onChoice(item, i);
          let focused = this.index === i;
          let isHyper = this.term === "Hyper";
          let n = !isHyper ? 8 : 9;
          let s = !isHyper ? " " : "";
          let ln = this.symbols.line.repeat(n);
          let sp = " ".repeat(n + (isHyper ? 0 : 1));
          let dot = (enabled) => (enabled ? this.styles.success("\u25C9") : "\u25EF") + s;
          let num = i + 1 + ".";
          let color = focused ? this.styles.heading : this.styles.noop;
          let msg = await this.resolve(item.message, this.state, item, i);
          let indent = this.indent(item);
          let scale = indent + item.scale.map((e, i2) => dot(i2 === item.scaleIdx)).join(ln);
          let val = (i2) => i2 === item.scaleIdx ? color(i2) : i2;
          let next = indent + item.scale.map((e, i2) => val(i2)).join(sp);
          let line = () => [num, msg].filter(Boolean).join(" ");
          let lines = () => [line(), scale, next, " "].filter(Boolean).join(`
`);
          if (focused) {
            scale = this.styles.cyan(scale);
            next = this.styles.cyan(next);
          }
          return lines();
        }
        async renderChoices() {
          if (this.state.submitted)
            return "";
          let choices = this.visible.map(async (ch, i) => await this.renderChoice(ch, i));
          let visible = await Promise.all(choices);
          if (!visible.length)
            visible.push(this.styles.danger("No matching choices"));
          return visible.join(`
`);
        }
        format() {
          if (this.state.submitted) {
            let values = this.choices.map((ch) => this.styles.info(ch.scaleIdx));
            return values.join(", ");
          }
          return "";
        }
        async render() {
          let { submitted, size } = this.state;
          let prefix = await this.prefix();
          let separator = await this.separator();
          let message = await this.message();
          let prompt = [prefix, message, separator].filter(Boolean).join(" ");
          this.state.prompt = prompt;
          let header = await this.header();
          let output = await this.format();
          let help = await this.error() || await this.hint();
          let body = await this.renderChoices();
          let footer = await this.footer();
          if (output || !help)
            prompt += " " + output;
          if (help && !prompt.includes(help))
            prompt += " " + help;
          if (submitted && !output && !body && this.multiple && this.type !== "form") {
            prompt += this.styles.danger(this.emptyError);
          }
          this.clear(size);
          this.write([prompt, header, body, footer].filter(Boolean).join(`
`));
          this.restore();
        }
        submit() {
          this.value = {};
          for (let choice of this.choices) {
            this.value[choice.name] = choice.scaleIdx;
          }
          return this.base.submit.call(this);
        }
      };
      function createScale(n, options = {}) {
        if (Array.isArray(options.scale)) {
          return options.scale.map((ele) => ({ ...ele }));
        }
        let scale = [];
        for (let i = 1;i < n + 1; i++)
          scale.push({ i, selected: false });
        return scale;
      }
      module22.exports = Survey;
    }
  });
  var require_text = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/prompts/text.js"(exports22, module22) {
      module22.exports = require_input();
    }
  });
  var require_toggle = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/prompts/toggle.js"(exports22, module22) {
      var BooleanPrompt = require_boolean();
      var TogglePrompt = class extends BooleanPrompt {
        async initialize() {
          await super.initialize();
          this.value = this.initial = this.resolve(this.options.initial);
          this.disabled = this.options.disabled || "no";
          this.enabled = this.options.enabled || "yes";
          await this.render();
        }
        reset() {
          this.value = this.initial;
          this.render();
        }
        delete() {
          this.alert();
        }
        toggle() {
          this.value = !this.value;
          this.render();
        }
        enable() {
          if (this.value === true)
            return this.alert();
          this.value = true;
          this.render();
        }
        disable() {
          if (this.value === false)
            return this.alert();
          this.value = false;
          this.render();
        }
        up() {
          this.toggle();
        }
        down() {
          this.toggle();
        }
        right() {
          this.toggle();
        }
        left() {
          this.toggle();
        }
        next() {
          this.toggle();
        }
        prev() {
          this.toggle();
        }
        dispatch(ch = "", key) {
          switch (ch.toLowerCase()) {
            case " ":
              return this.toggle();
            case "1":
            case "y":
            case "t":
              return this.enable();
            case "0":
            case "n":
            case "f":
              return this.disable();
            default: {
              return this.alert();
            }
          }
        }
        format() {
          let active = (str) => this.styles.primary.underline(str);
          let value = [
            this.value ? this.disabled : active(this.disabled),
            this.value ? active(this.enabled) : this.enabled
          ];
          return value.join(this.styles.muted(" / "));
        }
        async render() {
          let { size } = this.state;
          let header = await this.header();
          let prefix = await this.prefix();
          let separator = await this.separator();
          let message = await this.message();
          let output = await this.format();
          let help = await this.error() || await this.hint();
          let footer = await this.footer();
          let prompt = [prefix, message, separator, output].join(" ");
          this.state.prompt = prompt;
          if (help && !prompt.includes(help))
            prompt += " " + help;
          this.clear(size);
          this.write([header, prompt, footer].filter(Boolean).join(`
`));
          this.write(this.margin[2]);
          this.restore();
        }
      };
      module22.exports = TogglePrompt;
    }
  });
  var require_quiz = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/prompts/quiz.js"(exports22, module22) {
      var SelectPrompt = require_select();
      var Quiz = class extends SelectPrompt {
        constructor(options) {
          super(options);
          if (typeof this.options.correctChoice !== "number" || this.options.correctChoice < 0) {
            throw new Error("Please specify the index of the correct answer from the list of choices");
          }
        }
        async toChoices(value, parent) {
          let choices = await super.toChoices(value, parent);
          if (choices.length < 2) {
            throw new Error("Please give at least two choices to the user");
          }
          if (this.options.correctChoice > choices.length) {
            throw new Error("Please specify the index of the correct answer from the list of choices");
          }
          return choices;
        }
        check(state) {
          return state.index === this.options.correctChoice;
        }
        async result(selected) {
          return {
            selectedAnswer: selected,
            correctAnswer: this.options.choices[this.options.correctChoice].value,
            correct: await this.check(this.state)
          };
        }
      };
      module22.exports = Quiz;
    }
  });
  var require_prompts = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/prompts/index.js"(exports22) {
      var utils = require_utils6();
      var define2 = (key, fn) => {
        utils.defineExport(exports22, key, fn);
        utils.defineExport(exports22, key.toLowerCase(), fn);
      };
      define2("AutoComplete", () => require_autocomplete());
      define2("BasicAuth", () => require_basicauth());
      define2("Confirm", () => require_confirm());
      define2("Editable", () => require_editable());
      define2("Form", () => require_form());
      define2("Input", () => require_input());
      define2("Invisible", () => require_invisible());
      define2("List", () => require_list2());
      define2("MultiSelect", () => require_multiselect());
      define2("Numeral", () => require_numeral());
      define2("Password", () => require_password());
      define2("Scale", () => require_scale());
      define2("Select", () => require_select());
      define2("Snippet", () => require_snippet());
      define2("Sort", () => require_sort2());
      define2("Survey", () => require_survey());
      define2("Text", () => require_text());
      define2("Toggle", () => require_toggle());
      define2("Quiz", () => require_quiz());
    }
  });
  var require_types5 = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/lib/types/index.js"(exports22, module22) {
      module22.exports = {
        ArrayPrompt: require_array4(),
        AuthPrompt: require_auth(),
        BooleanPrompt: require_boolean(),
        NumberPrompt: require_number(),
        StringPrompt: require_string2()
      };
    }
  });
  var require_enquirer = __commonJS2({
    "../../node_modules/.pnpm/enquirer@2.4.1/node_modules/enquirer/index.js"(exports22, module22) {
      var assert = __require("assert");
      var Events = __require("events");
      var utils = require_utils6();
      var Enquirer = class extends Events {
        constructor(options, answers) {
          super();
          this.options = utils.merge({}, options);
          this.answers = { ...answers };
        }
        register(type, fn) {
          if (utils.isObject(type)) {
            for (let key of Object.keys(type))
              this.register(key, type[key]);
            return this;
          }
          assert.equal(typeof fn, "function", "expected a function");
          const name = type.toLowerCase();
          if (fn.prototype instanceof this.Prompt) {
            this.prompts[name] = fn;
          } else {
            this.prompts[name] = fn(this.Prompt, this);
          }
          return this;
        }
        async prompt(questions = []) {
          for (let question of [].concat(questions)) {
            try {
              if (typeof question === "function")
                question = await question.call(this);
              await this.ask(utils.merge({}, this.options, question));
            } catch (err) {
              return Promise.reject(err);
            }
          }
          return this.answers;
        }
        async ask(question) {
          if (typeof question === "function") {
            question = await question.call(this);
          }
          let opts = utils.merge({}, this.options, question);
          let { type, name } = question;
          let { set, get } = utils;
          if (typeof type === "function") {
            type = await type.call(this, question, this.answers);
          }
          if (!type)
            return this.answers[name];
          if (type === "number")
            type = "numeral";
          assert(this.prompts[type], `Prompt "${type}" is not registered`);
          let prompt = new this.prompts[type](opts);
          let value = get(this.answers, name);
          prompt.state.answers = this.answers;
          prompt.enquirer = this;
          if (name) {
            prompt.on("submit", (value2) => {
              this.emit("answer", name, value2, prompt);
              set(this.answers, name, value2);
            });
          }
          let emit = prompt.emit.bind(prompt);
          prompt.emit = (...args) => {
            this.emit.call(this, ...args);
            return emit(...args);
          };
          this.emit("prompt", prompt, this);
          if (opts.autofill && value != null) {
            prompt.value = prompt.input = value;
            if (opts.autofill === "show") {
              await prompt.submit();
            }
          } else {
            value = prompt.value = await prompt.run();
          }
          return value;
        }
        use(plugin) {
          plugin.call(this, this);
          return this;
        }
        set Prompt(value) {
          this._Prompt = value;
        }
        get Prompt() {
          return this._Prompt || this.constructor.Prompt;
        }
        get prompts() {
          return this.constructor.prompts;
        }
        static set Prompt(value) {
          this._Prompt = value;
        }
        static get Prompt() {
          return this._Prompt || require_prompt();
        }
        static get prompts() {
          return require_prompts();
        }
        static get types() {
          return require_types5();
        }
        static get prompt() {
          const fn = (questions, ...rest) => {
            let enquirer = new this(...rest);
            let emit = enquirer.emit.bind(enquirer);
            enquirer.emit = (...args) => {
              fn.emit(...args);
              return emit(...args);
            };
            return enquirer.prompt(questions);
          };
          utils.mixinEmitter(fn, new Events);
          return fn;
        }
      };
      utils.mixinEmitter(Enquirer, new Events);
      var prompts = Enquirer.prompts;
      for (let name of Object.keys(prompts)) {
        let key = name.toLowerCase();
        let run = (options) => new prompts[name](options).run();
        Enquirer.prompt[key] = run;
        Enquirer[key] = run;
        if (!Enquirer[name]) {
          Reflect.defineProperty(Enquirer, name, { get: () => prompts[name] });
        }
      }
      var define2 = (name) => {
        utils.defineExport(Enquirer, name, () => Enquirer.types[name]);
      };
      define2("ArrayPrompt");
      define2("AuthPrompt");
      define2("BooleanPrompt");
      define2("NumberPrompt");
      define2("StringPrompt");
      module22.exports = Enquirer;
    }
  });
  var require_npmConfigUtils = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+plugin-npm@3.0.1_@yarnpkg+core@4.2.0_typanion@3.14.0__@yarnpkg+plugin-pack@4.0.0_@ya_q46l5sxkt25uytyqx553qmxtby/node_modules/@yarnpkg/plugin-npm/lib/npmConfigUtils.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.getAuthConfiguration = exports22.getScopeConfiguration = exports22.getRegistryConfiguration = exports22.getDefaultRegistry = exports22.getScopeRegistry = exports22.getPublishRegistry = exports22.getAuditRegistry = exports22.normalizeRegistry = exports22.RegistryType = undefined;
      var RegistryType;
      (function(RegistryType2) {
        RegistryType2["AUDIT_REGISTRY"] = "npmAuditRegistry";
        RegistryType2["FETCH_REGISTRY"] = "npmRegistryServer";
        RegistryType2["PUBLISH_REGISTRY"] = "npmPublishRegistry";
      })(RegistryType || (exports22.RegistryType = RegistryType = {}));
      function normalizeRegistry(registry) {
        return registry.replace(/\/$/, ``);
      }
      exports22.normalizeRegistry = normalizeRegistry;
      function getAuditRegistry({ configuration }) {
        return getDefaultRegistry({ configuration, type: RegistryType.AUDIT_REGISTRY });
      }
      exports22.getAuditRegistry = getAuditRegistry;
      function getPublishRegistry(manifest, { configuration }) {
        if (manifest.publishConfig?.registry)
          return normalizeRegistry(manifest.publishConfig.registry);
        if (manifest.name)
          return getScopeRegistry(manifest.name.scope, { configuration, type: RegistryType.PUBLISH_REGISTRY });
        return getDefaultRegistry({ configuration, type: RegistryType.PUBLISH_REGISTRY });
      }
      exports22.getPublishRegistry = getPublishRegistry;
      function getScopeRegistry(scope, { configuration, type = RegistryType.FETCH_REGISTRY }) {
        const scopeConfiguration = getScopeConfiguration(scope, { configuration });
        if (scopeConfiguration === null)
          return getDefaultRegistry({ configuration, type });
        const scopeRegistry = scopeConfiguration.get(type);
        if (scopeRegistry === null)
          return getDefaultRegistry({ configuration, type });
        return normalizeRegistry(scopeRegistry);
      }
      exports22.getScopeRegistry = getScopeRegistry;
      function getDefaultRegistry({ configuration, type = RegistryType.FETCH_REGISTRY }) {
        const defaultRegistry = configuration.get(type);
        if (defaultRegistry !== null)
          return normalizeRegistry(defaultRegistry);
        return normalizeRegistry(configuration.get(RegistryType.FETCH_REGISTRY));
      }
      exports22.getDefaultRegistry = getDefaultRegistry;
      function getRegistryConfiguration(registry, { configuration }) {
        const registryConfigurations = configuration.get(`npmRegistries`);
        const normalizedRegistry = normalizeRegistry(registry);
        const exactEntry = registryConfigurations.get(normalizedRegistry);
        if (typeof exactEntry !== `undefined`)
          return exactEntry;
        const noProtocolEntry = registryConfigurations.get(normalizedRegistry.replace(/^[a-z]+:/, ``));
        if (typeof noProtocolEntry !== `undefined`)
          return noProtocolEntry;
        return null;
      }
      exports22.getRegistryConfiguration = getRegistryConfiguration;
      function getScopeConfiguration(scope, { configuration }) {
        if (scope === null)
          return null;
        const scopeConfigurations = configuration.get(`npmScopes`);
        const scopeConfiguration = scopeConfigurations.get(scope);
        if (!scopeConfiguration)
          return null;
        return scopeConfiguration;
      }
      exports22.getScopeConfiguration = getScopeConfiguration;
      function getAuthConfiguration(registry, { configuration, ident }) {
        const scopeConfiguration = ident && getScopeConfiguration(ident.scope, { configuration });
        if (scopeConfiguration?.get(`npmAuthIdent`) || scopeConfiguration?.get(`npmAuthToken`))
          return scopeConfiguration;
        const registryConfiguration = getRegistryConfiguration(registry, { configuration });
        return registryConfiguration || configuration;
      }
      exports22.getAuthConfiguration = getAuthConfiguration;
    }
  });
  var require_npmHttpUtils = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+plugin-npm@3.0.1_@yarnpkg+core@4.2.0_typanion@3.14.0__@yarnpkg+plugin-pack@4.0.0_@ya_q46l5sxkt25uytyqx553qmxtby/node_modules/@yarnpkg/plugin-npm/lib/npmHttpUtils.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.del = exports22.put = exports22.post = exports22.get = exports22.getPackageMetadata = exports22.getIdentUrl = exports22.customPackageError = exports22.handleInvalidAuthenticationError = exports22.AuthType = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var core_1 = require_lib6();
      var core_2 = require_lib6();
      var fslib_12 = require_lib();
      var enquirer_1 = require_enquirer();
      var pick_1 = tslib_12.__importDefault(require_pick());
      var semver_12 = tslib_12.__importDefault(require_semver2());
      var npmConfigUtils = tslib_12.__importStar(require_npmConfigUtils());
      var AuthType;
      (function(AuthType2) {
        AuthType2[AuthType2["NO_AUTH"] = 0] = "NO_AUTH";
        AuthType2[AuthType2["BEST_EFFORT"] = 1] = "BEST_EFFORT";
        AuthType2[AuthType2["CONFIGURATION"] = 2] = "CONFIGURATION";
        AuthType2[AuthType2["ALWAYS_AUTH"] = 3] = "ALWAYS_AUTH";
      })(AuthType || (exports22.AuthType = AuthType = {}));
      async function handleInvalidAuthenticationError(error, { attemptedAs, registry, headers, configuration }) {
        if (isOtpError(error))
          throw new core_2.ReportError(core_2.MessageName.AUTHENTICATION_INVALID, `Invalid OTP token`);
        if (error.originalError?.name === `HTTPError` && error.originalError?.response.statusCode === 401) {
          throw new core_2.ReportError(core_2.MessageName.AUTHENTICATION_INVALID, `Invalid authentication (${typeof attemptedAs !== `string` ? `as ${await whoami(registry, headers, { configuration })}` : `attempted as ${attemptedAs}`})`);
        }
      }
      exports22.handleInvalidAuthenticationError = handleInvalidAuthenticationError;
      function customPackageError(error, configuration) {
        const statusCode = error.response?.statusCode;
        if (!statusCode)
          return null;
        if (statusCode === 404)
          return `Package not found`;
        if (statusCode >= 500 && statusCode < 600)
          return `The registry appears to be down (using a ${core_1.formatUtils.applyHyperlink(configuration, `local cache`, `https://yarnpkg.com/advanced/lexicon#local-cache`)} might have protected you against such outages)`;
        return null;
      }
      exports22.customPackageError = customPackageError;
      function getIdentUrl(ident) {
        if (ident.scope) {
          return `/@${ident.scope}%2f${ident.name}`;
        } else {
          return `/${ident.name}`;
        }
      }
      exports22.getIdentUrl = getIdentUrl;
      var PACKAGE_DISK_METADATA_CACHE = /* @__PURE__ */ new Map;
      var PACKAGE_NETWORK_METADATA_CACHE = /* @__PURE__ */ new Map;
      async function loadPackageMetadataInfoFromDisk(identPath) {
        return await core_1.miscUtils.getFactoryWithDefault(PACKAGE_DISK_METADATA_CACHE, identPath, async () => {
          let cached = null;
          try {
            cached = await fslib_12.xfs.readJsonPromise(identPath);
          } catch {
          }
          return cached;
        });
      }
      async function loadPackageMetadataInfoFromNetwork(identPath, ident, { configuration, cached, registry, headers, version, ...rest }) {
        return await core_1.miscUtils.getFactoryWithDefault(PACKAGE_NETWORK_METADATA_CACHE, identPath, async () => {
          return await get(getIdentUrl(ident), {
            ...rest,
            customErrorMessage: customPackageError,
            configuration,
            registry,
            ident,
            headers: {
              ...headers,
              [`If-None-Match`]: cached?.etag,
              [`If-Modified-Since`]: cached?.lastModified
            },
            wrapNetworkRequest: async (executor) => async () => {
              const response = await executor();
              if (response.statusCode === 304) {
                if (cached === null)
                  throw new Error(`Assertion failed: cachedMetadata should not be null`);
                return {
                  ...response,
                  body: cached.metadata
                };
              }
              const packageMetadata = pickPackageMetadata(JSON.parse(response.body.toString()));
              const metadata = {
                metadata: packageMetadata,
                etag: response.headers.etag,
                lastModified: response.headers[`last-modified`]
              };
              PACKAGE_DISK_METADATA_CACHE.set(identPath, Promise.resolve(metadata));
              Promise.resolve().then(async () => {
                const identPathTemp = `${identPath}-${process.pid}.tmp`;
                await fslib_12.xfs.mkdirPromise(fslib_12.ppath.dirname(identPathTemp), { recursive: true });
                await fslib_12.xfs.writeJsonPromise(identPathTemp, metadata, { compact: true });
                await fslib_12.xfs.renamePromise(identPathTemp, identPath);
              }).catch(() => {
              });
              return {
                ...response,
                body: packageMetadata
              };
            }
          });
        });
      }
      async function getPackageMetadata(ident, { cache, project, registry, headers, version, ...rest }) {
        const { configuration } = project;
        registry = normalizeRegistry(configuration, { ident, registry });
        const registryFolder = getRegistryFolder(configuration, registry);
        const identPath = fslib_12.ppath.join(registryFolder, `${core_1.structUtils.slugifyIdent(ident)}.json`);
        let cached = null;
        if (!project.lockfileNeedsRefresh) {
          cached = await loadPackageMetadataInfoFromDisk(identPath);
          if (cached) {
            if (typeof version !== `undefined` && typeof cached.metadata.versions[version] !== `undefined`)
              return cached.metadata;
            if (configuration.get(`enableOfflineMode`)) {
              const copy = structuredClone(cached.metadata);
              const deleted = /* @__PURE__ */ new Set;
              if (cache) {
                for (const version2 of Object.keys(copy.versions)) {
                  const locator = core_1.structUtils.makeLocator(ident, `npm:${version2}`);
                  const mirrorPath = cache.getLocatorMirrorPath(locator);
                  if (!mirrorPath || !fslib_12.xfs.existsSync(mirrorPath)) {
                    delete copy.versions[version2];
                    deleted.add(version2);
                  }
                }
                const latest = copy[`dist-tags`].latest;
                if (deleted.has(latest)) {
                  const allVersions = Object.keys(cached.metadata.versions).sort(semver_12.default.compare);
                  let latestIndex = allVersions.indexOf(latest);
                  while (deleted.has(allVersions[latestIndex]) && latestIndex >= 0)
                    latestIndex -= 1;
                  if (latestIndex >= 0) {
                    copy[`dist-tags`].latest = allVersions[latestIndex];
                  } else {
                    delete copy[`dist-tags`].latest;
                  }
                }
              }
              return copy;
            }
          }
        }
        return await loadPackageMetadataInfoFromNetwork(identPath, ident, {
          ...rest,
          configuration,
          cached,
          registry,
          headers,
          version
        });
      }
      exports22.getPackageMetadata = getPackageMetadata;
      var CACHED_FIELDS = [
        `name`,
        `dist.tarball`,
        `bin`,
        `scripts`,
        `os`,
        `cpu`,
        `libc`,
        `dependencies`,
        `dependenciesMeta`,
        `optionalDependencies`,
        `peerDependencies`,
        `peerDependenciesMeta`,
        `deprecated`
      ];
      function pickPackageMetadata(metadata) {
        return {
          "dist-tags": metadata[`dist-tags`],
          versions: Object.fromEntries(Object.entries(metadata.versions).map(([key, value]) => [
            key,
            (0, pick_1.default)(value, CACHED_FIELDS)
          ]))
        };
      }
      var CACHE_KEY = core_1.hashUtils.makeHash(...CACHED_FIELDS).slice(0, 6);
      function getRegistryFolder(configuration, registry) {
        const metadataFolder = getMetadataFolder(configuration);
        const parsed = new URL(registry);
        return fslib_12.ppath.join(metadataFolder, CACHE_KEY, parsed.hostname);
      }
      function getMetadataFolder(configuration) {
        return fslib_12.ppath.join(configuration.get(`globalFolder`), `metadata/npm`);
      }
      async function get(path2, { configuration, headers, ident, authType, registry, ...rest }) {
        registry = normalizeRegistry(configuration, { ident, registry });
        if (ident && ident.scope && typeof authType === `undefined`)
          authType = AuthType.BEST_EFFORT;
        const auth = await getAuthenticationHeader(registry, { authType, configuration, ident });
        if (auth)
          headers = { ...headers, authorization: auth };
        try {
          return await core_1.httpUtils.get(path2.charAt(0) === `/` ? `${registry}${path2}` : path2, { configuration, headers, ...rest });
        } catch (error) {
          await handleInvalidAuthenticationError(error, { registry, configuration, headers });
          throw error;
        }
      }
      exports22.get = get;
      async function post(path2, body, { attemptedAs, configuration, headers, ident, authType = AuthType.ALWAYS_AUTH, registry, otp, ...rest }) {
        registry = normalizeRegistry(configuration, { ident, registry });
        const auth = await getAuthenticationHeader(registry, { authType, configuration, ident });
        if (auth)
          headers = { ...headers, authorization: auth };
        if (otp)
          headers = { ...headers, ...getOtpHeaders(otp) };
        try {
          return await core_1.httpUtils.post(registry + path2, body, { configuration, headers, ...rest });
        } catch (error) {
          if (!isOtpError(error) || otp) {
            await handleInvalidAuthenticationError(error, { attemptedAs, registry, configuration, headers });
            throw error;
          }
          otp = await askForOtp(error, { configuration });
          const headersWithOtp = { ...headers, ...getOtpHeaders(otp) };
          try {
            return await core_1.httpUtils.post(`${registry}${path2}`, body, { configuration, headers: headersWithOtp, ...rest });
          } catch (error2) {
            await handleInvalidAuthenticationError(error2, { attemptedAs, registry, configuration, headers });
            throw error2;
          }
        }
      }
      exports22.post = post;
      async function put(path2, body, { attemptedAs, configuration, headers, ident, authType = AuthType.ALWAYS_AUTH, registry, otp, ...rest }) {
        registry = normalizeRegistry(configuration, { ident, registry });
        const auth = await getAuthenticationHeader(registry, { authType, configuration, ident });
        if (auth)
          headers = { ...headers, authorization: auth };
        if (otp)
          headers = { ...headers, ...getOtpHeaders(otp) };
        try {
          return await core_1.httpUtils.put(registry + path2, body, { configuration, headers, ...rest });
        } catch (error) {
          if (!isOtpError(error)) {
            await handleInvalidAuthenticationError(error, { attemptedAs, registry, configuration, headers });
            throw error;
          }
          otp = await askForOtp(error, { configuration });
          const headersWithOtp = { ...headers, ...getOtpHeaders(otp) };
          try {
            return await core_1.httpUtils.put(`${registry}${path2}`, body, { configuration, headers: headersWithOtp, ...rest });
          } catch (error2) {
            await handleInvalidAuthenticationError(error2, { attemptedAs, registry, configuration, headers });
            throw error2;
          }
        }
      }
      exports22.put = put;
      async function del(path2, { attemptedAs, configuration, headers, ident, authType = AuthType.ALWAYS_AUTH, registry, otp, ...rest }) {
        registry = normalizeRegistry(configuration, { ident, registry });
        const auth = await getAuthenticationHeader(registry, { authType, configuration, ident });
        if (auth)
          headers = { ...headers, authorization: auth };
        if (otp)
          headers = { ...headers, ...getOtpHeaders(otp) };
        try {
          return await core_1.httpUtils.del(registry + path2, { configuration, headers, ...rest });
        } catch (error) {
          if (!isOtpError(error) || otp) {
            await handleInvalidAuthenticationError(error, { attemptedAs, registry, configuration, headers });
            throw error;
          }
          otp = await askForOtp(error, { configuration });
          const headersWithOtp = { ...headers, ...getOtpHeaders(otp) };
          try {
            return await core_1.httpUtils.del(`${registry}${path2}`, { configuration, headers: headersWithOtp, ...rest });
          } catch (error2) {
            await handleInvalidAuthenticationError(error2, { attemptedAs, registry, configuration, headers });
            throw error2;
          }
        }
      }
      exports22.del = del;
      function normalizeRegistry(configuration, { ident, registry }) {
        if (typeof registry === `undefined` && ident)
          return npmConfigUtils.getScopeRegistry(ident.scope, { configuration });
        if (typeof registry !== `string`)
          throw new Error(`Assertion failed: The registry should be a string`);
        return npmConfigUtils.normalizeRegistry(registry);
      }
      async function getAuthenticationHeader(registry, { authType = AuthType.CONFIGURATION, configuration, ident }) {
        const effectiveConfiguration = npmConfigUtils.getAuthConfiguration(registry, { configuration, ident });
        const mustAuthenticate = shouldAuthenticate(effectiveConfiguration, authType);
        if (!mustAuthenticate)
          return null;
        const header = await configuration.reduceHook((hooks) => {
          return hooks.getNpmAuthenticationHeader;
        }, undefined, registry, { configuration, ident });
        if (header)
          return header;
        if (effectiveConfiguration.get(`npmAuthToken`))
          return `Bearer ${effectiveConfiguration.get(`npmAuthToken`)}`;
        if (effectiveConfiguration.get(`npmAuthIdent`)) {
          const npmAuthIdent = effectiveConfiguration.get(`npmAuthIdent`);
          if (npmAuthIdent.includes(`:`))
            return `Basic ${Buffer.from(npmAuthIdent).toString(`base64`)}`;
          return `Basic ${npmAuthIdent}`;
        }
        if (mustAuthenticate && authType !== AuthType.BEST_EFFORT) {
          throw new core_2.ReportError(core_2.MessageName.AUTHENTICATION_NOT_FOUND, `No authentication configured for request`);
        } else {
          return null;
        }
      }
      function shouldAuthenticate(authConfiguration, authType) {
        switch (authType) {
          case AuthType.CONFIGURATION:
            return authConfiguration.get(`npmAlwaysAuth`);
          case AuthType.BEST_EFFORT:
          case AuthType.ALWAYS_AUTH:
            return true;
          case AuthType.NO_AUTH:
            return false;
          default:
            throw new Error(`Unreachable`);
        }
      }
      async function whoami(registry, headers, { configuration }) {
        if (typeof headers === `undefined` || typeof headers.authorization === `undefined`)
          return `an anonymous user`;
        try {
          const response = await core_1.httpUtils.get(new URL(`${registry}/-/whoami`).href, {
            configuration,
            headers,
            jsonResponse: true
          });
          return response.username ?? `an unknown user`;
        } catch {
          return `an unknown user`;
        }
      }
      async function askForOtp(error, { configuration }) {
        const notice = error.originalError?.response.headers[`npm-notice`];
        if (notice) {
          await core_1.StreamReport.start({
            configuration,
            stdout: process.stdout,
            includeFooter: false
          }, async (report) => {
            report.reportInfo(core_2.MessageName.UNNAMED, notice.replace(/(https?:\/\/\S+)/g, core_1.formatUtils.pretty(configuration, `$1`, core_1.formatUtils.Type.URL)));
            if (!process.env.YARN_IS_TEST_ENV) {
              const autoOpen = notice.match(/open (https?:\/\/\S+)/i);
              if (autoOpen && core_1.nodeUtils.openUrl) {
                const { openNow } = await (0, enquirer_1.prompt)({
                  type: `confirm`,
                  name: `openNow`,
                  message: `Do you want to try to open this url now?`,
                  required: true,
                  initial: true,
                  onCancel: () => process.exit(130)
                });
                if (openNow) {
                  if (!await core_1.nodeUtils.openUrl(autoOpen[1])) {
                    report.reportSeparator();
                    report.reportWarning(core_2.MessageName.UNNAMED, `We failed to automatically open the url; you'll have to open it yourself in your browser of choice.`);
                  }
                }
              }
            }
          });
          process.stdout.write(`
`);
        }
        if (process.env.YARN_IS_TEST_ENV)
          return process.env.YARN_INJECT_NPM_2FA_TOKEN || ``;
        const { otp } = await (0, enquirer_1.prompt)({
          type: `password`,
          name: `otp`,
          message: `One-time password:`,
          required: true,
          onCancel: () => process.exit(130)
        });
        process.stdout.write(`
`);
        return otp;
      }
      function isOtpError(error) {
        if (error.originalError?.name !== `HTTPError`)
          return false;
        try {
          const authMethods = error.originalError?.response.headers[`www-authenticate`].split(/,\s*/).map((s) => s.toLowerCase());
          return authMethods.includes(`otp`);
        } catch (e) {
          return false;
        }
      }
      function getOtpHeaders(otp) {
        return {
          [`npm-otp`]: otp
        };
      }
    }
  });
  var require_NpmHttpFetcher = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+plugin-npm@3.0.1_@yarnpkg+core@4.2.0_typanion@3.14.0__@yarnpkg+plugin-pack@4.0.0_@ya_q46l5sxkt25uytyqx553qmxtby/node_modules/@yarnpkg/plugin-npm/lib/NpmHttpFetcher.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.NpmHttpFetcher = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var core_1 = require_lib6();
      var semver_12 = tslib_12.__importDefault(require_semver2());
      var constants_1 = require_constants8();
      var npmHttpUtils = tslib_12.__importStar(require_npmHttpUtils());
      var NpmHttpFetcher = class {
        supports(locator, opts) {
          if (!locator.reference.startsWith(constants_1.PROTOCOL))
            return false;
          const { selector, params } = core_1.structUtils.parseRange(locator.reference);
          if (!semver_12.default.valid(selector))
            return false;
          if (params === null || typeof params.__archiveUrl !== `string`)
            return false;
          return true;
        }
        getLocalPath(locator, opts) {
          return null;
        }
        async fetch(locator, opts) {
          const expectedChecksum = opts.checksums.get(locator.locatorHash) || null;
          const [packageFs, releaseFs, checksum] = await opts.cache.fetchPackageFromCache(locator, expectedChecksum, {
            onHit: () => opts.report.reportCacheHit(locator),
            onMiss: () => opts.report.reportCacheMiss(locator, `${core_1.structUtils.prettyLocator(opts.project.configuration, locator)} can't be found in the cache and will be fetched from the remote server`),
            loader: () => this.fetchFromNetwork(locator, opts),
            ...opts.cacheOptions
          });
          return {
            packageFs,
            releaseFs,
            prefixPath: core_1.structUtils.getIdentVendorPath(locator),
            checksum
          };
        }
        async fetchFromNetwork(locator, opts) {
          const { params } = core_1.structUtils.parseRange(locator.reference);
          if (params === null || typeof params.__archiveUrl !== `string`)
            throw new Error(`Assertion failed: The archiveUrl querystring parameter should have been available`);
          const sourceBuffer = await npmHttpUtils.get(params.__archiveUrl, {
            customErrorMessage: npmHttpUtils.customPackageError,
            configuration: opts.project.configuration,
            ident: locator
          });
          return await core_1.tgzUtils.convertToZip(sourceBuffer, {
            configuration: opts.project.configuration,
            prefixPath: core_1.structUtils.getIdentVendorPath(locator),
            stripComponents: 1
          });
        }
      };
      exports22.NpmHttpFetcher = NpmHttpFetcher;
    }
  });
  var require_NpmRemapResolver = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+plugin-npm@3.0.1_@yarnpkg+core@4.2.0_typanion@3.14.0__@yarnpkg+plugin-pack@4.0.0_@ya_q46l5sxkt25uytyqx553qmxtby/node_modules/@yarnpkg/plugin-npm/lib/NpmRemapResolver.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.NpmRemapResolver = undefined;
      var core_1 = require_lib6();
      var constants_1 = require_constants8();
      var NpmRemapResolver = class {
        supportsDescriptor(descriptor, opts) {
          if (!descriptor.range.startsWith(constants_1.PROTOCOL))
            return false;
          if (!core_1.structUtils.tryParseDescriptor(descriptor.range.slice(constants_1.PROTOCOL.length), true))
            return false;
          return true;
        }
        supportsLocator(locator, opts) {
          return false;
        }
        shouldPersistResolution(locator, opts) {
          throw new Error(`Unreachable`);
        }
        bindDescriptor(descriptor, fromLocator, opts) {
          return descriptor;
        }
        getResolutionDependencies(descriptor, opts) {
          const nextDescriptor = opts.project.configuration.normalizeDependency(core_1.structUtils.parseDescriptor(descriptor.range.slice(constants_1.PROTOCOL.length), true));
          return opts.resolver.getResolutionDependencies(nextDescriptor, opts);
        }
        async getCandidates(descriptor, dependencies, opts) {
          const nextDescriptor = opts.project.configuration.normalizeDependency(core_1.structUtils.parseDescriptor(descriptor.range.slice(constants_1.PROTOCOL.length), true));
          return await opts.resolver.getCandidates(nextDescriptor, dependencies, opts);
        }
        async getSatisfying(descriptor, dependencies, locators, opts) {
          const nextDescriptor = opts.project.configuration.normalizeDependency(core_1.structUtils.parseDescriptor(descriptor.range.slice(constants_1.PROTOCOL.length), true));
          return opts.resolver.getSatisfying(nextDescriptor, dependencies, locators, opts);
        }
        resolve(locator, opts) {
          throw new Error(`Unreachable`);
        }
      };
      exports22.NpmRemapResolver = NpmRemapResolver;
    }
  });
  var require_NpmSemverFetcher = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+plugin-npm@3.0.1_@yarnpkg+core@4.2.0_typanion@3.14.0__@yarnpkg+plugin-pack@4.0.0_@ya_q46l5sxkt25uytyqx553qmxtby/node_modules/@yarnpkg/plugin-npm/lib/NpmSemverFetcher.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.NpmSemverFetcher = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var core_1 = require_lib6();
      var core_2 = require_lib6();
      var semver_12 = tslib_12.__importDefault(require_semver2());
      var constants_1 = require_constants8();
      var npmConfigUtils = tslib_12.__importStar(require_npmConfigUtils());
      var npmHttpUtils = tslib_12.__importStar(require_npmHttpUtils());
      var NpmSemverFetcher = class _NpmSemverFetcher {
        supports(locator, opts) {
          if (!locator.reference.startsWith(constants_1.PROTOCOL))
            return false;
          const url = new URL(locator.reference);
          if (!semver_12.default.valid(url.pathname))
            return false;
          if (url.searchParams.has(`__archiveUrl`))
            return false;
          return true;
        }
        getLocalPath(locator, opts) {
          return null;
        }
        async fetch(locator, opts) {
          const expectedChecksum = opts.checksums.get(locator.locatorHash) || null;
          const [packageFs, releaseFs, checksum] = await opts.cache.fetchPackageFromCache(locator, expectedChecksum, {
            onHit: () => opts.report.reportCacheHit(locator),
            onMiss: () => opts.report.reportCacheMiss(locator, `${core_1.structUtils.prettyLocator(opts.project.configuration, locator)} can't be found in the cache and will be fetched from the remote registry`),
            loader: () => this.fetchFromNetwork(locator, opts),
            ...opts.cacheOptions
          });
          return {
            packageFs,
            releaseFs,
            prefixPath: core_1.structUtils.getIdentVendorPath(locator),
            checksum
          };
        }
        async fetchFromNetwork(locator, opts) {
          let sourceBuffer;
          try {
            sourceBuffer = await npmHttpUtils.get(_NpmSemverFetcher.getLocatorUrl(locator), {
              customErrorMessage: npmHttpUtils.customPackageError,
              configuration: opts.project.configuration,
              ident: locator
            });
          } catch (error) {
            sourceBuffer = await npmHttpUtils.get(_NpmSemverFetcher.getLocatorUrl(locator).replace(/%2f/g, `/`), {
              customErrorMessage: npmHttpUtils.customPackageError,
              configuration: opts.project.configuration,
              ident: locator
            });
          }
          return await core_1.tgzUtils.convertToZip(sourceBuffer, {
            configuration: opts.project.configuration,
            prefixPath: core_1.structUtils.getIdentVendorPath(locator),
            stripComponents: 1
          });
        }
        static isConventionalTarballUrl(locator, url, { configuration }) {
          let registry = npmConfigUtils.getScopeRegistry(locator.scope, { configuration });
          const path2 = _NpmSemverFetcher.getLocatorUrl(locator);
          url = url.replace(/^https?:(\/\/(?:[^/]+\.)?npmjs.org(?:$|\/))/, `https:$1`);
          registry = registry.replace(/^https:\/\/registry\.npmjs\.org($|\/)/, `https://registry.yarnpkg.com$1`);
          url = url.replace(/^https:\/\/registry\.npmjs\.org($|\/)/, `https://registry.yarnpkg.com$1`);
          if (url === registry + path2)
            return true;
          if (url === registry + path2.replace(/%2f/g, `/`))
            return true;
          return false;
        }
        static getLocatorUrl(locator) {
          const version = core_1.semverUtils.clean(locator.reference.slice(constants_1.PROTOCOL.length));
          if (version === null)
            throw new core_2.ReportError(core_2.MessageName.RESOLVER_NOT_FOUND, `The npm semver resolver got selected, but the version isn't semver`);
          return `${npmHttpUtils.getIdentUrl(locator)}/-/${locator.name}-${version}.tgz`;
        }
      };
      exports22.NpmSemverFetcher = NpmSemverFetcher;
    }
  });
  var require_NpmSemverResolver = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+plugin-npm@3.0.1_@yarnpkg+core@4.2.0_typanion@3.14.0__@yarnpkg+plugin-pack@4.0.0_@ya_q46l5sxkt25uytyqx553qmxtby/node_modules/@yarnpkg/plugin-npm/lib/NpmSemverResolver.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.NpmSemverResolver = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var core_1 = require_lib6();
      var core_2 = require_lib6();
      var core_3 = require_lib6();
      var core_4 = require_lib6();
      var semver_12 = tslib_12.__importDefault(require_semver2());
      var NpmSemverFetcher_1 = require_NpmSemverFetcher();
      var constants_1 = require_constants8();
      var npmHttpUtils = tslib_12.__importStar(require_npmHttpUtils());
      var NODE_GYP_IDENT = core_4.structUtils.makeIdent(null, `node-gyp`);
      var NODE_GYP_MATCH = /\b(node-gyp|prebuild-install)\b/;
      var NpmSemverResolver = class {
        supportsDescriptor(descriptor, opts) {
          if (!descriptor.range.startsWith(constants_1.PROTOCOL))
            return false;
          return !!core_2.semverUtils.validRange(descriptor.range.slice(constants_1.PROTOCOL.length));
        }
        supportsLocator(locator, opts) {
          if (!locator.reference.startsWith(constants_1.PROTOCOL))
            return false;
          const { selector } = core_4.structUtils.parseRange(locator.reference);
          if (!semver_12.default.valid(selector))
            return false;
          return true;
        }
        shouldPersistResolution(locator, opts) {
          return true;
        }
        bindDescriptor(descriptor, fromLocator, opts) {
          return descriptor;
        }
        getResolutionDependencies(descriptor, opts) {
          return {};
        }
        async getCandidates(descriptor, dependencies, opts) {
          const range = core_2.semverUtils.validRange(descriptor.range.slice(constants_1.PROTOCOL.length));
          if (range === null)
            throw new Error(`Expected a valid range, got ${descriptor.range.slice(constants_1.PROTOCOL.length)}`);
          const registryData = await npmHttpUtils.getPackageMetadata(descriptor, {
            cache: opts.fetchOptions?.cache,
            project: opts.project,
            version: semver_12.default.valid(range.raw) ? range.raw : undefined
          });
          const candidates = core_1.miscUtils.mapAndFilter(Object.keys(registryData.versions), (version) => {
            try {
              const candidate = new core_2.semverUtils.SemVer(version);
              if (range.test(candidate)) {
                return candidate;
              }
            } catch {
            }
            return core_1.miscUtils.mapAndFilter.skip;
          });
          const noDeprecatedCandidates = candidates.filter((version) => {
            return !registryData.versions[version.raw].deprecated;
          });
          const finalCandidates = noDeprecatedCandidates.length > 0 ? noDeprecatedCandidates : candidates;
          finalCandidates.sort((a, b) => {
            return -a.compare(b);
          });
          return finalCandidates.map((version) => {
            const versionLocator = core_4.structUtils.makeLocator(descriptor, `${constants_1.PROTOCOL}${version.raw}`);
            const archiveUrl = registryData.versions[version.raw].dist.tarball;
            if (NpmSemverFetcher_1.NpmSemverFetcher.isConventionalTarballUrl(versionLocator, archiveUrl, { configuration: opts.project.configuration })) {
              return versionLocator;
            } else {
              return core_4.structUtils.bindLocator(versionLocator, { __archiveUrl: archiveUrl });
            }
          });
        }
        async getSatisfying(descriptor, dependencies, locators, opts) {
          const range = core_2.semverUtils.validRange(descriptor.range.slice(constants_1.PROTOCOL.length));
          if (range === null)
            throw new Error(`Expected a valid range, got ${descriptor.range.slice(constants_1.PROTOCOL.length)}`);
          const results = core_1.miscUtils.mapAndFilter(locators, (locator) => {
            if (locator.identHash !== descriptor.identHash)
              return core_1.miscUtils.mapAndFilter.skip;
            const parsedRange = core_4.structUtils.tryParseRange(locator.reference, { requireProtocol: constants_1.PROTOCOL });
            if (!parsedRange)
              return core_1.miscUtils.mapAndFilter.skip;
            const version = new core_2.semverUtils.SemVer(parsedRange.selector);
            if (!range.test(version))
              return core_1.miscUtils.mapAndFilter.skip;
            return { locator, version };
          });
          const sortedResults = results.sort((a, b) => -a.version.compare(b.version)).map(({ locator }) => locator);
          return {
            locators: sortedResults,
            sorted: true
          };
        }
        async resolve(locator, opts) {
          const { selector } = core_4.structUtils.parseRange(locator.reference);
          const version = core_2.semverUtils.clean(selector);
          if (version === null)
            throw new core_1.ReportError(core_1.MessageName.RESOLVER_NOT_FOUND, `The npm semver resolver got selected, but the version isn't semver`);
          const registryData = await npmHttpUtils.getPackageMetadata(locator, {
            cache: opts.fetchOptions?.cache,
            project: opts.project,
            version
          });
          if (!Object.hasOwn(registryData, `versions`))
            throw new core_1.ReportError(core_1.MessageName.REMOTE_INVALID, `Registry returned invalid data for - missing "versions" field`);
          if (!Object.hasOwn(registryData.versions, version))
            throw new core_1.ReportError(core_1.MessageName.REMOTE_NOT_FOUND, `Registry failed to return reference "${version}"`);
          const manifest = new core_1.Manifest;
          manifest.load(registryData.versions[version]);
          if (!manifest.dependencies.has(NODE_GYP_IDENT.identHash) && !manifest.peerDependencies.has(NODE_GYP_IDENT.identHash)) {
            for (const value of manifest.scripts.values()) {
              if (value.match(NODE_GYP_MATCH)) {
                manifest.dependencies.set(NODE_GYP_IDENT.identHash, core_4.structUtils.makeDescriptor(NODE_GYP_IDENT, `latest`));
                break;
              }
            }
          }
          return {
            ...locator,
            version,
            languageName: `node`,
            linkType: core_3.LinkType.HARD,
            conditions: manifest.getConditions(),
            dependencies: opts.project.configuration.normalizeDependencyMap(manifest.dependencies),
            peerDependencies: manifest.peerDependencies,
            dependenciesMeta: manifest.dependenciesMeta,
            peerDependenciesMeta: manifest.peerDependenciesMeta,
            bin: manifest.bin
          };
        }
      };
      exports22.NpmSemverResolver = NpmSemverResolver;
    }
  });
  var require_NpmTagResolver = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+plugin-npm@3.0.1_@yarnpkg+core@4.2.0_typanion@3.14.0__@yarnpkg+plugin-pack@4.0.0_@ya_q46l5sxkt25uytyqx553qmxtby/node_modules/@yarnpkg/plugin-npm/lib/NpmTagResolver.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.NpmTagResolver = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var core_1 = require_lib6();
      var core_2 = require_lib6();
      var semver_12 = tslib_12.__importDefault(require_semver2());
      var NpmSemverFetcher_1 = require_NpmSemverFetcher();
      var constants_1 = require_constants8();
      var npmHttpUtils = tslib_12.__importStar(require_npmHttpUtils());
      var NpmTagResolver = class {
        supportsDescriptor(descriptor, opts) {
          if (!descriptor.range.startsWith(constants_1.PROTOCOL))
            return false;
          if (!core_1.TAG_REGEXP.test(descriptor.range.slice(constants_1.PROTOCOL.length)))
            return false;
          return true;
        }
        supportsLocator(locator, opts) {
          return false;
        }
        shouldPersistResolution(locator, opts) {
          throw new Error(`Unreachable`);
        }
        bindDescriptor(descriptor, fromLocator, opts) {
          return descriptor;
        }
        getResolutionDependencies(descriptor, opts) {
          return {};
        }
        async getCandidates(descriptor, dependencies, opts) {
          const tag = descriptor.range.slice(constants_1.PROTOCOL.length);
          const registryData = await npmHttpUtils.getPackageMetadata(descriptor, {
            cache: opts.fetchOptions?.cache,
            project: opts.project
          });
          if (!Object.hasOwn(registryData, `dist-tags`))
            throw new core_1.ReportError(core_1.MessageName.REMOTE_INVALID, `Registry returned invalid data - missing "dist-tags" field`);
          const distTags = registryData[`dist-tags`];
          if (!Object.hasOwn(distTags, tag))
            throw new core_1.ReportError(core_1.MessageName.REMOTE_NOT_FOUND, `Registry failed to return tag "${tag}"`);
          const version = distTags[tag];
          const versionLocator = core_2.structUtils.makeLocator(descriptor, `${constants_1.PROTOCOL}${version}`);
          const archiveUrl = registryData.versions[version].dist.tarball;
          if (NpmSemverFetcher_1.NpmSemverFetcher.isConventionalTarballUrl(versionLocator, archiveUrl, { configuration: opts.project.configuration })) {
            return [versionLocator];
          } else {
            return [core_2.structUtils.bindLocator(versionLocator, { __archiveUrl: archiveUrl })];
          }
        }
        async getSatisfying(descriptor, dependencies, locators, opts) {
          const filtered = [];
          for (const locator of locators) {
            if (locator.identHash !== descriptor.identHash)
              continue;
            const parsedRange = core_2.structUtils.tryParseRange(locator.reference, { requireProtocol: constants_1.PROTOCOL });
            if (!parsedRange || !semver_12.default.valid(parsedRange.selector))
              continue;
            if (parsedRange.params?.__archiveUrl) {
              const newRange = core_2.structUtils.makeRange({ protocol: constants_1.PROTOCOL, selector: parsedRange.selector, source: null, params: null });
              const [resolvedLocator] = await opts.resolver.getCandidates(core_2.structUtils.makeDescriptor(descriptor, newRange), dependencies, opts);
              if (locator.reference !== resolvedLocator.reference) {
                continue;
              }
            }
            filtered.push(locator);
          }
          return {
            locators: filtered,
            sorted: false
          };
        }
        async resolve(locator, opts) {
          throw new Error(`Unreachable`);
        }
      };
      exports22.NpmTagResolver = NpmTagResolver;
    }
  });
  var require_stream5 = __commonJS2({
    "../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/stream.js"(exports22, module22) {
      module22.exports = __require("stream");
    }
  });
  var require_buffer_list = __commonJS2({
    "../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/buffer_list.js"(exports22, module22) {
      function ownKeys2(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target) {
        for (var i = 1;i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        key = _toPropertyKey(key);
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties(target, props) {
        for (var i = 0;i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }
      function _toPropertyKey(arg) {
        var key = _toPrimitive(arg, "string");
        return typeof key === "symbol" ? key : String(key);
      }
      function _toPrimitive(input, hint) {
        if (typeof input !== "object" || input === null)
          return input;
        var prim = input[Symbol.toPrimitive];
        if (prim !== undefined) {
          var res = prim.call(input, hint || "default");
          if (typeof res !== "object")
            return res;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return (hint === "string" ? String : Number)(input);
      }
      var _require = __require("buffer");
      var Buffer2 = _require.Buffer;
      var _require2 = __require("util");
      var inspect = _require2.inspect;
      var custom = inspect && inspect.custom || "inspect";
      function copyBuffer(src, target, offset) {
        Buffer2.prototype.copy.call(src, target, offset);
      }
      module22.exports = /* @__PURE__ */ function() {
        function BufferList() {
          _classCallCheck(this, BufferList);
          this.head = null;
          this.tail = null;
          this.length = 0;
        }
        _createClass(BufferList, [{
          key: "push",
          value: function push(v) {
            var entry = {
              data: v,
              next: null
            };
            if (this.length > 0)
              this.tail.next = entry;
            else
              this.head = entry;
            this.tail = entry;
            ++this.length;
          }
        }, {
          key: "unshift",
          value: function unshift(v) {
            var entry = {
              data: v,
              next: this.head
            };
            if (this.length === 0)
              this.tail = entry;
            this.head = entry;
            ++this.length;
          }
        }, {
          key: "shift",
          value: function shift() {
            if (this.length === 0)
              return;
            var ret = this.head.data;
            if (this.length === 1)
              this.head = this.tail = null;
            else
              this.head = this.head.next;
            --this.length;
            return ret;
          }
        }, {
          key: "clear",
          value: function clear() {
            this.head = this.tail = null;
            this.length = 0;
          }
        }, {
          key: "join",
          value: function join(s) {
            if (this.length === 0)
              return "";
            var p = this.head;
            var ret = "" + p.data;
            while (p = p.next)
              ret += s + p.data;
            return ret;
          }
        }, {
          key: "concat",
          value: function concat(n) {
            if (this.length === 0)
              return Buffer2.alloc(0);
            var ret = Buffer2.allocUnsafe(n >>> 0);
            var p = this.head;
            var i = 0;
            while (p) {
              copyBuffer(p.data, ret, i);
              i += p.data.length;
              p = p.next;
            }
            return ret;
          }
        }, {
          key: "consume",
          value: function consume(n, hasStrings) {
            var ret;
            if (n < this.head.data.length) {
              ret = this.head.data.slice(0, n);
              this.head.data = this.head.data.slice(n);
            } else if (n === this.head.data.length) {
              ret = this.shift();
            } else {
              ret = hasStrings ? this._getString(n) : this._getBuffer(n);
            }
            return ret;
          }
        }, {
          key: "first",
          value: function first() {
            return this.head.data;
          }
        }, {
          key: "_getString",
          value: function _getString(n) {
            var p = this.head;
            var c = 1;
            var ret = p.data;
            n -= ret.length;
            while (p = p.next) {
              var str = p.data;
              var nb = n > str.length ? str.length : n;
              if (nb === str.length)
                ret += str;
              else
                ret += str.slice(0, n);
              n -= nb;
              if (n === 0) {
                if (nb === str.length) {
                  ++c;
                  if (p.next)
                    this.head = p.next;
                  else
                    this.head = this.tail = null;
                } else {
                  this.head = p;
                  p.data = str.slice(nb);
                }
                break;
              }
              ++c;
            }
            this.length -= c;
            return ret;
          }
        }, {
          key: "_getBuffer",
          value: function _getBuffer(n) {
            var ret = Buffer2.allocUnsafe(n);
            var p = this.head;
            var c = 1;
            p.data.copy(ret);
            n -= p.data.length;
            while (p = p.next) {
              var buf = p.data;
              var nb = n > buf.length ? buf.length : n;
              buf.copy(ret, ret.length - n, 0, nb);
              n -= nb;
              if (n === 0) {
                if (nb === buf.length) {
                  ++c;
                  if (p.next)
                    this.head = p.next;
                  else
                    this.head = this.tail = null;
                } else {
                  this.head = p;
                  p.data = buf.slice(nb);
                }
                break;
              }
              ++c;
            }
            this.length -= c;
            return ret;
          }
        }, {
          key: custom,
          value: function value(_, options) {
            return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
              depth: 0,
              customInspect: false
            }));
          }
        }]);
        return BufferList;
      }();
    }
  });
  var require_destroy = __commonJS2({
    "../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/destroy.js"(exports22, module22) {
      function destroy(err, cb) {
        var _this = this;
        var readableDestroyed = this._readableState && this._readableState.destroyed;
        var writableDestroyed = this._writableState && this._writableState.destroyed;
        if (readableDestroyed || writableDestroyed) {
          if (cb) {
            cb(err);
          } else if (err) {
            if (!this._writableState) {
              process.nextTick(emitErrorNT, this, err);
            } else if (!this._writableState.errorEmitted) {
              this._writableState.errorEmitted = true;
              process.nextTick(emitErrorNT, this, err);
            }
          }
          return this;
        }
        if (this._readableState) {
          this._readableState.destroyed = true;
        }
        if (this._writableState) {
          this._writableState.destroyed = true;
        }
        this._destroy(err || null, function(err2) {
          if (!cb && err2) {
            if (!_this._writableState) {
              process.nextTick(emitErrorAndCloseNT, _this, err2);
            } else if (!_this._writableState.errorEmitted) {
              _this._writableState.errorEmitted = true;
              process.nextTick(emitErrorAndCloseNT, _this, err2);
            } else {
              process.nextTick(emitCloseNT, _this);
            }
          } else if (cb) {
            process.nextTick(emitCloseNT, _this);
            cb(err2);
          } else {
            process.nextTick(emitCloseNT, _this);
          }
        });
        return this;
      }
      function emitErrorAndCloseNT(self2, err) {
        emitErrorNT(self2, err);
        emitCloseNT(self2);
      }
      function emitCloseNT(self2) {
        if (self2._writableState && !self2._writableState.emitClose)
          return;
        if (self2._readableState && !self2._readableState.emitClose)
          return;
        self2.emit("close");
      }
      function undestroy() {
        if (this._readableState) {
          this._readableState.destroyed = false;
          this._readableState.reading = false;
          this._readableState.ended = false;
          this._readableState.endEmitted = false;
        }
        if (this._writableState) {
          this._writableState.destroyed = false;
          this._writableState.ended = false;
          this._writableState.ending = false;
          this._writableState.finalCalled = false;
          this._writableState.prefinished = false;
          this._writableState.finished = false;
          this._writableState.errorEmitted = false;
        }
      }
      function emitErrorNT(self2, err) {
        self2.emit("error", err);
      }
      function errorOrDestroy(stream, err) {
        var rState = stream._readableState;
        var wState = stream._writableState;
        if (rState && rState.autoDestroy || wState && wState.autoDestroy)
          stream.destroy(err);
        else
          stream.emit("error", err);
      }
      module22.exports = {
        destroy,
        undestroy,
        errorOrDestroy
      };
    }
  });
  var require_errors5 = __commonJS2({
    "../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/errors.js"(exports22, module22) {
      var codes = {};
      function createErrorType(code, message, Base) {
        if (!Base) {
          Base = Error;
        }
        function getMessage(arg1, arg2, arg3) {
          if (typeof message === "string") {
            return message;
          } else {
            return message(arg1, arg2, arg3);
          }
        }

        class NodeError extends Base {
          constructor(arg1, arg2, arg3) {
            super(getMessage(arg1, arg2, arg3));
          }
        }
        NodeError.prototype.name = Base.name;
        NodeError.prototype.code = code;
        codes[code] = NodeError;
      }
      function oneOf(expected, thing) {
        if (Array.isArray(expected)) {
          const len = expected.length;
          expected = expected.map((i) => String(i));
          if (len > 2) {
            return `one of ${thing} ${expected.slice(0, len - 1).join(", ")}, or ` + expected[len - 1];
          } else if (len === 2) {
            return `one of ${thing} ${expected[0]} or ${expected[1]}`;
          } else {
            return `of ${thing} ${expected[0]}`;
          }
        } else {
          return `of ${thing} ${String(expected)}`;
        }
      }
      function startsWith(str, search, pos) {
        return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
      }
      function endsWith(str, search, this_len) {
        if (this_len === undefined || this_len > str.length) {
          this_len = str.length;
        }
        return str.substring(this_len - search.length, this_len) === search;
      }
      function includes(str, search, start) {
        if (typeof start !== "number") {
          start = 0;
        }
        if (start + search.length > str.length) {
          return false;
        } else {
          return str.indexOf(search, start) !== -1;
        }
      }
      createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
        return 'The value "' + value + '" is invalid for option "' + name + '"';
      }, TypeError);
      createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
        let determiner;
        if (typeof expected === "string" && startsWith(expected, "not ")) {
          determiner = "must not be";
          expected = expected.replace(/^not /, "");
        } else {
          determiner = "must be";
        }
        let msg;
        if (endsWith(name, " argument")) {
          msg = `The ${name} ${determiner} ${oneOf(expected, "type")}`;
        } else {
          const type = includes(name, ".") ? "property" : "argument";
          msg = `The "${name}" ${type} ${determiner} ${oneOf(expected, "type")}`;
        }
        msg += `. Received type ${typeof actual}`;
        return msg;
      }, TypeError);
      createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
      createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
        return "The " + name + " method is not implemented";
      });
      createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
      createErrorType("ERR_STREAM_DESTROYED", function(name) {
        return "Cannot call " + name + " after a stream was destroyed";
      });
      createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
      createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
      createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
      createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
      createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
        return "Unknown encoding: " + arg;
      }, TypeError);
      createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
      module22.exports.codes = codes;
    }
  });
  var require_state2 = __commonJS2({
    "../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/state.js"(exports22, module22) {
      var ERR_INVALID_OPT_VALUE = require_errors5().codes.ERR_INVALID_OPT_VALUE;
      function highWaterMarkFrom(options, isDuplex, duplexKey) {
        return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
      }
      function getHighWaterMark(state, options, duplexKey, isDuplex) {
        var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
        if (hwm != null) {
          if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : "highWaterMark";
            throw new ERR_INVALID_OPT_VALUE(name, hwm);
          }
          return Math.floor(hwm);
        }
        return state.objectMode ? 16 : 16 * 1024;
      }
      module22.exports = {
        getHighWaterMark
      };
    }
  });
  var require_inherits_browser = __commonJS2({
    "../../node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js"(exports22, module22) {
      if (typeof Object.create === "function") {
        module22.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            ctor.prototype = Object.create(superCtor.prototype, {
              constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
          }
        };
      } else {
        module22.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function() {
            };
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor;
            ctor.prototype.constructor = ctor;
          }
        };
      }
    }
  });
  var require_inherits = __commonJS2({
    "../../node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits.js"(exports22, module22) {
      try {
        util = __require("util");
        if (typeof util.inherits !== "function")
          throw "";
        module22.exports = util.inherits;
      } catch (e) {
        module22.exports = require_inherits_browser();
      }
      var util;
    }
  });
  var require_node2 = __commonJS2({
    "../../node_modules/.pnpm/util-deprecate@1.0.2/node_modules/util-deprecate/node.js"(exports22, module22) {
      module22.exports = __require("util").deprecate;
    }
  });
  var require_stream_writable = __commonJS2({
    "../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_writable.js"(exports22, module22) {
      module22.exports = Writable;
      function CorkedRequest(state) {
        var _this = this;
        this.next = null;
        this.entry = null;
        this.finish = function() {
          onCorkedFinish(_this, state);
        };
      }
      var Duplex;
      Writable.WritableState = WritableState;
      var internalUtil = {
        deprecate: require_node2()
      };
      var Stream = require_stream5();
      var Buffer2 = __require("buffer").Buffer;
      var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
      };
      function _uint8ArrayToBuffer(chunk) {
        return Buffer2.from(chunk);
      }
      function _isUint8Array(obj) {
        return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
      }
      var destroyImpl = require_destroy();
      var _require = require_state2();
      var getHighWaterMark = _require.getHighWaterMark;
      var _require$codes = require_errors5().codes;
      var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
      var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
      var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
      var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;
      var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
      var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;
      var ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END;
      var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
      var errorOrDestroy = destroyImpl.errorOrDestroy;
      require_inherits()(Writable, Stream);
      function nop() {
      }
      function WritableState(options, stream, isDuplex) {
        Duplex = Duplex || require_stream_duplex();
        options = options || {};
        if (typeof isDuplex !== "boolean")
          isDuplex = stream instanceof Duplex;
        this.objectMode = !!options.objectMode;
        if (isDuplex)
          this.objectMode = this.objectMode || !!options.writableObjectMode;
        this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
        this.finalCalled = false;
        this.needDrain = false;
        this.ending = false;
        this.ended = false;
        this.finished = false;
        this.destroyed = false;
        var noDecode = options.decodeStrings === false;
        this.decodeStrings = !noDecode;
        this.defaultEncoding = options.defaultEncoding || "utf8";
        this.length = 0;
        this.writing = false;
        this.corked = 0;
        this.sync = true;
        this.bufferProcessing = false;
        this.onwrite = function(er) {
          onwrite(stream, er);
        };
        this.writecb = null;
        this.writelen = 0;
        this.bufferedRequest = null;
        this.lastBufferedRequest = null;
        this.pendingcb = 0;
        this.prefinished = false;
        this.errorEmitted = false;
        this.emitClose = options.emitClose !== false;
        this.autoDestroy = !!options.autoDestroy;
        this.bufferedRequestCount = 0;
        this.corkedRequestsFree = new CorkedRequest(this);
      }
      WritableState.prototype.getBuffer = function getBuffer() {
        var current = this.bufferedRequest;
        var out = [];
        while (current) {
          out.push(current);
          current = current.next;
        }
        return out;
      };
      (function() {
        try {
          Object.defineProperty(WritableState.prototype, "buffer", {
            get: internalUtil.deprecate(function writableStateBufferGetter() {
              return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
          });
        } catch (_) {
        }
      })();
      var realHasInstance;
      if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
        realHasInstance = Function.prototype[Symbol.hasInstance];
        Object.defineProperty(Writable, Symbol.hasInstance, {
          value: function value(object) {
            if (realHasInstance.call(this, object))
              return true;
            if (this !== Writable)
              return false;
            return object && object._writableState instanceof WritableState;
          }
        });
      } else {
        realHasInstance = function realHasInstance2(object) {
          return object instanceof this;
        };
      }
      function Writable(options) {
        Duplex = Duplex || require_stream_duplex();
        var isDuplex = this instanceof Duplex;
        if (!isDuplex && !realHasInstance.call(Writable, this))
          return new Writable(options);
        this._writableState = new WritableState(options, this, isDuplex);
        this.writable = true;
        if (options) {
          if (typeof options.write === "function")
            this._write = options.write;
          if (typeof options.writev === "function")
            this._writev = options.writev;
          if (typeof options.destroy === "function")
            this._destroy = options.destroy;
          if (typeof options.final === "function")
            this._final = options.final;
        }
        Stream.call(this);
      }
      Writable.prototype.pipe = function() {
        errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE);
      };
      function writeAfterEnd(stream, cb) {
        var er = new ERR_STREAM_WRITE_AFTER_END;
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
      }
      function validChunk(stream, state, chunk, cb) {
        var er;
        if (chunk === null) {
          er = new ERR_STREAM_NULL_VALUES;
        } else if (typeof chunk !== "string" && !state.objectMode) {
          er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
        }
        if (er) {
          errorOrDestroy(stream, er);
          process.nextTick(cb, er);
          return false;
        }
        return true;
      }
      Writable.prototype.write = function(chunk, encoding, cb) {
        var state = this._writableState;
        var ret = false;
        var isBuf = !state.objectMode && _isUint8Array(chunk);
        if (isBuf && !Buffer2.isBuffer(chunk)) {
          chunk = _uint8ArrayToBuffer(chunk);
        }
        if (typeof encoding === "function") {
          cb = encoding;
          encoding = null;
        }
        if (isBuf)
          encoding = "buffer";
        else if (!encoding)
          encoding = state.defaultEncoding;
        if (typeof cb !== "function")
          cb = nop;
        if (state.ending)
          writeAfterEnd(this, cb);
        else if (isBuf || validChunk(this, state, chunk, cb)) {
          state.pendingcb++;
          ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
        }
        return ret;
      };
      Writable.prototype.cork = function() {
        this._writableState.corked++;
      };
      Writable.prototype.uncork = function() {
        var state = this._writableState;
        if (state.corked) {
          state.corked--;
          if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)
            clearBuffer(this, state);
        }
      };
      Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
        if (typeof encoding === "string")
          encoding = encoding.toLowerCase();
        if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
          throw new ERR_UNKNOWN_ENCODING(encoding);
        this._writableState.defaultEncoding = encoding;
        return this;
      };
      Object.defineProperty(Writable.prototype, "writableBuffer", {
        enumerable: false,
        get: function get() {
          return this._writableState && this._writableState.getBuffer();
        }
      });
      function decodeChunk(state, chunk, encoding) {
        if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
          chunk = Buffer2.from(chunk, encoding);
        }
        return chunk;
      }
      Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
        enumerable: false,
        get: function get() {
          return this._writableState.highWaterMark;
        }
      });
      function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
        if (!isBuf) {
          var newChunk = decodeChunk(state, chunk, encoding);
          if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
          }
        }
        var len = state.objectMode ? 1 : chunk.length;
        state.length += len;
        var ret = state.length < state.highWaterMark;
        if (!ret)
          state.needDrain = true;
        if (state.writing || state.corked) {
          var last = state.lastBufferedRequest;
          state.lastBufferedRequest = {
            chunk,
            encoding,
            isBuf,
            callback: cb,
            next: null
          };
          if (last) {
            last.next = state.lastBufferedRequest;
          } else {
            state.bufferedRequest = state.lastBufferedRequest;
          }
          state.bufferedRequestCount += 1;
        } else {
          doWrite(stream, state, false, len, chunk, encoding, cb);
        }
        return ret;
      }
      function doWrite(stream, state, writev, len, chunk, encoding, cb) {
        state.writelen = len;
        state.writecb = cb;
        state.writing = true;
        state.sync = true;
        if (state.destroyed)
          state.onwrite(new ERR_STREAM_DESTROYED("write"));
        else if (writev)
          stream._writev(chunk, state.onwrite);
        else
          stream._write(chunk, encoding, state.onwrite);
        state.sync = false;
      }
      function onwriteError(stream, state, sync, er, cb) {
        --state.pendingcb;
        if (sync) {
          process.nextTick(cb, er);
          process.nextTick(finishMaybe, stream, state);
          stream._writableState.errorEmitted = true;
          errorOrDestroy(stream, er);
        } else {
          cb(er);
          stream._writableState.errorEmitted = true;
          errorOrDestroy(stream, er);
          finishMaybe(stream, state);
        }
      }
      function onwriteStateUpdate(state) {
        state.writing = false;
        state.writecb = null;
        state.length -= state.writelen;
        state.writelen = 0;
      }
      function onwrite(stream, er) {
        var state = stream._writableState;
        var sync = state.sync;
        var cb = state.writecb;
        if (typeof cb !== "function")
          throw new ERR_MULTIPLE_CALLBACK;
        onwriteStateUpdate(state);
        if (er)
          onwriteError(stream, state, sync, er, cb);
        else {
          var finished = needFinish(state) || stream.destroyed;
          if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
            clearBuffer(stream, state);
          }
          if (sync) {
            process.nextTick(afterWrite, stream, state, finished, cb);
          } else {
            afterWrite(stream, state, finished, cb);
          }
        }
      }
      function afterWrite(stream, state, finished, cb) {
        if (!finished)
          onwriteDrain(stream, state);
        state.pendingcb--;
        cb();
        finishMaybe(stream, state);
      }
      function onwriteDrain(stream, state) {
        if (state.length === 0 && state.needDrain) {
          state.needDrain = false;
          stream.emit("drain");
        }
      }
      function clearBuffer(stream, state) {
        state.bufferProcessing = true;
        var entry = state.bufferedRequest;
        if (stream._writev && entry && entry.next) {
          var l = state.bufferedRequestCount;
          var buffer = new Array(l);
          var holder = state.corkedRequestsFree;
          holder.entry = entry;
          var count = 0;
          var allBuffers = true;
          while (entry) {
            buffer[count] = entry;
            if (!entry.isBuf)
              allBuffers = false;
            entry = entry.next;
            count += 1;
          }
          buffer.allBuffers = allBuffers;
          doWrite(stream, state, true, state.length, buffer, "", holder.finish);
          state.pendingcb++;
          state.lastBufferedRequest = null;
          if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
          } else {
            state.corkedRequestsFree = new CorkedRequest(state);
          }
          state.bufferedRequestCount = 0;
        } else {
          while (entry) {
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--;
            if (state.writing) {
              break;
            }
          }
          if (entry === null)
            state.lastBufferedRequest = null;
        }
        state.bufferedRequest = entry;
        state.bufferProcessing = false;
      }
      Writable.prototype._write = function(chunk, encoding, cb) {
        cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
      };
      Writable.prototype._writev = null;
      Writable.prototype.end = function(chunk, encoding, cb) {
        var state = this._writableState;
        if (typeof chunk === "function") {
          cb = chunk;
          chunk = null;
          encoding = null;
        } else if (typeof encoding === "function") {
          cb = encoding;
          encoding = null;
        }
        if (chunk !== null && chunk !== undefined)
          this.write(chunk, encoding);
        if (state.corked) {
          state.corked = 1;
          this.uncork();
        }
        if (!state.ending)
          endWritable(this, state, cb);
        return this;
      };
      Object.defineProperty(Writable.prototype, "writableLength", {
        enumerable: false,
        get: function get() {
          return this._writableState.length;
        }
      });
      function needFinish(state) {
        return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
      }
      function callFinal(stream, state) {
        stream._final(function(err) {
          state.pendingcb--;
          if (err) {
            errorOrDestroy(stream, err);
          }
          state.prefinished = true;
          stream.emit("prefinish");
          finishMaybe(stream, state);
        });
      }
      function prefinish(stream, state) {
        if (!state.prefinished && !state.finalCalled) {
          if (typeof stream._final === "function" && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            process.nextTick(callFinal, stream, state);
          } else {
            state.prefinished = true;
            stream.emit("prefinish");
          }
        }
      }
      function finishMaybe(stream, state) {
        var need = needFinish(state);
        if (need) {
          prefinish(stream, state);
          if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit("finish");
            if (state.autoDestroy) {
              var rState = stream._readableState;
              if (!rState || rState.autoDestroy && rState.endEmitted) {
                stream.destroy();
              }
            }
          }
        }
        return need;
      }
      function endWritable(stream, state, cb) {
        state.ending = true;
        finishMaybe(stream, state);
        if (cb) {
          if (state.finished)
            process.nextTick(cb);
          else
            stream.once("finish", cb);
        }
        state.ended = true;
        stream.writable = false;
      }
      function onCorkedFinish(corkReq, state, err) {
        var entry = corkReq.entry;
        corkReq.entry = null;
        while (entry) {
          var cb = entry.callback;
          state.pendingcb--;
          cb(err);
          entry = entry.next;
        }
        state.corkedRequestsFree.next = corkReq;
      }
      Object.defineProperty(Writable.prototype, "destroyed", {
        enumerable: false,
        get: function get() {
          if (this._writableState === undefined) {
            return false;
          }
          return this._writableState.destroyed;
        },
        set: function set(value) {
          if (!this._writableState) {
            return;
          }
          this._writableState.destroyed = value;
        }
      });
      Writable.prototype.destroy = destroyImpl.destroy;
      Writable.prototype._undestroy = destroyImpl.undestroy;
      Writable.prototype._destroy = function(err, cb) {
        cb(err);
      };
    }
  });
  var require_stream_duplex = __commonJS2({
    "../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_duplex.js"(exports22, module22) {
      var objectKeys = Object.keys || function(obj) {
        var keys2 = [];
        for (var key in obj)
          keys2.push(key);
        return keys2;
      };
      module22.exports = Duplex;
      var Readable = require_stream_readable();
      var Writable = require_stream_writable();
      require_inherits()(Duplex, Readable);
      {
        keys = objectKeys(Writable.prototype);
        for (v = 0;v < keys.length; v++) {
          method = keys[v];
          if (!Duplex.prototype[method])
            Duplex.prototype[method] = Writable.prototype[method];
        }
      }
      var keys;
      var method;
      var v;
      function Duplex(options) {
        if (!(this instanceof Duplex))
          return new Duplex(options);
        Readable.call(this, options);
        Writable.call(this, options);
        this.allowHalfOpen = true;
        if (options) {
          if (options.readable === false)
            this.readable = false;
          if (options.writable === false)
            this.writable = false;
          if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once("end", onend);
          }
        }
      }
      Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
        enumerable: false,
        get: function get() {
          return this._writableState.highWaterMark;
        }
      });
      Object.defineProperty(Duplex.prototype, "writableBuffer", {
        enumerable: false,
        get: function get() {
          return this._writableState && this._writableState.getBuffer();
        }
      });
      Object.defineProperty(Duplex.prototype, "writableLength", {
        enumerable: false,
        get: function get() {
          return this._writableState.length;
        }
      });
      function onend() {
        if (this._writableState.ended)
          return;
        process.nextTick(onEndNT, this);
      }
      function onEndNT(self2) {
        self2.end();
      }
      Object.defineProperty(Duplex.prototype, "destroyed", {
        enumerable: false,
        get: function get() {
          if (this._readableState === undefined || this._writableState === undefined) {
            return false;
          }
          return this._readableState.destroyed && this._writableState.destroyed;
        },
        set: function set(value) {
          if (this._readableState === undefined || this._writableState === undefined) {
            return;
          }
          this._readableState.destroyed = value;
          this._writableState.destroyed = value;
        }
      });
    }
  });
  var require_safe_buffer = __commonJS2({
    "../../node_modules/.pnpm/safe-buffer@5.2.1/node_modules/safe-buffer/index.js"(exports22, module22) {
      var buffer = __require("buffer");
      var Buffer2 = buffer.Buffer;
      function copyProps(src, dst) {
        for (var key in src) {
          dst[key] = src[key];
        }
      }
      if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
        module22.exports = buffer;
      } else {
        copyProps(buffer, exports22);
        exports22.Buffer = SafeBuffer;
      }
      function SafeBuffer(arg, encodingOrOffset, length) {
        return Buffer2(arg, encodingOrOffset, length);
      }
      SafeBuffer.prototype = Object.create(Buffer2.prototype);
      copyProps(Buffer2, SafeBuffer);
      SafeBuffer.from = function(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          throw new TypeError("Argument must not be a number");
        }
        return Buffer2(arg, encodingOrOffset, length);
      };
      SafeBuffer.alloc = function(size, fill, encoding) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        var buf = Buffer2(size);
        if (fill !== undefined) {
          if (typeof encoding === "string") {
            buf.fill(fill, encoding);
          } else {
            buf.fill(fill);
          }
        } else {
          buf.fill(0);
        }
        return buf;
      };
      SafeBuffer.allocUnsafe = function(size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return Buffer2(size);
      };
      SafeBuffer.allocUnsafeSlow = function(size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return buffer.SlowBuffer(size);
      };
    }
  });
  var require_string_decoder = __commonJS2({
    "../../node_modules/.pnpm/string_decoder@1.3.0/node_modules/string_decoder/lib/string_decoder.js"(exports22) {
      var Buffer2 = require_safe_buffer().Buffer;
      var isEncoding = Buffer2.isEncoding || function(encoding) {
        encoding = "" + encoding;
        switch (encoding && encoding.toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
          case "raw":
            return true;
          default:
            return false;
        }
      };
      function _normalizeEncoding(enc) {
        if (!enc)
          return "utf8";
        var retried;
        while (true) {
          switch (enc) {
            case "utf8":
            case "utf-8":
              return "utf8";
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return "utf16le";
            case "latin1":
            case "binary":
              return "latin1";
            case "base64":
            case "ascii":
            case "hex":
              return enc;
            default:
              if (retried)
                return;
              enc = ("" + enc).toLowerCase();
              retried = true;
          }
        }
      }
      function normalizeEncoding(enc) {
        var nenc = _normalizeEncoding(enc);
        if (typeof nenc !== "string" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc)))
          throw new Error("Unknown encoding: " + enc);
        return nenc || enc;
      }
      exports22.StringDecoder = StringDecoder;
      function StringDecoder(encoding) {
        this.encoding = normalizeEncoding(encoding);
        var nb;
        switch (this.encoding) {
          case "utf16le":
            this.text = utf16Text;
            this.end = utf16End;
            nb = 4;
            break;
          case "utf8":
            this.fillLast = utf8FillLast;
            nb = 4;
            break;
          case "base64":
            this.text = base64Text;
            this.end = base64End;
            nb = 3;
            break;
          default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
        }
        this.lastNeed = 0;
        this.lastTotal = 0;
        this.lastChar = Buffer2.allocUnsafe(nb);
      }
      StringDecoder.prototype.write = function(buf) {
        if (buf.length === 0)
          return "";
        var r;
        var i;
        if (this.lastNeed) {
          r = this.fillLast(buf);
          if (r === undefined)
            return "";
          i = this.lastNeed;
          this.lastNeed = 0;
        } else {
          i = 0;
        }
        if (i < buf.length)
          return r ? r + this.text(buf, i) : this.text(buf, i);
        return r || "";
      };
      StringDecoder.prototype.end = utf8End;
      StringDecoder.prototype.text = utf8Text;
      StringDecoder.prototype.fillLast = function(buf) {
        if (this.lastNeed <= buf.length) {
          buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
          return this.lastChar.toString(this.encoding, 0, this.lastTotal);
        }
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
        this.lastNeed -= buf.length;
      };
      function utf8CheckByte(byte) {
        if (byte <= 127)
          return 0;
        else if (byte >> 5 === 6)
          return 2;
        else if (byte >> 4 === 14)
          return 3;
        else if (byte >> 3 === 30)
          return 4;
        return byte >> 6 === 2 ? -1 : -2;
      }
      function utf8CheckIncomplete(self2, buf, i) {
        var j = buf.length - 1;
        if (j < i)
          return 0;
        var nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
          if (nb > 0)
            self2.lastNeed = nb - 1;
          return nb;
        }
        if (--j < i || nb === -2)
          return 0;
        nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
          if (nb > 0)
            self2.lastNeed = nb - 2;
          return nb;
        }
        if (--j < i || nb === -2)
          return 0;
        nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
          if (nb > 0) {
            if (nb === 2)
              nb = 0;
            else
              self2.lastNeed = nb - 3;
          }
          return nb;
        }
        return 0;
      }
      function utf8CheckExtraBytes(self2, buf, p) {
        if ((buf[0] & 192) !== 128) {
          self2.lastNeed = 0;
          return "\uFFFD";
        }
        if (self2.lastNeed > 1 && buf.length > 1) {
          if ((buf[1] & 192) !== 128) {
            self2.lastNeed = 1;
            return "\uFFFD";
          }
          if (self2.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 192) !== 128) {
              self2.lastNeed = 2;
              return "\uFFFD";
            }
          }
        }
      }
      function utf8FillLast(buf) {
        var p = this.lastTotal - this.lastNeed;
        var r = utf8CheckExtraBytes(this, buf, p);
        if (r !== undefined)
          return r;
        if (this.lastNeed <= buf.length) {
          buf.copy(this.lastChar, p, 0, this.lastNeed);
          return this.lastChar.toString(this.encoding, 0, this.lastTotal);
        }
        buf.copy(this.lastChar, p, 0, buf.length);
        this.lastNeed -= buf.length;
      }
      function utf8Text(buf, i) {
        var total = utf8CheckIncomplete(this, buf, i);
        if (!this.lastNeed)
          return buf.toString("utf8", i);
        this.lastTotal = total;
        var end = buf.length - (total - this.lastNeed);
        buf.copy(this.lastChar, 0, end);
        return buf.toString("utf8", i, end);
      }
      function utf8End(buf) {
        var r = buf && buf.length ? this.write(buf) : "";
        if (this.lastNeed)
          return r + "\uFFFD";
        return r;
      }
      function utf16Text(buf, i) {
        if ((buf.length - i) % 2 === 0) {
          var r = buf.toString("utf16le", i);
          if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 55296 && c <= 56319) {
              this.lastNeed = 2;
              this.lastTotal = 4;
              this.lastChar[0] = buf[buf.length - 2];
              this.lastChar[1] = buf[buf.length - 1];
              return r.slice(0, -1);
            }
          }
          return r;
        }
        this.lastNeed = 1;
        this.lastTotal = 2;
        this.lastChar[0] = buf[buf.length - 1];
        return buf.toString("utf16le", i, buf.length - 1);
      }
      function utf16End(buf) {
        var r = buf && buf.length ? this.write(buf) : "";
        if (this.lastNeed) {
          var end = this.lastTotal - this.lastNeed;
          return r + this.lastChar.toString("utf16le", 0, end);
        }
        return r;
      }
      function base64Text(buf, i) {
        var n = (buf.length - i) % 3;
        if (n === 0)
          return buf.toString("base64", i);
        this.lastNeed = 3 - n;
        this.lastTotal = 3;
        if (n === 1) {
          this.lastChar[0] = buf[buf.length - 1];
        } else {
          this.lastChar[0] = buf[buf.length - 2];
          this.lastChar[1] = buf[buf.length - 1];
        }
        return buf.toString("base64", i, buf.length - n);
      }
      function base64End(buf) {
        var r = buf && buf.length ? this.write(buf) : "";
        if (this.lastNeed)
          return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
        return r;
      }
      function simpleWrite(buf) {
        return buf.toString(this.encoding);
      }
      function simpleEnd(buf) {
        return buf && buf.length ? this.write(buf) : "";
      }
    }
  });
  var require_end_of_stream2 = __commonJS2({
    "../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/end-of-stream.js"(exports22, module22) {
      var ERR_STREAM_PREMATURE_CLOSE = require_errors5().codes.ERR_STREAM_PREMATURE_CLOSE;
      function once(callback) {
        var called = false;
        return function() {
          if (called)
            return;
          called = true;
          for (var _len = arguments.length, args = new Array(_len), _key = 0;_key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          callback.apply(this, args);
        };
      }
      function noop() {
      }
      function isRequest(stream) {
        return stream.setHeader && typeof stream.abort === "function";
      }
      function eos(stream, opts, callback) {
        if (typeof opts === "function")
          return eos(stream, null, opts);
        if (!opts)
          opts = {};
        callback = once(callback || noop);
        var readable = opts.readable || opts.readable !== false && stream.readable;
        var writable = opts.writable || opts.writable !== false && stream.writable;
        var onlegacyfinish = function onlegacyfinish2() {
          if (!stream.writable)
            onfinish();
        };
        var writableEnded = stream._writableState && stream._writableState.finished;
        var onfinish = function onfinish2() {
          writable = false;
          writableEnded = true;
          if (!readable)
            callback.call(stream);
        };
        var readableEnded = stream._readableState && stream._readableState.endEmitted;
        var onend = function onend2() {
          readable = false;
          readableEnded = true;
          if (!writable)
            callback.call(stream);
        };
        var onerror = function onerror2(err) {
          callback.call(stream, err);
        };
        var onclose = function onclose2() {
          var err;
          if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended)
              err = new ERR_STREAM_PREMATURE_CLOSE;
            return callback.call(stream, err);
          }
          if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended)
              err = new ERR_STREAM_PREMATURE_CLOSE;
            return callback.call(stream, err);
          }
        };
        var onrequest = function onrequest2() {
          stream.req.on("finish", onfinish);
        };
        if (isRequest(stream)) {
          stream.on("complete", onfinish);
          stream.on("abort", onclose);
          if (stream.req)
            onrequest();
          else
            stream.on("request", onrequest);
        } else if (writable && !stream._writableState) {
          stream.on("end", onlegacyfinish);
          stream.on("close", onlegacyfinish);
        }
        stream.on("end", onend);
        stream.on("finish", onfinish);
        if (opts.error !== false)
          stream.on("error", onerror);
        stream.on("close", onclose);
        return function() {
          stream.removeListener("complete", onfinish);
          stream.removeListener("abort", onclose);
          stream.removeListener("request", onrequest);
          if (stream.req)
            stream.req.removeListener("finish", onfinish);
          stream.removeListener("end", onlegacyfinish);
          stream.removeListener("close", onlegacyfinish);
          stream.removeListener("finish", onfinish);
          stream.removeListener("end", onend);
          stream.removeListener("error", onerror);
          stream.removeListener("close", onclose);
        };
      }
      module22.exports = eos;
    }
  });
  var require_async_iterator = __commonJS2({
    "../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/async_iterator.js"(exports22, module22) {
      var _Object$setPrototypeO;
      function _defineProperty(obj, key, value) {
        key = _toPropertyKey(key);
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _toPropertyKey(arg) {
        var key = _toPrimitive(arg, "string");
        return typeof key === "symbol" ? key : String(key);
      }
      function _toPrimitive(input, hint) {
        if (typeof input !== "object" || input === null)
          return input;
        var prim = input[Symbol.toPrimitive];
        if (prim !== undefined) {
          var res = prim.call(input, hint || "default");
          if (typeof res !== "object")
            return res;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return (hint === "string" ? String : Number)(input);
      }
      var finished = require_end_of_stream2();
      var kLastResolve = Symbol("lastResolve");
      var kLastReject = Symbol("lastReject");
      var kError = Symbol("error");
      var kEnded = Symbol("ended");
      var kLastPromise = Symbol("lastPromise");
      var kHandlePromise = Symbol("handlePromise");
      var kStream = Symbol("stream");
      function createIterResult(value, done) {
        return {
          value,
          done
        };
      }
      function readAndResolve(iter) {
        var resolve = iter[kLastResolve];
        if (resolve !== null) {
          var data = iter[kStream].read();
          if (data !== null) {
            iter[kLastPromise] = null;
            iter[kLastResolve] = null;
            iter[kLastReject] = null;
            resolve(createIterResult(data, false));
          }
        }
      }
      function onReadable(iter) {
        process.nextTick(readAndResolve, iter);
      }
      function wrapForNext(lastPromise, iter) {
        return function(resolve, reject) {
          lastPromise.then(function() {
            if (iter[kEnded]) {
              resolve(createIterResult(undefined, true));
              return;
            }
            iter[kHandlePromise](resolve, reject);
          }, reject);
        };
      }
      var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
      });
      var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
        get stream() {
          return this[kStream];
        },
        next: function next() {
          var _this = this;
          var error = this[kError];
          if (error !== null) {
            return Promise.reject(error);
          }
          if (this[kEnded]) {
            return Promise.resolve(createIterResult(undefined, true));
          }
          if (this[kStream].destroyed) {
            return new Promise(function(resolve, reject) {
              process.nextTick(function() {
                if (_this[kError]) {
                  reject(_this[kError]);
                } else {
                  resolve(createIterResult(undefined, true));
                }
              });
            });
          }
          var lastPromise = this[kLastPromise];
          var promise;
          if (lastPromise) {
            promise = new Promise(wrapForNext(lastPromise, this));
          } else {
            var data = this[kStream].read();
            if (data !== null) {
              return Promise.resolve(createIterResult(data, false));
            }
            promise = new Promise(this[kHandlePromise]);
          }
          this[kLastPromise] = promise;
          return promise;
        }
      }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
        return this;
      }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
        var _this2 = this;
        return new Promise(function(resolve, reject) {
          _this2[kStream].destroy(null, function(err) {
            if (err) {
              reject(err);
              return;
            }
            resolve(createIterResult(undefined, true));
          });
        });
      }), _Object$setPrototypeO), AsyncIteratorPrototype);
      var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {
        var _Object$create;
        var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
          value: stream,
          writable: true
        }), _defineProperty(_Object$create, kLastResolve, {
          value: null,
          writable: true
        }), _defineProperty(_Object$create, kLastReject, {
          value: null,
          writable: true
        }), _defineProperty(_Object$create, kError, {
          value: null,
          writable: true
        }), _defineProperty(_Object$create, kEnded, {
          value: stream._readableState.endEmitted,
          writable: true
        }), _defineProperty(_Object$create, kHandlePromise, {
          value: function value(resolve, reject) {
            var data = iterator[kStream].read();
            if (data) {
              iterator[kLastPromise] = null;
              iterator[kLastResolve] = null;
              iterator[kLastReject] = null;
              resolve(createIterResult(data, false));
            } else {
              iterator[kLastResolve] = resolve;
              iterator[kLastReject] = reject;
            }
          },
          writable: true
        }), _Object$create));
        iterator[kLastPromise] = null;
        finished(stream, function(err) {
          if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
            var reject = iterator[kLastReject];
            if (reject !== null) {
              iterator[kLastPromise] = null;
              iterator[kLastResolve] = null;
              iterator[kLastReject] = null;
              reject(err);
            }
            iterator[kError] = err;
            return;
          }
          var resolve = iterator[kLastResolve];
          if (resolve !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(undefined, true));
          }
          iterator[kEnded] = true;
        });
        stream.on("readable", onReadable.bind(null, iterator));
        return iterator;
      };
      module22.exports = createReadableStreamAsyncIterator;
    }
  });
  var require_from = __commonJS2({
    "../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/from.js"(exports22, module22) {
      function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }
        if (info.done) {
          resolve(value);
        } else {
          Promise.resolve(value).then(_next, _throw);
        }
      }
      function _asyncToGenerator(fn) {
        return function() {
          var self2 = this, args = arguments;
          return new Promise(function(resolve, reject) {
            var gen = fn.apply(self2, args);
            function _next(value) {
              asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
              asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
          });
        };
      }
      function ownKeys2(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target) {
        for (var i = 1;i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        key = _toPropertyKey(key);
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _toPropertyKey(arg) {
        var key = _toPrimitive(arg, "string");
        return typeof key === "symbol" ? key : String(key);
      }
      function _toPrimitive(input, hint) {
        if (typeof input !== "object" || input === null)
          return input;
        var prim = input[Symbol.toPrimitive];
        if (prim !== undefined) {
          var res = prim.call(input, hint || "default");
          if (typeof res !== "object")
            return res;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return (hint === "string" ? String : Number)(input);
      }
      var ERR_INVALID_ARG_TYPE = require_errors5().codes.ERR_INVALID_ARG_TYPE;
      function from(Readable, iterable, opts) {
        var iterator;
        if (iterable && typeof iterable.next === "function") {
          iterator = iterable;
        } else if (iterable && iterable[Symbol.asyncIterator])
          iterator = iterable[Symbol.asyncIterator]();
        else if (iterable && iterable[Symbol.iterator])
          iterator = iterable[Symbol.iterator]();
        else
          throw new ERR_INVALID_ARG_TYPE("iterable", ["Iterable"], iterable);
        var readable = new Readable(_objectSpread({
          objectMode: true
        }, opts));
        var reading = false;
        readable._read = function() {
          if (!reading) {
            reading = true;
            next();
          }
        };
        function next() {
          return _next2.apply(this, arguments);
        }
        function _next2() {
          _next2 = _asyncToGenerator(function* () {
            try {
              var _yield$iterator$next = yield iterator.next(), value = _yield$iterator$next.value, done = _yield$iterator$next.done;
              if (done) {
                readable.push(null);
              } else if (readable.push(yield value)) {
                next();
              } else {
                reading = false;
              }
            } catch (err) {
              readable.destroy(err);
            }
          });
          return _next2.apply(this, arguments);
        }
        return readable;
      }
      module22.exports = from;
    }
  });
  var require_stream_readable = __commonJS2({
    "../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_readable.js"(exports22, module22) {
      module22.exports = Readable;
      var Duplex;
      Readable.ReadableState = ReadableState;
      var EE = __require("events").EventEmitter;
      var EElistenerCount = function EElistenerCount2(emitter, type) {
        return emitter.listeners(type).length;
      };
      var Stream = require_stream5();
      var Buffer2 = __require("buffer").Buffer;
      var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
      };
      function _uint8ArrayToBuffer(chunk) {
        return Buffer2.from(chunk);
      }
      function _isUint8Array(obj) {
        return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
      }
      var debugUtil = __require("util");
      var debug;
      if (debugUtil && debugUtil.debuglog) {
        debug = debugUtil.debuglog("stream");
      } else {
        debug = function debug2() {
        };
      }
      var BufferList = require_buffer_list();
      var destroyImpl = require_destroy();
      var _require = require_state2();
      var getHighWaterMark = _require.getHighWaterMark;
      var _require$codes = require_errors5().codes;
      var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
      var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;
      var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
      var ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
      var StringDecoder;
      var createReadableStreamAsyncIterator;
      var from;
      require_inherits()(Readable, Stream);
      var errorOrDestroy = destroyImpl.errorOrDestroy;
      var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
      function prependListener(emitter, event, fn) {
        if (typeof emitter.prependListener === "function")
          return emitter.prependListener(event, fn);
        if (!emitter._events || !emitter._events[event])
          emitter.on(event, fn);
        else if (Array.isArray(emitter._events[event]))
          emitter._events[event].unshift(fn);
        else
          emitter._events[event] = [fn, emitter._events[event]];
      }
      function ReadableState(options, stream, isDuplex) {
        Duplex = Duplex || require_stream_duplex();
        options = options || {};
        if (typeof isDuplex !== "boolean")
          isDuplex = stream instanceof Duplex;
        this.objectMode = !!options.objectMode;
        if (isDuplex)
          this.objectMode = this.objectMode || !!options.readableObjectMode;
        this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
        this.buffer = new BufferList;
        this.length = 0;
        this.pipes = null;
        this.pipesCount = 0;
        this.flowing = null;
        this.ended = false;
        this.endEmitted = false;
        this.reading = false;
        this.sync = true;
        this.needReadable = false;
        this.emittedReadable = false;
        this.readableListening = false;
        this.resumeScheduled = false;
        this.paused = true;
        this.emitClose = options.emitClose !== false;
        this.autoDestroy = !!options.autoDestroy;
        this.destroyed = false;
        this.defaultEncoding = options.defaultEncoding || "utf8";
        this.awaitDrain = 0;
        this.readingMore = false;
        this.decoder = null;
        this.encoding = null;
        if (options.encoding) {
          if (!StringDecoder)
            StringDecoder = require_string_decoder().StringDecoder;
          this.decoder = new StringDecoder(options.encoding);
          this.encoding = options.encoding;
        }
      }
      function Readable(options) {
        Duplex = Duplex || require_stream_duplex();
        if (!(this instanceof Readable))
          return new Readable(options);
        var isDuplex = this instanceof Duplex;
        this._readableState = new ReadableState(options, this, isDuplex);
        this.readable = true;
        if (options) {
          if (typeof options.read === "function")
            this._read = options.read;
          if (typeof options.destroy === "function")
            this._destroy = options.destroy;
        }
        Stream.call(this);
      }
      Object.defineProperty(Readable.prototype, "destroyed", {
        enumerable: false,
        get: function get() {
          if (this._readableState === undefined) {
            return false;
          }
          return this._readableState.destroyed;
        },
        set: function set(value) {
          if (!this._readableState) {
            return;
          }
          this._readableState.destroyed = value;
        }
      });
      Readable.prototype.destroy = destroyImpl.destroy;
      Readable.prototype._undestroy = destroyImpl.undestroy;
      Readable.prototype._destroy = function(err, cb) {
        cb(err);
      };
      Readable.prototype.push = function(chunk, encoding) {
        var state = this._readableState;
        var skipChunkCheck;
        if (!state.objectMode) {
          if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
              chunk = Buffer2.from(chunk, encoding);
              encoding = "";
            }
            skipChunkCheck = true;
          }
        } else {
          skipChunkCheck = true;
        }
        return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
      };
      Readable.prototype.unshift = function(chunk) {
        return readableAddChunk(this, chunk, null, true, false);
      };
      function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
        debug("readableAddChunk", chunk);
        var state = stream._readableState;
        if (chunk === null) {
          state.reading = false;
          onEofChunk(stream, state);
        } else {
          var er;
          if (!skipChunkCheck)
            er = chunkInvalid(state, chunk);
          if (er) {
            errorOrDestroy(stream, er);
          } else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
              chunk = _uint8ArrayToBuffer(chunk);
            }
            if (addToFront) {
              if (state.endEmitted)
                errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT);
              else
                addChunk(stream, state, chunk, true);
            } else if (state.ended) {
              errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF);
            } else if (state.destroyed) {
              return false;
            } else {
              state.reading = false;
              if (state.decoder && !encoding) {
                chunk = state.decoder.write(chunk);
                if (state.objectMode || chunk.length !== 0)
                  addChunk(stream, state, chunk, false);
                else
                  maybeReadMore(stream, state);
              } else {
                addChunk(stream, state, chunk, false);
              }
            }
          } else if (!addToFront) {
            state.reading = false;
            maybeReadMore(stream, state);
          }
        }
        return !state.ended && (state.length < state.highWaterMark || state.length === 0);
      }
      function addChunk(stream, state, chunk, addToFront) {
        if (state.flowing && state.length === 0 && !state.sync) {
          state.awaitDrain = 0;
          stream.emit("data", chunk);
        } else {
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront)
            state.buffer.unshift(chunk);
          else
            state.buffer.push(chunk);
          if (state.needReadable)
            emitReadable(stream);
        }
        maybeReadMore(stream, state);
      }
      function chunkInvalid(state, chunk) {
        var er;
        if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== undefined && !state.objectMode) {
          er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
        }
        return er;
      }
      Readable.prototype.isPaused = function() {
        return this._readableState.flowing === false;
      };
      Readable.prototype.setEncoding = function(enc) {
        if (!StringDecoder)
          StringDecoder = require_string_decoder().StringDecoder;
        var decoder = new StringDecoder(enc);
        this._readableState.decoder = decoder;
        this._readableState.encoding = this._readableState.decoder.encoding;
        var p = this._readableState.buffer.head;
        var content = "";
        while (p !== null) {
          content += decoder.write(p.data);
          p = p.next;
        }
        this._readableState.buffer.clear();
        if (content !== "")
          this._readableState.buffer.push(content);
        this._readableState.length = content.length;
        return this;
      };
      var MAX_HWM = 1073741824;
      function computeNewHighWaterMark(n) {
        if (n >= MAX_HWM) {
          n = MAX_HWM;
        } else {
          n--;
          n |= n >>> 1;
          n |= n >>> 2;
          n |= n >>> 4;
          n |= n >>> 8;
          n |= n >>> 16;
          n++;
        }
        return n;
      }
      function howMuchToRead(n, state) {
        if (n <= 0 || state.length === 0 && state.ended)
          return 0;
        if (state.objectMode)
          return 1;
        if (n !== n) {
          if (state.flowing && state.length)
            return state.buffer.head.data.length;
          else
            return state.length;
        }
        if (n > state.highWaterMark)
          state.highWaterMark = computeNewHighWaterMark(n);
        if (n <= state.length)
          return n;
        if (!state.ended) {
          state.needReadable = true;
          return 0;
        }
        return state.length;
      }
      Readable.prototype.read = function(n) {
        debug("read", n);
        n = parseInt(n, 10);
        var state = this._readableState;
        var nOrig = n;
        if (n !== 0)
          state.emittedReadable = false;
        if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
          debug("read: emitReadable", state.length, state.ended);
          if (state.length === 0 && state.ended)
            endReadable(this);
          else
            emitReadable(this);
          return null;
        }
        n = howMuchToRead(n, state);
        if (n === 0 && state.ended) {
          if (state.length === 0)
            endReadable(this);
          return null;
        }
        var doRead = state.needReadable;
        debug("need readable", doRead);
        if (state.length === 0 || state.length - n < state.highWaterMark) {
          doRead = true;
          debug("length less than watermark", doRead);
        }
        if (state.ended || state.reading) {
          doRead = false;
          debug("reading or ended", doRead);
        } else if (doRead) {
          debug("do read");
          state.reading = true;
          state.sync = true;
          if (state.length === 0)
            state.needReadable = true;
          this._read(state.highWaterMark);
          state.sync = false;
          if (!state.reading)
            n = howMuchToRead(nOrig, state);
        }
        var ret;
        if (n > 0)
          ret = fromList(n, state);
        else
          ret = null;
        if (ret === null) {
          state.needReadable = state.length <= state.highWaterMark;
          n = 0;
        } else {
          state.length -= n;
          state.awaitDrain = 0;
        }
        if (state.length === 0) {
          if (!state.ended)
            state.needReadable = true;
          if (nOrig !== n && state.ended)
            endReadable(this);
        }
        if (ret !== null)
          this.emit("data", ret);
        return ret;
      };
      function onEofChunk(stream, state) {
        debug("onEofChunk");
        if (state.ended)
          return;
        if (state.decoder) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
          }
        }
        state.ended = true;
        if (state.sync) {
          emitReadable(stream);
        } else {
          state.needReadable = false;
          if (!state.emittedReadable) {
            state.emittedReadable = true;
            emitReadable_(stream);
          }
        }
      }
      function emitReadable(stream) {
        var state = stream._readableState;
        debug("emitReadable", state.needReadable, state.emittedReadable);
        state.needReadable = false;
        if (!state.emittedReadable) {
          debug("emitReadable", state.flowing);
          state.emittedReadable = true;
          process.nextTick(emitReadable_, stream);
        }
      }
      function emitReadable_(stream) {
        var state = stream._readableState;
        debug("emitReadable_", state.destroyed, state.length, state.ended);
        if (!state.destroyed && (state.length || state.ended)) {
          stream.emit("readable");
          state.emittedReadable = false;
        }
        state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
        flow(stream);
      }
      function maybeReadMore(stream, state) {
        if (!state.readingMore) {
          state.readingMore = true;
          process.nextTick(maybeReadMore_, stream, state);
        }
      }
      function maybeReadMore_(stream, state) {
        while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
          var len = state.length;
          debug("maybeReadMore read 0");
          stream.read(0);
          if (len === state.length)
            break;
        }
        state.readingMore = false;
      }
      Readable.prototype._read = function(n) {
        errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
      };
      Readable.prototype.pipe = function(dest, pipeOpts) {
        var src = this;
        var state = this._readableState;
        switch (state.pipesCount) {
          case 0:
            state.pipes = dest;
            break;
          case 1:
            state.pipes = [state.pipes, dest];
            break;
          default:
            state.pipes.push(dest);
            break;
        }
        state.pipesCount += 1;
        debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
        var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
        var endFn = doEnd ? onend : unpipe;
        if (state.endEmitted)
          process.nextTick(endFn);
        else
          src.once("end", endFn);
        dest.on("unpipe", onunpipe);
        function onunpipe(readable, unpipeInfo) {
          debug("onunpipe");
          if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
              unpipeInfo.hasUnpiped = true;
              cleanup();
            }
          }
        }
        function onend() {
          debug("onend");
          dest.end();
        }
        var ondrain = pipeOnDrain(src);
        dest.on("drain", ondrain);
        var cleanedUp = false;
        function cleanup() {
          debug("cleanup");
          dest.removeListener("close", onclose);
          dest.removeListener("finish", onfinish);
          dest.removeListener("drain", ondrain);
          dest.removeListener("error", onerror);
          dest.removeListener("unpipe", onunpipe);
          src.removeListener("end", onend);
          src.removeListener("end", unpipe);
          src.removeListener("data", ondata);
          cleanedUp = true;
          if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
            ondrain();
        }
        src.on("data", ondata);
        function ondata(chunk) {
          debug("ondata");
          var ret = dest.write(chunk);
          debug("dest.write", ret);
          if (ret === false) {
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
              debug("false write response, pause", state.awaitDrain);
              state.awaitDrain++;
            }
            src.pause();
          }
        }
        function onerror(er) {
          debug("onerror", er);
          unpipe();
          dest.removeListener("error", onerror);
          if (EElistenerCount(dest, "error") === 0)
            errorOrDestroy(dest, er);
        }
        prependListener(dest, "error", onerror);
        function onclose() {
          dest.removeListener("finish", onfinish);
          unpipe();
        }
        dest.once("close", onclose);
        function onfinish() {
          debug("onfinish");
          dest.removeListener("close", onclose);
          unpipe();
        }
        dest.once("finish", onfinish);
        function unpipe() {
          debug("unpipe");
          src.unpipe(dest);
        }
        dest.emit("pipe", src);
        if (!state.flowing) {
          debug("pipe resume");
          src.resume();
        }
        return dest;
      };
      function pipeOnDrain(src) {
        return function pipeOnDrainFunctionResult() {
          var state = src._readableState;
          debug("pipeOnDrain", state.awaitDrain);
          if (state.awaitDrain)
            state.awaitDrain--;
          if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
            state.flowing = true;
            flow(src);
          }
        };
      }
      Readable.prototype.unpipe = function(dest) {
        var state = this._readableState;
        var unpipeInfo = {
          hasUnpiped: false
        };
        if (state.pipesCount === 0)
          return this;
        if (state.pipesCount === 1) {
          if (dest && dest !== state.pipes)
            return this;
          if (!dest)
            dest = state.pipes;
          state.pipes = null;
          state.pipesCount = 0;
          state.flowing = false;
          if (dest)
            dest.emit("unpipe", this, unpipeInfo);
          return this;
        }
        if (!dest) {
          var dests = state.pipes;
          var len = state.pipesCount;
          state.pipes = null;
          state.pipesCount = 0;
          state.flowing = false;
          for (var i = 0;i < len; i++)
            dests[i].emit("unpipe", this, {
              hasUnpiped: false
            });
          return this;
        }
        var index = indexOf(state.pipes, dest);
        if (index === -1)
          return this;
        state.pipes.splice(index, 1);
        state.pipesCount -= 1;
        if (state.pipesCount === 1)
          state.pipes = state.pipes[0];
        dest.emit("unpipe", this, unpipeInfo);
        return this;
      };
      Readable.prototype.on = function(ev, fn) {
        var res = Stream.prototype.on.call(this, ev, fn);
        var state = this._readableState;
        if (ev === "data") {
          state.readableListening = this.listenerCount("readable") > 0;
          if (state.flowing !== false)
            this.resume();
        } else if (ev === "readable") {
          if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            debug("on readable", state.length, state.reading);
            if (state.length) {
              emitReadable(this);
            } else if (!state.reading) {
              process.nextTick(nReadingNextTick, this);
            }
          }
        }
        return res;
      };
      Readable.prototype.addListener = Readable.prototype.on;
      Readable.prototype.removeListener = function(ev, fn) {
        var res = Stream.prototype.removeListener.call(this, ev, fn);
        if (ev === "readable") {
          process.nextTick(updateReadableListening, this);
        }
        return res;
      };
      Readable.prototype.removeAllListeners = function(ev) {
        var res = Stream.prototype.removeAllListeners.apply(this, arguments);
        if (ev === "readable" || ev === undefined) {
          process.nextTick(updateReadableListening, this);
        }
        return res;
      };
      function updateReadableListening(self2) {
        var state = self2._readableState;
        state.readableListening = self2.listenerCount("readable") > 0;
        if (state.resumeScheduled && !state.paused) {
          state.flowing = true;
        } else if (self2.listenerCount("data") > 0) {
          self2.resume();
        }
      }
      function nReadingNextTick(self2) {
        debug("readable nexttick read 0");
        self2.read(0);
      }
      Readable.prototype.resume = function() {
        var state = this._readableState;
        if (!state.flowing) {
          debug("resume");
          state.flowing = !state.readableListening;
          resume(this, state);
        }
        state.paused = false;
        return this;
      };
      function resume(stream, state) {
        if (!state.resumeScheduled) {
          state.resumeScheduled = true;
          process.nextTick(resume_, stream, state);
        }
      }
      function resume_(stream, state) {
        debug("resume", state.reading);
        if (!state.reading) {
          stream.read(0);
        }
        state.resumeScheduled = false;
        stream.emit("resume");
        flow(stream);
        if (state.flowing && !state.reading)
          stream.read(0);
      }
      Readable.prototype.pause = function() {
        debug("call pause flowing=%j", this._readableState.flowing);
        if (this._readableState.flowing !== false) {
          debug("pause");
          this._readableState.flowing = false;
          this.emit("pause");
        }
        this._readableState.paused = true;
        return this;
      };
      function flow(stream) {
        var state = stream._readableState;
        debug("flow", state.flowing);
        while (state.flowing && stream.read() !== null)
          ;
      }
      Readable.prototype.wrap = function(stream) {
        var _this = this;
        var state = this._readableState;
        var paused = false;
        stream.on("end", function() {
          debug("wrapped end");
          if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length)
              _this.push(chunk);
          }
          _this.push(null);
        });
        stream.on("data", function(chunk) {
          debug("wrapped data");
          if (state.decoder)
            chunk = state.decoder.write(chunk);
          if (state.objectMode && (chunk === null || chunk === undefined))
            return;
          else if (!state.objectMode && (!chunk || !chunk.length))
            return;
          var ret = _this.push(chunk);
          if (!ret) {
            paused = true;
            stream.pause();
          }
        });
        for (var i in stream) {
          if (this[i] === undefined && typeof stream[i] === "function") {
            this[i] = /* @__PURE__ */ function methodWrap(method) {
              return function methodWrapReturnFunction() {
                return stream[method].apply(stream, arguments);
              };
            }(i);
          }
        }
        for (var n = 0;n < kProxyEvents.length; n++) {
          stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
        }
        this._read = function(n2) {
          debug("wrapped _read", n2);
          if (paused) {
            paused = false;
            stream.resume();
          }
        };
        return this;
      };
      if (typeof Symbol === "function") {
        Readable.prototype[Symbol.asyncIterator] = function() {
          if (createReadableStreamAsyncIterator === undefined) {
            createReadableStreamAsyncIterator = require_async_iterator();
          }
          return createReadableStreamAsyncIterator(this);
        };
      }
      Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
        enumerable: false,
        get: function get() {
          return this._readableState.highWaterMark;
        }
      });
      Object.defineProperty(Readable.prototype, "readableBuffer", {
        enumerable: false,
        get: function get() {
          return this._readableState && this._readableState.buffer;
        }
      });
      Object.defineProperty(Readable.prototype, "readableFlowing", {
        enumerable: false,
        get: function get() {
          return this._readableState.flowing;
        },
        set: function set(state) {
          if (this._readableState) {
            this._readableState.flowing = state;
          }
        }
      });
      Readable._fromList = fromList;
      Object.defineProperty(Readable.prototype, "readableLength", {
        enumerable: false,
        get: function get() {
          return this._readableState.length;
        }
      });
      function fromList(n, state) {
        if (state.length === 0)
          return null;
        var ret;
        if (state.objectMode)
          ret = state.buffer.shift();
        else if (!n || n >= state.length) {
          if (state.decoder)
            ret = state.buffer.join("");
          else if (state.buffer.length === 1)
            ret = state.buffer.first();
          else
            ret = state.buffer.concat(state.length);
          state.buffer.clear();
        } else {
          ret = state.buffer.consume(n, state.decoder);
        }
        return ret;
      }
      function endReadable(stream) {
        var state = stream._readableState;
        debug("endReadable", state.endEmitted);
        if (!state.endEmitted) {
          state.ended = true;
          process.nextTick(endReadableNT, state, stream);
        }
      }
      function endReadableNT(state, stream) {
        debug("endReadableNT", state.endEmitted, state.length);
        if (!state.endEmitted && state.length === 0) {
          state.endEmitted = true;
          stream.readable = false;
          stream.emit("end");
          if (state.autoDestroy) {
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) {
              stream.destroy();
            }
          }
        }
      }
      if (typeof Symbol === "function") {
        Readable.from = function(iterable, opts) {
          if (from === undefined) {
            from = require_from();
          }
          return from(Readable, iterable, opts);
        };
      }
      function indexOf(xs, x) {
        for (var i = 0, l = xs.length;i < l; i++) {
          if (xs[i] === x)
            return i;
        }
        return -1;
      }
    }
  });
  var require_stream_transform = __commonJS2({
    "../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_transform.js"(exports22, module22) {
      module22.exports = Transform;
      var _require$codes = require_errors5().codes;
      var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
      var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
      var ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING;
      var ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
      var Duplex = require_stream_duplex();
      require_inherits()(Transform, Duplex);
      function afterTransform(er, data) {
        var ts = this._transformState;
        ts.transforming = false;
        var cb = ts.writecb;
        if (cb === null) {
          return this.emit("error", new ERR_MULTIPLE_CALLBACK);
        }
        ts.writechunk = null;
        ts.writecb = null;
        if (data != null)
          this.push(data);
        cb(er);
        var rs = this._readableState;
        rs.reading = false;
        if (rs.needReadable || rs.length < rs.highWaterMark) {
          this._read(rs.highWaterMark);
        }
      }
      function Transform(options) {
        if (!(this instanceof Transform))
          return new Transform(options);
        Duplex.call(this, options);
        this._transformState = {
          afterTransform: afterTransform.bind(this),
          needTransform: false,
          transforming: false,
          writecb: null,
          writechunk: null,
          writeencoding: null
        };
        this._readableState.needReadable = true;
        this._readableState.sync = false;
        if (options) {
          if (typeof options.transform === "function")
            this._transform = options.transform;
          if (typeof options.flush === "function")
            this._flush = options.flush;
        }
        this.on("prefinish", prefinish);
      }
      function prefinish() {
        var _this = this;
        if (typeof this._flush === "function" && !this._readableState.destroyed) {
          this._flush(function(er, data) {
            done(_this, er, data);
          });
        } else {
          done(this, null, null);
        }
      }
      Transform.prototype.push = function(chunk, encoding) {
        this._transformState.needTransform = false;
        return Duplex.prototype.push.call(this, chunk, encoding);
      };
      Transform.prototype._transform = function(chunk, encoding, cb) {
        cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
      };
      Transform.prototype._write = function(chunk, encoding, cb) {
        var ts = this._transformState;
        ts.writecb = cb;
        ts.writechunk = chunk;
        ts.writeencoding = encoding;
        if (!ts.transforming) {
          var rs = this._readableState;
          if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
            this._read(rs.highWaterMark);
        }
      };
      Transform.prototype._read = function(n) {
        var ts = this._transformState;
        if (ts.writechunk !== null && !ts.transforming) {
          ts.transforming = true;
          this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
        } else {
          ts.needTransform = true;
        }
      };
      Transform.prototype._destroy = function(err, cb) {
        Duplex.prototype._destroy.call(this, err, function(err2) {
          cb(err2);
        });
      };
      function done(stream, er, data) {
        if (er)
          return stream.emit("error", er);
        if (data != null)
          stream.push(data);
        if (stream._writableState.length)
          throw new ERR_TRANSFORM_WITH_LENGTH_0;
        if (stream._transformState.transforming)
          throw new ERR_TRANSFORM_ALREADY_TRANSFORMING;
        return stream.push(null);
      }
    }
  });
  var require_stream_passthrough = __commonJS2({
    "../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_passthrough.js"(exports22, module22) {
      module22.exports = PassThrough;
      var Transform = require_stream_transform();
      require_inherits()(PassThrough, Transform);
      function PassThrough(options) {
        if (!(this instanceof PassThrough))
          return new PassThrough(options);
        Transform.call(this, options);
      }
      PassThrough.prototype._transform = function(chunk, encoding, cb) {
        cb(null, chunk);
      };
    }
  });
  var require_pipeline = __commonJS2({
    "../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/pipeline.js"(exports22, module22) {
      var eos;
      function once(callback) {
        var called = false;
        return function() {
          if (called)
            return;
          called = true;
          callback.apply(undefined, arguments);
        };
      }
      var _require$codes = require_errors5().codes;
      var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
      var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
      function noop(err) {
        if (err)
          throw err;
      }
      function isRequest(stream) {
        return stream.setHeader && typeof stream.abort === "function";
      }
      function destroyer(stream, reading, writing, callback) {
        callback = once(callback);
        var closed = false;
        stream.on("close", function() {
          closed = true;
        });
        if (eos === undefined)
          eos = require_end_of_stream2();
        eos(stream, {
          readable: reading,
          writable: writing
        }, function(err) {
          if (err)
            return callback(err);
          closed = true;
          callback();
        });
        var destroyed = false;
        return function(err) {
          if (closed)
            return;
          if (destroyed)
            return;
          destroyed = true;
          if (isRequest(stream))
            return stream.abort();
          if (typeof stream.destroy === "function")
            return stream.destroy();
          callback(err || new ERR_STREAM_DESTROYED("pipe"));
        };
      }
      function call(fn) {
        fn();
      }
      function pipe(from, to) {
        return from.pipe(to);
      }
      function popCallback(streams) {
        if (!streams.length)
          return noop;
        if (typeof streams[streams.length - 1] !== "function")
          return noop;
        return streams.pop();
      }
      function pipeline() {
        for (var _len = arguments.length, streams = new Array(_len), _key = 0;_key < _len; _key++) {
          streams[_key] = arguments[_key];
        }
        var callback = popCallback(streams);
        if (Array.isArray(streams[0]))
          streams = streams[0];
        if (streams.length < 2) {
          throw new ERR_MISSING_ARGS("streams");
        }
        var error;
        var destroys = streams.map(function(stream, i) {
          var reading = i < streams.length - 1;
          var writing = i > 0;
          return destroyer(stream, reading, writing, function(err) {
            if (!error)
              error = err;
            if (err)
              destroys.forEach(call);
            if (reading)
              return;
            destroys.forEach(call);
            callback(error);
          });
        });
        return streams.reduce(pipe);
      }
      module22.exports = pipeline;
    }
  });
  var require_readable = __commonJS2({
    "../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/readable.js"(exports22, module22) {
      var Stream = __require("stream");
      if (process.env.READABLE_STREAM === "disable" && Stream) {
        module22.exports = Stream.Readable;
        Object.assign(module22.exports, Stream);
        module22.exports.Stream = Stream;
      } else {
        exports22 = module22.exports = require_stream_readable();
        exports22.Stream = Stream || exports22;
        exports22.Readable = exports22;
        exports22.Writable = require_stream_writable();
        exports22.Duplex = require_stream_duplex();
        exports22.Transform = require_stream_transform();
        exports22.PassThrough = require_stream_passthrough();
        exports22.finished = require_end_of_stream2();
        exports22.pipeline = require_pipeline();
      }
    }
  });
  var require_BufferList = __commonJS2({
    "../../node_modules/.pnpm/bl@4.1.0/node_modules/bl/BufferList.js"(exports22, module22) {
      var { Buffer: Buffer2 } = __require("buffer");
      var symbol = Symbol.for("BufferList");
      function BufferList(buf) {
        if (!(this instanceof BufferList)) {
          return new BufferList(buf);
        }
        BufferList._init.call(this, buf);
      }
      BufferList._init = function _init(buf) {
        Object.defineProperty(this, symbol, { value: true });
        this._bufs = [];
        this.length = 0;
        if (buf) {
          this.append(buf);
        }
      };
      BufferList.prototype._new = function _new(buf) {
        return new BufferList(buf);
      };
      BufferList.prototype._offset = function _offset(offset) {
        if (offset === 0) {
          return [0, 0];
        }
        let tot = 0;
        for (let i = 0;i < this._bufs.length; i++) {
          const _t = tot + this._bufs[i].length;
          if (offset < _t || i === this._bufs.length - 1) {
            return [i, offset - tot];
          }
          tot = _t;
        }
      };
      BufferList.prototype._reverseOffset = function(blOffset) {
        const bufferId = blOffset[0];
        let offset = blOffset[1];
        for (let i = 0;i < bufferId; i++) {
          offset += this._bufs[i].length;
        }
        return offset;
      };
      BufferList.prototype.get = function get(index) {
        if (index > this.length || index < 0) {
          return;
        }
        const offset = this._offset(index);
        return this._bufs[offset[0]][offset[1]];
      };
      BufferList.prototype.slice = function slice(start, end) {
        if (typeof start === "number" && start < 0) {
          start += this.length;
        }
        if (typeof end === "number" && end < 0) {
          end += this.length;
        }
        return this.copy(null, 0, start, end);
      };
      BufferList.prototype.copy = function copy(dst, dstStart, srcStart, srcEnd) {
        if (typeof srcStart !== "number" || srcStart < 0) {
          srcStart = 0;
        }
        if (typeof srcEnd !== "number" || srcEnd > this.length) {
          srcEnd = this.length;
        }
        if (srcStart >= this.length) {
          return dst || Buffer2.alloc(0);
        }
        if (srcEnd <= 0) {
          return dst || Buffer2.alloc(0);
        }
        const copy2 = !!dst;
        const off = this._offset(srcStart);
        const len = srcEnd - srcStart;
        let bytes = len;
        let bufoff = copy2 && dstStart || 0;
        let start = off[1];
        if (srcStart === 0 && srcEnd === this.length) {
          if (!copy2) {
            return this._bufs.length === 1 ? this._bufs[0] : Buffer2.concat(this._bufs, this.length);
          }
          for (let i = 0;i < this._bufs.length; i++) {
            this._bufs[i].copy(dst, bufoff);
            bufoff += this._bufs[i].length;
          }
          return dst;
        }
        if (bytes <= this._bufs[off[0]].length - start) {
          return copy2 ? this._bufs[off[0]].copy(dst, dstStart, start, start + bytes) : this._bufs[off[0]].slice(start, start + bytes);
        }
        if (!copy2) {
          dst = Buffer2.allocUnsafe(len);
        }
        for (let i = off[0];i < this._bufs.length; i++) {
          const l = this._bufs[i].length - start;
          if (bytes > l) {
            this._bufs[i].copy(dst, bufoff, start);
            bufoff += l;
          } else {
            this._bufs[i].copy(dst, bufoff, start, start + bytes);
            bufoff += l;
            break;
          }
          bytes -= l;
          if (start) {
            start = 0;
          }
        }
        if (dst.length > bufoff)
          return dst.slice(0, bufoff);
        return dst;
      };
      BufferList.prototype.shallowSlice = function shallowSlice(start, end) {
        start = start || 0;
        end = typeof end !== "number" ? this.length : end;
        if (start < 0) {
          start += this.length;
        }
        if (end < 0) {
          end += this.length;
        }
        if (start === end) {
          return this._new();
        }
        const startOffset = this._offset(start);
        const endOffset = this._offset(end);
        const buffers = this._bufs.slice(startOffset[0], endOffset[0] + 1);
        if (endOffset[1] === 0) {
          buffers.pop();
        } else {
          buffers[buffers.length - 1] = buffers[buffers.length - 1].slice(0, endOffset[1]);
        }
        if (startOffset[1] !== 0) {
          buffers[0] = buffers[0].slice(startOffset[1]);
        }
        return this._new(buffers);
      };
      BufferList.prototype.toString = function toString(encoding, start, end) {
        return this.slice(start, end).toString(encoding);
      };
      BufferList.prototype.consume = function consume(bytes) {
        bytes = Math.trunc(bytes);
        if (Number.isNaN(bytes) || bytes <= 0)
          return this;
        while (this._bufs.length) {
          if (bytes >= this._bufs[0].length) {
            bytes -= this._bufs[0].length;
            this.length -= this._bufs[0].length;
            this._bufs.shift();
          } else {
            this._bufs[0] = this._bufs[0].slice(bytes);
            this.length -= bytes;
            break;
          }
        }
        return this;
      };
      BufferList.prototype.duplicate = function duplicate() {
        const copy = this._new();
        for (let i = 0;i < this._bufs.length; i++) {
          copy.append(this._bufs[i]);
        }
        return copy;
      };
      BufferList.prototype.append = function append(buf) {
        if (buf == null) {
          return this;
        }
        if (buf.buffer) {
          this._appendBuffer(Buffer2.from(buf.buffer, buf.byteOffset, buf.byteLength));
        } else if (Array.isArray(buf)) {
          for (let i = 0;i < buf.length; i++) {
            this.append(buf[i]);
          }
        } else if (this._isBufferList(buf)) {
          for (let i = 0;i < buf._bufs.length; i++) {
            this.append(buf._bufs[i]);
          }
        } else {
          if (typeof buf === "number") {
            buf = buf.toString();
          }
          this._appendBuffer(Buffer2.from(buf));
        }
        return this;
      };
      BufferList.prototype._appendBuffer = function appendBuffer(buf) {
        this._bufs.push(buf);
        this.length += buf.length;
      };
      BufferList.prototype.indexOf = function(search, offset, encoding) {
        if (encoding === undefined && typeof offset === "string") {
          encoding = offset;
          offset = undefined;
        }
        if (typeof search === "function" || Array.isArray(search)) {
          throw new TypeError('The "value" argument must be one of type string, Buffer, BufferList, or Uint8Array.');
        } else if (typeof search === "number") {
          search = Buffer2.from([search]);
        } else if (typeof search === "string") {
          search = Buffer2.from(search, encoding);
        } else if (this._isBufferList(search)) {
          search = search.slice();
        } else if (Array.isArray(search.buffer)) {
          search = Buffer2.from(search.buffer, search.byteOffset, search.byteLength);
        } else if (!Buffer2.isBuffer(search)) {
          search = Buffer2.from(search);
        }
        offset = Number(offset || 0);
        if (isNaN(offset)) {
          offset = 0;
        }
        if (offset < 0) {
          offset = this.length + offset;
        }
        if (offset < 0) {
          offset = 0;
        }
        if (search.length === 0) {
          return offset > this.length ? this.length : offset;
        }
        const blOffset = this._offset(offset);
        let blIndex = blOffset[0];
        let buffOffset = blOffset[1];
        for (;blIndex < this._bufs.length; blIndex++) {
          const buff = this._bufs[blIndex];
          while (buffOffset < buff.length) {
            const availableWindow = buff.length - buffOffset;
            if (availableWindow >= search.length) {
              const nativeSearchResult = buff.indexOf(search, buffOffset);
              if (nativeSearchResult !== -1) {
                return this._reverseOffset([blIndex, nativeSearchResult]);
              }
              buffOffset = buff.length - search.length + 1;
            } else {
              const revOffset = this._reverseOffset([blIndex, buffOffset]);
              if (this._match(revOffset, search)) {
                return revOffset;
              }
              buffOffset++;
            }
          }
          buffOffset = 0;
        }
        return -1;
      };
      BufferList.prototype._match = function(offset, search) {
        if (this.length - offset < search.length) {
          return false;
        }
        for (let searchOffset = 0;searchOffset < search.length; searchOffset++) {
          if (this.get(offset + searchOffset) !== search[searchOffset]) {
            return false;
          }
        }
        return true;
      };
      (function() {
        const methods = {
          readDoubleBE: 8,
          readDoubleLE: 8,
          readFloatBE: 4,
          readFloatLE: 4,
          readInt32BE: 4,
          readInt32LE: 4,
          readUInt32BE: 4,
          readUInt32LE: 4,
          readInt16BE: 2,
          readInt16LE: 2,
          readUInt16BE: 2,
          readUInt16LE: 2,
          readInt8: 1,
          readUInt8: 1,
          readIntBE: null,
          readIntLE: null,
          readUIntBE: null,
          readUIntLE: null
        };
        for (const m in methods) {
          (function(m2) {
            if (methods[m2] === null) {
              BufferList.prototype[m2] = function(offset, byteLength) {
                return this.slice(offset, offset + byteLength)[m2](0, byteLength);
              };
            } else {
              BufferList.prototype[m2] = function(offset = 0) {
                return this.slice(offset, offset + methods[m2])[m2](0);
              };
            }
          })(m);
        }
      })();
      BufferList.prototype._isBufferList = function _isBufferList(b) {
        return b instanceof BufferList || BufferList.isBufferList(b);
      };
      BufferList.isBufferList = function isBufferList(b) {
        return b != null && b[symbol];
      };
      module22.exports = BufferList;
    }
  });
  var require_bl = __commonJS2({
    "../../node_modules/.pnpm/bl@4.1.0/node_modules/bl/bl.js"(exports22, module22) {
      var DuplexStream = require_readable().Duplex;
      var inherits = require_inherits();
      var BufferList = require_BufferList();
      function BufferListStream(callback) {
        if (!(this instanceof BufferListStream)) {
          return new BufferListStream(callback);
        }
        if (typeof callback === "function") {
          this._callback = callback;
          const piper = function piper2(err) {
            if (this._callback) {
              this._callback(err);
              this._callback = null;
            }
          }.bind(this);
          this.on("pipe", function onPipe(src) {
            src.on("error", piper);
          });
          this.on("unpipe", function onUnpipe(src) {
            src.removeListener("error", piper);
          });
          callback = null;
        }
        BufferList._init.call(this, callback);
        DuplexStream.call(this);
      }
      inherits(BufferListStream, DuplexStream);
      Object.assign(BufferListStream.prototype, BufferList.prototype);
      BufferListStream.prototype._new = function _new(callback) {
        return new BufferListStream(callback);
      };
      BufferListStream.prototype._write = function _write(buf, encoding, callback) {
        this._appendBuffer(buf);
        if (typeof callback === "function") {
          callback();
        }
      };
      BufferListStream.prototype._read = function _read(size) {
        if (!this.length) {
          return this.push(null);
        }
        size = Math.min(size, this.length);
        this.push(this.slice(0, size));
        this.consume(size);
      };
      BufferListStream.prototype.end = function end(chunk) {
        DuplexStream.prototype.end.call(this, chunk);
        if (this._callback) {
          this._callback(null, this.slice());
          this._callback = null;
        }
      };
      BufferListStream.prototype._destroy = function _destroy(err, cb) {
        this._bufs.length = 0;
        this.length = 0;
        cb(err);
      };
      BufferListStream.prototype._isBufferList = function _isBufferList(b) {
        return b instanceof BufferListStream || b instanceof BufferList || BufferListStream.isBufferList(b);
      };
      BufferListStream.isBufferList = BufferList.isBufferList;
      module22.exports = BufferListStream;
      module22.exports.BufferListStream = BufferListStream;
      module22.exports.BufferList = BufferList;
    }
  });
  var require_headers = __commonJS2({
    "../../node_modules/.pnpm/tar-stream@2.2.0/node_modules/tar-stream/headers.js"(exports22) {
      var alloc = Buffer.alloc;
      var ZEROS = "0000000000000000000";
      var SEVENS = "7777777777777777777";
      var ZERO_OFFSET = 48;
      var USTAR_MAGIC = Buffer.from("ustar\x00", "binary");
      var USTAR_VER = Buffer.from("00", "binary");
      var GNU_MAGIC = Buffer.from("ustar ", "binary");
      var GNU_VER = Buffer.from(" \x00", "binary");
      var MASK = parseInt("7777", 8);
      var MAGIC_OFFSET = 257;
      var VERSION_OFFSET = 263;
      var clamp = function(index, len, defaultValue) {
        if (typeof index !== "number")
          return defaultValue;
        index = ~~index;
        if (index >= len)
          return len;
        if (index >= 0)
          return index;
        index += len;
        if (index >= 0)
          return index;
        return 0;
      };
      var toType = function(flag) {
        switch (flag) {
          case 0:
            return "file";
          case 1:
            return "link";
          case 2:
            return "symlink";
          case 3:
            return "character-device";
          case 4:
            return "block-device";
          case 5:
            return "directory";
          case 6:
            return "fifo";
          case 7:
            return "contiguous-file";
          case 72:
            return "pax-header";
          case 55:
            return "pax-global-header";
          case 27:
            return "gnu-long-link-path";
          case 28:
          case 30:
            return "gnu-long-path";
        }
        return null;
      };
      var toTypeflag = function(flag) {
        switch (flag) {
          case "file":
            return 0;
          case "link":
            return 1;
          case "symlink":
            return 2;
          case "character-device":
            return 3;
          case "block-device":
            return 4;
          case "directory":
            return 5;
          case "fifo":
            return 6;
          case "contiguous-file":
            return 7;
          case "pax-header":
            return 72;
        }
        return 0;
      };
      var indexOf = function(block, num, offset, end) {
        for (;offset < end; offset++) {
          if (block[offset] === num)
            return offset;
        }
        return end;
      };
      var cksum = function(block) {
        var sum = 8 * 32;
        for (var i = 0;i < 148; i++)
          sum += block[i];
        for (var j = 156;j < 512; j++)
          sum += block[j];
        return sum;
      };
      var encodeOct = function(val, n) {
        val = val.toString(8);
        if (val.length > n)
          return SEVENS.slice(0, n) + " ";
        else
          return ZEROS.slice(0, n - val.length) + val + " ";
      };
      function parse256(buf) {
        var positive;
        if (buf[0] === 128)
          positive = true;
        else if (buf[0] === 255)
          positive = false;
        else
          return null;
        var tuple = [];
        for (var i = buf.length - 1;i > 0; i--) {
          var byte = buf[i];
          if (positive)
            tuple.push(byte);
          else
            tuple.push(255 - byte);
        }
        var sum = 0;
        var l = tuple.length;
        for (i = 0;i < l; i++) {
          sum += tuple[i] * Math.pow(256, i);
        }
        return positive ? sum : -1 * sum;
      }
      var decodeOct = function(val, offset, length) {
        val = val.slice(offset, offset + length);
        offset = 0;
        if (val[offset] & 128) {
          return parse256(val);
        } else {
          while (offset < val.length && val[offset] === 32)
            offset++;
          var end = clamp(indexOf(val, 32, offset, val.length), val.length, val.length);
          while (offset < end && val[offset] === 0)
            offset++;
          if (end === offset)
            return 0;
          return parseInt(val.slice(offset, end).toString(), 8);
        }
      };
      var decodeStr = function(val, offset, length, encoding) {
        return val.slice(offset, indexOf(val, 0, offset, offset + length)).toString(encoding);
      };
      var addLength = function(str) {
        var len = Buffer.byteLength(str);
        var digits = Math.floor(Math.log(len) / Math.log(10)) + 1;
        if (len + digits >= Math.pow(10, digits))
          digits++;
        return len + digits + str;
      };
      exports22.decodeLongPath = function(buf, encoding) {
        return decodeStr(buf, 0, buf.length, encoding);
      };
      exports22.encodePax = function(opts) {
        var result2 = "";
        if (opts.name)
          result2 += addLength(" path=" + opts.name + `
`);
        if (opts.linkname)
          result2 += addLength(" linkpath=" + opts.linkname + `
`);
        var pax = opts.pax;
        if (pax) {
          for (var key in pax) {
            result2 += addLength(" " + key + "=" + pax[key] + `
`);
          }
        }
        return Buffer.from(result2);
      };
      exports22.decodePax = function(buf) {
        var result2 = {};
        while (buf.length) {
          var i = 0;
          while (i < buf.length && buf[i] !== 32)
            i++;
          var len = parseInt(buf.slice(0, i).toString(), 10);
          if (!len)
            return result2;
          var b = buf.slice(i + 1, len - 1).toString();
          var keyIndex = b.indexOf("=");
          if (keyIndex === -1)
            return result2;
          result2[b.slice(0, keyIndex)] = b.slice(keyIndex + 1);
          buf = buf.slice(len);
        }
        return result2;
      };
      exports22.encode = function(opts) {
        var buf = alloc(512);
        var name = opts.name;
        var prefix = "";
        if (opts.typeflag === 5 && name[name.length - 1] !== "/")
          name += "/";
        if (Buffer.byteLength(name) !== name.length)
          return null;
        while (Buffer.byteLength(name) > 100) {
          var i = name.indexOf("/");
          if (i === -1)
            return null;
          prefix += prefix ? "/" + name.slice(0, i) : name.slice(0, i);
          name = name.slice(i + 1);
        }
        if (Buffer.byteLength(name) > 100 || Buffer.byteLength(prefix) > 155)
          return null;
        if (opts.linkname && Buffer.byteLength(opts.linkname) > 100)
          return null;
        buf.write(name);
        buf.write(encodeOct(opts.mode & MASK, 6), 100);
        buf.write(encodeOct(opts.uid, 6), 108);
        buf.write(encodeOct(opts.gid, 6), 116);
        buf.write(encodeOct(opts.size, 11), 124);
        buf.write(encodeOct(opts.mtime.getTime() / 1000 | 0, 11), 136);
        buf[156] = ZERO_OFFSET + toTypeflag(opts.type);
        if (opts.linkname)
          buf.write(opts.linkname, 157);
        USTAR_MAGIC.copy(buf, MAGIC_OFFSET);
        USTAR_VER.copy(buf, VERSION_OFFSET);
        if (opts.uname)
          buf.write(opts.uname, 265);
        if (opts.gname)
          buf.write(opts.gname, 297);
        buf.write(encodeOct(opts.devmajor || 0, 6), 329);
        buf.write(encodeOct(opts.devminor || 0, 6), 337);
        if (prefix)
          buf.write(prefix, 345);
        buf.write(encodeOct(cksum(buf), 6), 148);
        return buf;
      };
      exports22.decode = function(buf, filenameEncoding, allowUnknownFormat) {
        var typeflag = buf[156] === 0 ? 0 : buf[156] - ZERO_OFFSET;
        var name = decodeStr(buf, 0, 100, filenameEncoding);
        var mode = decodeOct(buf, 100, 8);
        var uid = decodeOct(buf, 108, 8);
        var gid = decodeOct(buf, 116, 8);
        var size = decodeOct(buf, 124, 12);
        var mtime = decodeOct(buf, 136, 12);
        var type = toType(typeflag);
        var linkname = buf[157] === 0 ? null : decodeStr(buf, 157, 100, filenameEncoding);
        var uname = decodeStr(buf, 265, 32);
        var gname = decodeStr(buf, 297, 32);
        var devmajor = decodeOct(buf, 329, 8);
        var devminor = decodeOct(buf, 337, 8);
        var c = cksum(buf);
        if (c === 8 * 32)
          return null;
        if (c !== decodeOct(buf, 148, 8))
          throw new Error("Invalid tar header. Maybe the tar is corrupted or it needs to be gunzipped?");
        if (USTAR_MAGIC.compare(buf, MAGIC_OFFSET, MAGIC_OFFSET + 6) === 0) {
          if (buf[345])
            name = decodeStr(buf, 345, 155, filenameEncoding) + "/" + name;
        } else if (GNU_MAGIC.compare(buf, MAGIC_OFFSET, MAGIC_OFFSET + 6) === 0 && GNU_VER.compare(buf, VERSION_OFFSET, VERSION_OFFSET + 2) === 0) {
        } else {
          if (!allowUnknownFormat) {
            throw new Error("Invalid tar header: unknown format.");
          }
        }
        if (typeflag === 0 && name && name[name.length - 1] === "/")
          typeflag = 5;
        return {
          name,
          mode,
          uid,
          gid,
          size,
          mtime: new Date(1000 * mtime),
          type,
          linkname,
          uname,
          gname,
          devmajor,
          devminor
        };
      };
    }
  });
  var require_extract2 = __commonJS2({
    "../../node_modules/.pnpm/tar-stream@2.2.0/node_modules/tar-stream/extract.js"(exports22, module22) {
      var util = __require("util");
      var bl = require_bl();
      var headers = require_headers();
      var Writable = require_readable().Writable;
      var PassThrough = require_readable().PassThrough;
      var noop = function() {
      };
      var overflow = function(size) {
        size &= 511;
        return size && 512 - size;
      };
      var emptyStream = function(self2, offset) {
        var s = new Source(self2, offset);
        s.end();
        return s;
      };
      var mixinPax = function(header, pax) {
        if (pax.path)
          header.name = pax.path;
        if (pax.linkpath)
          header.linkname = pax.linkpath;
        if (pax.size)
          header.size = parseInt(pax.size, 10);
        header.pax = pax;
        return header;
      };
      var Source = function(self2, offset) {
        this._parent = self2;
        this.offset = offset;
        PassThrough.call(this, { autoDestroy: false });
      };
      util.inherits(Source, PassThrough);
      Source.prototype.destroy = function(err) {
        this._parent.destroy(err);
      };
      var Extract = function(opts) {
        if (!(this instanceof Extract))
          return new Extract(opts);
        Writable.call(this, opts);
        opts = opts || {};
        this._offset = 0;
        this._buffer = bl();
        this._missing = 0;
        this._partial = false;
        this._onparse = noop;
        this._header = null;
        this._stream = null;
        this._overflow = null;
        this._cb = null;
        this._locked = false;
        this._destroyed = false;
        this._pax = null;
        this._paxGlobal = null;
        this._gnuLongPath = null;
        this._gnuLongLinkPath = null;
        var self2 = this;
        var b = self2._buffer;
        var oncontinue = function() {
          self2._continue();
        };
        var onunlock = function(err) {
          self2._locked = false;
          if (err)
            return self2.destroy(err);
          if (!self2._stream)
            oncontinue();
        };
        var onstreamend = function() {
          self2._stream = null;
          var drain = overflow(self2._header.size);
          if (drain)
            self2._parse(drain, ondrain);
          else
            self2._parse(512, onheader);
          if (!self2._locked)
            oncontinue();
        };
        var ondrain = function() {
          self2._buffer.consume(overflow(self2._header.size));
          self2._parse(512, onheader);
          oncontinue();
        };
        var onpaxglobalheader = function() {
          var size = self2._header.size;
          self2._paxGlobal = headers.decodePax(b.slice(0, size));
          b.consume(size);
          onstreamend();
        };
        var onpaxheader = function() {
          var size = self2._header.size;
          self2._pax = headers.decodePax(b.slice(0, size));
          if (self2._paxGlobal)
            self2._pax = Object.assign({}, self2._paxGlobal, self2._pax);
          b.consume(size);
          onstreamend();
        };
        var ongnulongpath = function() {
          var size = self2._header.size;
          this._gnuLongPath = headers.decodeLongPath(b.slice(0, size), opts.filenameEncoding);
          b.consume(size);
          onstreamend();
        };
        var ongnulonglinkpath = function() {
          var size = self2._header.size;
          this._gnuLongLinkPath = headers.decodeLongPath(b.slice(0, size), opts.filenameEncoding);
          b.consume(size);
          onstreamend();
        };
        var onheader = function() {
          var offset = self2._offset;
          var header;
          try {
            header = self2._header = headers.decode(b.slice(0, 512), opts.filenameEncoding, opts.allowUnknownFormat);
          } catch (err) {
            self2.emit("error", err);
          }
          b.consume(512);
          if (!header) {
            self2._parse(512, onheader);
            oncontinue();
            return;
          }
          if (header.type === "gnu-long-path") {
            self2._parse(header.size, ongnulongpath);
            oncontinue();
            return;
          }
          if (header.type === "gnu-long-link-path") {
            self2._parse(header.size, ongnulonglinkpath);
            oncontinue();
            return;
          }
          if (header.type === "pax-global-header") {
            self2._parse(header.size, onpaxglobalheader);
            oncontinue();
            return;
          }
          if (header.type === "pax-header") {
            self2._parse(header.size, onpaxheader);
            oncontinue();
            return;
          }
          if (self2._gnuLongPath) {
            header.name = self2._gnuLongPath;
            self2._gnuLongPath = null;
          }
          if (self2._gnuLongLinkPath) {
            header.linkname = self2._gnuLongLinkPath;
            self2._gnuLongLinkPath = null;
          }
          if (self2._pax) {
            self2._header = header = mixinPax(header, self2._pax);
            self2._pax = null;
          }
          self2._locked = true;
          if (!header.size || header.type === "directory") {
            self2._parse(512, onheader);
            self2.emit("entry", header, emptyStream(self2, offset), onunlock);
            return;
          }
          self2._stream = new Source(self2, offset);
          self2.emit("entry", header, self2._stream, onunlock);
          self2._parse(header.size, onstreamend);
          oncontinue();
        };
        this._onheader = onheader;
        this._parse(512, onheader);
      };
      util.inherits(Extract, Writable);
      Extract.prototype.destroy = function(err) {
        if (this._destroyed)
          return;
        this._destroyed = true;
        if (err)
          this.emit("error", err);
        this.emit("close");
        if (this._stream)
          this._stream.emit("close");
      };
      Extract.prototype._parse = function(size, onparse) {
        if (this._destroyed)
          return;
        this._offset += size;
        this._missing = size;
        if (onparse === this._onheader)
          this._partial = false;
        this._onparse = onparse;
      };
      Extract.prototype._continue = function() {
        if (this._destroyed)
          return;
        var cb = this._cb;
        this._cb = noop;
        if (this._overflow)
          this._write(this._overflow, undefined, cb);
        else
          cb();
      };
      Extract.prototype._write = function(data, enc, cb) {
        if (this._destroyed)
          return;
        var s = this._stream;
        var b = this._buffer;
        var missing = this._missing;
        if (data.length)
          this._partial = true;
        if (data.length < missing) {
          this._missing -= data.length;
          this._overflow = null;
          if (s)
            return s.write(data, cb);
          b.append(data);
          return cb();
        }
        this._cb = cb;
        this._missing = 0;
        var overflow2 = null;
        if (data.length > missing) {
          overflow2 = data.slice(missing);
          data = data.slice(0, missing);
        }
        if (s)
          s.end(data);
        else
          b.append(data);
        this._overflow = overflow2;
        this._onparse();
      };
      Extract.prototype._final = function(cb) {
        if (this._partial)
          return this.destroy(new Error("Unexpected end of data"));
        cb();
      };
      module22.exports = Extract;
    }
  });
  var require_fs_constants = __commonJS2({
    "../../node_modules/.pnpm/fs-constants@1.0.0/node_modules/fs-constants/index.js"(exports22, module22) {
      module22.exports = __require("fs").constants || __require("constants");
    }
  });
  var require_pack2 = __commonJS2({
    "../../node_modules/.pnpm/tar-stream@2.2.0/node_modules/tar-stream/pack.js"(exports22, module22) {
      var constants = require_fs_constants();
      var eos = require_end_of_stream();
      var inherits = require_inherits();
      var alloc = Buffer.alloc;
      var Readable = require_readable().Readable;
      var Writable = require_readable().Writable;
      var StringDecoder = __require("string_decoder").StringDecoder;
      var headers = require_headers();
      var DMODE = parseInt("755", 8);
      var FMODE = parseInt("644", 8);
      var END_OF_TAR = alloc(1024);
      var noop = function() {
      };
      var overflow = function(self2, size) {
        size &= 511;
        if (size)
          self2.push(END_OF_TAR.slice(0, 512 - size));
      };
      function modeToType(mode) {
        switch (mode & constants.S_IFMT) {
          case constants.S_IFBLK:
            return "block-device";
          case constants.S_IFCHR:
            return "character-device";
          case constants.S_IFDIR:
            return "directory";
          case constants.S_IFIFO:
            return "fifo";
          case constants.S_IFLNK:
            return "symlink";
        }
        return "file";
      }
      var Sink = function(to) {
        Writable.call(this);
        this.written = 0;
        this._to = to;
        this._destroyed = false;
      };
      inherits(Sink, Writable);
      Sink.prototype._write = function(data, enc, cb) {
        this.written += data.length;
        if (this._to.push(data))
          return cb();
        this._to._drain = cb;
      };
      Sink.prototype.destroy = function() {
        if (this._destroyed)
          return;
        this._destroyed = true;
        this.emit("close");
      };
      var LinkSink = function() {
        Writable.call(this);
        this.linkname = "";
        this._decoder = new StringDecoder("utf-8");
        this._destroyed = false;
      };
      inherits(LinkSink, Writable);
      LinkSink.prototype._write = function(data, enc, cb) {
        this.linkname += this._decoder.write(data);
        cb();
      };
      LinkSink.prototype.destroy = function() {
        if (this._destroyed)
          return;
        this._destroyed = true;
        this.emit("close");
      };
      var Void = function() {
        Writable.call(this);
        this._destroyed = false;
      };
      inherits(Void, Writable);
      Void.prototype._write = function(data, enc, cb) {
        cb(new Error("No body allowed for this entry"));
      };
      Void.prototype.destroy = function() {
        if (this._destroyed)
          return;
        this._destroyed = true;
        this.emit("close");
      };
      var Pack = function(opts) {
        if (!(this instanceof Pack))
          return new Pack(opts);
        Readable.call(this, opts);
        this._drain = noop;
        this._finalized = false;
        this._finalizing = false;
        this._destroyed = false;
        this._stream = null;
      };
      inherits(Pack, Readable);
      Pack.prototype.entry = function(header, buffer, callback) {
        if (this._stream)
          throw new Error("already piping an entry");
        if (this._finalized || this._destroyed)
          return;
        if (typeof buffer === "function") {
          callback = buffer;
          buffer = null;
        }
        if (!callback)
          callback = noop;
        var self2 = this;
        if (!header.size || header.type === "symlink")
          header.size = 0;
        if (!header.type)
          header.type = modeToType(header.mode);
        if (!header.mode)
          header.mode = header.type === "directory" ? DMODE : FMODE;
        if (!header.uid)
          header.uid = 0;
        if (!header.gid)
          header.gid = 0;
        if (!header.mtime)
          header.mtime = /* @__PURE__ */ new Date;
        if (typeof buffer === "string")
          buffer = Buffer.from(buffer);
        if (Buffer.isBuffer(buffer)) {
          header.size = buffer.length;
          this._encode(header);
          var ok = this.push(buffer);
          overflow(self2, header.size);
          if (ok)
            process.nextTick(callback);
          else
            this._drain = callback;
          return new Void;
        }
        if (header.type === "symlink" && !header.linkname) {
          var linkSink = new LinkSink;
          eos(linkSink, function(err) {
            if (err) {
              self2.destroy();
              return callback(err);
            }
            header.linkname = linkSink.linkname;
            self2._encode(header);
            callback();
          });
          return linkSink;
        }
        this._encode(header);
        if (header.type !== "file" && header.type !== "contiguous-file") {
          process.nextTick(callback);
          return new Void;
        }
        var sink = new Sink(this);
        this._stream = sink;
        eos(sink, function(err) {
          self2._stream = null;
          if (err) {
            self2.destroy();
            return callback(err);
          }
          if (sink.written !== header.size) {
            self2.destroy();
            return callback(new Error("size mismatch"));
          }
          overflow(self2, header.size);
          if (self2._finalizing)
            self2.finalize();
          callback();
        });
        return sink;
      };
      Pack.prototype.finalize = function() {
        if (this._stream) {
          this._finalizing = true;
          return;
        }
        if (this._finalized)
          return;
        this._finalized = true;
        this.push(END_OF_TAR);
        this.push(null);
      };
      Pack.prototype.destroy = function(err) {
        if (this._destroyed)
          return;
        this._destroyed = true;
        if (err)
          this.emit("error", err);
        this.emit("close");
        if (this._stream && this._stream.destroy)
          this._stream.destroy();
      };
      Pack.prototype._encode = function(header) {
        if (!header.pax) {
          var buf = headers.encode(header);
          if (buf) {
            this.push(buf);
            return;
          }
        }
        this._encodePax(header);
      };
      Pack.prototype._encodePax = function(header) {
        var paxHeader = headers.encodePax({
          name: header.name,
          linkname: header.linkname,
          pax: header.pax
        });
        var newHeader = {
          name: "PaxHeader",
          mode: header.mode,
          uid: header.uid,
          gid: header.gid,
          size: paxHeader.length,
          mtime: header.mtime,
          type: "pax-header",
          linkname: header.linkname && "PaxHeader",
          uname: header.uname,
          gname: header.gname,
          devmajor: header.devmajor,
          devminor: header.devminor
        };
        this.push(headers.encode(newHeader));
        this.push(paxHeader);
        overflow(this, paxHeader.length);
        newHeader.size = header.size;
        newHeader.type = header.type;
        this.push(headers.encode(newHeader));
      };
      Pack.prototype._read = function(n) {
        var drain = this._drain;
        this._drain = noop;
        drain();
      };
      module22.exports = Pack;
    }
  });
  var require_tar_stream = __commonJS2({
    "../../node_modules/.pnpm/tar-stream@2.2.0/node_modules/tar-stream/index.js"(exports22) {
      exports22.extract = require_extract2();
      exports22.pack = require_pack2();
    }
  });
  var require_packUtils = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+plugin-pack@4.0.0_@yarnpkg+cli@4.6.0_@types+react@18.3.18_@yarnpkg+core@4.2.0_typani_mggreypmejwfr4smhnu2gghnfi/node_modules/@yarnpkg/plugin-pack/lib/packUtils.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.genPackList = exports22.genPackageManifest = exports22.genPackStream = exports22.prepareForPack = exports22.hasPackScripts = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var core_1 = require_lib6();
      var fslib_12 = require_lib();
      var micromatch_12 = tslib_12.__importDefault(require_micromatch());
      var tar_stream_1 = tslib_12.__importDefault(require_tar_stream());
      var zlib_1 = __require("zlib");
      var NEVER_IGNORE = [
        `/package.json`,
        `/readme`,
        `/readme.*`,
        `/license`,
        `/license.*`,
        `/licence`,
        `/licence.*`,
        `/changelog`,
        `/changelog.*`
      ];
      var ALWAYS_IGNORE = [
        `/package.tgz`,
        `.github`,
        `.git`,
        `.hg`,
        `node_modules`,
        `.npmignore`,
        `.gitignore`,
        `.#*`,
        `.DS_Store`
      ];
      async function hasPackScripts(workspace) {
        if (core_1.scriptUtils.hasWorkspaceScript(workspace, `prepack`))
          return true;
        if (core_1.scriptUtils.hasWorkspaceScript(workspace, `postpack`))
          return true;
        return false;
      }
      exports22.hasPackScripts = hasPackScripts;
      async function prepareForPack(workspace, { report }, cb) {
        await core_1.scriptUtils.maybeExecuteWorkspaceLifecycleScript(workspace, `prepack`, { report });
        try {
          const manifestPath = fslib_12.ppath.join(workspace.cwd, core_1.Manifest.fileName);
          if (await fslib_12.xfs.existsPromise(manifestPath))
            await workspace.manifest.loadFile(manifestPath, { baseFs: fslib_12.xfs });
          await cb();
        } finally {
          await core_1.scriptUtils.maybeExecuteWorkspaceLifecycleScript(workspace, `postpack`, { report });
        }
      }
      exports22.prepareForPack = prepareForPack;
      async function genPackStream(workspace, files) {
        if (typeof files === `undefined`)
          files = await genPackList(workspace);
        const executableFiles = /* @__PURE__ */ new Set;
        for (const value of workspace.manifest.publishConfig?.executableFiles ?? /* @__PURE__ */ new Set)
          executableFiles.add(fslib_12.ppath.normalize(value));
        for (const value of workspace.manifest.bin.values())
          executableFiles.add(fslib_12.ppath.normalize(value));
        const pack = tar_stream_1.default.pack();
        process.nextTick(async () => {
          for (const fileRequest of files) {
            const file = fslib_12.ppath.normalize(fileRequest);
            const source = fslib_12.ppath.resolve(workspace.cwd, file);
            const dest = fslib_12.ppath.join(`package`, file);
            const stat = await fslib_12.xfs.lstatPromise(source);
            const opts = {
              name: dest,
              mtime: new Date(fslib_12.constants.SAFE_TIME * 1000)
            };
            const mode = executableFiles.has(file) ? 493 : 420;
            let resolveFn;
            let rejectFn;
            const awaitTarget = new Promise((resolve, reject) => {
              resolveFn = resolve;
              rejectFn = reject;
            });
            const cb = (error) => {
              if (error) {
                rejectFn(error);
              } else {
                resolveFn();
              }
            };
            if (stat.isFile()) {
              let content;
              if (file === `package.json`)
                content = Buffer.from(JSON.stringify(await genPackageManifest(workspace), null, 2));
              else
                content = await fslib_12.xfs.readFilePromise(source);
              pack.entry({ ...opts, mode, type: `file` }, content, cb);
            } else if (stat.isSymbolicLink()) {
              pack.entry({ ...opts, mode, type: `symlink`, linkname: await fslib_12.xfs.readlinkPromise(source) }, cb);
            } else {
              cb(new Error(`Unsupported file type ${stat.mode} for ${fslib_12.npath.fromPortablePath(file)}`));
            }
            await awaitTarget;
          }
          pack.finalize();
        });
        const tgz = (0, zlib_1.createGzip)();
        pack.pipe(tgz);
        return tgz;
      }
      exports22.genPackStream = genPackStream;
      async function genPackageManifest(workspace) {
        const data = JSON.parse(JSON.stringify(workspace.manifest.raw));
        await workspace.project.configuration.triggerHook((hooks) => hooks.beforeWorkspacePacking, workspace, data);
        return data;
      }
      exports22.genPackageManifest = genPackageManifest;
      async function genPackList(workspace) {
        const project = workspace.project;
        const configuration = project.configuration;
        const globalList = {
          accept: [],
          reject: []
        };
        for (const pattern of ALWAYS_IGNORE)
          globalList.reject.push(pattern);
        for (const pattern of NEVER_IGNORE)
          globalList.accept.push(pattern);
        globalList.reject.push(configuration.get(`rcFilename`));
        const maybeRejectPath = (path2) => {
          if (path2 === null || !path2.startsWith(`${workspace.cwd}/`))
            return;
          const workspaceRelativePath = fslib_12.ppath.relative(workspace.cwd, path2);
          const workspaceAbsolutePath = fslib_12.ppath.resolve(fslib_12.PortablePath.root, workspaceRelativePath);
          globalList.reject.push(workspaceAbsolutePath);
        };
        maybeRejectPath(fslib_12.ppath.resolve(project.cwd, fslib_12.Filename.lockfile));
        maybeRejectPath(configuration.get(`cacheFolder`));
        maybeRejectPath(configuration.get(`globalFolder`));
        maybeRejectPath(configuration.get(`installStatePath`));
        maybeRejectPath(configuration.get(`virtualFolder`));
        maybeRejectPath(configuration.get(`yarnPath`));
        await configuration.triggerHook((hooks) => {
          return hooks.populateYarnPaths;
        }, project, (path2) => {
          maybeRejectPath(path2);
        });
        for (const otherWorkspace of project.workspaces) {
          const rel = fslib_12.ppath.relative(workspace.cwd, otherWorkspace.cwd);
          if (rel !== `` && !rel.match(/^(\.\.)?\//)) {
            globalList.reject.push(`/${rel}`);
          }
        }
        const ignoreList = {
          accept: [],
          reject: []
        };
        const main2 = workspace.manifest.publishConfig?.main ?? workspace.manifest.main;
        const module3 = workspace.manifest.publishConfig?.module ?? workspace.manifest.module;
        const browser = workspace.manifest.publishConfig?.browser ?? workspace.manifest.browser;
        const bins = workspace.manifest.publishConfig?.bin ?? workspace.manifest.bin;
        if (main2 != null)
          ignoreList.accept.push(fslib_12.ppath.resolve(fslib_12.PortablePath.root, main2));
        if (module3 != null)
          ignoreList.accept.push(fslib_12.ppath.resolve(fslib_12.PortablePath.root, module3));
        if (typeof browser === `string`)
          ignoreList.accept.push(fslib_12.ppath.resolve(fslib_12.PortablePath.root, browser));
        for (const path2 of bins.values())
          ignoreList.accept.push(fslib_12.ppath.resolve(fslib_12.PortablePath.root, path2));
        if (browser instanceof Map) {
          for (const [original, replacement] of browser.entries()) {
            ignoreList.accept.push(fslib_12.ppath.resolve(fslib_12.PortablePath.root, original));
            if (typeof replacement === `string`) {
              ignoreList.accept.push(fslib_12.ppath.resolve(fslib_12.PortablePath.root, replacement));
            }
          }
        }
        const hasExplicitFileList = workspace.manifest.files !== null;
        if (hasExplicitFileList) {
          ignoreList.reject.push(`/*`);
          for (const pattern of workspace.manifest.files) {
            addIgnorePattern(ignoreList.accept, pattern, { cwd: fslib_12.PortablePath.root });
          }
        }
        return await walk(workspace.cwd, {
          hasExplicitFileList,
          globalList,
          ignoreList
        });
      }
      exports22.genPackList = genPackList;
      async function walk(initialCwd, { hasExplicitFileList, globalList, ignoreList }) {
        const list = [];
        const cwdFs = new fslib_12.JailFS(initialCwd);
        const cwdList = [[fslib_12.PortablePath.root, [ignoreList]]];
        while (cwdList.length > 0) {
          const [cwd, ignoreLists] = cwdList.pop();
          const stat = await cwdFs.lstatPromise(cwd);
          if (isIgnored(cwd, { globalList, ignoreLists: stat.isDirectory() ? null : ignoreLists }))
            continue;
          if (stat.isDirectory()) {
            const entries = await cwdFs.readdirPromise(cwd);
            let hasGitIgnore = false;
            let hasNpmIgnore = false;
            if (!hasExplicitFileList || cwd !== fslib_12.PortablePath.root) {
              for (const entry of entries) {
                hasGitIgnore = hasGitIgnore || entry === `.gitignore`;
                hasNpmIgnore = hasNpmIgnore || entry === `.npmignore`;
              }
            }
            const localIgnoreList = hasNpmIgnore ? await loadIgnoreList(cwdFs, cwd, `.npmignore`) : hasGitIgnore ? await loadIgnoreList(cwdFs, cwd, `.gitignore`) : null;
            let nextIgnoreLists = localIgnoreList !== null ? [localIgnoreList].concat(ignoreLists) : ignoreLists;
            if (isIgnored(cwd, { globalList, ignoreLists }))
              nextIgnoreLists = [...ignoreLists, { accept: [], reject: [`**/*`] }];
            for (const entry of entries) {
              cwdList.push([fslib_12.ppath.resolve(cwd, entry), nextIgnoreLists]);
            }
          } else if (stat.isFile() || stat.isSymbolicLink()) {
            list.push(fslib_12.ppath.relative(fslib_12.PortablePath.root, cwd));
          }
        }
        return list.sort();
      }
      async function loadIgnoreList(fs, cwd, filename) {
        const ignoreList = {
          accept: [],
          reject: []
        };
        const data = await fs.readFilePromise(fslib_12.ppath.join(cwd, filename), `utf8`);
        for (const pattern of data.split(/\n/g))
          addIgnorePattern(ignoreList.reject, pattern, { cwd });
        return ignoreList;
      }
      function normalizePattern(pattern, { cwd }) {
        const negated = pattern[0] === `!`;
        if (negated)
          pattern = pattern.slice(1);
        if (pattern.match(/\.{0,1}\//))
          pattern = fslib_12.ppath.resolve(cwd, pattern);
        if (negated)
          pattern = `!${pattern}`;
        return pattern;
      }
      function addIgnorePattern(target, pattern, { cwd }) {
        const trimed = pattern.trim();
        if (trimed === `` || trimed[0] === `#`)
          return;
        target.push(normalizePattern(trimed, { cwd }));
      }
      var MatchType;
      (function(MatchType2) {
        MatchType2[MatchType2["None"] = 0] = "None";
        MatchType2[MatchType2["Match"] = 1] = "Match";
        MatchType2[MatchType2["NegatedMatch"] = 2] = "NegatedMatch";
      })(MatchType || (MatchType = {}));
      function isIgnored(cwd, { globalList, ignoreLists }) {
        const globalAcceptMatchType = matchPatternType(cwd, globalList.accept);
        if (globalAcceptMatchType !== MatchType.None)
          return globalAcceptMatchType === MatchType.NegatedMatch;
        const globalRejectMatchType = matchPatternType(cwd, globalList.reject);
        if (globalRejectMatchType !== MatchType.None)
          return globalRejectMatchType === MatchType.Match;
        if (ignoreLists !== null) {
          for (const ignoreList of ignoreLists) {
            const acceptMatchType = matchPatternType(cwd, ignoreList.accept);
            if (acceptMatchType !== MatchType.None)
              return acceptMatchType === MatchType.NegatedMatch;
            const rejectMatchType = matchPatternType(cwd, ignoreList.reject);
            if (rejectMatchType !== MatchType.None) {
              return rejectMatchType === MatchType.Match;
            }
          }
        }
        return false;
      }
      function matchPatternType(path2, patterns) {
        let inclusives = patterns;
        const exclusives = [];
        for (let t = 0;t < patterns.length; ++t) {
          if (patterns[t][0] !== `!`) {
            if (inclusives !== patterns) {
              inclusives.push(patterns[t]);
            }
          } else {
            if (inclusives === patterns)
              inclusives = patterns.slice(0, t);
            exclusives.push(patterns[t].slice(1));
          }
        }
        if (isMatchBasename(path2, exclusives))
          return MatchType.NegatedMatch;
        if (isMatchBasename(path2, inclusives))
          return MatchType.Match;
        return MatchType.None;
      }
      function isMatchBasename(path2, patterns) {
        let paths = patterns;
        const basenames = [];
        for (let t = 0;t < patterns.length; ++t) {
          if (patterns[t].includes(`/`)) {
            if (paths !== patterns) {
              paths.push(patterns[t]);
            }
          } else {
            if (paths === patterns)
              paths = patterns.slice(0, t);
            basenames.push(patterns[t]);
          }
        }
        if (micromatch_12.default.isMatch(path2, paths, { dot: true, nocase: true }))
          return true;
        if (micromatch_12.default.isMatch(path2, basenames, { dot: true, basename: true, nocase: true }))
          return true;
        return false;
      }
    }
  });
  var require_pack3 = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+plugin-pack@4.0.0_@yarnpkg+cli@4.6.0_@types+react@18.3.18_@yarnpkg+core@4.2.0_typani_mggreypmejwfr4smhnu2gghnfi/node_modules/@yarnpkg/plugin-pack/lib/commands/pack.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var cli_1 = require_lib10();
      var core_1 = require_lib6();
      var fslib_12 = require_lib();
      var clipanion_12 = require_advanced();
      var packUtils = tslib_12.__importStar(require_packUtils());
      var PackCommand = class extends cli_1.BaseCommand {
        constructor() {
          super(...arguments);
          this.installIfNeeded = clipanion_12.Option.Boolean(`--install-if-needed`, false, {
            description: `Run a preliminary \`yarn install\` if the package contains build scripts`
          });
          this.dryRun = clipanion_12.Option.Boolean(`-n,--dry-run`, false, {
            description: `Print the file paths without actually generating the package archive`
          });
          this.json = clipanion_12.Option.Boolean(`--json`, false, {
            description: `Format the output as an NDJSON stream`
          });
          this.out = clipanion_12.Option.String(`-o,--out`, {
            description: `Create the archive at the specified path`
          });
          this.filename = clipanion_12.Option.String(`--filename`, { hidden: true });
        }
        async execute() {
          const configuration = await core_1.Configuration.find(this.context.cwd, this.context.plugins);
          const { project, workspace } = await core_1.Project.find(configuration, this.context.cwd);
          if (!workspace)
            throw new cli_1.WorkspaceRequiredError(project.cwd, this.context.cwd);
          if (await packUtils.hasPackScripts(workspace)) {
            if (this.installIfNeeded) {
              await project.install({
                cache: await core_1.Cache.find(configuration),
                report: new core_1.ThrowReport
              });
            } else {
              await project.restoreInstallState();
            }
          }
          const out = this.out ?? this.filename;
          const target = typeof out !== `undefined` ? fslib_12.ppath.resolve(this.context.cwd, interpolateOutputName(out, { workspace })) : fslib_12.ppath.resolve(workspace.cwd, `package.tgz`);
          const report = await core_1.StreamReport.start({
            configuration,
            stdout: this.context.stdout,
            json: this.json
          }, async (report2) => {
            await packUtils.prepareForPack(workspace, { report: report2 }, async () => {
              report2.reportJson({ base: fslib_12.npath.fromPortablePath(workspace.cwd) });
              const files = await packUtils.genPackList(workspace);
              for (const file of files) {
                report2.reportInfo(null, fslib_12.npath.fromPortablePath(file));
                report2.reportJson({ location: fslib_12.npath.fromPortablePath(file) });
              }
              if (!this.dryRun) {
                const pack = await packUtils.genPackStream(workspace, files);
                const write = fslib_12.xfs.createWriteStream(target);
                pack.pipe(write);
                await new Promise((resolve) => {
                  write.on(`finish`, resolve);
                });
              }
            });
            if (!this.dryRun) {
              report2.reportInfo(core_1.MessageName.UNNAMED, `Package archive generated in ${core_1.formatUtils.pretty(configuration, target, core_1.formatUtils.Type.PATH)}`);
              report2.reportJson({ output: fslib_12.npath.fromPortablePath(target) });
            }
          });
          return report.exitCode();
        }
      };
      PackCommand.paths = [
        [`pack`]
      ];
      PackCommand.usage = clipanion_12.Command.Usage({
        description: `generate a tarball from the active workspace`,
        details: `
      This command will turn the active workspace into a compressed archive suitable for publishing. The archive will by default be stored at the root of the workspace (\`package.tgz\`).

      If the \`-o,---out\` is set the archive will be created at the specified path. The \`%s\` and \`%v\` variables can be used within the path and will be respectively replaced by the package name and version.
    `,
        examples: [[
          `Create an archive from the active workspace`,
          `yarn pack`
        ], [
          `List the files that would be made part of the workspace's archive`,
          `yarn pack --dry-run`
        ], [
          `Name and output the archive in a dedicated folder`,
          `yarn pack --out /artifacts/%s-%v.tgz`
        ]]
      });
      exports22.default = PackCommand;
      function interpolateOutputName(name, { workspace }) {
        const interpolated = name.replace(`%s`, prettyWorkspaceIdent(workspace)).replace(`%v`, prettyWorkspaceVersion(workspace));
        return fslib_12.npath.toPortablePath(interpolated);
      }
      function prettyWorkspaceIdent(workspace) {
        if (workspace.manifest.name !== null) {
          return core_1.structUtils.slugifyIdent(workspace.manifest.name);
        } else {
          return `package`;
        }
      }
      function prettyWorkspaceVersion(workspace) {
        if (workspace.manifest.version !== null) {
          return workspace.manifest.version;
        } else {
          return `unknown`;
        }
      }
    }
  });
  var require_lib13 = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+plugin-pack@4.0.0_@yarnpkg+cli@4.6.0_@types+react@18.3.18_@yarnpkg+core@4.2.0_typani_mggreypmejwfr4smhnu2gghnfi/node_modules/@yarnpkg/plugin-pack/lib/index.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.packUtils = exports22.PackCommand = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var core_1 = require_lib6();
      var core_2 = require_lib6();
      var pack_1 = tslib_12.__importDefault(require_pack3());
      exports22.PackCommand = pack_1.default;
      var packUtils = tslib_12.__importStar(require_packUtils());
      exports22.packUtils = packUtils;
      var DEPENDENCY_TYPES = [`dependencies`, `devDependencies`, `peerDependencies`];
      var WORKSPACE_PROTOCOL = `workspace:`;
      var beforeWorkspacePacking = (workspace, rawManifest) => {
        if (rawManifest.publishConfig) {
          if (rawManifest.publishConfig.type)
            rawManifest.type = rawManifest.publishConfig.type;
          if (rawManifest.publishConfig.main)
            rawManifest.main = rawManifest.publishConfig.main;
          if (rawManifest.publishConfig.browser)
            rawManifest.browser = rawManifest.publishConfig.browser;
          if (rawManifest.publishConfig.module)
            rawManifest.module = rawManifest.publishConfig.module;
          if (rawManifest.publishConfig.exports)
            rawManifest.exports = rawManifest.publishConfig.exports;
          if (rawManifest.publishConfig.imports)
            rawManifest.imports = rawManifest.publishConfig.imports;
          if (rawManifest.publishConfig.bin) {
            rawManifest.bin = rawManifest.publishConfig.bin;
          }
        }
        const project = workspace.project;
        for (const dependencyType of DEPENDENCY_TYPES) {
          for (const descriptor of workspace.manifest.getForScope(dependencyType).values()) {
            const matchingWorkspace = project.tryWorkspaceByDescriptor(descriptor);
            const range = core_1.structUtils.parseRange(descriptor.range);
            if (range.protocol !== WORKSPACE_PROTOCOL)
              continue;
            if (matchingWorkspace === null) {
              if (project.tryWorkspaceByIdent(descriptor) === null) {
                throw new core_2.ReportError(core_2.MessageName.WORKSPACE_NOT_FOUND, `${core_1.structUtils.prettyDescriptor(project.configuration, descriptor)}: No local workspace found for this range`);
              }
            } else {
              let versionToWrite;
              if (core_1.structUtils.areDescriptorsEqual(descriptor, matchingWorkspace.anchoredDescriptor) || range.selector === `*`)
                versionToWrite = matchingWorkspace.manifest.version ?? `0.0.0`;
              else if (range.selector === `~` || range.selector === `^`)
                versionToWrite = `${range.selector}${matchingWorkspace.manifest.version ?? `0.0.0`}`;
              else
                versionToWrite = range.selector;
              const identDescriptor = dependencyType === `dependencies` ? core_1.structUtils.makeDescriptor(descriptor, `unknown`) : null;
              const finalDependencyType = identDescriptor !== null && workspace.manifest.ensureDependencyMeta(identDescriptor).optional ? `optionalDependencies` : dependencyType;
              rawManifest[finalDependencyType][core_1.structUtils.stringifyIdent(descriptor)] = versionToWrite;
            }
          }
        }
      };
      var plugin = {
        hooks: {
          beforeWorkspacePacking
        },
        commands: [
          pack_1.default
        ]
      };
      exports22.default = plugin;
    }
  });
  var require_figgy_pudding = __commonJS2({
    "../../node_modules/.pnpm/figgy-pudding@3.5.2/node_modules/figgy-pudding/index.js"(exports22, module22) {
      var FiggyPudding = class _FiggyPudding {
        constructor(specs, opts, providers) {
          this.__specs = specs || {};
          Object.keys(this.__specs).forEach((alias) => {
            if (typeof this.__specs[alias] === "string") {
              const key = this.__specs[alias];
              const realSpec = this.__specs[key];
              if (realSpec) {
                const aliasArr = realSpec.aliases || [];
                aliasArr.push(alias, key);
                realSpec.aliases = [...new Set(aliasArr)];
                this.__specs[alias] = realSpec;
              } else {
                throw new Error(`Alias refers to invalid key: ${key} -> ${alias}`);
              }
            }
          });
          this.__opts = opts || {};
          this.__providers = reverse(providers.filter((x) => x != null && typeof x === "object"));
          this.__isFiggyPudding = true;
        }
        get(key) {
          return pudGet(this, key, true);
        }
        get [Symbol.toStringTag]() {
          return "FiggyPudding";
        }
        forEach(fn, thisArg = this) {
          for (let [key, value] of this.entries()) {
            fn.call(thisArg, value, key, this);
          }
        }
        toJSON() {
          const obj = {};
          this.forEach((val, key) => {
            obj[key] = val;
          });
          return obj;
        }
        *entries(_matcher) {
          for (let key of Object.keys(this.__specs)) {
            yield [key, this.get(key)];
          }
          const matcher = _matcher || this.__opts.other;
          if (matcher) {
            const seen = /* @__PURE__ */ new Set;
            for (let p of this.__providers) {
              const iter = p.entries ? p.entries(matcher) : entries(p);
              for (let [key, val] of iter) {
                if (matcher(key) && !seen.has(key)) {
                  seen.add(key);
                  yield [key, val];
                }
              }
            }
          }
        }
        *[Symbol.iterator]() {
          for (let [key, value] of this.entries()) {
            yield [key, value];
          }
        }
        *keys() {
          for (let [key] of this.entries()) {
            yield key;
          }
        }
        *values() {
          for (let [, value] of this.entries()) {
            yield value;
          }
        }
        concat(...moreConfig) {
          return new Proxy(new _FiggyPudding(this.__specs, this.__opts, reverse(this.__providers).concat(moreConfig)), proxyHandler);
        }
      };
      try {
        const util = __require("util");
        FiggyPudding.prototype[util.inspect.custom] = function(depth, opts) {
          return this[Symbol.toStringTag] + " " + util.inspect(this.toJSON(), opts);
        };
      } catch (e) {
      }
      function BadKeyError(key) {
        throw Object.assign(new Error(`invalid config key requested: ${key}`), { code: "EBADKEY" });
      }
      function pudGet(pud, key, validate) {
        let spec = pud.__specs[key];
        if (validate && !spec && (!pud.__opts.other || !pud.__opts.other(key))) {
          BadKeyError(key);
        } else {
          if (!spec) {
            spec = {};
          }
          let ret;
          for (let p of pud.__providers) {
            ret = tryGet(key, p);
            if (ret === undefined && spec.aliases && spec.aliases.length) {
              for (let alias of spec.aliases) {
                if (alias === key) {
                  continue;
                }
                ret = tryGet(alias, p);
                if (ret !== undefined) {
                  break;
                }
              }
            }
            if (ret !== undefined) {
              break;
            }
          }
          if (ret === undefined && spec.default !== undefined) {
            if (typeof spec.default === "function") {
              return spec.default(pud);
            } else {
              return spec.default;
            }
          } else {
            return ret;
          }
        }
      }
      function tryGet(key, p) {
        let ret;
        if (p.__isFiggyPudding) {
          ret = pudGet(p, key, false);
        } else if (typeof p.get === "function") {
          ret = p.get(key);
        } else {
          ret = p[key];
        }
        return ret;
      }
      var proxyHandler = {
        has(obj, prop) {
          return prop in obj.__specs && pudGet(obj, prop, false) !== undefined;
        },
        ownKeys(obj) {
          return Object.keys(obj.__specs);
        },
        get(obj, prop) {
          if (typeof prop === "symbol" || prop.slice(0, 2) === "__" || prop in FiggyPudding.prototype) {
            return obj[prop];
          }
          return obj.get(prop);
        },
        set(obj, prop, value) {
          if (typeof prop === "symbol" || prop.slice(0, 2) === "__") {
            obj[prop] = value;
            return true;
          } else {
            throw new Error("figgyPudding options cannot be modified. Use .concat() instead.");
          }
        },
        deleteProperty() {
          throw new Error("figgyPudding options cannot be deleted. Use .concat() and shadow them instead.");
        }
      };
      module22.exports = figgyPudding;
      function figgyPudding(specs, opts) {
        function factory(...providers) {
          return new Proxy(new FiggyPudding(specs, opts, providers), proxyHandler);
        }
        return factory;
      }
      function reverse(arr) {
        const ret = [];
        arr.forEach((x) => ret.unshift(x));
        return ret;
      }
      function entries(obj) {
        return Object.keys(obj).map((k) => [k, obj[k]]);
      }
    }
  });
  var require_ssri = __commonJS2({
    "../../node_modules/.pnpm/ssri@6.0.2/node_modules/ssri/index.js"(exports22, module22) {
      var crypto = __require("crypto");
      var figgyPudding = require_figgy_pudding();
      var Transform = __require("stream").Transform;
      var SPEC_ALGORITHMS = ["sha256", "sha384", "sha512"];
      var BASE64_REGEX = /^[a-z0-9+/]+(?:=?=?)$/i;
      var SRI_REGEX = /^([^-]+)-([^?]+)([?\S*]*)$/;
      var STRICT_SRI_REGEX = /^([^-]+)-([A-Za-z0-9+/=]{44,88})(\?[\x21-\x7E]*)?$/;
      var VCHAR_REGEX = /^[\x21-\x7E]+$/;
      var SsriOpts = figgyPudding({
        algorithms: { default: ["sha512"] },
        error: { default: false },
        integrity: {},
        options: { default: [] },
        pickAlgorithm: { default: () => getPrioritizedHash },
        Promise: { default: () => Promise },
        sep: { default: " " },
        single: { default: false },
        size: {},
        strict: { default: false }
      });
      var Hash = class {
        get isHash() {
          return true;
        }
        constructor(hash, opts) {
          opts = SsriOpts(opts);
          const strict = !!opts.strict;
          this.source = hash.trim();
          const match = this.source.match(strict ? STRICT_SRI_REGEX : SRI_REGEX);
          if (!match) {
            return;
          }
          if (strict && !SPEC_ALGORITHMS.some((a) => a === match[1])) {
            return;
          }
          this.algorithm = match[1];
          this.digest = match[2];
          const rawOpts = match[3];
          this.options = rawOpts ? rawOpts.slice(1).split("?") : [];
        }
        hexDigest() {
          return this.digest && Buffer.from(this.digest, "base64").toString("hex");
        }
        toJSON() {
          return this.toString();
        }
        toString(opts) {
          opts = SsriOpts(opts);
          if (opts.strict) {
            if (!(SPEC_ALGORITHMS.some((x) => x === this.algorithm) && this.digest.match(BASE64_REGEX) && (this.options || []).every((opt) => opt.match(VCHAR_REGEX)))) {
              return "";
            }
          }
          const options = this.options && this.options.length ? `?${this.options.join("?")}` : "";
          return `${this.algorithm}-${this.digest}${options}`;
        }
      };
      var Integrity = class {
        get isIntegrity() {
          return true;
        }
        toJSON() {
          return this.toString();
        }
        toString(opts) {
          opts = SsriOpts(opts);
          let sep = opts.sep || " ";
          if (opts.strict) {
            sep = sep.replace(/\S+/g, " ");
          }
          return Object.keys(this).map((k) => {
            return this[k].map((hash) => {
              return Hash.prototype.toString.call(hash, opts);
            }).filter((x) => x.length).join(sep);
          }).filter((x) => x.length).join(sep);
        }
        concat(integrity, opts) {
          opts = SsriOpts(opts);
          const other = typeof integrity === "string" ? integrity : stringify(integrity, opts);
          return parse(`${this.toString(opts)} ${other}`, opts);
        }
        hexDigest() {
          return parse(this, { single: true }).hexDigest();
        }
        match(integrity, opts) {
          opts = SsriOpts(opts);
          const other = parse(integrity, opts);
          const algo = other.pickAlgorithm(opts);
          return this[algo] && other[algo] && this[algo].find((hash) => other[algo].find((otherhash) => hash.digest === otherhash.digest)) || false;
        }
        pickAlgorithm(opts) {
          opts = SsriOpts(opts);
          const pickAlgorithm = opts.pickAlgorithm;
          const keys = Object.keys(this);
          if (!keys.length) {
            throw new Error(`No algorithms available for ${JSON.stringify(this.toString())}`);
          }
          return keys.reduce((acc, algo) => {
            return pickAlgorithm(acc, algo) || acc;
          });
        }
      };
      module22.exports.parse = parse;
      function parse(sri, opts) {
        opts = SsriOpts(opts);
        if (typeof sri === "string") {
          return _parse(sri, opts);
        } else if (sri.algorithm && sri.digest) {
          const fullSri = new Integrity;
          fullSri[sri.algorithm] = [sri];
          return _parse(stringify(fullSri, opts), opts);
        } else {
          return _parse(stringify(sri, opts), opts);
        }
      }
      function _parse(integrity, opts) {
        if (opts.single) {
          return new Hash(integrity, opts);
        }
        return integrity.trim().split(/\s+/).reduce((acc, string) => {
          const hash = new Hash(string, opts);
          if (hash.algorithm && hash.digest) {
            const algo = hash.algorithm;
            if (!acc[algo]) {
              acc[algo] = [];
            }
            acc[algo].push(hash);
          }
          return acc;
        }, new Integrity);
      }
      module22.exports.stringify = stringify;
      function stringify(obj, opts) {
        opts = SsriOpts(opts);
        if (obj.algorithm && obj.digest) {
          return Hash.prototype.toString.call(obj, opts);
        } else if (typeof obj === "string") {
          return stringify(parse(obj, opts), opts);
        } else {
          return Integrity.prototype.toString.call(obj, opts);
        }
      }
      module22.exports.fromHex = fromHex;
      function fromHex(hexDigest, algorithm, opts) {
        opts = SsriOpts(opts);
        const optString = opts.options && opts.options.length ? `?${opts.options.join("?")}` : "";
        return parse(`${algorithm}-${Buffer.from(hexDigest, "hex").toString("base64")}${optString}`, opts);
      }
      module22.exports.fromData = fromData;
      function fromData(data, opts) {
        opts = SsriOpts(opts);
        const algorithms = opts.algorithms;
        const optString = opts.options && opts.options.length ? `?${opts.options.join("?")}` : "";
        return algorithms.reduce((acc, algo) => {
          const digest = crypto.createHash(algo).update(data).digest("base64");
          const hash = new Hash(`${algo}-${digest}${optString}`, opts);
          if (hash.algorithm && hash.digest) {
            const algo2 = hash.algorithm;
            if (!acc[algo2]) {
              acc[algo2] = [];
            }
            acc[algo2].push(hash);
          }
          return acc;
        }, new Integrity);
      }
      module22.exports.fromStream = fromStream;
      function fromStream(stream, opts) {
        opts = SsriOpts(opts);
        const P = opts.Promise || Promise;
        const istream = integrityStream(opts);
        return new P((resolve, reject) => {
          stream.pipe(istream);
          stream.on("error", reject);
          istream.on("error", reject);
          let sri;
          istream.on("integrity", (s) => {
            sri = s;
          });
          istream.on("end", () => resolve(sri));
          istream.on("data", () => {
          });
        });
      }
      module22.exports.checkData = checkData;
      function checkData(data, sri, opts) {
        opts = SsriOpts(opts);
        sri = parse(sri, opts);
        if (!Object.keys(sri).length) {
          if (opts.error) {
            throw Object.assign(new Error("No valid integrity hashes to check against"), {
              code: "EINTEGRITY"
            });
          } else {
            return false;
          }
        }
        const algorithm = sri.pickAlgorithm(opts);
        const digest = crypto.createHash(algorithm).update(data).digest("base64");
        const newSri = parse({ algorithm, digest });
        const match = newSri.match(sri, opts);
        if (match || !opts.error) {
          return match;
        } else if (typeof opts.size === "number" && data.length !== opts.size) {
          const err = new Error(`data size mismatch when checking ${sri}.
  Wanted: ${opts.size}
  Found: ${data.length}`);
          err.code = "EBADSIZE";
          err.found = data.length;
          err.expected = opts.size;
          err.sri = sri;
          throw err;
        } else {
          const err = new Error(`Integrity checksum failed when using ${algorithm}: Wanted ${sri}, but got ${newSri}. (${data.length} bytes)`);
          err.code = "EINTEGRITY";
          err.found = newSri;
          err.expected = sri;
          err.algorithm = algorithm;
          err.sri = sri;
          throw err;
        }
      }
      module22.exports.checkStream = checkStream;
      function checkStream(stream, sri, opts) {
        opts = SsriOpts(opts);
        const P = opts.Promise || Promise;
        const checker = integrityStream(opts.concat({
          integrity: sri
        }));
        return new P((resolve, reject) => {
          stream.pipe(checker);
          stream.on("error", reject);
          checker.on("error", reject);
          let sri2;
          checker.on("verified", (s) => {
            sri2 = s;
          });
          checker.on("end", () => resolve(sri2));
          checker.on("data", () => {
          });
        });
      }
      module22.exports.integrityStream = integrityStream;
      function integrityStream(opts) {
        opts = SsriOpts(opts);
        const sri = opts.integrity && parse(opts.integrity, opts);
        const goodSri = sri && Object.keys(sri).length;
        const algorithm = goodSri && sri.pickAlgorithm(opts);
        const digests = goodSri && sri[algorithm];
        const algorithms = Array.from(new Set(opts.algorithms.concat(algorithm ? [algorithm] : [])));
        const hashes = algorithms.map(crypto.createHash);
        let streamSize = 0;
        const stream = new Transform({
          transform(chunk, enc, cb) {
            streamSize += chunk.length;
            hashes.forEach((h) => h.update(chunk, enc));
            cb(null, chunk, enc);
          }
        }).on("end", () => {
          const optString = opts.options && opts.options.length ? `?${opts.options.join("?")}` : "";
          const newSri = parse(hashes.map((h, i) => {
            return `${algorithms[i]}-${h.digest("base64")}${optString}`;
          }).join(" "), opts);
          const match = goodSri && newSri.match(sri, opts);
          if (typeof opts.size === "number" && streamSize !== opts.size) {
            const err = new Error(`stream size mismatch when checking ${sri}.
  Wanted: ${opts.size}
  Found: ${streamSize}`);
            err.code = "EBADSIZE";
            err.found = streamSize;
            err.expected = opts.size;
            err.sri = sri;
            stream.emit("error", err);
          } else if (opts.integrity && !match) {
            const err = new Error(`${sri} integrity checksum failed when using ${algorithm}: wanted ${digests} but got ${newSri}. (${streamSize} bytes)`);
            err.code = "EINTEGRITY";
            err.found = newSri;
            err.expected = digests;
            err.algorithm = algorithm;
            err.sri = sri;
            stream.emit("error", err);
          } else {
            stream.emit("size", streamSize);
            stream.emit("integrity", newSri);
            match && stream.emit("verified", match);
          }
        });
        return stream;
      }
      module22.exports.create = createIntegrity;
      function createIntegrity(opts) {
        opts = SsriOpts(opts);
        const algorithms = opts.algorithms;
        const optString = opts.options.length ? `?${opts.options.join("?")}` : "";
        const hashes = algorithms.map(crypto.createHash);
        return {
          update: function(chunk, enc) {
            hashes.forEach((h) => h.update(chunk, enc));
            return this;
          },
          digest: function(enc) {
            const integrity = algorithms.reduce((acc, algo) => {
              const digest = hashes.shift().digest("base64");
              const hash = new Hash(`${algo}-${digest}${optString}`, opts);
              if (hash.algorithm && hash.digest) {
                const algo2 = hash.algorithm;
                if (!acc[algo2]) {
                  acc[algo2] = [];
                }
                acc[algo2].push(hash);
              }
              return acc;
            }, new Integrity);
            return integrity;
          }
        };
      }
      var NODE_HASHES = new Set(crypto.getHashes());
      var DEFAULT_PRIORITY = [
        "md5",
        "whirlpool",
        "sha1",
        "sha224",
        "sha256",
        "sha384",
        "sha512",
        "sha3",
        "sha3-256",
        "sha3-384",
        "sha3-512",
        "sha3_256",
        "sha3_384",
        "sha3_512"
      ].filter((algo) => NODE_HASHES.has(algo));
      function getPrioritizedHash(algo1, algo2) {
        return DEFAULT_PRIORITY.indexOf(algo1.toLowerCase()) >= DEFAULT_PRIORITY.indexOf(algo2.toLowerCase()) ? algo1 : algo2;
      }
    }
  });
  var require_npmPublishUtils = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+plugin-npm@3.0.1_@yarnpkg+core@4.2.0_typanion@3.14.0__@yarnpkg+plugin-pack@4.0.0_@ya_q46l5sxkt25uytyqx553qmxtby/node_modules/@yarnpkg/plugin-npm/lib/npmPublishUtils.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.getReadmeContent = exports22.getPublishAccess = exports22.getGitHead = exports22.makePublishBody = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var core_1 = require_lib6();
      var core_2 = require_lib6();
      var fslib_12 = require_lib();
      var plugin_pack_1 = require_lib13();
      var crypto_1 = __require("crypto");
      var ssri_1 = tslib_12.__importDefault(require_ssri());
      var npmConfigUtils_1 = require_npmConfigUtils();
      async function makePublishBody(workspace, buffer, { access, tag, registry, gitHead }) {
        const ident = workspace.manifest.name;
        const version = workspace.manifest.version;
        const name = core_2.structUtils.stringifyIdent(ident);
        const shasum = (0, crypto_1.createHash)(`sha1`).update(buffer).digest(`hex`);
        const integrity = ssri_1.default.fromData(buffer).toString();
        const publishAccess = access ?? getPublishAccess(workspace, ident);
        const readmeContent = await getReadmeContent(workspace);
        const raw = await plugin_pack_1.packUtils.genPackageManifest(workspace);
        const tarballName = `${name}-${version}.tgz`;
        const tarballURL = new URL(`${(0, npmConfigUtils_1.normalizeRegistry)(registry)}/${name}/-/${tarballName}`);
        return {
          _id: name,
          _attachments: {
            [tarballName]: {
              [`content_type`]: `application/octet-stream`,
              data: buffer.toString(`base64`),
              length: buffer.length
            }
          },
          name,
          access: publishAccess,
          [`dist-tags`]: {
            [tag]: version
          },
          versions: {
            [version]: {
              ...raw,
              _id: `${name}@${version}`,
              name,
              version,
              gitHead,
              dist: {
                shasum,
                integrity,
                tarball: tarballURL.toString()
              }
            }
          },
          readme: readmeContent
        };
      }
      exports22.makePublishBody = makePublishBody;
      async function getGitHead(workingDir) {
        try {
          const { stdout } = await core_1.execUtils.execvp(`git`, [`rev-parse`, `--revs-only`, `HEAD`], { cwd: workingDir });
          if (stdout.trim() === ``)
            return;
          return stdout.trim();
        } catch {
          return;
        }
      }
      exports22.getGitHead = getGitHead;
      function getPublishAccess(workspace, ident) {
        const configuration = workspace.project.configuration;
        if (workspace.manifest.publishConfig && typeof workspace.manifest.publishConfig.access === `string`)
          return workspace.manifest.publishConfig.access;
        if (configuration.get(`npmPublishAccess`) !== null)
          return configuration.get(`npmPublishAccess`);
        const access = ident.scope ? `restricted` : `public`;
        return access;
      }
      exports22.getPublishAccess = getPublishAccess;
      async function getReadmeContent(workspace) {
        const readmePath = fslib_12.npath.toPortablePath(`${workspace.cwd}/README.md`);
        const ident = workspace.manifest.name;
        const packageName = core_2.structUtils.stringifyIdent(ident);
        let readme = `# ${packageName}
`;
        try {
          readme = await fslib_12.xfs.readFilePromise(readmePath, `utf8`);
        } catch (err) {
          if (err.code === `ENOENT`) {
            return readme;
          } else {
            throw err;
          }
        }
        return readme;
      }
      exports22.getReadmeContent = getReadmeContent;
    }
  });
  var require_lib14 = __commonJS2({
    "../../node_modules/.pnpm/@yarnpkg+plugin-npm@3.0.1_@yarnpkg+core@4.2.0_typanion@3.14.0__@yarnpkg+plugin-pack@4.0.0_@ya_q46l5sxkt25uytyqx553qmxtby/node_modules/@yarnpkg/plugin-npm/lib/index.js"(exports22) {
      Object.defineProperty(exports22, "__esModule", { value: true });
      exports22.NpmTagResolver = exports22.NpmSemverResolver = exports22.NpmSemverFetcher = exports22.NpmRemapResolver = exports22.NpmHttpFetcher = exports22.npmPublishUtils = exports22.npmHttpUtils = exports22.npmConfigUtils = undefined;
      var tslib_12 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var core_1 = require_lib6();
      var NpmHttpFetcher_1 = require_NpmHttpFetcher();
      Object.defineProperty(exports22, "NpmHttpFetcher", { enumerable: true, get: function() {
        return NpmHttpFetcher_1.NpmHttpFetcher;
      } });
      var NpmRemapResolver_1 = require_NpmRemapResolver();
      Object.defineProperty(exports22, "NpmRemapResolver", { enumerable: true, get: function() {
        return NpmRemapResolver_1.NpmRemapResolver;
      } });
      var NpmSemverFetcher_1 = require_NpmSemverFetcher();
      Object.defineProperty(exports22, "NpmSemverFetcher", { enumerable: true, get: function() {
        return NpmSemverFetcher_1.NpmSemverFetcher;
      } });
      var NpmSemverResolver_1 = require_NpmSemverResolver();
      Object.defineProperty(exports22, "NpmSemverResolver", { enumerable: true, get: function() {
        return NpmSemverResolver_1.NpmSemverResolver;
      } });
      var NpmTagResolver_1 = require_NpmTagResolver();
      Object.defineProperty(exports22, "NpmTagResolver", { enumerable: true, get: function() {
        return NpmTagResolver_1.NpmTagResolver;
      } });
      var npmConfigUtils = tslib_12.__importStar(require_npmConfigUtils());
      exports22.npmConfigUtils = npmConfigUtils;
      var npmHttpUtils = tslib_12.__importStar(require_npmHttpUtils());
      exports22.npmHttpUtils = npmHttpUtils;
      var npmPublishUtils = tslib_12.__importStar(require_npmPublishUtils());
      exports22.npmPublishUtils = npmPublishUtils;
      var authSettings = {
        npmAlwaysAuth: {
          description: `URL of the selected npm registry (note: npm enterprise isn't supported)`,
          type: core_1.SettingsType.BOOLEAN,
          default: false
        },
        npmAuthIdent: {
          description: `Authentication identity for the npm registry (_auth in npm and yarn v1)`,
          type: core_1.SettingsType.SECRET,
          default: null
        },
        npmAuthToken: {
          description: `Authentication token for the npm registry (_authToken in npm and yarn v1)`,
          type: core_1.SettingsType.SECRET,
          default: null
        }
      };
      var registrySettings = {
        npmAuditRegistry: {
          description: `Registry to query for audit reports`,
          type: core_1.SettingsType.STRING,
          default: null
        },
        npmPublishRegistry: {
          description: `Registry to push packages to`,
          type: core_1.SettingsType.STRING,
          default: null
        },
        npmRegistryServer: {
          description: `URL of the selected npm registry (note: npm enterprise isn't supported)`,
          type: core_1.SettingsType.STRING,
          default: `https://registry.yarnpkg.com`
        }
      };
      var plugin = {
        configuration: {
          ...authSettings,
          ...registrySettings,
          npmScopes: {
            description: `Settings per package scope`,
            type: core_1.SettingsType.MAP,
            valueDefinition: {
              description: ``,
              type: core_1.SettingsType.SHAPE,
              properties: {
                ...authSettings,
                ...registrySettings
              }
            }
          },
          npmRegistries: {
            description: `Settings per registry`,
            type: core_1.SettingsType.MAP,
            normalizeKeys: npmConfigUtils.normalizeRegistry,
            valueDefinition: {
              description: ``,
              type: core_1.SettingsType.SHAPE,
              properties: {
                ...authSettings
              }
            }
          }
        },
        fetchers: [
          NpmHttpFetcher_1.NpmHttpFetcher,
          NpmSemverFetcher_1.NpmSemverFetcher
        ],
        resolvers: [
          NpmRemapResolver_1.NpmRemapResolver,
          NpmSemverResolver_1.NpmSemverResolver,
          NpmTagResolver_1.NpmTagResolver
        ]
      };
      exports22.default = plugin;
    }
  });
  var import_core = __toESM(require_lib6(), 1);
  var import_plugin_nm = __toESM(require_lib12(), 1);
  var import_plugin_npm = __toESM(require_lib14(), 1);
  var import_plugin_pnp = __toESM(require_lib11(), 1);
  var import_promises = __require("fs/promises");
  var import_node_os = __require("os");
  var import_node_url = __require("url");
  var tspDir = (0, import_node_os.homedir)() + "/.tsp";
  async function main() {
    console.log("Oricess", process.argv);
    await install({
      npxCache: tspDir + "/installs"
    });
    const url = (0, import_node_url.pathToFileURL)(tspDir + "/installs/node_modules/@typespec/compiler/entrypoints/cli.js").href;
    console.log("Importing", url);
    await import(url);
    console.log("Done importing");
  }
  main().then(() => {
    console.log("Done here");
  }).catch(console.error);
  var plugins = {
    "@yarnpkg/plugin-npm": import_plugin_npm.default,
    "@yarnpkg/plugin-nm": import_plugin_nm.default,
    "@yarnpkg/plugin-pnp": import_plugin_pnp.default
  };
  async function install(options) {
    const installDir = options.npxCache;
    console.log("Downloading compiler into", installDir);
    await (0, import_promises.mkdir)(installDir, { recursive: true });
    (0, import_promises.writeFile)(installDir + "/package.json", JSON.stringify({ dependencies: { "@typespec/compiler": "latest" } }), "utf8");
    const path2 = installDir;
    const configuration = await import_core.Configuration.find(path2, {
      modules: new Map(Object.entries(plugins)),
      plugins: new Set(Object.keys(plugins))
    });
    configuration.use(`<compat>`, { nodeLinker: `node-modules` }, path2, {
      overwrite: true
    });
    const cache = await import_core.Cache.find(configuration);
    const { project } = await import_core.Project.find(configuration, path2);
    await project.restoreInstallState({ restoreResolutions: false });
    const report = await ErrorReport.start({
      configuration,
      stdout: process.stdout
    }, async (report2) => {
      await project.install({
        cache,
        report: report2
      });
    });
    if (report.hasErrors()) {
      throw new Error(report.errorReport);
    }
    console.log("Done");
  }
  var ErrorReport = class extends import_core.LightReport {
    errors = [];
    static start = (opts, cb) => super.start(opts, cb);
    reportError = (name, text) => this.errors.push({ name: (0, import_core.stringifyMessageName)(name), text });
    hasErrors = () => this.errors.length > 0;
    get errorReport() {
      return this.errors.map((error) => `${error.name} - ${error.text}`).join(`
`);
    }
  };
  /*! Bundled license information:
  
  is-number/index.js:
    (*!
     * is-number <https://github.com/jonschlinkert/is-number>
     *
     * Copyright (c) 2014-present, Jon Schlinkert.
     * Released under the MIT License.
     *)
  
  to-regex-range/index.js:
    (*!
     * to-regex-range <https://github.com/micromatch/to-regex-range>
     *
     * Copyright (c) 2015-present, Jon Schlinkert.
     * Released under the MIT License.
     *)
  
  fill-range/index.js:
    (*!
     * fill-range <https://github.com/jonschlinkert/fill-range>
     *
     * Copyright (c) 2014-present, Jon Schlinkert.
     * Licensed under the MIT License.
     *)
  
  is-extglob/index.js:
    (*!
     * is-extglob <https://github.com/jonschlinkert/is-extglob>
     *
     * Copyright (c) 2014-2016, Jon Schlinkert.
     * Licensed under the MIT License.
     *)
  
  is-glob/index.js:
    (*!
     * is-glob <https://github.com/jonschlinkert/is-glob>
     *
     * Copyright (c) 2014-2017, Jon Schlinkert.
     * Released under the MIT License.
     *)
  
  queue-microtask/index.js:
    (*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)
  
  run-parallel/index.js:
    (*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)
  
  @yarnpkg/pnp/lib/index.js:
    (**
      @license
      Copyright Node.js contributors. All rights reserved.
    
      Permission is hereby granted, free of charge, to any person obtaining a copy
      of this software and associated documentation files (the "Software"), to
      deal in the Software without restriction, including without limitation the
      rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
      sell copies of the Software, and to permit persons to whom the Software is
      furnished to do so, subject to the following conditions:
    
      The above copyright notice and this permission notice shall be included in
      all copies or substantial portions of the Software.
    
      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
      FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
      IN THE SOFTWARE.
    *)
    (**
      @license
      The MIT License (MIT)
    
      Copyright (c) 2014 Blake Embrey (hello@blakeembrey.com)
    
      Permission is hereby granted, free of charge, to any person obtaining a copy
      of this software and associated documentation files (the "Software"), to deal
      in the Software without restriction, including without limitation the rights
      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      copies of the Software, and to permit persons to whom the Software is
      furnished to do so, subject to the following conditions:
    
      The above copyright notice and this permission notice shall be included in
      all copies or substantial portions of the Software.
    
      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
      THE SOFTWARE.
    *)
  
  is-windows/index.js:
    (*!
     * is-windows <https://github.com/jonschlinkert/is-windows>
     *
     * Copyright © 2015-2018, Jon Schlinkert.
     * Released under the MIT License.
     *)
  
  safe-buffer/index.js:
    (*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)
  */
});
export default require_bundle();
